diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index 75b0646512..edc85bdb69 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -478,8 +478,13 @@ class BaseFormSet(RenderableFormMixin):
 def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,
                     can_delete=False, max_num=None, validate_max=False,
                     min_num=None, validate_min=False, absolute_max=None,
-                    can_delete_extra=True, renderer=None):
-    """Return a FormSet for the given form class."""
+                    can_delete_extra=True, can_create=True, renderer=None):
+    """
+    Return a FormSet for the given form class.
+    
+    The 'can_create' parameter, if set to False, will prevent adding of new objects
+    (all submitted extra forms will result in validation errors).
+    """
     if min_num is None:
         min_num = DEFAULT_MIN_NUM
     if max_num is None:
@@ -504,6 +509,7 @@ def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,
         'absolute_max': absolute_max,
         'validate_min': validate_min,
         'validate_max': validate_max,
+        'can_create': can_create,
         'renderer': renderer or get_default_renderer(),
     }
     return type(form.__name__ + 'FormSet', (formset,), attrs)
diff --git a/django/forms/models.py b/django/forms/models.py
index 7effb202e3..5d28a5e981 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -681,6 +681,15 @@ class BaseModelFormSet(BaseFormSet):
     save.alters_data = True
 
     def clean(self):
+        # Add validation when can_create is False
+        if not getattr(self, 'can_create', True):
+            # Check if any of the extra forms have data
+            for form in self.extra_forms:
+                if form.has_changed():
+                    raise ValidationError(
+                        _("You are not allowed to create new objects."),
+                        code='no_creation_allowed',
+                    )
         self.validate_unique()
 
     def validate_unique(self):
@@ -813,6 +822,9 @@ class BaseModelFormSet(BaseFormSet):
 
     def save_new_objects(self, commit=True):
         self.new_objects = []
+        # If creation is disabled, don't save any new objects
+        if not getattr(self, 'can_create', True):
+            return self.new_objects
         for form in self.extra_forms:
             if not form.has_changed():
                 continue
@@ -875,8 +887,13 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
                          widgets=None, validate_max=False, localized_fields=None,
                          labels=None, help_texts=None, error_messages=None,
                          min_num=None, validate_min=False, field_classes=None,
-                         absolute_max=None, can_delete_extra=True, renderer=None):
-    """Return a FormSet class for the given Django model class."""
+                         absolute_max=None, can_delete_extra=True, can_create=True, renderer=None):
+    """
+    Return a FormSet class for the given Django model class.
+    
+    The 'can_create' parameter, if set to False, will prevent adding of new objects
+    (all submitted extra forms will result in validation errors).
+    """
     meta = getattr(form, 'Meta', None)
     if (getattr(meta, 'fields', fields) is None and
             getattr(meta, 'exclude', exclude) is None):
@@ -894,7 +911,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
                               can_order=can_order, can_delete=can_delete,
                               validate_min=validate_min, validate_max=validate_max,
                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,
-                              renderer=renderer)
+                              can_create=can_create, renderer=renderer)
     FormSet.model = model
     return FormSet
 

