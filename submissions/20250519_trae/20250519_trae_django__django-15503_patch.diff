diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index fdca700c9d..4d33755d5b 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -129,13 +129,22 @@ class JSONField(CheckFieldDefaultMixin, Field):
 def compile_json_path(key_transforms, include_root=True):
     path = ["$"] if include_root else []
     for key_transform in key_transforms:
-        try:
-            num = int(key_transform)
-        except ValueError:  # non-integer
+        # For has_key/has_keys/has_any_keys lookups, the key is already a string,
+        # so we should check if it's a string representation of an integer first.
+        # If it's a string containing only digits, we need to quote it specially.
+        # This ensures numeric-looking keys work correctly on SQLite, MySQL and Oracle.
+        if isinstance(key_transform, str) and key_transform.isdigit():
+            # Quote the key to ensure it's treated as a key name, not an array index
             path.append(".")
             path.append(json.dumps(key_transform))
         else:
-            path.append("[%s]" % num)
+            try:
+                num = int(key_transform)
+                # If it's a valid integer index for arrays or objects
+                path.append("[%s]" % num)
+            except (ValueError, TypeError):  # non-integer
+                path.append(".")
+                path.append(json.dumps(key_transform))
     return "".join(path)
 
 
@@ -237,6 +246,12 @@ class HasKey(HasKeyLookup):
     postgres_operator = "?"
     prepare_rhs = False
 
+    def get_prep_lookup(self):
+        # Convert keys to strings to handle numeric keys properly
+        # This ensures that numeric keys like 1111 are properly processed
+        # and will be correctly quoted in the JSON path terms
+        return str(self.rhs) if not isinstance(self.rhs, (list, tuple)) else [str(item) for item in self.rhs]
+
 
 class HasKeys(HasKeyLookup):
     lookup_name = "has_keys"
@@ -244,6 +259,9 @@ class HasKeys(HasKeyLookup):
     logical_operator = " AND "
 
     def get_prep_lookup(self):
+        # Convert keys to strings to handle numeric keys properly
+        # This ensures that numeric keys like 1111 are properly processed
+        # and will be correctly quoted in the JSON path terms
         return [str(item) for item in self.rhs]
 
 

