diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py
index 773f545af..fe4faf04b 100644
--- a/src/_pytest/unittest.py
+++ b/src/_pytest/unittest.py
@@ -204,6 +204,14 @@ class TestCaseFunction(Function):
         )
         expecting_failure_class = getattr(self, "__unittest_expecting_failure__", False)
         return bool(expecting_failure_class or expecting_failure_method)
+        
+    def _is_skipped(self):
+        """Return True if the test method is marked with @unittest.skip"""
+        method = getattr(self._testcase.__class__, self.name)
+        return (
+            getattr(self._testcase, "__unittest_skip__", False) or
+            getattr(method, "__unittest_skip__", False)
+        )
 
     def runtest(self):
         from _pytest.debugging import maybe_wrap_pytest_function_for_tracing
@@ -220,7 +228,7 @@ class TestCaseFunction(Function):
             # arguably we could always postpone tearDown(), but this changes the moment where the
             # TestCase instance interacts with the results object, so better to only do it
             # when absolutely needed
-            if self.config.getoption("usepdb"):
+            if self.config.getoption("usepdb") and not self._is_skipped():
                 self._explicit_tearDown = self._testcase.tearDown
                 setattr(self._testcase, "tearDown", lambda *args: None)
 

