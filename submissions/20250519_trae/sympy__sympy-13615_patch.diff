diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py
index 917717bb74..21d42a8dd6 100644
--- a/sympy/sets/sets.py
+++ b/sympy/sets/sets.py
@@ -1724,6 +1724,39 @@ def reduce(A, B):
 
         if isinstance(B, Union):
             return Intersection(s.complement(A) for s in B.args)
+            
+        # Handle case with symbols and Interval specifically
+        if isinstance(A, FiniteSet) and isinstance(B, Interval):
+            nums = [m for m in A.args if m.is_number]
+            syms = [m for m in A.args if not m.is_number]
+            
+            # For numbers we can determine if they're in the interval
+            nums_in_B = [n for n in nums if B.contains(n)]
+            nums_not_in_B = [n for n in nums if not B.contains(n)]
+            
+            # If we have both symbols and numbers
+            if syms and nums:
+                if not nums_in_B:  # No numbers are in B
+                    # Return the original complement if nothing changed
+                    return Complement(A, B, evaluate=False)
+                elif not nums_not_in_B:  # All numbers are in B, only symbols remain
+                    if syms:
+                        # Keep the symbolic form for remaining symbols
+                        return Complement(FiniteSet(*syms), B, evaluate=False)
+                    else:
+                        return EmptySet()
+                else:  # Some numbers are in B, some are not
+                    # Return both the remaining numbers and the complement for symbols
+                    return Union(FiniteSet(*nums_not_in_B), 
+                                 Complement(FiniteSet(*syms), B, evaluate=False))
+            elif syms:  # Only symbols
+                return Complement(FiniteSet(*syms), B, evaluate=False)
+            
+            # Only numbers with standard evaluation
+            if all(B.contains(n) for n in nums):
+                return EmptySet()
+            else:
+                return FiniteSet(*[n for n in nums if not B.contains(n)])
 
         result = B._complement(A)
         if result != None:

