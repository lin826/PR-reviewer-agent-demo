diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index 30616c0172..ac107f8ab1 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -342,6 +342,36 @@ class MigrationAutodetector:
         for app_label, ops in sorted(self.generated_operations.items()):
             # construct a dependency graph for intra-app dependencies
             dependency_graph = {op: set() for op in ops}
+            
+            # Handle special case of field name clashes between parent and child models
+            from django.db.migrations.operations.models import CreateModel
+            from django.db.migrations.operations.fields import RemoveField
+            
+            # First, identify CreateModel operations for subclasses
+            create_model_ops = [op for op in ops if isinstance(op, CreateModel)]
+            remove_field_ops = [op for op in ops if isinstance(op, RemoveField)]
+            
+            # Look for potential field name clashes
+            for create_op in create_model_ops:
+                # Get model bases
+                bases = []
+                for base in create_op.bases:
+                    if isinstance(base, str) and "." in base:
+                        base_app_label, base_name = base.split(".", 1)
+                        if base_app_label == app_label:  # Same app
+                            bases.append(base_name.lower())
+                
+                # Check for fields in the model being created
+                model_fields = {name for name, field in create_op.fields}
+                
+                # Look for RemoveField operations on parent models with fields of the same name
+                for remove_op in remove_field_ops:
+                    if remove_op.model_name_lower in bases and remove_op.name in model_fields:
+                        # This is our special case! The subclass is defining a field with the same name
+                        # as one being removed from the parent. We need to ensure the RemoveField happens first.
+                        dependency_graph[create_op].add(remove_op)
+            
+            # Add regular dependencies
             for op in ops:
                 for dep in op._auto_deps:
                     # Resolve intra-app dependencies to handle circular

