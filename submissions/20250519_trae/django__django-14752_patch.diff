diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py
index 3903e4c98c..7ef3c62245 100644
--- a/django/contrib/admin/views/autocomplete.py
+++ b/django/contrib/admin/views/autocomplete.py
@@ -9,6 +9,29 @@ class AutocompleteJsonView(BaseListView):
     paginate_by = 20
     admin_site = None
 
+    def serialize_result(self, obj, to_field_name):
+        """
+        Convert the provided object to a dictionary for the JSON response.
+
+        This method provides an extension point that allows adding extra fields
+        to autocomplete JSON responses without having to override the entire get() method.
+
+        Args:
+            obj: The object from the queryset to serialize
+            to_field_name: The field name to use for the 'id' in the result
+
+        Returns:
+            dict: A dictionary with 'id' and 'text' keys by default.
+
+        Example of extending this method to add custom attributes:
+            class CustomAutocompleteJsonView(AutocompleteJsonView):
+                def serialize_result(self, obj, to_field_name):
+                    result = super().serialize_result(obj, to_field_name)
+                    result['extra_field'] = obj.some_attribute
+                    return result
+        """
+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}
+
     def get(self, request, *args, **kwargs):
         """
         Return a JsonResponse with search results of the form:
@@ -26,7 +49,7 @@ class AutocompleteJsonView(BaseListView):
         context = self.get_context_data()
         return JsonResponse({
             'results': [
-                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}
+                self.serialize_result(obj, to_field_name)
                 for obj in context['object_list']
             ],
             'pagination': {'more': context['page_obj'].has_next()},

