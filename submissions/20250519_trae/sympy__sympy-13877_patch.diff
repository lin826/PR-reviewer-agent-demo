diff --git a/sympy/core/exprtools.py b/sympy/core/exprtools.py
index 4e0de9ec18..842dd2505e 100644
--- a/sympy/core/exprtools.py
+++ b/sympy/core/exprtools.py
@@ -1176,9 +1176,12 @@ def do(expr):
         if p.is_Add:
             list_args = [do(a) for a in Add.make_args(p)]
             # get a common negative (if there) which gcd_terms does not remove
-            if all(a.as_coeff_Mul()[0] < 0 for a in list_args):
-                cont = -cont
-                list_args = [-a for a in list_args]
+            try:
+                if all(a.as_coeff_Mul()[0] < 0 for a in list_args):
+                    cont = -cont
+                    list_args = [-a for a in list_args]
+            except TypeError:  # Handle NaN comparisons
+                pass
             # watch out for exp(-(x+2)) which gcd_terms will change to exp(-x-2)
             special = {}
             for i, a in enumerate(list_args):
diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py
index 97cde62e26..f096fda9e5 100644
--- a/sympy/matrices/matrices.py
+++ b/sympy/matrices/matrices.py
@@ -422,6 +422,20 @@ def det(self, method="bareiss"):
                    - self[0, 0] * self[1, 2] * self[2, 1]
                    - self[0, 1] * self[1, 0] * self[2, 2])
 
+        # Check if matrix contains symbolic entries
+        has_symbols = False
+        for i in range(self.rows):
+            for j in range(self.cols):
+                if self[i, j].is_Symbol or self[i, j].has(Symbol):
+                    has_symbols = True
+                    break
+            if has_symbols:
+                break
+
+        # Use Berkowitz algorithm for symbolic matrices
+        if has_symbols and method == "bareiss":
+            method = "berkowitz"
+            
         if method == "bareiss":
             return self._eval_det_bareiss()
         elif method == "berkowitz":

