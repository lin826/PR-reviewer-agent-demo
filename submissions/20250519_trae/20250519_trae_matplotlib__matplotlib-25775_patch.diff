diff --git a/lib/matplotlib/backends/backend_agg.py b/lib/matplotlib/backends/backend_agg.py
index 7d038a998f..dce08702e0 100644
--- a/lib/matplotlib/backends/backend_agg.py
+++ b/lib/matplotlib/backends/backend_agg.py
@@ -206,7 +206,7 @@ class RendererAgg(RendererBase):
         # space) in the following call to draw_text_image).
         font.set_text(s, 0, flags=get_hinting_flag())
         font.draw_glyphs_to_bitmap(
-            antialiased=mpl.rcParams['text.antialiased'])
+            antialiased=mtext.get_antialiased() if mtext is not None else mpl.rcParams['text.antialiased'])
         d = font.get_descent() / 64.0
         # The descent needs to be adjusted for the angle.
         xo, yo = font.get_bitmap_offset()
diff --git a/lib/matplotlib/backends/backend_cairo.py b/lib/matplotlib/backends/backend_cairo.py
index 9ccadcdf1c..ed2997f88a 100644
--- a/lib/matplotlib/backends/backend_cairo.py
+++ b/lib/matplotlib/backends/backend_cairo.py
@@ -205,7 +205,8 @@ class RendererCairo(RendererBase):
             ctx.set_font_size(self.points_to_pixels(prop.get_size_in_points()))
             opts = cairo.FontOptions()
             opts.set_antialias(
-                cairo.ANTIALIAS_DEFAULT if mpl.rcParams["text.antialiased"]
+                cairo.ANTIALIAS_DEFAULT if (mtext.get_antialiased() if mtext is not None
+                                          else mpl.rcParams["text.antialiased"])
                 else cairo.ANTIALIAS_NONE)
             ctx.set_font_options(opts)
             if angle:
diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py
index 4591316cf9..c51c19b720 100644
--- a/lib/matplotlib/text.py
+++ b/lib/matplotlib/text.py
@@ -115,6 +115,7 @@ class Text(Artist):
                  wrap=False,
                  transform_rotates_text=False,
                  parse_math=None,    # defaults to rcParams['text.parse_math']
+                 antialiased=None,   # defaults to rcParams['text.antialiased']
                  **kwargs
                  ):
         """
@@ -128,8 +129,8 @@ class Text(Artist):
         While Text accepts the 'label' keyword argument, by default it is not
         added to the handles of a legend.
 
-        Valid keyword arguments are:
-
+        Parameters
+        ----------
         %(Text:kwdoc)s
         """
         super().__init__()
@@ -167,6 +168,7 @@ class Text(Artist):
         transform_rotates_text=False,
         linespacing=None,
         rotation_mode=None,
+        antialiased=None,
     ):
         self.set_text(text)
         self.set_color(
@@ -187,6 +189,7 @@ class Text(Artist):
             linespacing = 1.2  # Maybe use rcParam later.
         self.set_linespacing(linespacing)
         self.set_rotation_mode(rotation_mode)
+        self.set_antialiased(antialiased)
 
     def update(self, kwargs):
         # docstring inherited
@@ -322,6 +325,7 @@ class Text(Artist):
         self._transform_rotates_text = other._transform_rotates_text
         self._picker = other._picker
         self._linespacing = other._linespacing
+        self._antialiased = other._antialiased
         self.stale = True
 
     def _get_layout(self, renderer):
@@ -778,6 +782,26 @@ class Text(Artist):
         """Return the `.font_manager.FontProperties`."""
         return self._fontproperties
 
+    def get_antialiased(self):
+        """
+        Return whether the text is antialiased.
+        """
+        return self._antialiased
+    
+    def set_antialiased(self, aa):
+        """
+        Set whether to use antialiased rendering.
+
+        Parameters
+        ----------
+        aa : bool or None
+            If None, use rcParams['text.antialiased'].
+        """
+        if aa is None:
+            aa = mpl.rcParams['text.antialiased']
+        self._antialiased = aa
+        self.stale = True
+
     def get_fontfamily(self):
         """
         Return the list of font families used for font lookup.

