diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py
index 35e16e623..f0d10aeb8 100644
--- a/sphinx/directives/other.py
+++ b/sphinx/directives/other.py
@@ -1,5 +1,5 @@
 import re
-from typing import TYPE_CHECKING, Any, Dict, List, cast
+from typing import TYPE_CHECKING, Any, Dict, List, Set, cast
 
 from docutils import nodes
 from docutils.nodes import Element, Node
@@ -24,6 +24,9 @@ if TYPE_CHECKING:
 glob_re = re.compile(r'.*[*?\[].*')
 logger = logging.getLogger(__name__)
 
+# Special Sphinx-generated pages that don't correspond to actual document files
+SPECIAL_GENERATED_PAGES: Set[str] = {'genindex', 'modindex', 'search'}
+
 
 def int_or_nothing(argument: str) -> int:
     if not argument:
@@ -119,16 +122,22 @@ class TocTree(SphinxDirective):
                 if url_re.match(ref) or ref == 'self':
                     toctree['entries'].append((title, ref))
                 elif docname not in self.env.found_docs:
-                    if excluded(self.env.doc2path(docname, False)):
+                    # Allow special Sphinx-generated pages
+                    if docname in SPECIAL_GENERATED_PAGES:
+                        # Add to entries but not to includefiles (handled specially by builders)
+                        toctree['entries'].append((title, docname))
+                    elif excluded(self.env.doc2path(docname, False)):
                         message = __('toctree contains reference to excluded document %r')
                         subtype = 'excluded'
+                        logger.warning(message, docname, type='toc', subtype=subtype,
+                                    location=toctree)
+                        self.env.note_reread()
                     else:
                         message = __('toctree contains reference to nonexisting document %r')
                         subtype = 'not_readable'
-
-                    logger.warning(message, docname, type='toc', subtype=subtype,
-                                   location=toctree)
-                    self.env.note_reread()
+                        logger.warning(message, docname, type='toc', subtype=subtype,
+                                    location=toctree)
+                        self.env.note_reread()
                 else:
                     if docname in all_docnames:
                         all_docnames.remove(docname)
diff --git a/sphinx/environment/adapters/toctree.py b/sphinx/environment/adapters/toctree.py
index 9678e3c7c..8c356f80e 100644
--- a/sphinx/environment/adapters/toctree.py
+++ b/sphinx/environment/adapters/toctree.py
@@ -1,6 +1,6 @@
 """Toctree adapter for sphinx.environment."""
 
-from typing import TYPE_CHECKING, Any, Iterable, List, Optional, cast
+from typing import TYPE_CHECKING, Any, Iterable, List, Optional, Set, cast
 
 from docutils import nodes
 from docutils.nodes import Element, Node
@@ -18,6 +18,9 @@ if TYPE_CHECKING:
 
 logger = logging.getLogger(__name__)
 
+# Special Sphinx-generated pages that don't correspond to actual document files
+SPECIAL_GENERATED_PAGES: Set[str] = {'genindex', 'modindex', 'search'}
+
 
 class TocTree:
     def __init__(self, env: "BuildEnvironment") -> None:
@@ -165,14 +168,25 @@ class TocTree:
                                        ref, location=toctreenode)
                 except KeyError:
                     # this is raised if the included file does not exist
-                    if excluded(self.env.doc2path(ref, False)):
+                    if ref in SPECIAL_GENERATED_PAGES:
+                        # Handle special Sphinx-generated pages like genindex, modindex, search
+                        # Create a simple bullet list for them
+                        reference = nodes.reference('', '', internal=True,
+                                                  refuri=ref,
+                                                  anchorname='',
+                                                  *[nodes.Text(title or ref)])
+                        para = addnodes.compact_paragraph('', '', reference)
+                        item = nodes.list_item('', para)
+                        toc = nodes.bullet_list('', item)
+                    elif excluded(self.env.doc2path(ref, False)):
                         message = __('toctree contains reference to excluded document %r')
+                        logger.warning(message, ref, location=toctreenode)
                     elif not included(self.env.doc2path(ref, False)):
                         message = __('toctree contains reference to non-included document %r')
+                        logger.warning(message, ref, location=toctreenode)
                     else:
                         message = __('toctree contains reference to nonexisting document %r')
-
-                    logger.warning(message, ref, location=toctreenode)
+                        logger.warning(message, ref, location=toctreenode)
                 else:
                     # if titles_only is given, only keep the main title and
                     # sub-toctrees

