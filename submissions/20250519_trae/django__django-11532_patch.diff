diff --git a/django/core/mail/message.py b/django/core/mail/message.py
index e393b4cf5c..68a9c0fc1d 100644
--- a/django/core/mail/message.py
+++ b/django/core/mail/message.py
@@ -257,7 +257,9 @@ class EmailMessage:
             msg['Date'] = formatdate(localtime=settings.EMAIL_USE_LOCALTIME)
         if 'message-id' not in header_names:
             # Use cached DNS_NAME for performance
-            msg['Message-ID'] = make_msgid(domain=DNS_NAME)
+            # Convert domain name to punycode for non-ASCII domains
+            domain = DNS_NAME.get_punycode() if hasattr(DNS_NAME, 'get_punycode') else DNS_NAME
+            msg['Message-ID'] = make_msgid(domain=domain)
         for name, value in self.extra_headers.items():
             if name.lower() != 'from':  # From is already handled
                 msg[name] = value
diff --git a/django/core/mail/utils.py b/django/core/mail/utils.py
index d18dfe4667..7091801b4a 100644
--- a/django/core/mail/utils.py
+++ b/django/core/mail/utils.py
@@ -3,6 +3,7 @@ Email message and email sending related helper functions.
 """
 
 import socket
+import idna
 
 
 # Cache the hostname, but do it lazily: socket.getfqdn() can take a couple of
@@ -15,6 +16,15 @@ class CachedDnsName:
         if not hasattr(self, '_fqdn'):
             self._fqdn = socket.getfqdn()
         return self._fqdn
+    
+    def get_punycode(self):
+        """Convert domain name to punycode (IDNA) for email use."""
+        fqdn = str(self)
+        try:
+            return idna.encode(fqdn).decode('ascii')
+        except (UnicodeError, idna.IDNAError):
+            # If encoding fails, fall back to original hostname
+            return fqdn
 
 
 DNS_NAME = CachedDnsName()

