diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py
index 5203e3232c..7ffe502265 100644
--- a/lib/matplotlib/axes/_base.py
+++ b/lib/matplotlib/axes/_base.py
@@ -4441,6 +4441,38 @@ class _AxesBase(martist.Artist):
         self.yaxis.tick_left()
         ax2.xaxis.set_visible(False)
         ax2.patch.set_visible(False)
+        
+        # Store original plot method
+        original_ax2_plot = ax2.plot
+        
+        # Reference to parent (self) for use in the closure
+        parent_axes = self
+        
+        # Create a patched plot function that preserves parent's dataLim
+        def _patched_plot(*args, **kwargs):
+            # Store parent's dataLim before plotting
+            import numpy as np
+            from matplotlib.transforms import Bbox
+            
+            # Create a copy of the parent's dataLim
+            parent_dataLim = Bbox.from_bounds(
+                parent_axes.dataLim.x0, parent_axes.dataLim.y0,
+                parent_axes.dataLim.width, parent_axes.dataLim.height
+            )
+            
+            # Call the original plot function
+            result = original_ax2_plot(*args, **kwargs)
+            
+            # Restore parent's dataLim if it was valid (not containing infinity)
+            if not np.any(np.isinf([parent_dataLim.x0, parent_dataLim.y0, 
+                                   parent_dataLim.x1, parent_dataLim.y1])):
+                parent_axes.dataLim.set_points(parent_dataLim.get_points())
+                
+            return result
+        
+        # Replace plot method with our patched version
+        ax2.plot = _patched_plot
+            
         return ax2
 
     def twiny(self):
@@ -4470,6 +4502,38 @@ class _AxesBase(martist.Artist):
         self.xaxis.tick_bottom()
         ax2.yaxis.set_visible(False)
         ax2.patch.set_visible(False)
+        
+        # Store original plot method
+        original_ax2_plot = ax2.plot
+        
+        # Reference to parent (self) for use in the closure
+        parent_axes = self
+        
+        # Create a patched plot function that preserves parent's dataLim
+        def _patched_plot(*args, **kwargs):
+            # Store parent's dataLim before plotting
+            import numpy as np
+            from matplotlib.transforms import Bbox
+            
+            # Create a copy of the parent's dataLim
+            parent_dataLim = Bbox.from_bounds(
+                parent_axes.dataLim.x0, parent_axes.dataLim.y0,
+                parent_axes.dataLim.width, parent_axes.dataLim.height
+            )
+            
+            # Call the original plot function
+            result = original_ax2_plot(*args, **kwargs)
+            
+            # Restore parent's dataLim if it was valid (not containing infinity)
+            if not np.any(np.isinf([parent_dataLim.x0, parent_dataLim.y0, 
+                                   parent_dataLim.x1, parent_dataLim.y1])):
+                parent_axes.dataLim.set_points(parent_dataLim.get_points())
+                
+            return result
+        
+        # Replace plot method with our patched version
+        ax2.plot = _patched_plot
+            
         return ax2
 
     def get_shared_x_axes(self):

