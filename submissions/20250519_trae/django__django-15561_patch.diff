diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py
index b3a2f4282b..e4b622a285 100644
--- a/django/db/backends/sqlite3/schema.py
+++ b/django/db/backends/sqlite3/schema.py
@@ -21,6 +21,26 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
     sql_delete_column = "ALTER TABLE %(table)s DROP COLUMN %(column)s"
     sql_create_unique = "CREATE UNIQUE INDEX %(name)s ON %(table)s (%(columns)s)"
     sql_delete_unique = "DROP INDEX %(name)s"
+    
+    def _field_should_be_altered(self, old_field, new_field):
+        """
+        Add 'choices' to the list of attributes that don't affect the schema for
+        SQLite as it doesn't enforce check constraints.
+        """
+        _, old_path, old_args, old_kwargs = old_field.deconstruct()
+        _, new_path, new_args, new_kwargs = new_field.deconstruct()
+
+        # Remove choices from both kwargs since we're just changing the choices, 
+        # this shouldn't trigger a table rebuild for SQLite
+        old_choices = old_kwargs.pop('choices', None)
+        new_choices = new_kwargs.pop('choices', None)
+
+        # If the only change is to choices, don't alter the field
+        if ((old_path, old_args, old_kwargs) == (new_path, new_args, new_kwargs) and 
+                old_choices != new_choices and self.quote_name(old_field.column) == self.quote_name(new_field.column)):
+            return False
+            
+        return super()._field_should_be_altered(old_field, new_field)
 
     def __enter__(self):
         # Some SQLite schema alterations need foreign key constraints to be

