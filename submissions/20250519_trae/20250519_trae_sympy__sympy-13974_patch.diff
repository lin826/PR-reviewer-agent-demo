diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py
index 9dd10d219e..4a643ebf59 100644
--- a/sympy/physics/quantum/tensorproduct.py
+++ b/sympy/physics/quantum/tensorproduct.py
@@ -242,7 +242,8 @@ def _eval_expand_tensorproduct(self, **hints):
         """Distribute TensorProducts across addition."""
         args = self.args
         add_args = []
-        stop = False
+        
+        # Handle tensor products containing sums
         for i in range(len(args)):
             if isinstance(args[i], Add):
                 for aa in args[i].args:
@@ -250,13 +251,28 @@ def _eval_expand_tensorproduct(self, **hints):
                     if isinstance(tp, TensorProduct):
                         tp = tp._eval_expand_tensorproduct()
                     add_args.append(tp)
-                break
-
-        if add_args:
-            return Add(*add_args)
-        else:
-            return self
-
+                return Add(*add_args)
+                
+        # Handle powers inside tensor product arguments
+        for i in range(len(args)):
+            if isinstance(args[i], Pow):
+                # No need for recursive expansion here - just return the tensor product with powers in place
+                return self
+                
+        # If we get here, nothing was expanded
+        return self
+
+    def _eval_power(self, exp):
+        """Handle powers of TensorProducts."""
+        # Only handle integer powers > 1
+        if not (exp.is_Integer and exp > 1):
+            return None
+        
+        # For TensorProduct(a,b)**2, return TensorProduct(a**2, b**2)
+        args = self.args
+        new_args = [arg**exp for arg in args]
+        return TensorProduct(*new_args)
+        
     def _eval_trace(self, **kwargs):
         indices = kwargs.get('indices', None)
         exp = tensor_product_simp(self)
@@ -378,11 +394,26 @@ def tensor_product_simp(e, **hints):
     >>> tensor_product_simp(e**2)
     (A*C)x(B*D)**2
 
+    Powers of tensor products can also be simplified:
+    >>> tp = TensorProduct(1, A)
+    >>> tensor_product_simp(tp**2)
+    1x(A**2)
+
     """
     if isinstance(e, Add):
         return Add(*[tensor_product_simp(arg) for arg in e.args])
     elif isinstance(e, Pow):
-        return tensor_product_simp(e.base) ** e.exp
+        base = e.base
+        exp = e.exp
+        
+        # If the base is a TensorProduct, delegate to its _eval_power method
+        if isinstance(base, TensorProduct) and exp.is_Integer and exp > 1:
+            simplified_power = base._eval_power(exp)
+            if simplified_power is not None:
+                return tensor_product_simp(simplified_power)
+        
+        # General case
+        return tensor_product_simp(base) ** exp
     elif isinstance(e, Mul):
         return tensor_product_simp_Mul(e)
     elif isinstance(e, Commutator):

