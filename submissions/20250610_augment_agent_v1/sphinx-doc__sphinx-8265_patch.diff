diff --git b/sphinx/pycode/ast.py a/sphinx/pycode/ast.py
index 9205abef5..9bafff11c 100644
--- b/sphinx/pycode/ast.py
+++ a/sphinx/pycode/ast.py
@@ -67,12 +67,10 @@ def unparse(node: Optional[ast.AST]) -> Optional[str]:
     return _UnparseVisitor().visit(node)
 
 
 # a greatly cut-down version of `ast._Unparser`
 class _UnparseVisitor(ast.NodeVisitor):
-    def __init__(self):
-        self._in_subscript = False
 
     def _visit_op(self, node: ast.AST) -> str:
         return OPERATORS[node.__class__]
     for _op in OPERATORS:
         locals()['visit_{}'.format(_op.__name__)] = _visit_op
@@ -166,27 +164,18 @@ class _UnparseVisitor(ast.NodeVisitor):
 
     def visit_Set(self, node: ast.Set) -> str:
         return "{" + ", ".join(self.visit(e) for e in node.elts) + "}"
 
     def visit_Subscript(self, node: ast.Subscript) -> str:
-        old_in_subscript = self._in_subscript
-        self._in_subscript = True
-        result = "%s[%s]" % (self.visit(node.value), self.visit(node.slice))
-        self._in_subscript = old_in_subscript
-        return result
+        return "%s[%s]" % (self.visit(node.value), self.visit(node.slice))
 
     def visit_UnaryOp(self, node: ast.UnaryOp) -> str:
         return "%s %s" % (self.visit(node.op), self.visit(node.operand))
 
     def visit_Tuple(self, node: ast.Tuple) -> str:
         if node.elts:
-            elements = ", ".join(self.visit(e) for e in node.elts)
-            # Don't add parentheses if we're inside a subscript (e.g., Tuple[int, int])
-            if self._in_subscript:
-                return elements
-            else:
-                return "(" + elements + ")"
+            return ", ".join(self.visit(e) for e in node.elts)
         else:
             return "()"
 
     if sys.version_info >= (3, 6):
         def visit_Constant(self, node: ast.Constant) -> str:
diff --git b/tests/test_pycode_ast.py a/tests/test_pycode_ast.py
index 61f6c5b8d..9b12d24d5 100644
--- b/tests/test_pycode_ast.py
+++ a/tests/test_pycode_ast.py
@@ -51,11 +51,11 @@ from sphinx.pycode import ast
     ("a - b", "a - b"),                         # Sub
     ("'str'", "'str'"),                         # Str
     ("+ a", "+ a"),                             # UAdd
     ("- 1", "- 1"),                             # UnaryOp
     ("- a", "- a"),                             # USub
-    ("(1, 2, 3)", "(1, 2, 3)"),                 # Tuple
+    ("(1, 2, 3)", "1, 2, 3"),                   # Tuple
     ("()", "()"),                               # Tuple (empty)
 ])
 def test_unparse(source, expected):
     module = ast.parse(source)
     assert ast.unparse(module.body[0].value) == expected
