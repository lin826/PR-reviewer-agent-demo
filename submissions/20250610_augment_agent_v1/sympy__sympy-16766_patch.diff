diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py
index a3f0310735..a284707d60 100644
--- a/sympy/printing/pycode.py
+++ b/sympy/printing/pycode.py
@@ -355,10 +355,14 @@ def _print_sign(self, e):
 
     def _print_Not(self, expr):
         PREC = precedence(expr)
         return self._operators['not'] + self.parenthesize(expr.args[0], PREC)
 
+    def _print_Indexed(self, expr):
+        base, *index = expr.args
+        return "{}[{}]".format(str(base), ", ".join([self._print(ind) for ind in index]))
+
 
 for k in PythonCodePrinter._kf:
     setattr(PythonCodePrinter, '_print_%s' % k, _print_known_func)
 
 for k in _known_constants_math:
diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py
index f1a9a37898..b2c391304f 100644
--- a/sympy/printing/tests/test_pycode.py
+++ b/sympy/printing/tests/test_pycode.py
@@ -9,10 +9,11 @@
 from sympy.logic import And, Or
 from sympy.matrices import SparseMatrix, MatrixSymbol
 from sympy.printing.pycode import (
     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter
 )
+from sympy.tensor import IndexedBase, Indexed
 from sympy.utilities.pytest import raises
 
 x, y, z = symbols('x y z')
 
 
@@ -94,5 +95,31 @@ def test_issue_14283():
 
 def test_NumPyPrinter_print_seq():
     n = NumPyPrinter()
 
     assert n._print_seq(range(2)) == '(0, 1,)'
+
+
+def test_PythonCodePrinter_Indexed():
+    prntr = PythonCodePrinter()
+    
+    # Test basic indexed
+    p = IndexedBase("p")
+    assert prntr.doprint(p[0]) == 'p[0]'
+    
+    # Test multiple indices
+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'
+    
+    # Test symbolic indices
+    i, j = symbols('i j')
+    assert prntr.doprint(p[i, j]) == 'p[i, j]'
+    
+    # Test complex expressions as indices
+    assert prntr.doprint(p[x + 1, 2*y]) == 'p[x + 1, 2*y]'
+    
+    # Test nested indexed expressions
+    q = IndexedBase("q")
+    assert prntr.doprint(p[q[0]]) == 'p[q[0]]'
+    
+    # Test indexed in mathematical expressions
+    expr = p[0] + p[1]
+    assert prntr.doprint(expr) == 'p[0] + p[1]'
