diff --git a/django/views/debug.py b/django/views/debug.py
index 7a89f7bd15..68dba4b500 100644
--- a/django/views/debug.py
+++ b/django/views/debug.py
@@ -89,23 +89,22 @@ class SafeExceptionReporterFilter:
         """
         Cleanse an individual setting key/value of sensitive content. If the
         value is a dictionary, recursively cleanse the keys in that dictionary.
         """
         try:
-            is_sensitive = self.hidden_settings.search(key)
+            if self.hidden_settings.search(key):
+                cleansed = self.cleansed_substitute
+            elif isinstance(value, dict):
+                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}
+            elif isinstance(value, list):
+                cleansed = [self.cleanse_setting('', v) for v in value]
+            elif isinstance(value, tuple):
+                cleansed = tuple([self.cleanse_setting('', v) for v in value])
+            else:
+                cleansed = value
         except TypeError:
-            is_sensitive = False
-
-        if is_sensitive:
-            cleansed = self.cleansed_substitute
-        elif isinstance(value, dict):
-            cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}
-        elif isinstance(value, list):
-            cleansed = [self.cleanse_setting('', v) for v in value]
-        elif isinstance(value, tuple):
-            cleansed = tuple([self.cleanse_setting('', v) for v in value])
-        else:
+            # If the key isn't regex-able, just return as-is.
             cleansed = value
 
         if callable(cleansed):
             cleansed = CallableSettingWrapper(cleansed)
 
@@ -479,14 +478,12 @@ def technical_404_response(request, exception):
         error_url = request.path_info[1:]  # Trim leading slash
 
     try:
         tried = exception.args[0]['tried']
     except (IndexError, TypeError, KeyError):
-        resolved = True
-        tried = request.resolver_match.tried if request.resolver_match else None
+        tried = []
     else:
-        resolved = False
         if (not tried or (                  # empty URLconf
             request.path == '/' and
             len(tried) == 1 and             # default URLconf
             len(tried[0]) == 1 and
             getattr(tried[0][0], 'app_name', '') == getattr(tried[0][0], 'namespace', '') == 'admin'
@@ -520,11 +517,10 @@ def technical_404_response(request, exception):
     c = Context({
         'urlconf': urlconf,
         'root_urlconf': settings.ROOT_URLCONF,
         'request_path': error_url,
         'urlpatterns': tried,
-        'resolved': resolved,
         'reason': str(exception),
         'request': request,
         'settings': reporter_filter.get_safe_settings(),
         'raising_view_name': caller,
     })
