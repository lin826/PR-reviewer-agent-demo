diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 88adadb37d..d7df04d4f7 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -1,8 +1,9 @@
 import datetime
 import re
 
+from django.core.exceptions import ValidationError
 from django.forms.utils import flatatt, pretty_name
 from django.forms.widgets import Textarea, TextInput
 from django.utils.functional import cached_property
 from django.utils.html import conditional_escape, format_html, html_safe
 from django.utils.safestring import mark_safe
@@ -230,10 +231,29 @@ class BoundField:
 
     @property
     def widget_type(self):
         return re.sub(r'widget$|input$', '', self.field.widget.__class__.__name__.lower())
 
+    def did_change(self):
+        """
+        Return True if data differs from initial.
+        """
+        data_value = self.data
+        if not self.field.show_hidden_initial:
+            initial_value = self.initial
+        else:
+            initial_prefixed_name = self.form.add_initial_prefix(self.name)
+            hidden_widget = self.field.hidden_widget()
+            try:
+                initial_value = self.field.to_python(
+                    self.form._widget_data_value(hidden_widget, initial_prefixed_name)
+                )
+            except ValidationError:
+                # Always assume data has changed if validation fails.
+                return True
+        return self.field.has_changed(initial_value, data_value)
+
 
 @html_safe
 class BoundWidget:
     """
     A container class used for iterating over widgets. This is useful for
diff --git a/django/forms/forms.py b/django/forms/forms.py
index d14037bfe9..9959f9a562 100644
--- a/django/forms/forms.py
+++ b/django/forms/forms.py
@@ -385,18 +385,19 @@ class BaseForm:
         self._clean_fields()
         self._clean_form()
         self._post_clean()
 
     def _clean_fields(self):
-        for name, field in self.fields.items():
+        for name, bf in self._bound_items():
+            field = bf.field
             if field.disabled:
-                value = self.get_initial_for_field(field, name)
+                value = bf.initial
             else:
-                value = self._field_data_value(field, self.add_prefix(name))
+                value = bf.data
             try:
                 if isinstance(field, FileField):
-                    initial = self.get_initial_for_field(field, name)
+                    initial = bf.initial
                     value = field.clean(value, initial)
                 else:
                     value = field.clean(value)
                 self.cleaned_data[name] = value
                 if hasattr(self, 'clean_%s' % name):
@@ -434,31 +435,11 @@ class BaseForm:
         """Return True if data differs from initial."""
         return bool(self.changed_data)
 
     @cached_property
     def changed_data(self):
-        data = []
-        for name, field in self.fields.items():
-            data_value = self._field_data_value(field, self.add_prefix(name))
-            if not field.show_hidden_initial:
-                # Use the BoundField's initial as this is the value passed to
-                # the widget.
-                initial_value = self[name].initial
-            else:
-                initial_prefixed_name = self.add_initial_prefix(name)
-                hidden_widget = field.hidden_widget()
-                try:
-                    initial_value = field.to_python(
-                        self._widget_data_value(hidden_widget, initial_prefixed_name)
-                    )
-                except ValidationError:
-                    # Always assume data has changed if validation fails.
-                    data.append(name)
-                    continue
-            if field.has_changed(initial_value, data_value):
-                data.append(name)
-        return data
+        return [name for name, bf in self._bound_items() if bf.did_change()]
 
     @property
     def media(self):
         """Return all media required to render the widgets on this form."""
         media = Media()
@@ -495,10 +476,17 @@ class BaseForm:
         value = self.initial.get(field_name, field.initial)
         if callable(value):
             value = value()
         return value
 
+    def _bound_items(self):
+        """
+        Yield (name, BoundField) pairs for all fields in this form.
+        """
+        for name in self.fields:
+            yield name, self[name]
+
 
 class Form(BaseForm, metaclass=DeclarativeFieldsMetaclass):
     "A collection of Fields, plus their associated data."
     # This is a separate class from BaseForm in order to abstract the way
     # self.fields is specified. This class (Form) is the one that does the
