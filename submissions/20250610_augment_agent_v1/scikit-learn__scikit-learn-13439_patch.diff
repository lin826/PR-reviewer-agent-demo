diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py
index 7eaf9a46f..b7e759c06 100644
--- a/sklearn/pipeline.py
+++ b/sklearn/pipeline.py
@@ -217,10 +217,14 @@ class Pipeline(_BaseComposition):
         except TypeError:
             # Not an int, try get step by name
             return self.named_steps[ind]
         return est
 
+    def __len__(self):
+        """Return the length of the Pipeline"""
+        return len(self.steps)
+
     @property
     def _estimator_type(self):
         return self.steps[-1][1]._estimator_type
 
     @property
diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py
index 8d6fe8f70..76f248145 100644
--- a/sklearn/tests/test_pipeline.py
+++ b/sklearn/tests/test_pipeline.py
@@ -550,10 +550,30 @@ def test_pipeline_index():
     assert pipe['clf'] == clf
     assert_raises(IndexError, lambda: pipe[3])
     assert_raises(KeyError, lambda: pipe['foobar'])
 
 
+def test_pipeline_len():
+    # Test that len() works on Pipeline
+    transf = Transf()
+    clf = FitParamT()
+    pipe = Pipeline([('transf', transf), ('clf', clf)])
+    assert len(pipe) == 2
+    
+    # Test with single step
+    single_pipe = Pipeline([('clf', clf)])
+    assert len(single_pipe) == 1
+    
+    # Test with three steps
+    three_pipe = Pipeline([('transf1', transf), ('transf2', Transf()), ('clf', clf)])
+    assert len(three_pipe) == 3
+    
+    # Test that slicing with len() works
+    assert len(pipe[:len(pipe)]) == len(pipe)
+    assert len(pipe[:len(pipe)-1]) == len(pipe) - 1
+
+
 def test_set_pipeline_steps():
     transf1 = Transf()
     transf2 = Transf()
     pipeline = Pipeline([('mock', transf1)])
     assert pipeline.named_steps['mock'] is transf1
