diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index d32c891284..d6bf057138 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -9,11 +9,11 @@ from django.db.models.fields import (
     BooleanField, CharField, DateTimeField, Field, IntegerField, UUIDField,
 )
 from django.db.models.query_utils import RegisterLookupMixin
 from django.utils.datastructures import OrderedSet
 from django.utils.deprecation import RemovedInDjango40Warning
-from django.utils.functional import cached_property
+from django.utils.functional import LazyObject, cached_property
 
 
 class Lookup:
     lookup_name = None
     prepare_rhs = True
@@ -69,11 +69,26 @@ class Lookup:
 
     def get_prep_lookup(self):
         if hasattr(self.rhs, 'resolve_expression'):
             return self.rhs
         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
-            return self.lhs.output_field.get_prep_value(self.rhs)
+            # Handle LazyObject (including SimpleLazyObject) by evaluating it first
+            rhs = self.rhs
+            if isinstance(rhs, LazyObject):
+                # Force evaluation by accessing the object - this triggers _setup() if needed
+                # We can do this by accessing any attribute or converting to string
+                str(rhs)  # This forces evaluation
+                rhs = rhs._wrapped
+                
+                # If the evaluated object is a model instance and we're dealing with
+                # an IntegerField (common case for subquery annotations), extract the pk
+                from django.db.models import Model
+                if isinstance(rhs, Model) and hasattr(self.lhs.output_field, 'get_internal_type'):
+                    if self.lhs.output_field.get_internal_type() in ('IntegerField', 'AutoField', 'BigIntegerField', 'SmallIntegerField'):
+                        rhs = rhs.pk
+                        
+            return self.lhs.output_field.get_prep_value(rhs)
         return self.rhs
 
     def get_db_prep_lookup(self, value, connection):
         return ('%s', [value])
 
