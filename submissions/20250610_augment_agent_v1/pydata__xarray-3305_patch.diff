diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py
index d6f0da42..ad4be539 100644
--- a/xarray/core/dataset.py
+++ b/xarray/core/dataset.py
@@ -4749,10 +4749,13 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):
             [d for d in dims if d not in self.dims],
             "Dataset does not contain the dimensions: %s",
         )
 
         q = np.asarray(q, dtype=np.float64)
+        
+        if keep_attrs is None:
+            keep_attrs = _get_keep_attrs(default=False)
 
         variables = OrderedDict()
         for name, var in self.variables.items():
             reduce_dims = [d for d in var.dims if d in dims]
             if reduce_dims or not var.dims:
@@ -4766,21 +4769,19 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):
                             # prefer to aggregate over axis=None rather than
                             # axis=(0, 1) if they will be equivalent, because
                             # the former is often more efficient
                             reduce_dims = None
                         variables[name] = var.quantile(
-                            q, dim=reduce_dims, interpolation=interpolation
+                            q, dim=reduce_dims, interpolation=interpolation, keep_attrs=keep_attrs
                         )
 
             else:
                 variables[name] = var
 
         # construct the new dataset
         coord_names = {k for k in self.coords if k in variables}
         indexes = OrderedDict((k, v) for k, v in self.indexes.items() if k in variables)
-        if keep_attrs is None:
-            keep_attrs = _get_keep_attrs(default=False)
         attrs = self.attrs if keep_attrs else None
         new = self._replace_with_new_dims(
             variables, coord_names=coord_names, attrs=attrs, indexes=indexes
         )
         if "quantile" in new.dims:
diff --git a/xarray/core/variable.py b/xarray/core/variable.py
index 2e9906ce..b6d980a1 100644
--- a/xarray/core/variable.py
+++ b/xarray/core/variable.py
@@ -1590,11 +1590,11 @@ class Variable(
         Variables can thus still be equal if there are locations where either,
         or both, contain NaN values.
         """
         return self.broadcast_equals(other, equiv=duck_array_ops.array_notnull_equiv)
 
-    def quantile(self, q, dim=None, interpolation="linear"):
+    def quantile(self, q, dim=None, interpolation="linear", keep_attrs=None):
         """Compute the qth quantile of the data along the specified dimension.
 
         Returns the qth quantiles(s) of the array elements.
 
         Parameters
@@ -1613,10 +1613,14 @@ class Variable(
                   ``j``.
                 * lower: ``i``.
                 * higher: ``j``.
                 * nearest: ``i`` or ``j``, whichever is nearest.
                 * midpoint: ``(i + j) / 2``.
+        keep_attrs : bool, optional
+            If True, the variable's attributes (`attrs`) will be copied from
+            the original object to the new one.  If False (default), the new
+            object will be returned without attributes.
 
         Returns
         -------
         quantiles : Variable
             If `q` is a single quantile, then the result
@@ -1656,11 +1660,16 @@ class Variable(
             new_dims = ["quantile"] + new_dims
 
         qs = np.nanpercentile(
             self.data, q * 100.0, axis=axis, interpolation=interpolation
         )
-        return Variable(new_dims, qs)
+        
+        if keep_attrs is None:
+            keep_attrs = _get_keep_attrs(default=False)
+        attrs = self._attrs if keep_attrs else None
+        
+        return Variable(new_dims, qs, attrs)
 
     def rank(self, dim, pct=False):
         """Ranks the data.
 
         Equal values are assigned a rank that is the average of the ranks that
