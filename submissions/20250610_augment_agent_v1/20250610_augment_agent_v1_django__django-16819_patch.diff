diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 967a91fdc8..19994f31a7 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -859,10 +859,19 @@ class AddIndex(IndexOperation):
 
     @property
     def migration_name_fragment(self):
         return "%s_%s" % (self.model_name_lower, self.index.name.lower())
 
+    def reduce(self, operation, app_label):
+        if (
+            isinstance(operation, RemoveIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.index.name == operation.name
+        ):
+            return []
+        return super().reduce(operation, app_label)
+
 
 class RemoveIndex(IndexOperation):
     """Remove an index from a model."""
 
     def __init__(self, model_name, name):
@@ -902,10 +911,19 @@ class RemoveIndex(IndexOperation):
 
     @property
     def migration_name_fragment(self):
         return "remove_%s_%s" % (self.model_name_lower, self.name.lower())
 
+    def reduce(self, operation, app_label):
+        if (
+            isinstance(operation, AddIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.name == operation.index.name
+        ):
+            return []
+        return super().reduce(operation, app_label)
+
 
 class RenameIndex(IndexOperation):
     """Rename an index."""
 
     def __init__(self, model_name, new_name, old_name=None, old_fields=None):
diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py
index 8cd4c67fbd..c45e20d3d6 100644
--- a/tests/migrations/test_optimizer.py
+++ b/tests/migrations/test_optimizer.py
@@ -1156,5 +1156,59 @@ class OptimizerTests(SimpleTestCase):
                 migrations.RenameIndex(
                     "Pony", new_name="new_name", old_fields=("weight", "pink")
                 ),
             ]
         )
+
+    def test_add_remove_index(self):
+        """
+        AddIndex and RemoveIndex should collapse into nothing if they're the
+        same index.
+        """
+        index = models.Index(fields=["name"], name="test_index")
+        self.assertOptimizesTo(
+            [
+                migrations.AddIndex("Pony", index),
+                migrations.RemoveIndex("Pony", "test_index"),
+            ],
+            [],
+        )
+
+    def test_remove_add_index(self):
+        """
+        RemoveIndex and AddIndex should collapse into nothing if they're the
+        same index.
+        """
+        index = models.Index(fields=["name"], name="test_index")
+        self.assertOptimizesTo(
+            [
+                migrations.RemoveIndex("Pony", "test_index"),
+                migrations.AddIndex("Pony", index),
+            ],
+            [],
+        )
+
+    def test_add_remove_index_different_names(self):
+        """
+        AddIndex and RemoveIndex should NOT optimize if they're different
+        indexes.
+        """
+        index = models.Index(fields=["name"], name="test_index")
+        self.assertDoesNotOptimize(
+            [
+                migrations.AddIndex("Pony", index),
+                migrations.RemoveIndex("Pony", "different_index"),
+            ]
+        )
+
+    def test_add_remove_index_different_models(self):
+        """
+        AddIndex and RemoveIndex should NOT optimize if they're for different
+        models.
+        """
+        index = models.Index(fields=["name"], name="test_index")
+        self.assertDoesNotOptimize(
+            [
+                migrations.AddIndex("Pony", index),
+                migrations.RemoveIndex("Horse", "test_index"),
+            ]
+        )
