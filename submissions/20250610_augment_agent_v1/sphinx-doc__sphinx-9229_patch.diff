diff --git b/sphinx/ext/autodoc/__init__.py a/sphinx/ext/autodoc/__init__.py
index 7df8f1165..1f4c98284 100644
--- b/sphinx/ext/autodoc/__init__.py
+++ a/sphinx/ext/autodoc/__init__.py
@@ -1796,33 +1796,12 @@ class GenericAliasMixin(DataDocumenterMixinBase):
         return (inspect.isgenericalias(self.object) or
                 super().should_suppress_directive_header())
 
     def update_content(self, more_content: StringList) -> None:
         if inspect.isgenericalias(self.object):
-            # Check if there's a docstring available before adding "alias of" text
-            has_docstring = False
-            
-            # Check if the documenter has a get_module_comment method (for module-level objects)
-            if hasattr(self, 'get_module_comment') and hasattr(self, 'objpath') and self.objpath:
-                comment = self.get_module_comment(self.objpath[-1])
-                if comment:
-                    has_docstring = True
-            
-            # Check if the documenter has a get_attribute_comment method (for class attributes)
-            if not has_docstring and hasattr(self, 'get_attribute_comment') and hasattr(self, 'parent') and hasattr(self, 'objpath') and self.objpath:
-                comment = self.get_attribute_comment(self.parent, self.objpath[-1])
-                if comment:
-                    has_docstring = True
-            
-            # Check if the object itself has a docstring
-            if not has_docstring and getattr(self.object, '__doc__', None):
-                has_docstring = True
-            
-            # Only add "alias of" text if there's no docstring
-            if not has_docstring:
-                more_content.append(_('alias of %s') % restify(self.object), '')
-                more_content.append('', '')
+            more_content.append(_('alias of %s') % restify(self.object), '')
+            more_content.append('', '')
 
         super().update_content(more_content)
 
 
 class NewTypeMixin(DataDocumenterMixinBase):
@@ -1835,34 +1814,13 @@ class NewTypeMixin(DataDocumenterMixinBase):
         return (inspect.isNewType(self.object) or
                 super().should_suppress_directive_header())
 
     def update_content(self, more_content: StringList) -> None:
         if inspect.isNewType(self.object):
-            # Check if there's a docstring available before adding "alias of" text
-            has_docstring = False
-            
-            # Check if the documenter has a get_module_comment method (for module-level objects)
-            if hasattr(self, 'get_module_comment') and hasattr(self, 'objpath') and self.objpath:
-                comment = self.get_module_comment(self.objpath[-1])
-                if comment:
-                    has_docstring = True
-            
-            # Check if the documenter has a get_attribute_comment method (for class attributes)
-            if not has_docstring and hasattr(self, 'get_attribute_comment') and hasattr(self, 'parent') and hasattr(self, 'objpath') and self.objpath:
-                comment = self.get_attribute_comment(self.parent, self.objpath[-1])
-                if comment:
-                    has_docstring = True
-            
-            # Check if the object itself has a docstring
-            if not has_docstring and getattr(self.object, '__doc__', None):
-                has_docstring = True
-            
-            # Only add "alias of" text if there's no docstring
-            if not has_docstring:
-                supertype = restify(self.object.__supertype__)
-                more_content.append(_('alias of %s') % supertype, '')
-                more_content.append('', '')
+            supertype = restify(self.object.__supertype__)
+            more_content.append(_('alias of %s') % supertype, '')
+            more_content.append('', '')
 
         super().update_content(more_content)
 
 
 class TypeVarMixin(DataDocumenterMixinBase):
diff --git b/tests/roots/test-ext-autodoc/target/typevar.py a/tests/roots/test-ext-autodoc/target/typevar.py
index 332f5845b..c330e2d88 100644
--- b/tests/roots/test-ext-autodoc/target/typevar.py
+++ a/tests/roots/test-ext-autodoc/target/typevar.py
@@ -15,12 +15,10 @@ T4 = TypeVar("T4", covariant=True)
 T5 = TypeVar("T5", contravariant=True)
 
 #: T6
 T6 = NewType("T6", int)
 
-T6_no_doc = NewType("T6_no_doc", str)  # NewType without docstring
-
 #: T7
 T7 = TypeVar("T7", bound=int)
 
 
 class Class:
diff --git b/tests/test_ext_autodoc.py a/tests/test_ext_autodoc.py
index 4ad08e7fb..4c16886b3 100644
--- b/tests/test_ext_autodoc.py
+++ a/tests/test_ext_autodoc.py
@@ -1941,16 +1941,20 @@ def test_autodoc_GenericAlias(app):
             '   .. py:attribute:: Class.T',
             '      :module: target.genericalias',
             '',
             '      A list of int',
             '',
+            '      alias of :class:`~typing.List`\\ [:class:`int`]',
+            '',
             '',
             '.. py:data:: T',
             '   :module: target.genericalias',
             '',
             '   A list of int',
             '',
+            '   alias of :class:`~typing.List`\\ [:class:`int`]',
+            '',
         ]
 
 
 @pytest.mark.sphinx('html', testroot='ext-autodoc')
 def test_autodoc_TypeVar(app):
diff --git b/tests/test_ext_autodoc_autoattribute.py a/tests/test_ext_autodoc_autoattribute.py
index e6dbb0e26..5e7220234 100644
--- b/tests/test_ext_autodoc_autoattribute.py
+++ a/tests/test_ext_autodoc_autoattribute.py
@@ -154,10 +154,12 @@ def test_autoattribute_GenericAlias(app):
             '.. py:attribute:: Class.T',
             '   :module: target.genericalias',
             '',
             '   A list of int',
             '',
+            '   alias of :class:`~typing.List`\\ [:class:`int`]',
+            '',
         ]
 
 
 @pytest.mark.sphinx('html', testroot='ext-autodoc')
 def test_autoattribute_NewType(app):
@@ -167,10 +169,12 @@ def test_autoattribute_NewType(app):
         '.. py:attribute:: Class.T6',
         '   :module: target.typevar',
         '',
         '   T6',
         '',
+        '   alias of :class:`int`',
+        '',
     ]
 
 
 @pytest.mark.sphinx('html', testroot='ext-autodoc')
 def test_autoattribute_TypeVar(app):
diff --git b/tests/test_ext_autodoc_autodata.py a/tests/test_ext_autodoc_autodata.py
index d53adbbeb..d01e45fc1 100644
--- b/tests/test_ext_autodoc_autodata.py
+++ a/tests/test_ext_autodoc_autodata.py
@@ -94,31 +94,11 @@ def test_autodata_GenericAlias(app):
             '.. py:data:: T',
             '   :module: target.genericalias',
             '',
             '   A list of int',
             '',
-        ]
-
-
-@pytest.mark.sphinx('html', testroot='ext-autodoc')
-def test_autodata_GenericAlias_without_docstring(app):
-    actual = do_autodoc(app, 'data', 'target.genericalias.C')
-    if sys.version_info < (3, 7):
-        assert list(actual) == [
-            '',
-            '.. py:data:: C',
-            '   :module: target.genericalias',
-            '   :value: typing.Callable[[int], NoneType]',
-            '',
-        ]
-    else:
-        assert list(actual) == [
-            '',
-            '.. py:data:: C',
-            '   :module: target.genericalias',
-            '',
-            '   alias of :class:`~typing.Callable`\\ [[:class:`int`], :obj:`None`]',
+            '   alias of :class:`~typing.List`\\ [:class:`int`]',
             '',
         ]
 
 
 @pytest.mark.sphinx('html', testroot='ext-autodoc')
@@ -129,22 +109,11 @@ def test_autodata_NewType(app):
         '.. py:data:: T6',
         '   :module: target.typevar',
         '',
         '   T6',
         '',
-    ]
-
-
-@pytest.mark.sphinx('html', testroot='ext-autodoc')
-def test_autodata_NewType_without_docstring(app):
-    actual = do_autodoc(app, 'data', 'target.typevar.T6_no_doc')
-    assert list(actual) == [
-        '',
-        '.. py:data:: T6_no_doc',
-        '   :module: target.typevar',
-        '',
-        '   alias of :class:`str`',
+        '   alias of :class:`int`',
         '',
     ]
 
 
 @pytest.mark.sphinx('html', testroot='ext-autodoc')
