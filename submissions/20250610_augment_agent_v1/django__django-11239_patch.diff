diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index cf4df76882..876ee365ae 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -28,10 +28,28 @@ class DatabaseClient(BaseDatabaseClient):
 
         sigint_handler = signal.getsignal(signal.SIGINT)
         subprocess_env = os.environ.copy()
         if passwd:
             subprocess_env['PGPASSWORD'] = str(passwd)
+        
+        # Handle SSL parameters
+        sslmode = conn_params.get('sslmode')
+        sslcert = conn_params.get('sslcert')
+        sslkey = conn_params.get('sslkey')
+        sslrootcert = conn_params.get('sslrootcert')
+        sslcrl = conn_params.get('sslcrl')
+        
+        if sslmode:
+            subprocess_env['PGSSLMODE'] = str(sslmode)
+        if sslcert:
+            subprocess_env['PGSSLCERT'] = str(sslcert)
+        if sslkey:
+            subprocess_env['PGSSLKEY'] = str(sslkey)
+        if sslrootcert:
+            subprocess_env['PGSSLROOTCERT'] = str(sslrootcert)
+        if sslcrl:
+            subprocess_env['PGSSLCRL'] = str(sslcrl)
         try:
             # Allow SIGINT to pass to psql to abort queries.
             signal.signal(signal.SIGINT, signal.SIG_IGN)
             subprocess.run(args, check=True, env=subprocess_env)
         finally:
diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py
index a33e7f6482..6938b8ee85 100644
--- a/tests/dbshell/test_postgresql.py
+++ b/tests/dbshell/test_postgresql.py
@@ -10,78 +10,115 @@ from django.test import SimpleTestCase
 class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
 
     def _run_it(self, dbinfo):
         """
         That function invokes the runshell command, while mocking
-        subprocess.run(). It returns a 2-tuple with:
+        subprocess.run(). It returns a 3-tuple with:
         - The command line list
         - The the value of the PGPASSWORD environment variable, or None.
+        - A dict of SSL-related environment variables.
         """
         def _mock_subprocess_run(*args, env=os.environ, **kwargs):
             self.subprocess_args = list(*args)
             self.pgpassword = env.get('PGPASSWORD')
+            self.ssl_env = {
+                key: value for key, value in env.items()
+                if key.startswith('PGSSL')
+            }
             return subprocess.CompletedProcess(self.subprocess_args, 0)
         with mock.patch('subprocess.run', new=_mock_subprocess_run):
             DatabaseClient.runshell_db(dbinfo)
-        return self.subprocess_args, self.pgpassword
+        return self.subprocess_args, self.pgpassword, self.ssl_env
 
     def test_basic(self):
-        self.assertEqual(
-            self._run_it({
-                'database': 'dbname',
-                'user': 'someuser',
-                'password': 'somepassword',
-                'host': 'somehost',
-                'port': '444',
-            }), (
-                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],
-                'somepassword',
-            )
-        )
+        args, pgpassword, ssl_env = self._run_it({
+            'database': 'dbname',
+            'user': 'someuser',
+            'password': 'somepassword',
+            'host': 'somehost',
+            'port': '444',
+        })
+        self.assertEqual(args, ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'])
+        self.assertEqual(pgpassword, 'somepassword')
+        self.assertEqual(ssl_env, {})
 
     def test_nopass(self):
-        self.assertEqual(
-            self._run_it({
-                'database': 'dbname',
-                'user': 'someuser',
-                'host': 'somehost',
-                'port': '444',
-            }), (
-                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],
-                None,
-            )
-        )
+        args, pgpassword, ssl_env = self._run_it({
+            'database': 'dbname',
+            'user': 'someuser',
+            'host': 'somehost',
+            'port': '444',
+        })
+        self.assertEqual(args, ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'])
+        self.assertIsNone(pgpassword)
+        self.assertEqual(ssl_env, {})
 
     def test_column(self):
-        self.assertEqual(
-            self._run_it({
-                'database': 'dbname',
-                'user': 'some:user',
-                'password': 'some:password',
-                'host': '::1',
-                'port': '444',
-            }), (
-                ['psql', '-U', 'some:user', '-h', '::1', '-p', '444', 'dbname'],
-                'some:password',
-            )
-        )
+        args, pgpassword, ssl_env = self._run_it({
+            'database': 'dbname',
+            'user': 'some:user',
+            'password': 'some:password',
+            'host': '::1',
+            'port': '444',
+        })
+        self.assertEqual(args, ['psql', '-U', 'some:user', '-h', '::1', '-p', '444', 'dbname'])
+        self.assertEqual(pgpassword, 'some:password')
+        self.assertEqual(ssl_env, {})
 
     def test_accent(self):
         username = 'rôle'
         password = 'sésame'
-        self.assertEqual(
-            self._run_it({
-                'database': 'dbname',
-                'user': username,
-                'password': password,
-                'host': 'somehost',
-                'port': '444',
-            }), (
-                ['psql', '-U', username, '-h', 'somehost', '-p', '444', 'dbname'],
-                password,
-            )
-        )
+        args, pgpassword, ssl_env = self._run_it({
+            'database': 'dbname',
+            'user': username,
+            'password': password,
+            'host': 'somehost',
+            'port': '444',
+        })
+        self.assertEqual(args, ['psql', '-U', username, '-h', 'somehost', '-p', '444', 'dbname'])
+        self.assertEqual(pgpassword, password)
+        self.assertEqual(ssl_env, {})
+
+    def test_ssl_certificate(self):
+        args, pgpassword, ssl_env = self._run_it({
+            'database': 'dbname',
+            'user': 'someuser',
+            'password': 'somepassword',
+            'host': 'somehost',
+            'port': '444',
+            'sslmode': 'verify-ca',
+            'sslcert': 'client_cert.crt',
+            'sslkey': 'client_key.key',
+            'sslrootcert': 'ca_cert.crt',
+            'sslcrl': 'crl.pem',
+        })
+        self.assertEqual(args, ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'])
+        self.assertEqual(pgpassword, 'somepassword')
+        self.assertEqual(ssl_env, {
+            'PGSSLMODE': 'verify-ca',
+            'PGSSLCERT': 'client_cert.crt',
+            'PGSSLKEY': 'client_key.key',
+            'PGSSLROOTCERT': 'ca_cert.crt',
+            'PGSSLCRL': 'crl.pem',
+        })
+
+    def test_ssl_certificate_partial(self):
+        # Test with only some SSL parameters
+        args, pgpassword, ssl_env = self._run_it({
+            'database': 'dbname',
+            'user': 'someuser',
+            'host': 'somehost',
+            'port': '444',
+            'sslmode': 'require',
+            'sslcert': 'client_cert.crt',
+        })
+        self.assertEqual(args, ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'])
+        self.assertIsNone(pgpassword)
+        self.assertEqual(ssl_env, {
+            'PGSSLMODE': 'require',
+            'PGSSLCERT': 'client_cert.crt',
+        })
 
     def test_sigint_handler(self):
         """SIGINT is ignored in Python and passed to psql to abort quries."""
         def _mock_subprocess_run(*args, **kwargs):
             handler = signal.getsignal(signal.SIGINT)
