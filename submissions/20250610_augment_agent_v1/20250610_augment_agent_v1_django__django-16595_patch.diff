diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py
index cd3aab43ad..12c988c441 100644
--- a/django/db/migrations/operations/fields.py
+++ b/django/db/migrations/operations/fields.py
@@ -245,11 +245,15 @@ class AlterField(FieldOperation):
     @property
     def migration_name_fragment(self):
         return "alter_%s_%s" % (self.model_name_lower, self.name_lower)
 
     def reduce(self, operation, app_label):
-        if isinstance(operation, RemoveField) and self.is_same_field_operation(
+        if isinstance(operation, AlterField) and self.is_same_field_operation(
+            operation
+        ):
+            return [operation]
+        elif isinstance(operation, RemoveField) and self.is_same_field_operation(
             operation
         ):
             return [operation]
         elif (
             isinstance(operation, RenameField)
diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py
index 6485009eb4..b4ad6e7433 100644
--- a/tests/migrations/test_optimizer.py
+++ b/tests/migrations/test_optimizer.py
@@ -820,10 +820,40 @@ class OptimizerTests(SimpleTestCase):
             [
                 migrations.RemoveField("Foo", "age"),
             ],
         )
 
+    def test_alter_field_alter_field(self):
+        """
+        AlterField should optimize with another AlterField on the same field.
+        """
+        self.assertOptimizesTo(
+            [
+                migrations.AlterField("Foo", "age", models.IntegerField()),
+                migrations.AlterField("Foo", "age", models.FloatField(default=2.4)),
+            ],
+            [
+                migrations.AlterField("Foo", "age", models.FloatField(default=2.4)),
+            ],
+        )
+
+    def test_multiple_alter_field(self):
+        """
+        Multiple AlterField operations on the same field should reduce to the last one.
+        """
+        self.assertOptimizesTo(
+            [
+                migrations.AlterField("Foo", "age", models.IntegerField()),
+                migrations.AlterField("Foo", "age", models.FloatField()),
+                migrations.AlterField("Foo", "age", models.CharField(max_length=100)),
+                migrations.AlterField("Foo", "age", models.TextField(help_text="Final field")),
+            ],
+            [
+                migrations.AlterField("Foo", "age", models.TextField(help_text="Final field")),
+            ],
+        )
+
     def _test_create_alter_foo_field(self, alter):
         """
         CreateModel, AlterFooTogether/AlterOrderWithRespectTo followed by an
         add/alter/rename field should optimize to CreateModel with options.
         """
