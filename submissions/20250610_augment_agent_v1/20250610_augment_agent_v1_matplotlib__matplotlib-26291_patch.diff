diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py
index d393cf209c..8cd33512db 100644
--- a/lib/matplotlib/axes/_base.py
+++ b/lib/matplotlib/axes/_base.py
@@ -1163,10 +1163,13 @@ class _AxesBase(martist.Artist):
         Parameters
         ----------
         locator : Callable[[Axes, Renderer], Bbox]
         """
         self._axes_locator = locator
+        # If the locator is an OffsetBox, set its figure to match this axes
+        if hasattr(locator, 'set_figure') and self.figure is not None:
+            locator.set_figure(self.figure)
         self.stale = True
 
     def get_axes_locator(self):
         """
         Return the axes_locator.
diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py
index 13af941552..f8e37d58b6 100644
--- a/lib/matplotlib/offsetbox.py
+++ b/lib/matplotlib/offsetbox.py
@@ -232,11 +232,12 @@ class OffsetBox(martist.Artist):
         ----------
         fig : `~matplotlib.figure.Figure`
         """
         super().set_figure(fig)
         for c in self.get_children():
-            c.set_figure(fig)
+            if c is not None:
+                c.set_figure(fig)
 
     @martist.Artist.axes.setter
     def axes(self, ax):
         # TODO deal with this better
         martist.Artist.axes.fset(self, ax)
diff --git a/lib/mpl_toolkits/axes_grid1/inset_locator.py b/lib/mpl_toolkits/axes_grid1/inset_locator.py
index 9d35051074..6140d3e589 100644
--- a/lib/mpl_toolkits/axes_grid1/inset_locator.py
+++ b/lib/mpl_toolkits/axes_grid1/inset_locator.py
@@ -69,10 +69,13 @@ class AnchoredLocatorBase(AnchoredOffsetbox):
         raise RuntimeError("No draw method should be called")
 
     def __call__(self, ax, renderer):
         self.axes = ax
         bbox = self.get_window_extent(renderer)
+        # Ensure we have a valid renderer for get_offset
+        if renderer is None:
+            renderer = self.figure._get_renderer()
         px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)
         bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)
         tr = ax.figure.transSubfigure.inverted()
         return TransformedBbox(bbox_canvas, tr)
 
