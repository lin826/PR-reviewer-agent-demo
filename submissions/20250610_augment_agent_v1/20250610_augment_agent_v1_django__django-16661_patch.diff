diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 5240b07cd6..7c5ca1ff20 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -462,13 +462,16 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
                 # later.
                 break
             # It is allowed to filter on values that would be found from local
             # model anyways. For example, if you filter on employee__department__id,
             # then the id value would be found already from employee__department_id.
+            # However, this optimization should only apply to concrete inheritance
+            # (parent_link=True), not to explicit OneToOneField relationships.
             if not prev_field or (
                 prev_field.is_relation
-                and field not in prev_field.path_infos[-1].target_fields
+                and (field not in prev_field.path_infos[-1].target_fields or 
+                     (hasattr(field, 'remote_field') and hasattr(field.remote_field, 'parent_link') and not field.remote_field.parent_link))
             ):
                 relation_parts.append(part)
             if not getattr(field, "path_infos", None):
                 # This is not a relational field, so further parts
                 # must be transforms.
diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py
index c6b4a565c8..083306c2fd 100644
--- a/tests/modeladmin/tests.py
+++ b/tests/modeladmin/tests.py
@@ -152,10 +152,37 @@ class ModelAdminTests(TestCase):
         # OneToOneField and ForeignKey
         self.assertIs(
             ma.lookup_allowed("employee__department__code", "test_value"), True
         )
 
+    @isolate_apps('modeladmin')
+    def test_lookup_allowed_foreign_primary(self):
+        """
+        Test that lookup_allowed works correctly when a foreign key is used as a primary key.
+        This tests the fix for the issue where ModelAdmin.lookup_allowed() incorrectly
+        raises DisallowedModelAdminLookup with foreign key as primary key.
+        """
+        class Country(models.Model):
+            name = models.CharField(max_length=256)
+
+        class Place(models.Model):
+            country = models.ForeignKey(Country, models.CASCADE)
+
+        class Restaurant(models.Model):
+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)
+
+        class Waiter(models.Model):
+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)
+
+        class WaiterAdmin(ModelAdmin):
+            list_filter = [
+                'restaurant__place__country',
+            ]
+
+        ma = WaiterAdmin(Waiter, self.site)
+        self.assertIs(ma.lookup_allowed('restaurant__place__country', 'test_value'), True)
+
     def test_field_arguments(self):
         # If fields is specified, fieldsets_add and fieldsets_change should
         # just stick the fields into a formsets structure and return it.
         class BandAdmin(ModelAdmin):
             fields = ["name"]
