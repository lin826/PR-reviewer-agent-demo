diff --git b/sphinx/builders/linkcheck.py a/sphinx/builders/linkcheck.py
index 38b228c4c..dd5317087 100644
--- b/sphinx/builders/linkcheck.py
+++ a/sphinx/builders/linkcheck.py
@@ -206,71 +206,16 @@ class CheckExternalLinksBuilder(Builder):
                     code = response.history[-1].status_code
                     return 'redirected', new_url, code
                 else:
                     return 'redirected', new_url, 0
 
-        def check_local_uri() -> Tuple[str, str, int]:
-            """Check local URI for validity."""
-            # Handle anchor-only references (e.g., #section)
-            if uri.startswith('#'):
-                # For now, we'll assume anchor-only references are valid
-                # TODO: Could be enhanced to check if anchor exists in current document
-                return 'working', '', 0
-            
-            # Handle mailto and ftp which should not be checked
-            if uri.startswith(('mailto:', 'ftp:')):
-                return 'unchecked', '', 0
-            
-            # Check if it's a reference to another document in the project
-            # Remove any anchor part for document checking
-            doc_uri = uri.split('#')[0] if '#' in uri else uri
-            
-            # Try to resolve as a document name
-            if doc_uri:
-                # Check if it's a known document (without extension)
-                doc_name = doc_uri
-                if doc_name.endswith('.html'):
-                    doc_name = doc_name[:-5]  # Remove .html extension
-                elif doc_name.endswith('.rst'):
-                    doc_name = doc_name[:-4]  # Remove .rst extension
-                
-                # Check if this document exists in the project
-                if doc_name in self.env.found_docs:
-                    return 'working', '', 0
-                
-                # Check if it's a relative path to an existing document
-                current_doc_dir = path.dirname(self.env.doc2path(docname, None))
-                if current_doc_dir:
-                    # Try to resolve relative to current document
-                    abs_path = path.normpath(path.join(current_doc_dir, doc_uri))
-                    # Convert back to docname format
-                    try:
-                        rel_path = path.relpath(abs_path, self.env.srcdir)
-                        if rel_path.endswith('.html'):
-                            rel_path = rel_path[:-5]
-                        elif rel_path.endswith('.rst'):
-                            rel_path = rel_path[:-4]
-                        # Convert path separators to document name format
-                        potential_docname = rel_path.replace(path.sep, '/')
-                        if potential_docname in self.env.found_docs:
-                            return 'working', '', 0
-                    except ValueError:
-                        pass  # path.relpath can raise ValueError
-                
-                # If we get here, the local reference appears to be broken
-                return 'broken', __('document not found'), 0
-            
-            # Empty URI after processing
-            return 'unchecked', '', 0
-
         def check() -> Tuple[str, str, int]:
             # check for various conditions without bothering the network
             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):
                 return 'unchecked', '', 0
             elif not uri.startswith(('http:', 'https:')):
-                # Check local URIs instead of just marking them as 'local'
-                return check_local_uri()
+                return 'local', '', 0
             elif uri in self.good:
                 return 'working', 'old', 0
             elif uri in self.broken:
                 return 'broken', self.broken[uri], 0
             elif uri in self.redirected:
@@ -320,11 +265,14 @@ class CheckExternalLinksBuilder(Builder):
             if info:
                 logger.info(darkgray('-ignored- ') + uri + ': ' + info)
             else:
                 logger.info(darkgray('-ignored- ') + uri)
             self.write_linkstat(linkstat)
-
+        elif status == 'local':
+            logger.info(darkgray('-local-   ') + uri)
+            self.write_entry('local', docname, filename, lineno, uri)
+            self.write_linkstat(linkstat)
         elif status == 'working':
             logger.info(darkgreen('ok        ') + uri + info)
             self.write_linkstat(linkstat)
         elif status == 'broken':
             if self.app.quiet or self.app.warningiserror:
