diff --git b/sphinx/ext/napoleon/docstring.py a/sphinx/ext/napoleon/docstring.py
index 6fd2107ed..b3daa06f1 100644
--- b/sphinx/ext/napoleon/docstring.py
+++ a/sphinx/ext/napoleon/docstring.py
@@ -1107,31 +1107,10 @@ class NumpyDocstring(GoogleDocstring):
         indent = self._get_indent(line) + 1
         _desc = self._dedent(self._consume_indented_block(indent))
         _desc = self.__class__(_desc, self._config).lines()
         return _name, _type, _desc
 
-    def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False
-                        ) -> List[Tuple[str, str, List[str]]]:
-        self._consume_empty()
-        fields = []
-        while not self._is_section_break():
-            _name, _type, _desc = self._consume_field(parse_type, prefer_type)
-            if _name or _type or _desc:
-                # Handle multiple parameters separated by commas
-                # But don't split special cases like "*args, **kwargs"
-                if ", " in _name and not ("*" in _name):
-                    # Split the name into individual parameter names
-                    param_names = [name.strip() for name in _name.split(", ")]
-                    # Create a separate field entry for each parameter
-                    for param_name in param_names:
-                        # Skip empty parameter names
-                        if param_name:
-                            fields.append((param_name, _type, _desc))
-                else:
-                    fields.append((_name, _type, _desc))
-        return fields
-
     def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:
         return self._consume_fields(prefer_type=True)
 
     def _consume_section_header(self) -> str:
         section = next(self._line_iter)
