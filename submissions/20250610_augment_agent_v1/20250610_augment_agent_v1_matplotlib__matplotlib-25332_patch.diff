diff --git a/lib/matplotlib/cbook.py b/lib/matplotlib/cbook.py
index c9699b2e21..1d542a5ee9 100644
--- a/lib/matplotlib/cbook.py
+++ b/lib/matplotlib/cbook.py
@@ -844,10 +844,58 @@ class Grouper:
         """Return all of the items joined with *a*, including itself."""
         self.clean()
         siblings = self._mapping.get(weakref.ref(a), [weakref.ref(a)])
         return [x() for x in siblings]
 
+    def __getstate__(self):
+        """
+        Support for pickling by converting weak references to strong references.
+        """
+        # Clean up dead references first
+        self.clean()
+        
+        # Convert the mapping from weak references to actual objects
+        # We need to preserve the group structure
+        groups = []
+        processed_refs = set()
+        
+        for ref_key, ref_list in self._mapping.items():
+            # Skip if we've already processed this group
+            if id(ref_list) in processed_refs:
+                continue
+            processed_refs.add(id(ref_list))
+            
+            # Convert weak references to actual objects, filtering out dead ones
+            group = []
+            for ref in ref_list:
+                obj = ref()
+                if obj is not None:
+                    group.append(obj)
+            
+            if group:  # Only add non-empty groups
+                groups.append(group)
+        
+        return {'groups': groups}
+
+    def __setstate__(self, state):
+        """
+        Support for unpickling by converting strong references back to weak references.
+        """
+        # Reconstruct the _mapping from the groups
+        self._mapping = {}
+        
+        for group in state['groups']:
+            if not group:  # Skip empty groups
+                continue
+                
+            # Create weak references for all objects in the group
+            weak_refs = [weakref.ref(obj) for obj in group]
+            
+            # Set up the mapping so all weak references point to the same list
+            for weak_ref in weak_refs:
+                self._mapping[weak_ref] = weak_refs
+
 
 class GrouperView:
     """Immutable view over a `.Grouper`."""
 
     def __init__(self, grouper): self._grouper = grouper
