diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py
index b2d4268d12..e9dbc2c73b 100644
--- a/sympy/sets/contains.py
+++ b/sympy/sets/contains.py
@@ -42,7 +42,7 @@ def binary_symbols(self):
         return set().union(*[i.binary_symbols
             for i in self.args[1].args
             if i.is_Boolean or i.is_Symbol or
             isinstance(i, (Eq, Ne))])
 
-    def as_set(self):
-        raise NotImplementedError()
+    def _eval_as_set(self):
+        return self.args[1]
diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py
index 1973fed19c..fca5675990 100644
--- a/sympy/sets/tests/test_contains.py
+++ b/sympy/sets/tests/test_contains.py
@@ -40,12 +40,18 @@ def test_binary_symbols():
 
 def test_as_set():
     x = Symbol('x')
     y = Symbol('y')
     # Contains is a BooleanFunction whose value depends on an arg's
-    # containment in a Set -- rewriting as a Set is not yet implemented
-    raises(NotImplementedError, lambda:
-           Contains(x, FiniteSet(y)).as_set())
+    # containment in a Set -- rewriting as a Set returns the Set itself
+    # when the expression is univariate
+    assert Contains(x, S.Reals).as_set() == S.Reals
+    assert Contains(x, S.Integers).as_set() == S.Integers
+    assert Contains(x, S.Naturals).as_set() == S.Naturals
+    
+    # Multivariate expressions (where the set contains free symbols)
+    # should raise NotImplementedError as per Boolean.as_set() behavior
+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y)).as_set())
 
 def test_type_error():
     # Pass in a parameter not of type "set"
     raises(TypeError, lambda: Contains(2, None))
