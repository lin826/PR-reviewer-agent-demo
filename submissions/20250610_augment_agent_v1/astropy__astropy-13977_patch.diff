diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py
index b98abfafb0..cceaf0cf24 100644
--- a/astropy/units/quantity.py
+++ b/astropy/units/quantity.py
@@ -663,13 +663,19 @@ class Quantity(np.ndarray):
                 kwargs["initial"], check_precision=False, unit=unit
             )
 
         # Same for inputs, but here also convert if necessary.
         arrays = []
-        for input_, converter in zip(inputs, converters):
-            input_ = getattr(input_, "value", input_)
-            arrays.append(converter(input_) if converter else input_)
+        try:
+            for input_, converter in zip(inputs, converters):
+                input_ = getattr(input_, "value", input_)
+                arrays.append(converter(input_) if converter else input_)
+        except (ValueError, TypeError) as exc:
+            # If we cannot convert the inputs (e.g., incompatible duck-typed
+            # objects), return NotImplemented to allow other operands to handle
+            # the operation via their reflected methods.
+            return NotImplemented
 
         # Call our superclass's __array_ufunc__
         result = super().__array_ufunc__(function, method, *arrays, **kwargs)
         # If unit is None, a plain array is expected (e.g., comparisons), which
         # means we're done.
