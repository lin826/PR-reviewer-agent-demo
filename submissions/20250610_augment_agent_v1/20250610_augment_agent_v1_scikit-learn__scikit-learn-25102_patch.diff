diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py
index 335773c6a..13302912b 100644
--- a/sklearn/utils/_set_output.py
+++ b/sklearn/utils/_set_output.py
@@ -10,10 +10,11 @@ from ._available_if import available_if
 def _wrap_in_pandas_container(
     data_to_wrap,
     *,
     columns,
     index=None,
+    dtypes=None,
 ):
     """Create a Pandas DataFrame.
 
     If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed
     inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with
@@ -34,10 +35,15 @@ def _wrap_in_pandas_container(
         `range(n_features)`.
 
     index : array-like, default=None
         Index for data.
 
+    dtypes : pandas.Series, default=None
+        Dtypes for the columns. If provided, the output DataFrame will have
+        its dtypes set to match the provided dtypes for columns that exist
+        in both the output and the provided dtypes.
+
     Returns
     -------
     dataframe : DataFrame
         Container with column names or unchanged `output`.
     """
@@ -55,13 +61,40 @@ def _wrap_in_pandas_container(
     if isinstance(data_to_wrap, pd.DataFrame):
         if columns is not None:
             data_to_wrap.columns = columns
         if index is not None:
             data_to_wrap.index = index
+        # Apply dtypes if provided
+        if dtypes is not None:
+            # Only apply dtypes for columns that exist in both the DataFrame and dtypes
+            common_columns = data_to_wrap.columns.intersection(dtypes.index)
+            if len(common_columns) > 0:
+                dtypes_to_apply = dtypes[common_columns]
+                try:
+                    data_to_wrap = data_to_wrap.astype(dtypes_to_apply)
+                except (ValueError, TypeError):
+                    # If dtype conversion fails, continue without preserving dtypes
+                    # This ensures backward compatibility and robustness
+                    pass
         return data_to_wrap
 
-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)
+    result = pd.DataFrame(data_to_wrap, index=index, columns=columns)
+    
+    # Apply dtypes if provided
+    if dtypes is not None:
+        # Only apply dtypes for columns that exist in both the DataFrame and dtypes
+        common_columns = result.columns.intersection(dtypes.index)
+        if len(common_columns) > 0:
+            dtypes_to_apply = dtypes[common_columns]
+            try:
+                result = result.astype(dtypes_to_apply)
+            except (ValueError, TypeError):
+                # If dtype conversion fails, continue without preserving dtypes
+                # This ensures backward compatibility and robustness
+                pass
+    
+    return result
 
 
 def _get_output_config(method, estimator=None):
     """Get output config based on estimator and global configuration.
 
@@ -125,14 +158,20 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):
 
     if output_config["dense"] == "default" or not _auto_wrap_is_configured(estimator):
         return data_to_wrap
 
     # dense_config == "pandas"
+    # Extract dtypes from original input if it's a DataFrame
+    original_dtypes = None
+    if hasattr(original_input, "dtypes"):
+        original_dtypes = original_input.dtypes
+    
     return _wrap_in_pandas_container(
         data_to_wrap=data_to_wrap,
         index=getattr(original_input, "index", None),
         columns=estimator.get_feature_names_out,
+        dtypes=original_dtypes,
     )
 
 
 def _wrap_method_output(f, method):
     """Wrapper used by `_SetOutputMixin` to automatically wrap methods."""
