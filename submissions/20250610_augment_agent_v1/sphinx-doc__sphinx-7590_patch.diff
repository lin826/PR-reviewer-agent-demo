diff --git b/sphinx/domains/cpp.py a/sphinx/domains/cpp.py
index 4698afc9d..fe52d881d 100644
--- b/sphinx/domains/cpp.py
+++ a/sphinx/domains/cpp.py
@@ -880,28 +880,10 @@ class ASTCharLiteral(ASTLiteral):
                            env: "BuildEnvironment", symbol: "Symbol") -> None:
         txt = str(self)
         signode.append(nodes.Text(txt, txt))
 
 
-class ASTUserDefinedLiteral(ASTLiteral):
-    def __init__(self, literal: ASTLiteral, suffix: str) -> None:
-        self.literal = literal
-        self.suffix = suffix
-
-    def _stringify(self, transform: StringifyTransform) -> str:
-        return transform(self.literal) + self.suffix
-
-    def get_id(self, version: int) -> str:
-        # For user-defined literals, we combine the base literal ID with the suffix
-        return self.literal.get_id(version) + '_' + self.suffix
-
-    def describe_signature(self, signode: TextElement, mode: str,
-                           env: "BuildEnvironment", symbol: "Symbol") -> None:
-        self.literal.describe_signature(signode, mode, env, symbol)
-        signode.append(nodes.Text(self.suffix, self.suffix))
-
-
 class ASTThisLiteral(ASTExpression):
     def _stringify(self, transform: StringifyTransform) -> str:
         return "this"
 
     def get_id(self, version: int) -> str:
@@ -4668,60 +4650,41 @@ class DefinitionParser(BaseParser):
         #  | string-literal
         #  | boolean-literal -> "false" | "true"
         #  | pointer-literal -> "nullptr"
         #  | user-defined-literal
         self.skip_ws()
-        
-        # Helper function to check for UDL suffix
-        def _try_parse_udl_suffix(base_literal: ASTLiteral) -> ASTLiteral:
-            # Check if there's an identifier immediately following the literal (no whitespace)
-            # For UDLs, we need a regex that doesn't require word boundary at the start
-            udl_suffix_re = re.compile(r'[a-zA-Z_][a-zA-Z0-9_]*\b')
-            if not self.eof:
-                match = udl_suffix_re.match(self.definition, self.pos)
-                if match:
-                    suffix = match.group()
-                    self.pos = match.end()
-                    return ASTUserDefinedLiteral(base_literal, suffix)
-            return base_literal
-        
         if self.skip_word('nullptr'):
             return ASTPointerLiteral()
         if self.skip_word('true'):
             return ASTBooleanLiteral(True)
         if self.skip_word('false'):
             return ASTBooleanLiteral(False)
-        
-        # Try numeric literals
         for regex in [float_literal_re, binary_literal_re, hex_literal_re,
                       integer_literal_re, octal_literal_re]:
             pos = self.pos
             if self.match(regex):
                 while self.current_char in 'uUlLfF':
                     self.pos += 1
-                base_literal = ASTNumberLiteral(self.definition[pos:self.pos])
-                return _try_parse_udl_suffix(base_literal)
+                return ASTNumberLiteral(self.definition[pos:self.pos])
 
-        # Try string literal
         string = self._parse_string()
         if string is not None:
-            base_literal = ASTStringLiteral(string)
-            return _try_parse_udl_suffix(base_literal)
+            return ASTStringLiteral(string)
 
-        # Try character literal
+        # character-literal
         if self.match(char_literal_re):
             prefix = self.last_match.group(1)  # may be None when no prefix
             data = self.last_match.group(2)
             try:
-                base_literal = ASTCharLiteral(prefix, data)
-                return _try_parse_udl_suffix(base_literal)
+                return ASTCharLiteral(prefix, data)
             except UnicodeDecodeError as e:
                 self.fail("Can not handle character literal. Internal error was: %s" % e)
             except UnsupportedMultiCharacterCharLiteral:
                 self.fail("Can not handle character literal"
                           " resulting in multiple decoded characters.")
 
+        # TODO: user-defined lit
         return None
 
     def _parse_fold_or_paren_expression(self) -> ASTExpression:
         # "(" expression ")"
         # fold-expression
