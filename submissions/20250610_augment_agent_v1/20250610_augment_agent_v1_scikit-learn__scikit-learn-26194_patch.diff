diff --git a/sklearn/metrics/_ranking.py b/sklearn/metrics/_ranking.py
index 0cdead923..4bc1ad3c9 100644
--- a/sklearn/metrics/_ranking.py
+++ b/sklearn/metrics/_ranking.py
@@ -1081,11 +1081,11 @@ def roc_curve(
 
     # Add an extra threshold position
     # to make sure that the curve starts at (0, 0)
     tps = np.r_[0, tps]
     fps = np.r_[0, fps]
-    thresholds = np.r_[thresholds[0] + 1, thresholds]
+    thresholds = np.r_[np.nextafter(thresholds[0], np.inf), thresholds]
 
     if fps[-1] <= 0:
         warnings.warn(
             "No negative samples in y_true, false positive value should be meaningless",
             UndefinedMetricWarning,
diff --git a/sklearn/metrics/tests/test_ranking.py b/sklearn/metrics/tests/test_ranking.py
index f38f118c3..834de87c3 100644
--- a/sklearn/metrics/tests/test_ranking.py
+++ b/sklearn/metrics/tests/test_ranking.py
@@ -416,17 +416,23 @@ def test_roc_curve_toydata():
 def test_roc_curve_drop_intermediate():
     # Test that drop_intermediate drops the correct thresholds
     y_true = [0, 0, 0, 0, 1, 1]
     y_score = [0.0, 0.2, 0.5, 0.6, 0.7, 1.0]
     tpr, fpr, thresholds = roc_curve(y_true, y_score, drop_intermediate=True)
-    assert_array_almost_equal(thresholds, [2.0, 1.0, 0.7, 0.0])
+    # The first threshold is now np.nextafter(max(y_score), np.inf) instead of max(y_score) + 1
+    expected_first_threshold = np.nextafter(1.0, np.inf)
+    expected_thresholds = [expected_first_threshold, 1.0, 0.7, 0.0]
+    assert_array_almost_equal(thresholds, expected_thresholds)
 
     # Test dropping thresholds with repeating scores
     y_true = [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1]
     y_score = [0.0, 0.1, 0.6, 0.6, 0.7, 0.8, 0.9, 0.6, 0.7, 0.8, 0.9, 0.9, 1.0]
     tpr, fpr, thresholds = roc_curve(y_true, y_score, drop_intermediate=True)
-    assert_array_almost_equal(thresholds, [2.0, 1.0, 0.9, 0.7, 0.6, 0.0])
+    # The first threshold is now np.nextafter(max(y_score), np.inf) instead of max(y_score) + 1
+    expected_first_threshold = np.nextafter(1.0, np.inf)
+    expected_thresholds = [expected_first_threshold, 1.0, 0.9, 0.7, 0.6, 0.0]
+    assert_array_almost_equal(thresholds, expected_thresholds)
 
 
 def test_roc_curve_fpr_tpr_increasing():
     # Ensure that fpr and tpr returned by roc_curve are increasing.
     # Construct an edge case with float y_score and sample_weight
