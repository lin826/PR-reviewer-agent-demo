--- a/pylint/pyreverse/writer.py
+++ b/pylint/pyreverse/writer.py
@@ -135,7 +135,20 @@
             label = r"{}|{}\l|".format(label, r"\l".join(obj.attrs))
             for func in obj.methods:
                 if func.args.args:
-                    args = [arg.name for arg in func.args.args if arg.name != "self"]
+                    args = []
+                    for i, arg in enumerate(func.args.args):
+                        if arg.name == "self":
+                            continue
+                        # Check if there's a type annotation for this argument
+                        annotation = None
+                        if (i < len(func.args.annotations) and 
+                            func.args.annotations[i] is not None):
+                            annotation = func.args.annotations[i].as_string()
+                        
+                        if annotation:
+                            args.append(f"{arg.name} : {annotation}")
+                        else:
+                            args.append(arg.name)
                 else:
                     args = []
                 label = r"{}{}({})\l".format(label, func.name, ", ".join(args))
@@ -199,17 +212,37 @@
             shape = "box"
         if not self.config.only_classnames:
             attrs = obj.attrs
-            methods = [func.name for func in obj.methods]
+            method_signatures = []
+            for func in obj.methods:
+                if func.args.args:
+                    args = []
+                    for i, arg in enumerate(func.args.args):
+                        if arg.name == "self":
+                            continue
+                        # Check if there's a type annotation for this argument
+                        annotation = None
+                        if (i < len(func.args.annotations) and 
+                            func.args.annotations[i] is not None):
+                            annotation = func.args.annotations[i].as_string()
+                        
+                        if annotation:
+                            args.append(f"{arg.name} : {annotation}")
+                        else:
+                            args.append(arg.name)
+                else:
+                    args = []
+                method_signatures.append(f"{func.name}({', '.join(args)})")
+            
             # box width for UML like diagram
-            maxlen = max(len(name) for name in [obj.title] + methods + attrs)
+            maxlen = max(len(name) for name in [obj.title] + method_signatures + attrs)
             line = "_" * (maxlen + 2)
             label = fr"{label}\n\f{line}"
             for attr in attrs:
                 label = fr"{label}\n\f08{attr}"
             if attrs:
                 label = fr"{label}\n\f{line}"
-            for func in methods:
-                label = fr"{label}\n\f10{func}()"
+            for method_sig in method_signatures:
+                label = fr"{label}\n\f10{method_sig}"
         return dict(label=label, shape=shape)
 
     def close_graph(self):
