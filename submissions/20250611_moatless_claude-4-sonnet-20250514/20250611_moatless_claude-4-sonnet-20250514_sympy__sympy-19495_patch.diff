--- a/sympy/sets/conditionset.py
+++ b/sympy/sets/conditionset.py
@@ -243,7 +243,20 @@
         cond = self.condition.subs(old, new)
         base = self.base_set.subs(old, new)
         if cond is S.true:
-            return ConditionSet(new, Contains(new, base), base)
+            # When the condition becomes true after substitution, we need to be careful.
+            # If we're substituting a parameter (not the dummy symbol), then we should
+            # return the base set. But we need to check the existing test expectations.
+            # The existing tests expect that when substituting with a concrete Symbol
+            # that has assumptions, those assumptions are taken into account.
+            if isinstance(new, Symbol):
+                # For symbols with assumptions, create a ConditionSet that will be
+                # evaluated by __new__ taking assumptions into account
+                return ConditionSet(new, Contains(new, base), base)
+            else:
+                # For non-symbols (concrete values), return the base set
+                return base
+        elif cond is S.false:
+            return S.EmptySet
         return self.func(self.sym, cond, base)
 
     def dummy_eq(self, other, symbol=None):
