--- a/sympy/stats/crv_types.py
+++ b/sympy/stats/crv_types.py
@@ -47,7 +47,7 @@
 
 from sympy import (log, sqrt, pi, S, Dummy, Interval, sympify, gamma,
                    Piecewise, And, Eq, binomial, factorial, Sum, floor, Abs,
-                   Lambda, Basic, lowergamma, erf, erfc, I)
+                   Lambda, Basic, lowergamma, uppergamma, erf, erfc, I, hyper)
 from sympy import beta as beta_fn
 from sympy import cos, exp, besseli
 from sympy.stats.crv import (SingleContinuousPSpace, SingleContinuousDistribution,
@@ -153,6 +153,11 @@
     def pdf(self, x):
         return 1/(pi*sqrt((x - self.a)*(self.b - x)))
 
+    def _cdf(self, x):
+        from sympy import asin
+        a, b = self.a, self.b
+        return 2/pi * asin(sqrt((x - a)/(b - a)))
+
 def Arcsin(name, a=0, b=1):
     r"""
     Create a Continuous Random Variable with an arcsin distribution.
@@ -669,6 +674,10 @@
     def pdf(self, x):
         p, a, b = self.p, self.a, self.b
         return a*p/x*((x/b)**(a*p)/(((x/b)**a + 1)**(p + 1)))
+
+    def _cdf(self, x):
+        p, a, b = self.p, self.a, self.b
+        return ((x/b)**a / ((x/b)**a + 1))**p
 
 
 def Dagum(name, p, a, b):
@@ -1042,6 +1051,10 @@
         a, s, m = self.a, self.s, self.m
         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))
 
+    def _cdf(self, x):
+        a, s, m = self.a, self.s, self.m
+        return exp(-((x-m)/s)**(-a))
+
 def Frechet(name, a, s=1, m=0):
     r"""
     Create a continuous random variable with a Frechet distribution.
@@ -1107,6 +1120,10 @@
     def pdf(self, x):
         k, theta = self.k, self.theta
         return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)
+
+    def _cdf(self, x):
+        k, theta = self.k, self.theta
+        return lowergamma(k, x/theta) / gamma(k)
 
     def sample(self):
         return random.gammavariate(self.k, self.theta)
@@ -1200,6 +1217,10 @@
         a, b = self.a, self.b
         return b**a/gamma(a) * x**(-a-1) * exp(-b/x)
 
+    def _cdf(self, x):
+        a, b = self.a, self.b
+        return uppergamma(a, b/x) / gamma(a)
+
 def GammaInverse(name, a, b):
     r"""
     Create a continuous random variable with an inverse Gamma distribution.
@@ -1374,7 +1395,7 @@
 class KumaraswamyDistribution(SingleContinuousDistribution):
     _argnames = ('a', 'b')
 
-    set = Interval(0, oo)
+    set = Interval(0, 1)
 
     @staticmethod
     def check(a, b):
@@ -1384,6 +1405,10 @@
     def pdf(self, x):
         a, b = self.a, self.b
         return a * b * x**(a-1) * (1-x**a)**(b-1)
+
+    def _cdf(self, x):
+        a, b = self.a, self.b
+        return 1 - (1 - x**a)**b
 
 def Kumaraswamy(name, a, b):
     r"""
@@ -1445,6 +1470,13 @@
         mu, b = self.mu, self.b
         return 1/(2*b)*exp(-Abs(x - mu)/b)
 
+    def _cdf(self, x):
+        mu, b = self.mu, self.b
+        return Piecewise(
+            (exp((x - mu)/b)/2, x < mu),
+            (1 - exp(-(x - mu)/b)/2, True)
+        )
+
 
 def Laplace(name, mu, b):
     r"""
@@ -1500,6 +1532,10 @@
     def pdf(self, x):
         mu, s = self.mu, self.s
         return exp(-(x - mu)/s)/(s*(1 + exp(-(x - mu)/s))**2)
+
+    def _cdf(self, x):
+        mu, s = self.mu, self.s
+        return 1 / (1 + exp(-(x - mu)/s))
 
 
 def Logistic(name, mu, s):
@@ -1711,6 +1747,10 @@
         mu, omega = self.mu, self.omega
         return 2*mu**mu/(gamma(mu)*omega**mu)*x**(2*mu - 1)*exp(-mu/omega*x**2)
 
+    def _cdf(self, x):
+        mu, omega = self.mu, self.omega
+        return lowergamma(mu, mu*x**2/omega) / gamma(mu)
+
 
 def Nakagami(name, mu, omega):
     r"""
@@ -2226,6 +2266,11 @@
     def pdf(self, x):
         nu = self.nu
         return 1/(sqrt(nu)*beta_fn(S(1)/2, nu/2))*(1 + x**2/nu)**(-(nu + 1)/2)
+
+    def _cdf(self, x):
+        nu = self.nu
+        return S.Half + x*gamma((nu + 1)/2)/(sqrt(pi*nu)*gamma(nu/2)) * \
+               hyper([S.Half, (nu + 1)/2], [S(3)/2], -x**2/nu)
 
 
 def StudentT(name, nu):
@@ -2554,6 +2599,11 @@
         return 1/factorial(
             n - 1)*Sum((-1)**k*binomial(n, k)*(x - k)**(n - 1), (k, 0, floor(x)))
 
+    def _cdf(self, x):
+        n = self.n
+        k = Dummy("k")
+        return 1/factorial(n)*Sum((-1)**k*binomial(n, k)*(x - k)**n, (k, 0, floor(x)))
+
 
 
 def UniformSum(name, n):
