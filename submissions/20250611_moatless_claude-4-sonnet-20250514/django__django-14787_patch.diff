--- a/django/utils/decorators.py
+++ b/django/utils/decorators.py
@@ -38,6 +38,15 @@
         # 'func'. Also, wrap method.__get__() in a function because new
         # attributes can't be set on bound method objects, only on functions.
         bound_method = partial(method.__get__(self, type(self)))
+        # Copy attributes that decorators expect from the original method
+        # to the partial object to preserve wrapper assignments
+        for attr in ('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'):
+            try:
+                value = getattr(method, attr)
+            except AttributeError:
+                pass
+            else:
+                setattr(bound_method, attr, value)
         for dec in decorators:
             bound_method = dec(bound_method)
         return bound_method(*args, **kwargs)
