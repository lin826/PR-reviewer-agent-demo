--- a/sklearn/decomposition/dict_learning.py
+++ b/sklearn/decomposition/dict_learning.py
@@ -896,11 +896,14 @@
 
         X = check_array(X)
 
+        # Use transform_max_iter if available (SparseCoder), otherwise default
+        max_iter = getattr(self, 'transform_max_iter', 1000)
+        
         code = sparse_encode(
             X, self.components_, algorithm=self.transform_algorithm,
             n_nonzero_coefs=self.transform_n_nonzero_coefs,
             alpha=self.transform_alpha, n_jobs=self.n_jobs,
-            positive=self.positive_code)
+            positive=self.positive_code, max_iter=max_iter)
 
         if self.split_sign:
             # feature vector is split into a positive and negative side
@@ -974,6 +977,12 @@
 
         .. versionadded:: 0.20
 
+    transform_max_iter : int, default=1000
+        Maximum number of iterations to perform if 
+        `transform_algorithm='lasso_cd'`.
+
+        .. versionadded:: 0.22
+
     Attributes
     ----------
     components_ : array, [n_components, n_features]
@@ -991,13 +1000,15 @@
 
     def __init__(self, dictionary, transform_algorithm='omp',
                  transform_n_nonzero_coefs=None, transform_alpha=None,
-                 split_sign=False, n_jobs=None, positive_code=False):
+                 split_sign=False, n_jobs=None, positive_code=False,
+                 transform_max_iter=1000):
         self._set_sparse_coding_params(dictionary.shape[0],
                                        transform_algorithm,
                                        transform_n_nonzero_coefs,
                                        transform_alpha, split_sign, n_jobs,
                                        positive_code)
         self.components_ = dictionary
+        self.transform_max_iter = transform_max_iter
 
     def fit(self, X, y=None):
         """Do nothing and return the estimator unchanged
