--- a/sympy/core/mod.py
+++ b/sympy/core/mod.py
@@ -123,9 +123,22 @@
             for arg in p.args:
                 both_l[isinstance(arg, cls)].append(arg)
 
-            if mod_l and all(inner.args[1] == q for inner in mod_l):
+            # Check if we should apply the transformation to non-mod terms
+            # Only transform if all non-mod terms are integers to avoid infinite recursion
+            all_integer = all(x.is_integer is True for x in non_mod_l)
+            
+            was = non_mod_l[:]
+            if all_integer:
+                non_mod_l = [cls(x, q) for x in non_mod_l]
+                changed = was != non_mod_l
+            else:
+                changed = False
+                
+            if changed or mod_l and all(inner.args[1] == q for inner in mod_l):
+                # Apply transformation only if we haven't already done it inappropriately
+                if not all_integer and not changed:
+                    non_mod_l = [cls(x, q) for x in non_mod_l]
                 # finding distributive term
-                non_mod_l = [cls(x, q) for x in non_mod_l]
                 mod = []
                 non_mod = []
                 for j in non_mod_l:
