--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -399,6 +399,8 @@
     # on the actual save.
     adding = True
     fields_cache = ModelStateFieldsCacheDescriptor()
+    # Track fields that were set from defaults during initialization
+    fields_from_defaults = None
 
 
 class Model(metaclass=ModelBase):
@@ -414,6 +416,7 @@
 
         # Set up the storage for instance state
         self._state = ModelState()
+        self._state.fields_from_defaults = set()
 
         # There is a rather weird disparity here; if kwargs, it's set, then args
         # overrides it. It should be one or the other; don't duplicate the work
@@ -462,6 +465,7 @@
                             val = kwargs.pop(field.attname)
                         except KeyError:
                             val = field.get_default()
+                            self._state.fields_from_defaults.add(field.attname)
                 else:
                     try:
                         val = kwargs.pop(field.attname)
@@ -471,8 +475,10 @@
                         # get_default() to be evaluated, and then not used.
                         # Refs #12057.
                         val = field.get_default()
+                        self._state.fields_from_defaults.add(field.attname)
             else:
                 val = field.get_default()
+                self._state.fields_from_defaults.add(field.attname)
 
             if is_related_object:
                 # If we are passed a related instance, set it using the
@@ -494,6 +500,9 @@
                     if prop in property_names or opts.get_field(prop):
                         if kwargs[prop] is not _DEFERRED:
                             _setattr(self, prop, kwargs[prop])
+                            # If 'pk' was explicitly provided, remove pk field from defaults tracking
+                            if prop == 'pk':
+                                self._state.fields_from_defaults.discard(opts.pk.attname)
                         del kwargs[prop]
                 except (AttributeError, FieldDoesNotExist):
                     pass
@@ -847,12 +856,11 @@
         if not pk_set and (force_update or update_fields):
             raise ValueError("Cannot force an update in save() with no primary key.")
         updated = False
-        # Skip an UPDATE when adding an instance and primary key has a default.
+        # Skip an UPDATE when adding an instance and primary key was set from default.
         if (
             not force_insert and
             self._state.adding and
-            self._meta.pk.default and
-            self._meta.pk.default is not NOT_PROVIDED
+            meta.pk.attname in getattr(self._state, 'fields_from_defaults', set())
         ):
             force_insert = True
         # If possible, try an UPDATE. If that doesn't update anything, do an INSERT.
