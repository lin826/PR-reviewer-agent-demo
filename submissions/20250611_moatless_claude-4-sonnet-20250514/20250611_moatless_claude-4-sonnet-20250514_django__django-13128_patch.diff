--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -480,6 +480,38 @@
         c.rhs = c.rhs.resolve_expression(query, allow_joins, reuse, summarize, for_save)
         return c
 
+    def _resolve_output_field(self):
+        """
+        Resolve output field for combined expressions, with special handling
+        for temporal operations that mix DateTimeField and DurationField.
+        """
+        try:
+            lhs_type = self.lhs.output_field.get_internal_type()
+        except FieldError:
+            lhs_type = None
+        try:
+            rhs_type = self.rhs.output_field.get_internal_type()
+        except FieldError:
+            rhs_type = None
+
+        # Handle temporal subtraction (datetime - datetime = duration)
+        datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}
+        if self.connector == self.SUB and lhs_type in datetime_fields and lhs_type == rhs_type:
+            return fields.DurationField()
+
+        # Handle duration operations (any operation involving DurationField results in DurationField)
+        if 'DurationField' in {lhs_type, rhs_type}:
+            # DateTime ± Duration = DateTime
+            if lhs_type in datetime_fields and rhs_type == 'DurationField':
+                return self.lhs.output_field
+            if rhs_type in datetime_fields and lhs_type == 'DurationField':
+                return self.rhs.output_field
+            # Duration ± Duration = Duration, or Duration ± Number = Duration  
+            return fields.DurationField()
+
+        # Fall back to default behavior for non-temporal operations
+        return super()._resolve_output_field()
+
 
 class DurationExpression(CombinedExpression):
     def compile(self, side, compiler, connection):
