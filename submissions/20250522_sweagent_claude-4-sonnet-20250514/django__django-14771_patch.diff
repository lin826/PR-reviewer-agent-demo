diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index cc65c043ab..90a4a26662 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -220,6 +220,8 @@ def get_child_arguments():
     py_script = Path(sys.argv[0])
 
     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]
+    if hasattr(sys, '_xoptions'):
+        args += ['-X%s' % (k if v is True else '%s=%s' % (k, v)) for k, v in sys._xoptions.items()]
     # __spec__ is set when the server was started with the `-m` option,
     # see https://docs.python.org/3/reference/import.html#main-spec
     # __spec__ may not exist, e.g. when running in a Conda env.
diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py
index 7c28a9d4d0..a0033a50b1 100644
--- a/tests/utils_tests/test_autoreload.py
+++ b/tests/utils_tests/test_autoreload.py
@@ -203,6 +203,54 @@ class TestChildArguments(SimpleTestCase):
             [sys.executable, '-Werror', __file__, 'runserver']
         )
 
+    @mock.patch('__main__.__spec__', None)
+    @mock.patch('sys.argv', [__file__, 'runserver'])
+    @mock.patch('sys.warnoptions', [])
+    def test_xoptions(self):
+        with mock.patch.object(sys, '_xoptions', {'utf8': True}):
+            self.assertEqual(
+                autoreload.get_child_arguments(),
+                [sys.executable, '-Xutf8', __file__, 'runserver']
+            )
+
+    @mock.patch('__main__.__spec__', None)
+    @mock.patch('sys.argv', [__file__, 'runserver'])
+    @mock.patch('sys.warnoptions', [])
+    def test_xoptions_with_values(self):
+        with mock.patch.object(sys, '_xoptions', {'tracemalloc': '10'}):
+            self.assertEqual(
+                autoreload.get_child_arguments(),
+                [sys.executable, '-Xtracemalloc=10', __file__, 'runserver']
+            )
+
+    @mock.patch('__main__.__spec__', None)
+    @mock.patch('sys.argv', [__file__, 'runserver'])
+    @mock.patch('sys.warnoptions', [])
+    def test_xoptions_multiple(self):
+        with mock.patch.object(sys, '_xoptions', {'utf8': True, 'dev': True}):
+            args = autoreload.get_child_arguments()
+            self.assertIn('-Xutf8', args)
+            self.assertIn('-Xdev', args)
+            self.assertEqual(args[0], sys.executable)
+            self.assertEqual(args[-2:], [__file__, 'runserver'])
+
+    @mock.patch('__main__.__spec__', None)
+    @mock.patch('sys.argv', [__file__, 'runserver'])
+    @mock.patch('sys.warnoptions', [])
+    def test_xoptions_no_attribute(self):
+        # Test when sys._xoptions doesn't exist
+        original_xoptions = getattr(sys, '_xoptions', None)
+        if hasattr(sys, '_xoptions'):
+            delattr(sys, '_xoptions')
+        try:
+            self.assertEqual(
+                autoreload.get_child_arguments(),
+                [sys.executable, __file__, 'runserver']
+            )
+        finally:
+            if original_xoptions is not None:
+                sys._xoptions = original_xoptions
+
     @mock.patch('__main__.__spec__', None)
     @mock.patch('sys.warnoptions', [])
     def test_exe_fallback(self):
