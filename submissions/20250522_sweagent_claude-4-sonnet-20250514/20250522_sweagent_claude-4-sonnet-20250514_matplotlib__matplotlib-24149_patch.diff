diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py
index fdac0f3560..6e9dd67ec1 100644
--- a/lib/matplotlib/axes/_axes.py
+++ b/lib/matplotlib/axes/_axes.py
@@ -2180,12 +2180,12 @@ class Axes(_AxesBase):
             # wrap numpy arrays.
             try:
                 x0 = cbook._safe_first_finite(x0)
-            except (TypeError, IndexError, KeyError):
+            except (TypeError, IndexError, KeyError, StopIteration):
                 pass
 
             try:
                 x = cbook._safe_first_finite(xconv)
-            except (TypeError, IndexError, KeyError):
+            except (TypeError, IndexError, KeyError, StopIteration):
                 x = xconv
 
             delist = False
@@ -2829,11 +2829,17 @@ class Axes(_AxesBase):
         """
         # process the unit information
         if len(xranges):
-            xdata = cbook._safe_first_finite(xranges)
+            try:
+                xdata = cbook._safe_first_finite(xranges)
+            except (TypeError, IndexError, KeyError, StopIteration):
+                xdata = None
         else:
             xdata = None
         if len(yrange):
-            ydata = cbook._safe_first_finite(yrange)
+            try:
+                ydata = cbook._safe_first_finite(yrange)
+            except (TypeError, IndexError, KeyError, StopIteration):
+                ydata = None
         else:
             ydata = None
         self._process_unit_info(
@@ -3466,6 +3472,11 @@ class Axes(_AxesBase):
             Otherwise, fallback to casting to an object array.
             """
 
+            try:
+                first_finite = cbook._safe_first_finite(err)
+            except (TypeError, IndexError, KeyError, StopIteration):
+                first_finite = None
+            
             if (
                     # make sure it is not a scalar
                     np.iterable(err) and
@@ -3475,10 +3486,11 @@ class Axes(_AxesBase):
                     # safe_first_element because getitem is index-first not
                     # location first on pandas objects so err[0] almost always
                     # fails.
-                    isinstance(cbook._safe_first_finite(err), np.ndarray)
+                    first_finite is not None and
+                    isinstance(first_finite, np.ndarray)
             ):
                 # Get the type of the first element
-                atype = type(cbook._safe_first_finite(err))
+                atype = type(first_finite)
                 # Promote the outer container to match the inner container
                 if atype is np.ndarray:
                     # Converts using np.asarray, because data cannot
@@ -4356,10 +4368,16 @@ class Axes(_AxesBase):
             c = (facecolors if facecolors is not None
                  else "b" if mpl.rcParams['_internal.classic_mode']
                  else get_next_color_func())
+        try:
+            first_finite_c = cbook._safe_first_finite(c)
+        except (TypeError, IndexError, KeyError, StopIteration):
+            first_finite_c = None
+        
         c_is_string_or_strings = (
             isinstance(c, str)
             or (np.iterable(c) and len(c) > 0
-                and isinstance(cbook._safe_first_finite(c), str)))
+                and first_finite_c is not None
+                and isinstance(first_finite_c, str)))
 
         def invalid_shape_exception(csize, xsize):
             return ValueError(
