diff --git a/lib/matplotlib/stackplot.py b/lib/matplotlib/stackplot.py
index c580043eeb..7ef0e55ea2 100644
--- a/lib/matplotlib/stackplot.py
+++ b/lib/matplotlib/stackplot.py
@@ -6,9 +6,11 @@ https://stackoverflow.com/q/2225995/
 (https://stackoverflow.com/users/66549/doug)
 """
 
+import itertools
 import numpy as np
 
 from matplotlib import _api
+from matplotlib import colors as mcolors
 
 __all__ = ['stackplot']
 
@@ -69,8 +71,23 @@ def stackplot(axes, x, *args,
     y = np.row_stack(args)
 
     labels = iter(labels)
-    if colors is not None:
-        axes.set_prop_cycle(color=colors)
+    if colors is not None and len(colors) > 0:
+        # Resolve any CN color references to actual colors
+        resolved_colors = []
+        for color in colors:
+            if isinstance(color, str) and mcolors._is_nth_color(color):
+                # Resolve CN color reference to actual color
+                # This uses the global rcParams property cycle, which is the
+                # standard behavior for CN colors in matplotlib
+                resolved_colors.append(mcolors.to_rgba(color))
+            else:
+                resolved_colors.append(color)
+        # Create a color iterator from the resolved colors
+        color_cycle = itertools.cycle(resolved_colors)
+        get_color = lambda: next(color_cycle)
+    else:
+        # Use the default color cycling from axes
+        get_color = axes._get_lines.get_next_color
 
     # Assume data passed has not been 'stacked', so stack it here.
     # We'll need a float buffer for the upcoming calculations.
@@ -108,7 +125,7 @@ def stackplot(axes, x, *args,
         stack += first_line
 
     # Color between x = 0 and the first array.
-    color = axes._get_lines.get_next_color()
+    color = get_color()
     coll = axes.fill_between(x, first_line, stack[0, :],
                              facecolor=color, label=next(labels, None),
                              **kwargs)
@@ -117,7 +134,7 @@ def stackplot(axes, x, *args,
 
     # Color between array i-1 and array i
     for i in range(len(y) - 1):
-        color = axes._get_lines.get_next_color()
+        color = get_color()
         r.append(axes.fill_between(x, stack[i, :], stack[i + 1, :],
                                    facecolor=color, label=next(labels, None),
                                    **kwargs))
