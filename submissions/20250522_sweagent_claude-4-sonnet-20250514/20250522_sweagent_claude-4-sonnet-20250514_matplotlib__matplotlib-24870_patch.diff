diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py
index 144eadeae2..0989d4597b 100644
--- a/lib/matplotlib/contour.py
+++ b/lib/matplotlib/contour.py
@@ -1128,7 +1128,19 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):
                 levels_arg = args[0]
         else:
             levels_arg = self.levels
-        if isinstance(levels_arg, Integral):
+        
+        # Auto-detect boolean arrays and set appropriate levels
+        if (self.levels is None and len(args) == 0 and 
+            hasattr(self, '_orig_z_dtype') and 
+            self._orig_z_dtype == np.bool_ and
+            self.zmin == 0.0 and self.zmax == 1.0):
+            if self.filled:
+                # Filled contours need at least 2 levels
+                self.levels = np.array([0.0, 0.5, 1.0])
+            else:
+                # Line contours only need 1 level at the boundary
+                self.levels = np.array([0.5])
+        elif isinstance(levels_arg, Integral):
             self.levels = self._autolev(levels_arg)
         else:
             self.levels = np.asarray(levels_arg, np.float64)
@@ -1447,7 +1459,10 @@ class QuadContourSet(ContourSet):
             fn = 'contour'
         nargs = len(args)
         if nargs <= 2:
-            z = ma.asarray(args[0], dtype=np.float64)
+            # Store original dtype before conversion to float64
+            z_orig = args[0]
+            self._orig_z_dtype = getattr(z_orig, 'dtype', None)
+            z = ma.asarray(z_orig, dtype=np.float64)
             x, y = self._initialize_x_y(z)
             args = args[1:]
         elif nargs <= 4:
@@ -1475,7 +1490,10 @@ class QuadContourSet(ContourSet):
 
         x = np.asarray(x, dtype=np.float64)
         y = np.asarray(y, dtype=np.float64)
-        z = ma.asarray(args[2], dtype=np.float64)
+        # Store original dtype before conversion to float64
+        z_orig = args[2]
+        self._orig_z_dtype = getattr(z_orig, 'dtype', None)
+        z = ma.asarray(z_orig, dtype=np.float64)
 
         if z.ndim != 2:
             raise TypeError(f"Input z must be 2D, not {z.ndim}D")
