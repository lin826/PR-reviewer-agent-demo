diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 8c1ac5d738..b8a1c2eb8f 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -547,7 +547,7 @@ class Card(_Verify):
     @classmethod
     def fromstring(cls, image):
         """
-        Construct a `Card` object from a (raw) string. It will pad the string
+        Construct a `Card` object from a (raw) string or bytes. It will pad the string
         if it is not the length of a card image (80 columns).  If the card
         image is longer than 80 columns, assume it contains ``CONTINUE``
         card(s).
@@ -1269,6 +1269,11 @@ def _format_float(value):
 def _pad(input):
     """Pad blank space to the input string to be multiple of 80."""
 
+    # Handle bytes input by converting to string first
+    if isinstance(input, bytes):
+        from .util import decode_ascii
+        input = decode_ascii(input)
+
     _len = len(input)
     if _len == Card.length:
         return input
diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py
index ad07e6d52d..8cedd1cecd 100644
--- a/astropy/io/fits/header.py
+++ b/astropy/io/fits/header.py
@@ -334,8 +334,8 @@ class Header:
 
         Parameters
         ----------
-        data : str
-           String containing the entire header.
+        data : str or bytes
+           String or bytes containing the entire header.
 
         sep : str, optional
             The string separating cards from each other, such as a newline.  By
@@ -348,6 +348,10 @@ class Header:
             A new `Header` instance.
         """
 
+        # Convert bytes to string if necessary
+        if isinstance(data, bytes):
+            data = decode_ascii(data)
+
         cards = []
 
         # If the card separator contains characters that may validly appear in
