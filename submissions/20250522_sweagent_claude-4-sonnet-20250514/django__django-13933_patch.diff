diff --git a/django/forms/models.py b/django/forms/models.py
index 422bc5d178..e9ffe60c0d 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -1188,7 +1188,7 @@ class ModelChoiceField(ChoiceField):
     # This class is a subclass of ChoiceField for purity, but it doesn't
     # actually use any of ChoiceField's implementation.
     default_error_messages = {
-        'invalid_choice': _('Select a valid choice. That choice is not one of'
+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'
                             ' the available choices.'),
     }
     iterator = ModelChoiceIterator
@@ -1280,11 +1280,16 @@ class ModelChoiceField(ChoiceField):
             return None
         try:
             key = self.to_field_name or 'pk'
+            original_value = value
             if isinstance(value, self.queryset.model):
                 value = getattr(value, key)
             value = self.queryset.get(**{key: value})
         except (ValueError, TypeError, self.queryset.model.DoesNotExist):
-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')
+            raise ValidationError(
+                self.error_messages['invalid_choice'],
+                code='invalid_choice',
+                params={'value': original_value},
+            )
         return value
 
     def validate(self, value):
diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py
index 8f41ce9c40..7693f19b1b 100644
--- a/tests/model_forms/test_modelchoicefield.py
+++ b/tests/model_forms/test_modelchoicefield.py
@@ -51,7 +51,7 @@ class ModelChoiceFieldTests(TestCase):
         # instantiated. This proves clean() checks the database during clean()
         # rather than caching it at instantiation time.
         Category.objects.get(url='4th').delete()
-        msg = "['Select a valid choice. That choice is not one of the available choices.']"
+        msg = "['Select a valid choice. 4 is not one of the available choices.']"
         with self.assertRaisesMessage(ValidationError, msg):
             f.clean(c4.id)
 
@@ -59,7 +59,7 @@ class ModelChoiceFieldTests(TestCase):
         f = forms.ModelChoiceField(Category.objects.all())
         self.assertEqual(f.clean(self.c1), self.c1)
         # An instance of incorrect model.
-        msg = "['Select a valid choice. That choice is not one of the available choices.']"
+        msg = "['Select a valid choice. Book object (1) is not one of the available choices.']"
         with self.assertRaisesMessage(ValidationError, msg):
             f.clean(Book.objects.create())
 
@@ -216,7 +216,7 @@ class ModelChoiceFieldTests(TestCase):
         form = ModelChoiceForm({}, instance=book)
         self.assertEqual(
             form.errors['author'],
-            ['Select a valid choice. That choice is not one of the available choices.']
+            ['Select a valid choice. 1 is not one of the available choices.']
         )
 
     def test_disabled_modelchoicefield_has_changed(self):
diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py
index 9931fa50e3..9fe1dd9a1c 100644
--- a/tests/model_forms/tests.py
+++ b/tests/model_forms/tests.py
@@ -1675,7 +1675,7 @@ class ModelFormBasicTests(TestCase):
         self.assertIs(form.is_valid(), False)
         self.assertEqual(
             form.errors,
-            {'writer': ['Select a valid choice. That choice is not one of the available choices.']},
+            {'writer': ['Select a valid choice. 1 is not one of the available choices.']},
         )
 
     def test_validate_foreign_key_to_model_with_overridden_manager(self):
