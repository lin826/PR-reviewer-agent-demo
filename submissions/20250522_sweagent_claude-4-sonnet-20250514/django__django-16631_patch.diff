diff --git a/django/contrib/auth/__init__.py b/django/contrib/auth/__init__.py
index 155330c596..3b3d297a60 100644
--- a/django/contrib/auth/__init__.py
+++ b/django/contrib/auth/__init__.py
@@ -199,9 +199,18 @@ def get_user(request):
             # Verify the session
             if hasattr(user, "get_session_auth_hash"):
                 session_hash = request.session.get(HASH_SESSION_KEY)
-                session_hash_verified = session_hash and constant_time_compare(
-                    session_hash, user.get_session_auth_hash()
-                )
+                if session_hash:
+                    # Use check_session_auth_hash if available (supports fallback keys)
+                    if hasattr(user, "check_session_auth_hash"):
+                        session_hash_verified = user.check_session_auth_hash(session_hash)
+                    else:
+                        # Fallback to old behavior for custom user models
+                        session_hash_verified = constant_time_compare(
+                            session_hash, user.get_session_auth_hash()
+                        )
+                else:
+                    session_hash_verified = False
+                
                 if not session_hash_verified:
                     request.session.flush()
                     user = None
diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py
index 5ee30bf59c..ad9cb4608e 100644
--- a/django/contrib/auth/base_user.py
+++ b/django/contrib/auth/base_user.py
@@ -142,6 +142,39 @@ class AbstractBaseUser(models.Model):
             algorithm="sha256",
         ).hexdigest()
 
+    def check_session_auth_hash(self, session_hash):
+        """
+        Check if the given session hash is valid for this user.
+        This method tries the current SECRET_KEY and all SECRET_KEY_FALLBACKS.
+        """
+        from django.conf import settings
+        from django.utils.crypto import constant_time_compare
+        
+        key_salt = "django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash"
+        
+        # Try current secret key first
+        current_hash = salted_hmac(
+            key_salt,
+            self.password,
+            algorithm="sha256",
+        ).hexdigest()
+        
+        if constant_time_compare(session_hash, current_hash):
+            return True
+        
+        # Try fallback keys
+        for fallback_key in settings.SECRET_KEY_FALLBACKS:
+            fallback_hash = salted_hmac(
+                key_salt,
+                self.password,
+                secret=fallback_key,
+                algorithm="sha256",
+            ).hexdigest()
+            if constant_time_compare(session_hash, fallback_hash):
+                return True
+        
+        return False
+
     @classmethod
     def get_email_field_name(cls):
         try:
