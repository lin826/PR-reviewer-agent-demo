diff --git a/conftest.py b/conftest.py
deleted file mode 100644
index 62281174cd..0000000000
--- a/conftest.py
+++ /dev/null
@@ -1,69 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import print_function, division, absolute_import
-
-import os
-from itertools import chain
-import json
-import sys
-import warnings
-import pytest
-from sympy.testing.runtests import setup_pprint, _get_doctest_blacklist
-
-durations_path = os.path.join(os.path.dirname(__file__), '.ci', 'durations.json')
-blacklist_path = os.path.join(os.path.dirname(__file__), '.ci', 'blacklisted.json')
-
-collect_ignore = _get_doctest_blacklist()
-
-# Set up printing for doctests
-setup_pprint()
-sys.__displayhook__ = sys.displayhook
-#from sympy import pprint_use_unicode
-#pprint_use_unicode(False)
-
-
-def _mk_group(group_dict):
-    return list(chain(*[[k+'::'+v for v in files] for k, files in group_dict.items()]))
-
-if os.path.exists(durations_path):
-    veryslow_group, slow_group = [_mk_group(group_dict) for group_dict in json.loads(open(durations_path, 'rt').read())]
-else:
-    # warnings in conftest has issues: https://github.com/pytest-dev/pytest/issues/2891
-    warnings.warn("conftest.py:22: Could not find %s, --quickcheck and --veryquickcheck will have no effect.\n" % durations_path)
-    veryslow_group, slow_group = [], []
-
-if os.path.exists(blacklist_path):
-    with open(blacklist_path, 'rt') as stream:
-        blacklist_group = _mk_group(json.load(stream))
-else:
-    warnings.warn("conftest.py:28: Could not find %s, no tests will be skipped due to blacklisting\n" % blacklist_path)
-    blacklist_group = []
-
-
-def pytest_addoption(parser):
-    parser.addoption("--quickcheck", dest="runquick", action="store_true",
-                     help="Skip very slow tests (see ./ci/parse_durations_log.py)")
-    parser.addoption("--veryquickcheck", dest="runveryquick", action="store_true",
-                     help="Skip slow & very slow (see ./ci/parse_durations_log.py)")
-
-
-def pytest_configure(config):
-    # register an additional marker
-    config.addinivalue_line("markers", "slow: manually marked test as slow (use .ci/durations.json instead)")
-    config.addinivalue_line("markers", "quickcheck: skip very slow tests")
-    config.addinivalue_line("markers", "veryquickcheck: skip slow & very slow tests")
-
-
-def pytest_runtest_setup(item):
-    if isinstance(item, pytest.Function):
-        if item.nodeid in veryslow_group and (item.config.getvalue("runquick") or
-                                              item.config.getvalue("runveryquick")):
-            pytest.skip("very slow test, skipping since --quickcheck or --veryquickcheck was passed.")
-            return
-        if item.nodeid in slow_group and item.config.getvalue("runveryquick"):
-            pytest.skip("slow test, skipping since --veryquickcheck was passed.")
-            return
-
-        if item.nodeid in blacklist_group:
-            pytest.skip("blacklisted test, see %s" % blacklist_path)
-            return
diff --git a/isympy.py b/isympy.py
deleted file mode 100644
index 7d9e4e6bb8..0000000000
--- a/isympy.py
+++ /dev/null
@@ -1,342 +0,0 @@
-"""
-Python shell for SymPy.
-
-This is just a normal Python shell (IPython shell if you have the
-IPython package installed), that executes the following commands for
-the user:
-
-    >>> from __future__ import division
-    >>> from sympy import *
-    >>> x, y, z, t = symbols('x y z t')
-    >>> k, m, n = symbols('k m n', integer=True)
-    >>> f, g, h = symbols('f g h', cls=Function)
-    >>> init_printing()
-
-So starting 'isympy' is equivalent to starting Python (or IPython) and
-executing the above commands by hand.  It is intended for easy and quick
-experimentation with SymPy.  isympy is a good way to use SymPy as an
-interactive calculator. If you have IPython and Matplotlib installed, then
-interactive plotting is enabled by default.
-
-COMMAND LINE OPTIONS
---------------------
-
--c CONSOLE, --console=CONSOLE
-
-     Use the specified shell (Python or IPython) shell as the console
-     backend instead of the default one (IPython if present, Python
-     otherwise), e.g.:
-
-        $isympy -c python
-
-    CONSOLE must be one of 'ipython' or 'python'
-
--p PRETTY, --pretty PRETTY
-
-    Setup pretty-printing in SymPy. When pretty-printing is enabled,
-    expressions can be printed with Unicode or ASCII. The default is
-    to use pretty-printing (with Unicode if the terminal supports it).
-    When this option is 'no', expressions will not be pretty-printed
-    and ASCII will be used:
-
-        $isympy -p no
-
-    PRETTY must be one of 'unicode', 'ascii', or 'no'
-
--t TYPES, --types=TYPES
-
-    Setup the ground types for the polys.  By default, gmpy ground types
-    are used if gmpy2 or gmpy is installed, otherwise it falls back to python
-    ground types, which are a little bit slower.  You can manually
-    choose python ground types even if gmpy is installed (e.g., for
-    testing purposes):
-
-        $isympy -t python
-
-    TYPES must be one of 'gmpy', 'gmpy1' or 'python'
-
-    Note that the ground type gmpy1 is primarily intended for testing; it
-    forces the use of gmpy version 1 even if gmpy2 is available.
-
-    This is the same as setting the environment variable
-    SYMPY_GROUND_TYPES to the given ground type (e.g.,
-    SYMPY_GROUND_TYPES='gmpy')
-
-    The ground types can be determined interactively from the variable
-    sympy.polys.domains.GROUND_TYPES.
-
--o ORDER, --order ORDER
-
-    Setup the ordering of terms for printing.  The default is lex, which
-    orders terms lexicographically (e.g., x**2 + x + 1). You can choose
-    other orderings, such as rev-lex, which will use reverse
-    lexicographic ordering (e.g., 1 + x + x**2):
-
-        $isympy -o rev-lex
-
-    ORDER must be one of 'lex', 'rev-lex', 'grlex', 'rev-grlex',
-    'grevlex', 'rev-grevlex', 'old', or 'none'.
-
-    Note that for very large expressions, ORDER='none' may speed up
-    printing considerably but the terms will have no canonical order.
-
--q, --quiet
-
-    Print only Python's and SymPy's versions to stdout at startup.
-
--d, --doctest
-
-    Use the same format that should be used for doctests.  This is
-    equivalent to -c python -p no.
-
--C, --no-cache
-
-    Disable the caching mechanism.  Disabling the cache may slow certain
-    operations down considerably.  This is useful for testing the cache,
-    or for benchmarking, as the cache can result in deceptive timings.
-
-    This is equivalent to setting the environment variable
-    SYMPY_USE_CACHE to 'no'.
-
--a, --auto-symbols (requires at least IPython 0.11)
-
-    Automatically create missing symbols.  Normally, typing a name of a
-    Symbol that has not been instantiated first would raise NameError,
-    but with this option enabled, any undefined name will be
-    automatically created as a Symbol.
-
-    Note that this is intended only for interactive, calculator style
-    usage. In a script that uses SymPy, Symbols should be instantiated
-    at the top, so that it's clear what they are.
-
-    This will not override any names that are already defined, which
-    includes the single character letters represented by the mnemonic
-    QCOSINE (see the "Gotchas and Pitfalls" document in the
-    documentation). You can delete existing names by executing "del
-    name".  If a name is defined, typing "'name' in dir()" will return True.
-
-    The Symbols that are created using this have default assumptions.
-    If you want to place assumptions on symbols, you should create them
-    using symbols() or var().
-
-    Finally, this only works in the top level namespace. So, for
-    example, if you define a function in isympy with an undefined
-    Symbol, it will not work.
-
-    See also the -i and -I options.
-
--i, --int-to-Integer (requires at least IPython 0.11)
-
-    Automatically wrap int literals with Integer.  This makes it so that
-    things like 1/2 will come out as Rational(1, 2), rather than 0.5.  This
-    works by preprocessing the source and wrapping all int literals with
-    Integer.  Note that this will not change the behavior of int literals
-    assigned to variables, and it also won't change the behavior of functions
-    that return int literals.
-
-    If you want an int, you can wrap the literal in int(), e.g. int(3)/int(2)
-    gives 1.5 (with division imported from __future__).
-
--I, --interactive (requires at least IPython 0.11)
-
-    This is equivalent to --auto-symbols --int-to-Integer.  Future options
-    designed for ease of interactive use may be added to this.
-
--D, --debug
-
-    Enable debugging output.  This is the same as setting the
-    environment variable SYMPY_DEBUG to 'True'.  The debug status is set
-    in the variable SYMPY_DEBUG within isympy.
-
--- IPython options
-
-    Additionally you can pass command line options directly to the IPython
-    interpreter (the standard Python shell is not supported).  However you
-    need to add the '--' separator between two types of options, e.g the
-    startup banner option and the colors option. You need to enter the
-    options as required by the version of IPython that you are using, too:
-
-    in IPython 0.11,
-
-        $isympy -q -- --colors=NoColor
-
-    or older versions of IPython,
-
-        $isympy -q -- -colors NoColor
-
-See also isympy --help.
-"""
-
-import os
-import sys
-
-# DO NOT IMPORT SYMPY HERE! Or the setting of the sympy environment variables
-# by the command line will break.
-
-def main():
-    from argparse import ArgumentParser, RawDescriptionHelpFormatter
-
-    VERSION = None
-    if '--version' in sys.argv:
-        # We cannot import sympy before this is run, because flags like -C and
-        # -t set environment variables that must be set before SymPy is
-        # imported. The only thing we need to import it for is to get the
-        # version, which only matters with the --version flag.
-        import sympy
-        VERSION = sympy.__version__
-
-    usage = 'isympy [options] -- [ipython options]'
-    parser = ArgumentParser(
-        usage=usage,
-        description=__doc__,
-        formatter_class=RawDescriptionHelpFormatter,
-    )
-
-    parser.add_argument('--version', action='version', version=VERSION)
-
-    parser.add_argument(
-        '-c', '--console',
-        dest='console',
-        action='store',
-        default=None,
-        choices=['ipython', 'python'],
-        metavar='CONSOLE',
-        help='select type of interactive session: ipython | python; defaults '
-        'to ipython if IPython is installed, otherwise python')
-
-    parser.add_argument(
-        '-p', '--pretty',
-        dest='pretty',
-        action='store',
-        default=None,
-        metavar='PRETTY',
-        choices=['unicode', 'ascii', 'no'],
-        help='setup pretty printing: unicode | ascii | no; defaults to '
-        'unicode printing if the terminal supports it, otherwise ascii')
-
-    parser.add_argument(
-        '-t', '--types',
-        dest='types',
-        action='store',
-        default=None,
-        metavar='TYPES',
-        choices=['gmpy', 'gmpy1', 'python'],
-        help='setup ground types: gmpy | gmpy1 | python; defaults to gmpy if gmpy2 '
-        'or gmpy is installed, otherwise python')
-
-    parser.add_argument(
-        '-o', '--order',
-        dest='order',
-        action='store',
-        default=None,
-        metavar='ORDER',
-        choices=['lex', 'grlex', 'grevlex', 'rev-lex', 'rev-grlex', 'rev-grevlex', 'old', 'none'],
-        help='setup ordering of terms: [rev-]lex | [rev-]grlex | [rev-]grevlex | old | none; defaults to lex')
-
-    parser.add_argument(
-        '-q', '--quiet',
-        dest='quiet',
-        action='store_true',
-        default=False,
-        help='print only version information at startup')
-
-    parser.add_argument(
-        '-d', '--doctest',
-        dest='doctest',
-        action='store_true',
-        default=False,
-        help='use the doctest format for output (you can just copy and paste it)')
-
-    parser.add_argument(
-        '-C', '--no-cache',
-        dest='cache',
-        action='store_false',
-        default=True,
-        help='disable caching mechanism')
-
-    parser.add_argument(
-        '-a', '--auto-symbols',
-        dest='auto_symbols',
-        action='store_true',
-        default=False,
-        help='automatically construct missing symbols')
-
-    parser.add_argument(
-        '-i', '--int-to-Integer',
-        dest='auto_int_to_Integer',
-        action='store_true',
-        default=False,
-        help="automatically wrap int literals with Integer")
-
-    parser.add_argument(
-        '-I', '--interactive',
-        dest='interactive',
-        action='store_true',
-        default=False,
-        help="equivalent to -a -i")
-
-    parser.add_argument(
-        '-D', '--debug',
-        dest='debug',
-        action='store_true',
-        default=False,
-        help='enable debugging output')
-
-    (options, ipy_args) = parser.parse_known_args()
-    if '--' in ipy_args:
-        ipy_args.remove('--')
-
-    if not options.cache:
-        os.environ['SYMPY_USE_CACHE'] = 'no'
-
-    if options.types:
-        os.environ['SYMPY_GROUND_TYPES'] = options.types
-
-    if options.debug:
-        os.environ['SYMPY_DEBUG'] = str(options.debug)
-
-    if options.doctest:
-        options.pretty = 'no'
-        options.console = 'python'
-
-    session = options.console
-
-    if session is not None:
-        ipython = session == 'ipython'
-    else:
-        try:
-            import IPython
-            ipython = True
-        except ImportError:
-            if not options.quiet:
-                from sympy.interactive.session import no_ipython
-                print(no_ipython)
-            ipython = False
-
-    args = {
-        'pretty_print': True,
-        'use_unicode':  None,
-        'use_latex':    None,
-        'order':        None,
-        'argv':         ipy_args,
-    }
-
-    if options.pretty == 'unicode':
-        args['use_unicode'] = True
-    elif options.pretty == 'ascii':
-        args['use_unicode'] = False
-    elif options.pretty == 'no':
-        args['pretty_print'] = False
-
-    if options.order is not None:
-        args['order'] = options.order
-
-    args['quiet'] = options.quiet
-    args['auto_symbols'] = options.auto_symbols or options.interactive
-    args['auto_int_to_Integer'] = options.auto_int_to_Integer or options.interactive
-
-    from sympy.interactive import init_session
-    init_session(ipython, **args)
-
-if __name__ == "__main__":
-    main()
diff --git a/setup.py b/setup.py
deleted file mode 100755
index 1147b7d41a..0000000000
--- a/setup.py
+++ /dev/null
@@ -1,357 +0,0 @@
-#!/usr/bin/env python
-"""Setup script for SymPy.
-
-This uses Setuptools (https://setuptools.pypa.io/en/latest/) the standard
-python mechanism for installing packages.
-For the easiest installation just type the command (you'll probably need
-root privileges for that):
-
-    python setup.py install
-
-This will install the library in the default location. For instructions on
-how to customize the install procedure read the output of:
-
-    python setup.py --help install
-
-In addition, there are some other commands:
-
-    python setup.py test  -> will run the complete test suite
-
-To get a full list of available commands, read the output of:
-
-    python setup.py --help-commands
-
-Or, if all else fails, feel free to write to the sympy list at
-sympy@googlegroups.com and ask for help.
-"""
-
-import sys
-import os
-import subprocess
-
-from setuptools import setup, Command
-from setuptools.command.sdist import sdist
-
-
-min_mpmath_version = '0.19'
-
-# This directory
-dir_setup = os.path.dirname(os.path.realpath(__file__))
-
-extra_kwargs = {
-    'zip_safe': False,
-    'entry_points': {
-        'console_scripts': [
-            'isympy = isympy:main',
-        ]
-    }
-}
-
-if sys.version_info < (3, 8):
-    print("SymPy requires Python 3.8 or newer. Python %d.%d detected"
-          % sys.version_info[:2])
-    sys.exit(-1)
-
-# Check that this list is uptodate against the result of the command:
-# python bin/generate_module_list.py
-modules = [
-    'sympy.algebras',
-    'sympy.assumptions',
-    'sympy.assumptions.handlers',
-    'sympy.assumptions.predicates',
-    'sympy.assumptions.relation',
-    'sympy.benchmarks',
-    'sympy.calculus',
-    'sympy.categories',
-    'sympy.codegen',
-    'sympy.combinatorics',
-    'sympy.concrete',
-    'sympy.core',
-    'sympy.core.benchmarks',
-    'sympy.crypto',
-    'sympy.diffgeom',
-    'sympy.discrete',
-    'sympy.external',
-    'sympy.functions',
-    'sympy.functions.combinatorial',
-    'sympy.functions.elementary',
-    'sympy.functions.elementary.benchmarks',
-    'sympy.functions.special',
-    'sympy.functions.special.benchmarks',
-    'sympy.geometry',
-    'sympy.holonomic',
-    'sympy.integrals',
-    'sympy.integrals.benchmarks',
-    'sympy.interactive',
-    'sympy.liealgebras',
-    'sympy.logic',
-    'sympy.logic.algorithms',
-    'sympy.logic.utilities',
-    'sympy.matrices',
-    'sympy.matrices.benchmarks',
-    'sympy.matrices.expressions',
-    'sympy.multipledispatch',
-    'sympy.ntheory',
-    'sympy.parsing',
-    'sympy.parsing.autolev',
-    'sympy.parsing.autolev._antlr',
-    'sympy.parsing.c',
-    'sympy.parsing.fortran',
-    'sympy.parsing.latex',
-    'sympy.parsing.latex._antlr',
-    'sympy.physics',
-    'sympy.physics.continuum_mechanics',
-    'sympy.physics.control',
-    'sympy.physics.hep',
-    'sympy.physics.mechanics',
-    'sympy.physics.optics',
-    'sympy.physics.quantum',
-    'sympy.physics.units',
-    'sympy.physics.units.definitions',
-    'sympy.physics.units.systems',
-    'sympy.physics.vector',
-    'sympy.plotting',
-    'sympy.plotting.intervalmath',
-    'sympy.plotting.pygletplot',
-    'sympy.polys',
-    'sympy.polys.agca',
-    'sympy.polys.benchmarks',
-    'sympy.polys.domains',
-    'sympy.polys.matrices',
-    'sympy.polys.numberfields',
-    'sympy.printing',
-    'sympy.printing.pretty',
-    'sympy.sandbox',
-    'sympy.series',
-    'sympy.series.benchmarks',
-    'sympy.sets',
-    'sympy.sets.handlers',
-    'sympy.simplify',
-    'sympy.solvers',
-    'sympy.solvers.benchmarks',
-    'sympy.solvers.diophantine',
-    'sympy.solvers.ode',
-    'sympy.stats',
-    'sympy.stats.sampling',
-    'sympy.strategies',
-    'sympy.strategies.branch',
-    'sympy.tensor',
-    'sympy.tensor.array',
-    'sympy.tensor.array.expressions',
-    'sympy.testing',
-    'sympy.unify',
-    'sympy.utilities',
-    'sympy.utilities._compilation',
-    'sympy.utilities.mathml',
-    'sympy.vector',
-]
-
-
-class test_sympy(Command):
-    """Runs all tests under the sympy/ folder
-    """
-
-    description = "run all tests and doctests; also see bin/test and bin/doctest"
-    user_options = []  # setuptools complains if this is not here.
-
-    def __init__(self, *args):
-        self.args = args[0]  # so we can pass it to other classes
-        Command.__init__(self, *args)
-
-    def initialize_options(self):  # setuptools wants this
-        pass
-
-    def finalize_options(self):    # this too
-        pass
-
-    def run(self):
-        from sympy.testing import runtests
-        runtests.run_all_tests()
-
-
-class antlr(Command):
-    """Generate code with antlr4"""
-    description = "generate parser code from antlr grammars"
-    user_options = []  # setuptools complains if this is not here.
-
-    def __init__(self, *args):
-        self.args = args[0]  # so we can pass it to other classes
-        Command.__init__(self, *args)
-
-    def initialize_options(self):  # setuptools wants this
-        pass
-
-    def finalize_options(self):    # this too
-        pass
-
-    def run(self):
-        from sympy.parsing.latex._build_latex_antlr import build_parser as build_latex_parser
-        if not build_latex_parser():
-            sys.exit(-1)
-
-        from sympy.parsing.autolev._build_autolev_antlr import build_parser as build_autolev_parser
-        if not build_autolev_parser():
-            sys.exit(-1)
-
-
-class sdist_sympy(sdist):
-    def run(self):
-        # Fetch git commit hash and write down to commit_hash.txt before
-        # shipped in tarball.
-        commit_hash = None
-        commit_hash_filepath = 'doc/commit_hash.txt'
-        try:
-            commit_hash = \
-                subprocess.check_output(['git', 'rev-parse', 'HEAD'])
-            commit_hash = commit_hash.decode('ascii')
-            commit_hash = commit_hash.rstrip()
-            print('Commit hash found : {}.'.format(commit_hash))
-            print('Writing it to {}.'.format(commit_hash_filepath))
-        except:
-            pass
-
-        if commit_hash:
-            with open(commit_hash_filepath, 'w') as f:
-                f.write(commit_hash)
-
-        super().run()
-
-        try:
-            os.remove(commit_hash_filepath)
-            print(
-                'Successfully removed temporary file {}.'
-                .format(commit_hash_filepath))
-        except OSError as e:
-            print("Error deleting %s - %s." % (e.filename, e.strerror))
-
-
-# Check that this list is uptodate against the result of the command:
-# python bin/generate_test_list.py
-tests = [
-    'sympy.algebras.tests',
-    'sympy.assumptions.tests',
-    'sympy.calculus.tests',
-    'sympy.categories.tests',
-    'sympy.codegen.tests',
-    'sympy.combinatorics.tests',
-    'sympy.concrete.tests',
-    'sympy.core.tests',
-    'sympy.crypto.tests',
-    'sympy.diffgeom.tests',
-    'sympy.discrete.tests',
-    'sympy.external.tests',
-    'sympy.functions.combinatorial.tests',
-    'sympy.functions.elementary.tests',
-    'sympy.functions.special.tests',
-    'sympy.geometry.tests',
-    'sympy.holonomic.tests',
-    'sympy.integrals.tests',
-    'sympy.interactive.tests',
-    'sympy.liealgebras.tests',
-    'sympy.logic.tests',
-    'sympy.matrices.expressions.tests',
-    'sympy.matrices.tests',
-    'sympy.multipledispatch.tests',
-    'sympy.ntheory.tests',
-    'sympy.parsing.tests',
-    'sympy.physics.continuum_mechanics.tests',
-    'sympy.physics.control.tests',
-    'sympy.physics.hep.tests',
-    'sympy.physics.mechanics.tests',
-    'sympy.physics.optics.tests',
-    'sympy.physics.quantum.tests',
-    'sympy.physics.tests',
-    'sympy.physics.units.tests',
-    'sympy.physics.vector.tests',
-    'sympy.plotting.intervalmath.tests',
-    'sympy.plotting.pygletplot.tests',
-    'sympy.plotting.tests',
-    'sympy.polys.agca.tests',
-    'sympy.polys.domains.tests',
-    'sympy.polys.matrices.tests',
-    'sympy.polys.numberfields.tests',
-    'sympy.polys.tests',
-    'sympy.printing.pretty.tests',
-    'sympy.printing.tests',
-    'sympy.sandbox.tests',
-    'sympy.series.tests',
-    'sympy.sets.tests',
-    'sympy.simplify.tests',
-    'sympy.solvers.diophantine.tests',
-    'sympy.solvers.ode.tests',
-    'sympy.solvers.tests',
-    'sympy.stats.sampling.tests',
-    'sympy.stats.tests',
-    'sympy.strategies.branch.tests',
-    'sympy.strategies.tests',
-    'sympy.tensor.array.expressions.tests',
-    'sympy.tensor.array.tests',
-    'sympy.tensor.tests',
-    'sympy.testing.tests',
-    'sympy.unify.tests',
-    'sympy.utilities._compilation.tests',
-    'sympy.utilities.tests',
-    'sympy.vector.tests',
-]
-
-
-with open(os.path.join(dir_setup, 'sympy', 'release.py')) as f:
-    # Defines __version__
-    exec(f.read())
-
-
-if __name__ == '__main__':
-    setup(name='sympy',
-          version=__version__,
-          description='Computer algebra system (CAS) in Python',
-          author='SymPy development team',
-          author_email='sympy@googlegroups.com',
-          license='BSD',
-          keywords="Math CAS",
-          url='https://sympy.org',
-          project_urls={
-              'Source': 'https://github.com/sympy/sympy',
-          },
-          py_modules=['isympy'],
-          packages=['sympy'] + modules + tests,
-          ext_modules=[],
-          package_data={
-              'sympy.utilities.mathml': ['data/*.xsl'],
-              'sympy.logic.benchmarks': ['input/*.cnf'],
-              'sympy.parsing.autolev': [
-                  '*.g4', 'test-examples/*.al', 'test-examples/*.py',
-                  'test-examples/pydy-example-repo/*.al',
-                  'test-examples/pydy-example-repo/*.py',
-                  'test-examples/README.txt',
-                  ],
-              'sympy.parsing.latex': ['*.txt', '*.g4'],
-              'sympy.plotting.tests': ['test_region_*.png'],
-              'sympy': ['py.typed']
-              },
-          data_files=[('share/man/man1', ['doc/man/isympy.1'])],
-          cmdclass={'test': test_sympy,
-                    'antlr': antlr,
-                    'sdist': sdist_sympy,
-                    },
-          python_requires='>=3.8',
-          classifiers=[
-            'License :: OSI Approved :: BSD License',
-            'Operating System :: OS Independent',
-            'Programming Language :: Python',
-            'Topic :: Scientific/Engineering',
-            'Topic :: Scientific/Engineering :: Mathematics',
-            'Topic :: Scientific/Engineering :: Physics',
-            'Programming Language :: Python :: 3',
-            'Programming Language :: Python :: 3.8',
-            'Programming Language :: Python :: 3.9',
-            'Programming Language :: Python :: 3.10',
-            'Programming Language :: Python :: 3.11',
-            'Programming Language :: Python :: 3 :: Only',
-            'Programming Language :: Python :: Implementation :: CPython',
-            'Programming Language :: Python :: Implementation :: PyPy',
-            ],
-          install_requires=[
-            'mpmath>=%s' % min_mpmath_version,
-            ],
-          **extra_kwargs
-          )
diff --git a/setupegg.py b/setupegg.py
deleted file mode 100644
index 3f51932564..0000000000
--- a/setupegg.py
+++ /dev/null
@@ -1,3 +0,0 @@
-import setuptools
-
-exec(open('setup.py').read())
diff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py
index bb7bdf32ba..e27c90d914 100644
--- a/sympy/combinatorics/homomorphisms.py
+++ b/sympy/combinatorics/homomorphisms.py
@@ -320,29 +320,28 @@ def _image(r):
             return identity
         else:
             w = identity
-            r_arr = r.array_form
             i = 0
-            j = 0
-            # i is the index for r and j is for
-            # r_arr. r_arr[j] is the tuple (sym, p)
-            # where sym is the generator symbol
-            # and p is the power to which it is
-            # raised while r[i] is a generator
-            # (not just its symbol) or the inverse of
-            # a generator - hence the need for
-            # both indices
             while i < len(r):
-                power = r_arr[j][1]
-                if isinstance(domain, PermutationGroup) and r[i] in gens:
-                    s = domain.generators[gens.index(r[i])]
+                if isinstance(domain, PermutationGroup):
+                    # Map from presentation generators to domain generators
+                    if r[i] in gens:
+                        # r[i] is a base generator
+                        gen_index = gens.index(r[i])
+                        s = domain.generators[gen_index]
+                    elif hasattr(r[i], '__pow__') and r[i]**-1 in gens:
+                        # r[i] is an inverted generator
+                        gen_index = gens.index(r[i]**-1)
+                        s = domain.generators[gen_index]**-1
+                    else:
+                        # Fallback for edge cases
+                        s = r[i]
                 else:
                     s = r[i]
                 if s in images:
-                    w = w*images[s]**power
-                elif s**-1 in images:
-                    w = w*images[s**-1]**power
-                i += abs(power)
-                j += 1
+                    w = w*images[s]
+                elif hasattr(s, '__pow__') and s**-1 in images:
+                    w = w*images[s**-1]**-1
+                i += 1
             return w
 
     for r in rels:
