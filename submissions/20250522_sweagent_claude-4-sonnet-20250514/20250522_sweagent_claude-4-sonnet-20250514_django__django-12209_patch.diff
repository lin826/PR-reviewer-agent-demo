diff --git a/django/db/models/base.py b/django/db/models/base.py
index e3b14a41a0..b5770dd2c5 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -398,6 +398,8 @@ class ModelState:
     # explicit (non-auto) PKs. This impacts validation only; it has no effect
     # on the actual save.
     adding = True
+    # If true, the primary key was explicitly set during initialization.
+    pk_set_explicitly = False
     fields_cache = ModelStateFieldsCacheDescriptor()
 
 
@@ -433,6 +435,9 @@ class Model(metaclass=ModelBase):
                 if val is _DEFERRED:
                     continue
                 _setattr(self, field.attname, val)
+                # Track if the primary key was explicitly set
+                if field.primary_key:
+                    self._state.pk_set_explicitly = True
         else:
             # Slower, kwargs-ready version.
             fields_iter = iter(opts.fields)
@@ -440,6 +445,9 @@ class Model(metaclass=ModelBase):
                 if val is _DEFERRED:
                     continue
                 _setattr(self, field.attname, val)
+                # Track if the primary key was explicitly set
+                if field.primary_key:
+                    self._state.pk_set_explicitly = True
                 kwargs.pop(field.name, None)
 
         # Now we're left with the unprocessed fields that *must* come from
@@ -465,6 +473,9 @@ class Model(metaclass=ModelBase):
                 else:
                     try:
                         val = kwargs.pop(field.attname)
+                        # Track if the primary key was explicitly set
+                        if field.primary_key:
+                            self._state.pk_set_explicitly = True
                     except KeyError:
                         # This is done with an exception rather than the
                         # default argument on pop because we don't want
@@ -494,6 +505,16 @@ class Model(metaclass=ModelBase):
                     if prop in property_names or opts.get_field(prop):
                         if kwargs[prop] is not _DEFERRED:
                             _setattr(self, prop, kwargs[prop])
+                            # Track if the primary key was explicitly set
+                            if prop == 'pk':
+                                self._state.pk_set_explicitly = True
+                            else:
+                                try:
+                                    field = opts.get_field(prop)
+                                    if field.primary_key:
+                                        self._state.pk_set_explicitly = True
+                                except (AttributeError, FieldDoesNotExist):
+                                    pass
                         del kwargs[prop]
                 except (AttributeError, FieldDoesNotExist):
                     pass
@@ -513,6 +534,7 @@ class Model(metaclass=ModelBase):
         new = cls(*values)
         new._state.adding = False
         new._state.db = db
+        new._state.pk_set_explicitly = False
         return new
 
     def __repr__(self):
@@ -847,12 +869,14 @@ class Model(metaclass=ModelBase):
         if not pk_set and (force_update or update_fields):
             raise ValueError("Cannot force an update in save() with no primary key.")
         updated = False
-        # Skip an UPDATE when adding an instance and primary key has a default.
+        # Skip an UPDATE when adding an instance and primary key has a default,
+        # but only if the primary key wasn't explicitly set.
         if (
             not force_insert and
             self._state.adding and
             self._meta.pk.default and
-            self._meta.pk.default is not NOT_PROVIDED
+            self._meta.pk.default is not NOT_PROVIDED and
+            not self._state.pk_set_explicitly
         ):
             force_insert = True
         # If possible, try an UPDATE. If that doesn't update anything, do an INSERT.
