diff --git a/setup.py b/setup.py
index a404f1fa5..2c6848797 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py
index 378174993..41327e929 100644
--- a/sphinx/util/inspect.py
+++ b/sphinx/util/inspect.py
@@ -606,6 +606,22 @@ def signature_from_str(signature: str) -> inspect.Signature:
     return signature_from_ast(function)
 
 
+def _unparse_default_value(node: ast.AST) -> str:
+    """Unparse a default value AST node, preserving parentheses for tuples."""
+    if isinstance(node, ast.Tuple):
+        if not node.elts:
+            # Empty tuple
+            return "()"
+        elif len(node.elts) == 1:
+            # Single element tuple - need trailing comma
+            return "(%s,)" % _unparse_default_value(node.elts[0])
+        else:
+            # Multi-element tuple
+            return "(%s)" % ", ".join(_unparse_default_value(e) for e in node.elts)
+    else:
+        return ast_unparse(node)
+
+
 def signature_from_ast(node: ast.FunctionDef) -> inspect.Signature:
     """Create a Signature object from AST *node*."""
     args = node.args
@@ -626,7 +642,7 @@ def signature_from_ast(node: ast.FunctionDef) -> inspect.Signature:
             if defaults[i] is Parameter.empty:
                 default = Parameter.empty
             else:
-                default = ast_unparse(defaults[i])
+                default = _unparse_default_value(defaults[i])
 
             annotation = ast_unparse(arg.annotation) or Parameter.empty
             params.append(Parameter(arg.arg, Parameter.POSITIONAL_ONLY,
@@ -636,7 +652,7 @@ def signature_from_ast(node: ast.FunctionDef) -> inspect.Signature:
         if defaults[i + posonlyargs] is Parameter.empty:
             default = Parameter.empty
         else:
-            default = ast_unparse(defaults[i + posonlyargs])
+            default = _unparse_default_value(defaults[i + posonlyargs])
 
         annotation = ast_unparse(arg.annotation) or Parameter.empty
         params.append(Parameter(arg.arg, Parameter.POSITIONAL_OR_KEYWORD,
@@ -648,7 +664,10 @@ def signature_from_ast(node: ast.FunctionDef) -> inspect.Signature:
                                 annotation=annotation))
 
     for i, arg in enumerate(args.kwonlyargs):
-        default = ast_unparse(args.kw_defaults[i]) or Parameter.empty
+        if args.kw_defaults[i] is None:
+            default = Parameter.empty
+        else:
+            default = _unparse_default_value(args.kw_defaults[i])
         annotation = ast_unparse(arg.annotation) or Parameter.empty
         params.append(Parameter(arg.arg, Parameter.KEYWORD_ONLY, default=default,
                                 annotation=annotation))
diff --git a/tox.ini b/tox.ini
index a61299979..e2baccc07 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
     PYTEST_ADDOPTS = --color yes
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
