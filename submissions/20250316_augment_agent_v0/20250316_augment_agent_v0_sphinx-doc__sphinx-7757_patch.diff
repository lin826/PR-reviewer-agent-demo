diff --git b/sphinx/util/inspect.py a/sphinx/util/inspect.py
index 9cc194e94..15f0d66e2 100644
--- b/sphinx/util/inspect.py
+++ a/sphinx/util/inspect.py
@@ -518,38 +518,19 @@ def signature_from_str(signature: str) -> inspect.Signature:
 
     # parameters
     args = definition.args
     params = []
 
-    # Calculate total number of positional arguments and defaults
-    n_posonly_args = len(args.posonlyargs) if hasattr(args, "posonlyargs") else 0
-    n_pos_args = len(args.args)
-    n_total_args = n_posonly_args + n_pos_args
-    n_defaults = len(args.defaults)
-
     if hasattr(args, "posonlyargs"):
-        for i, arg in enumerate(args.posonlyargs):  # type: ignore
-            # Calculate if this argument has a default value
-            # Default values are assigned from right to left
-            pos_from_right = n_total_args - i
-            if pos_from_right <= n_defaults:
-                default_idx = n_defaults - pos_from_right
-                default = ast_unparse(args.defaults[default_idx])
-            else:
-                default = Parameter.empty
-
+        for arg in args.posonlyargs:  # type: ignore
             annotation = ast_unparse(arg.annotation) or Parameter.empty
             params.append(Parameter(arg.arg, Parameter.POSITIONAL_ONLY,
-                                    default=default, annotation=annotation))
+                                    annotation=annotation))
 
     for i, arg in enumerate(args.args):
-        # Calculate if this argument has a default value
-        # Default values are assigned from right to left
-        pos_from_right = n_pos_args - i
-        if pos_from_right <= n_defaults:
-            default_idx = n_defaults - pos_from_right
-            default = ast_unparse(args.defaults[default_idx])
+        if len(args.args) - i <= len(args.defaults):
+            default = ast_unparse(args.defaults[-len(args.args) + i])
         else:
             default = Parameter.empty
 
         annotation = ast_unparse(arg.annotation) or Parameter.empty
         params.append(Parameter(arg.arg, Parameter.POSITIONAL_OR_KEYWORD,
diff --git b/tests/test_util_inspect.py a/tests/test_util_inspect.py
index 229941997..f16feb698 100644
--- b/tests/test_util_inspect.py
+++ a/tests/test_util_inspect.py
@@ -337,32 +337,10 @@ def test_signature_from_str_kwonly_args():
 def test_signature_from_str_positionaly_only_args():
     sig = inspect.signature_from_str('(a, /, b)')
     assert list(sig.parameters.keys()) == ['a', 'b']
     assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY
     assert sig.parameters['b'].kind == Parameter.POSITIONAL_OR_KEYWORD
-    
-    # Test with default values for positional-only arguments
-    sig = inspect.signature_from_str('(a, b=0, /, c=1)')
-    assert list(sig.parameters.keys()) == ['a', 'b', 'c']
-    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY
-    assert sig.parameters['a'].default == Parameter.empty
-    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY
-    assert sig.parameters['b'].default == '0'
-    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD
-    assert sig.parameters['c'].default == '1'
-    
-    # Test with multiple default values for positional-only arguments
-    sig = inspect.signature_from_str('(a=1, b=2, /, c=3, d=4)')
-    assert list(sig.parameters.keys()) == ['a', 'b', 'c', 'd']
-    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY
-    assert sig.parameters['a'].default == '1'
-    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY
-    assert sig.parameters['b'].default == '2'
-    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD
-    assert sig.parameters['c'].default == '3'
-    assert sig.parameters['d'].kind == Parameter.POSITIONAL_OR_KEYWORD
-    assert sig.parameters['d'].default == '4'
 
 
 def test_signature_from_str_invalid():
     with pytest.raises(SyntaxError):
         inspect.signature_from_str('')
