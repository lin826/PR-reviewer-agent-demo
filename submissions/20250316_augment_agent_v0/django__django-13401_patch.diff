diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 28374272f4..b5130328d5 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -514,21 +514,28 @@ class Field(RegisterLookupMixin):
         return self.__class__(*args, **kwargs)
 
     def __eq__(self, other):
         # Needed for @total_ordering
         if isinstance(other, Field):
+            if hasattr(self, 'model') and hasattr(other, 'model') and self.model is not other.model:
+                return False
             return self.creation_counter == other.creation_counter
         return NotImplemented
 
     def __lt__(self, other):
         # This is needed because bisect does not take a comparison function.
         if isinstance(other, Field):
-            return self.creation_counter < other.creation_counter
+            if self.creation_counter != other.creation_counter:
+                return self.creation_counter < other.creation_counter
+            if hasattr(self, 'model') and hasattr(other, 'model'):
+                return id(self.model) < id(other.model)
+            return False
         return NotImplemented
 
     def __hash__(self):
-        return hash(self.creation_counter)
+        model_id = id(self.model) if hasattr(self, 'model') else 0
+        return hash((self.creation_counter, model_id))
 
     def __deepcopy__(self, memodict):
         # We don't have to deepcopy very much here, since most things are not
         # intended to be altered after initial creation.
         obj = copy.copy(self)
