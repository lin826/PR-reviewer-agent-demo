diff --git a/sympy/parsing/latex/_parse_latex_antlr.py b/sympy/parsing/latex/_parse_latex_antlr.py
index 2e4a45ad20..d135c4a5d6 100644
--- a/sympy/parsing/latex/_parse_latex_antlr.py
+++ b/sympy/parsing/latex/_parse_latex_antlr.py
@@ -138,10 +138,14 @@ def convert_mp(mp):
         rh = convert_mp(mp_right)
         return sympy.Mul(lh, rh, evaluate=False)
     elif mp.DIV() or mp.CMD_DIV() or mp.COLON():
         lh = convert_mp(mp_left)
         rh = convert_mp(mp_right)
+        # Create a division by multiplying by the inverse
+        # We need to ensure that the right-hand side is properly enclosed in parentheses
+        # when it's a complex expression (like a fraction)
+        # Use sympy.Mul with evaluate=False to ensure proper parenthesization
         return sympy.Mul(lh, sympy.Pow(rh, -1, evaluate=False), evaluate=False)
     else:
         if hasattr(mp, 'unary'):
             return convert_unary(mp.unary())
         else:
@@ -380,15 +384,16 @@ def convert_frac(frac):
         if expr_top:
             return sympy.Derivative(expr_top, wrt)
 
     expr_top = convert_expr(frac.upper)
     expr_bot = convert_expr(frac.lower)
-    inverse_denom = sympy.Pow(expr_bot, -1, evaluate=False)
-    if expr_top == 1:
-        return inverse_denom
-    else:
-        return sympy.Mul(expr_top, inverse_denom, evaluate=False)
+    
+    # Create a division by multiplying by the inverse
+    # We need to ensure that the right-hand side is properly enclosed in parentheses
+    # when it's a complex expression (like a fraction)
+    # Use sympy.Mul with evaluate=False to ensure proper parenthesization
+    return sympy.Mul(expr_top, sympy.Pow(expr_bot, -1, evaluate=False), evaluate=False)
 
 def convert_binom(binom):
     expr_n = convert_expr(binom.n)
     expr_k = convert_expr(binom.k)
     return sympy.binomial(expr_n, expr_k, evaluate=False)
