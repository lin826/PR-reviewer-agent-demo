diff --git a/django/db/models/base.py b/django/db/models/base.py
index 844c01e95e..f198120b51 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -567,10 +567,20 @@ class Model(metaclass=ModelBase):
     def _get_pk_val(self, meta=None):
         meta = meta or self._meta
         return getattr(self, meta.pk.attname)
 
     def _set_pk_val(self, value):
+        if value is None:
+            # When setting the primary key to None, we need to also set the parent link field to None
+            # This is important for multi-table inheritance where the parent link field is also a primary key
+            for parent, parent_link in self._meta.parents.items():
+                if parent_link and parent_link.primary_key:
+                    setattr(self, parent_link.attname, value)
+            
+            # Also need to set the _state.adding flag to True so that Django knows to do an INSERT
+            self._state.adding = True
+        
         return setattr(self, self._meta.pk.attname, value)
 
     pk = property(_get_pk_val, _set_pk_val)
 
     def get_deferred_fields(self):
@@ -668,10 +678,14 @@ class Model(metaclass=ModelBase):
 
         The 'force_insert' and 'force_update' parameters can be used to insist
         that the "save" must be an SQL insert or update (or equivalent for
         non-SQL backends), respectively. Normally, they should not be set.
         """
+        # If the primary key is None and _state.adding is True, force an insert
+        if self.pk is None and self._state.adding:
+            force_insert = True
+            
         # Ensure that a model instance without a PK hasn't been assigned to
         # a ForeignKey or OneToOneField on this model. If the field is
         # nullable, allowing the save() would result in silent data loss.
         for field in self._meta.concrete_fields:
             # If the related field isn't cached, then an instance hasn't
@@ -805,14 +819,18 @@ class Model(metaclass=ModelBase):
         for parent, field in meta.parents.items():
             # Make sure the link fields are synced between parent and self.
             if (field and getattr(self, parent._meta.pk.attname) is None and
                     getattr(self, field.attname) is not None):
                 setattr(self, parent._meta.pk.attname, getattr(self, field.attname))
+            
+            # If we're forcing an insert (self._state.adding is True), also force insert for parent
+            force_insert = self._state.adding
+            
             parent_inserted = self._save_parents(cls=parent, using=using, update_fields=update_fields)
             updated = self._save_table(
                 cls=parent, using=using, update_fields=update_fields,
-                force_insert=parent_inserted,
+                force_insert=force_insert or parent_inserted,
             )
             if not updated:
                 inserted = True
             # Set the parent's PK value to self.
             if field:
