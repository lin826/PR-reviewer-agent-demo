diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index b6af5f5491..5afc29caa7 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -222,11 +222,16 @@ def get_child_arguments():
     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]
     # __spec__ is set when the server was started with the `-m` option,
     # see https://docs.python.org/3/reference/import.html#main-spec
     # __spec__ may not exist, e.g. when running in a Conda env.
     if getattr(__main__, '__spec__', None) is not None and __main__.__spec__.parent:
-        args += ['-m', __main__.__spec__.parent]
+        if __main__.__spec__.name.endswith('.__main__'):
+            # Running a package's __main__.py, use parent
+            args += ['-m', __main__.__spec__.parent]
+        else:
+            # Running a module directly, use name
+            args += ['-m', __main__.__spec__.name]
         args += sys.argv[1:]
     elif not py_script.exists():
         # sys.argv[0] may not exist for several reasons on Windows.
         # It may exist with a .exe extension or have a -script.py suffix.
         exe_entrypoint = py_script.with_suffix('.exe')
diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py
index 7b91686bf5..47d57730bb 100644
--- a/tests/utils_tests/test_autoreload.py
+++ b/tests/utils_tests/test_autoreload.py
@@ -179,10 +179,25 @@ class TestChildArguments(SimpleTestCase):
     def test_run_as_non_django_module(self):
         self.assertEqual(
             autoreload.get_child_arguments(),
             [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],
         )
+        
+    @mock.patch.dict(sys.modules, {'__main__': types.ModuleType('__main__')})
+    @mock.patch('sys.argv', ['submodule.py', 'runserver'])
+    @mock.patch('sys.warnoptions', [])
+    def test_run_as_submodule(self):
+        # Setup a fake __main__ module as if it was run with python -m
+        main_module = sys.modules['__main__']
+        main_module.__spec__ = types.SimpleNamespace(
+            name='utils_tests.test_module.submodule',
+            parent='utils_tests.test_module',
+        )
+        self.assertEqual(
+            autoreload.get_child_arguments(),
+            [sys.executable, '-m', 'utils_tests.test_module.submodule', 'runserver'],
+        )
 
     @mock.patch('sys.argv', [__file__, 'runserver'])
     @mock.patch('sys.warnoptions', ['error'])
     def test_warnoptions(self):
         self.assertEqual(
