diff --git b/sphinx/ext/autodoc/__init__.py a/sphinx/ext/autodoc/__init__.py
index 0ecea0d06..ddfd2b365 100644
--- b/sphinx/ext/autodoc/__init__.py
+++ a/sphinx/ext/autodoc/__init__.py
@@ -2360,40 +2360,16 @@ class AttributeDocumenter(GenericAliasMixin, NewTypeMixin, SlotsMixin,  # type:
 
     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:
         if self.object is INSTANCEATTR:
             return []
 
-        # First try with autodoc_inherit_docstrings enabled
-        if self.options.inherited_members and self.config.autodoc_inherit_docstrings:
-            docstrings = super().get_doc(encoding, ignore)
-            if docstrings:
-                return docstrings
-
         try:
             # Disable `autodoc_inherit_docstring` temporarily to avoid to obtain
             # a docstring from the value which descriptor returns unexpectedly.
             # ref: https://github.com/sphinx-doc/sphinx/issues/7805
             orig = self.config.autodoc_inherit_docstrings
             self.config.autodoc_inherit_docstrings = False  # type: ignore
-            
-            # For inherited attributes, check for docstrings in the base class's namespace
-            if self.options.inherited_members and self.parent:
-                for cls in inspect.getmro(self.parent):
-                    try:
-                        module = safe_getattr(cls, '__module__')
-                        qualname = safe_getattr(cls, '__qualname__')
-                        
-                        analyzer = ModuleAnalyzer.for_module(module)
-                        analyzer.analyze()
-                        if qualname and self.objpath:
-                            key = (qualname, self.objpath[-1])
-                            if key in analyzer.attr_docs:
-                                tab_width = self.directive.state.document.settings.tab_width
-                                return [prepare_docstring('\n'.join(analyzer.attr_docs[key]), ignore, tab_width)]
-                    except (AttributeError, PycodeError):
-                        pass
-            
             return super().get_doc(encoding, ignore)
         finally:
             self.config.autodoc_inherit_docstrings = orig  # type: ignore
 
     def add_content(self, more_content: Optional[StringList], no_docstring: bool = False
diff --git b/sphinx/ext/autodoc/importer.py a/sphinx/ext/autodoc/importer.py
index 1577741e1..d6e73d36a 100644
--- b/sphinx/ext/autodoc/importer.py
+++ a/sphinx/ext/autodoc/importer.py
@@ -12,11 +12,11 @@ import importlib
 import traceback
 import warnings
 from typing import Any, Callable, Dict, List, Mapping, NamedTuple, Optional, Tuple
 
 from sphinx.deprecation import RemovedInSphinx40Warning, deprecated_alias
-from sphinx.pycode import ModuleAnalyzer, PycodeError
+from sphinx.pycode import ModuleAnalyzer
 from sphinx.util import logging
 from sphinx.util.inspect import (getannotations, getmro, getslots, isclass, isenumclass,
                                  safe_getattr)
 
 if False:
