diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py
index 24394f869..f488ffb3b 100644
--- a/sklearn/model_selection/_split.py
+++ b/sklearn/model_selection/_split.py
@@ -618,11 +618,11 @@ class StratifiedKFold(_BaseKFold):
             warnings.warn(NSPLIT_WARNING, FutureWarning)
             n_splits = 3
         super().__init__(n_splits, shuffle, random_state)
 
     def _make_test_folds(self, X, y=None):
-        rng = self.random_state
+        rng = check_random_state(self.random_state)
         y = np.asarray(y)
         type_of_target_y = type_of_target(y)
         allowed_target_types = ('binary', 'multiclass')
         if type_of_target_y not in allowed_target_types:
             raise ValueError(
@@ -650,26 +650,36 @@ class StratifiedKFold(_BaseKFold):
         # classes
         # NOTE: Passing the data corresponding to ith class say X[y==class_i]
         # will break when the data is not 100% stratifiable for all classes.
         # So we pass np.zeroes(max(c, n_splits)) as data to the KFold
         per_cls_cvs = [
-            KFold(self.n_splits, shuffle=self.shuffle,
+            KFold(self.n_splits, shuffle=False,
                   random_state=rng).split(np.zeros(max(count, self.n_splits)))
             for count in y_counts]
 
         test_folds = np.zeros(n_samples, dtype=np.int)
+        
+        # Get the indices of samples in each class and shuffle them if requested
+        indices_per_class = {}
+        for cls in unique_y:
+            cls_indices = np.where(y == cls)[0]
+            if self.shuffle:
+                rng.shuffle(cls_indices)
+            indices_per_class[cls] = cls_indices
+            
         for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):
             for cls, (_, test_split) in zip(unique_y, per_cls_splits):
-                cls_test_folds = test_folds[y == cls]
+                cls_indices = indices_per_class[cls]
+                cls_test_folds = test_folds[cls_indices]
                 # the test split can be too big because we used
                 # KFold(...).split(X[:max(c, n_splits)]) when data is not 100%
                 # stratifiable for all the classes
                 # (we use a warning instead of raising an exception)
                 # If this is the case, let's trim it:
                 test_split = test_split[test_split < len(cls_test_folds)]
                 cls_test_folds[test_split] = test_fold_indices
-                test_folds[y == cls] = cls_test_folds
+                test_folds[cls_indices] = cls_test_folds
 
         return test_folds
 
     def _iter_test_masks(self, X, y=None, groups=None):
         test_folds = self._make_test_folds(X, y)
