diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py
index 50f85e0621..f6f128d5ab 100644
--- a/django/db/backends/mysql/operations.py
+++ b/django/db/backends/mysql/operations.py
@@ -68,11 +68,12 @@ class DatabaseOperations(BaseDatabaseOperations):
         else:
             return "DATE(%s)" % (field_name)
 
     def _convert_field_to_tz(self, field_name, tzname):
         if settings.USE_TZ:
-            field_name = "CONVERT_TZ(%s, 'UTC', '%s')" % (field_name, tzname)
+            if self.connection.timezone_name != tzname:
+                field_name = "CONVERT_TZ(%s, '%s', '%s')" % (field_name, self.connection.timezone_name, tzname)
         return field_name
 
     def datetime_cast_date_sql(self, field_name, tzname):
         field_name = self._convert_field_to_tz(field_name, tzname)
         return "DATE(%s)" % field_name
diff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py
index c1afb2ed5e..9c07a2f375 100644
--- a/django/db/backends/oracle/operations.py
+++ b/django/db/backends/oracle/operations.py
@@ -97,13 +97,17 @@ END;
     def _convert_field_to_tz(self, field_name, tzname):
         if not settings.USE_TZ:
             return field_name
         if not self._tzname_re.match(tzname):
             raise ValueError("Invalid time zone name: %s" % tzname)
-        # Convert from UTC to local time, returning TIMESTAMP WITH TIME ZONE
-        # and cast it back to TIMESTAMP to strip the TIME ZONE details.
-        return "CAST((FROM_TZ(%s, '0:00') AT TIME ZONE '%s') AS TIMESTAMP)" % (field_name, tzname)
+        # If the source and target timezones are the same, no conversion is needed
+        if self.connection.timezone_name == tzname:
+            return field_name
+        # Convert from the database timezone to the target timezone,
+        # returning TIMESTAMP WITH TIME ZONE and cast it back to TIMESTAMP
+        # to strip the TIME ZONE details.
+        return "CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)" % (field_name, self.connection.timezone_name, tzname)
 
     def datetime_cast_date_sql(self, field_name, tzname):
         field_name = self._convert_field_to_tz(field_name, tzname)
         return 'TRUNC(%s)' % field_name
 
diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index 6a19236c48..30bf2b9e42 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -13,12 +13,13 @@ import warnings
 from itertools import chain
 from sqlite3 import dbapi2 as Database
 
 import pytz
 
+from django.conf import settings
 from django.core.exceptions import ImproperlyConfigured
-from django.db import utils
+from django.db import connections, utils
 from django.db.backends import utils as backend_utils
 from django.db.backends.base.base import BaseDatabaseWrapper
 from django.utils import timezone
 from django.utils.dateparse import parse_datetime, parse_time
 from django.utils.duration import duration_microseconds
@@ -403,11 +404,26 @@ def _sqlite_datetime_parse(dt, tzname=None):
         return None
     try:
         dt = backend_utils.typecast_timestamp(dt)
     except (TypeError, ValueError):
         return None
-    if tzname is not None:
+    if tzname is not None and settings.USE_TZ:
+        # Make the datetime aware using the database's timezone
+        # Use UTC as fallback if no TIME_ZONE is specified
+        db_timezone = None
+        if hasattr(connections, '_connections') and connections._connections:
+            # Use the default connection's timezone if available
+            connection = connections['default']
+            db_timezone = connection.timezone
+        
+        if db_timezone is not None:
+            dt = timezone.make_aware(dt, db_timezone)
+        else:
+            # Fallback to UTC
+            dt = timezone.make_aware(dt, timezone.utc)
+            
+        # Convert to the target timezone
         dt = timezone.localtime(dt, pytz.timezone(tzname))
     return dt
 
 
 def _sqlite_date_trunc(lookup_type, dt):
