diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 90d90119d0..2d967ded73 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -21,11 +21,11 @@ class SQLiteNumericMixin:
     numeric to be properly filtered.
     """
     def as_sqlite(self, compiler, connection, **extra_context):
         sql, params = self.as_sql(compiler, connection, **extra_context)
         try:
-            if self.output_field.get_internal_type() == 'DecimalField':
+            if self.output_field.get_internal_type() == 'DecimalField' and not getattr(self, 'window_compatible', False):
                 sql = 'CAST(%s AS NUMERIC)' % sql
         except FieldError:
             pass
         return sql, params
 
@@ -1295,10 +1295,21 @@ class Window(Expression):
     def get_source_expressions(self):
         return [self.source_expression, self.partition_by, self.order_by, self.frame]
 
     def set_source_expressions(self, exprs):
         self.source_expression, self.partition_by, self.order_by, self.frame = exprs
+        
+    def as_sqlite(self, compiler, connection, template=None):
+        sql, params = self.as_sql(compiler, connection, template)
+        
+        # Check if the source expression has a DecimalField output
+        if hasattr(self.source_expression, 'output_field') and \
+           self.source_expression.output_field.get_internal_type() == 'DecimalField':
+            # Apply CAST to the entire window expression
+            sql = 'CAST(%s AS NUMERIC)' % sql
+        
+        return sql, params
 
     def as_sql(self, compiler, connection, template=None):
         connection.ops.check_expression_support(self)
         if not connection.features.supports_over_clause:
             raise NotSupportedError('This backend does not support window expressions.')
