diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 35f3c5e1ea..31fa5da6c9 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1705,10 +1705,38 @@ class Query(BaseExpression):
         if isinstance(filter_rhs, F):
             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
         # Generate the inner query.
         query = Query(self.model)
         query._filtered_relations = self._filtered_relations
+        
+        # Fix for OuterRef in exclude() or ~Q()
+        # When OuterRef is used in a negated context (exclude or ~Q), it's not correctly
+        # maintaining the reference to the outer query model. Instead, it's using the
+        # inner query model. This is because the OuterRef is resolved in the inner query,
+        # not the outer query.
+        #
+        # To fix this, we need to check if the filter_rhs is an OuterRef or contains
+        # an OuterRef. If so, we extract the field name from the OuterRef, resolve it
+        # in the outer query, and create a new filter expression that uses the field directly.
+        if isinstance(filter_rhs, OuterRef) or (hasattr(filter_rhs, 'flatten') and 
+                                               any(isinstance(expr, OuterRef) for expr in filter_rhs.flatten())):
+            # Get the field name from the OuterRef
+            if isinstance(filter_rhs, OuterRef):
+                field_name = filter_rhs.name
+            else:
+                # Find the OuterRef in the expression
+                for expr in filter_rhs.flatten():
+                    if isinstance(expr, OuterRef):
+                        field_name = expr.name
+                        break
+            
+            # Get the field from the outer query
+            field = self.resolve_ref(field_name)
+            
+            # Create a new filter expression that uses the field directly
+            filter_expr = (filter_lhs, field)
+        
         query.add_filter(filter_expr)
         query.clear_ordering(True)
         # Try to have as simple as possible subquery -> trim leading joins from
         # the subquery.
         trimmed_prefix, contains_louter = query.trim_start(names_with_path)
