diff --git a/sympy/printing/python.py b/sympy/printing/python.py
index dc6d8ffe59..42821a1845 100644
--- a/sympy/printing/python.py
+++ b/sympy/printing/python.py
@@ -47,37 +47,56 @@ def _print_module(self, expr):
 
 def python(expr, **settings):
     """Return Python interpretation of passed expression
     (can be passed to the exec() function without any modifications)"""
 
+    # First, collect all symbols and functions in the expression
+    from sympy import preorder_traversal, Symbol, Function
+    symbols_in_expr = set()
+    functions_in_expr = set()
+    
+    for node in preorder_traversal(expr):
+        if isinstance(node, Symbol):
+            symbols_in_expr.add(node.name)
+        elif isinstance(node, type) and issubclass(node, Function):
+            functions_in_expr.add(node.__name__)
+        elif hasattr(node, 'func') and not hasattr(node, 'is_Function'):
+            if hasattr(node.func, '__name__'):
+                functions_in_expr.add(node.func.__name__)
+
+    # Now create the printer and print the expression
     printer = PythonPrinter(settings)
     exprp = printer.doprint(expr)
 
+    # Combine symbols from the printer and from our traversal
+    all_symbols = set(printer.symbols) | symbols_in_expr
+    all_functions = set(printer.functions) | functions_in_expr
+
     result = ''
     # Returning found symbols and functions
     renamings = {}
-    for symbolname in printer.symbols:
+    for symbolname in all_symbols:
         newsymbolname = symbolname
         # Escape symbol names that are reserved python keywords
         if kw.iskeyword(newsymbolname):
             while True:
                 newsymbolname += "_"
-                if (newsymbolname not in printer.symbols and
-                        newsymbolname not in printer.functions):
+                if (newsymbolname not in all_symbols and
+                        newsymbolname not in all_functions):
                     renamings[sympy.Symbol(
                         symbolname)] = sympy.Symbol(newsymbolname)
                     break
         result += newsymbolname + ' = Symbol(\'' + symbolname + '\')\n'
 
-    for functionname in printer.functions:
+    for functionname in all_functions:
         newfunctionname = functionname
         # Escape function names that are reserved python keywords
         if kw.iskeyword(newfunctionname):
             while True:
                 newfunctionname += "_"
-                if (newfunctionname not in printer.symbols and
-                        newfunctionname not in printer.functions):
+                if (newfunctionname not in all_symbols and
+                        newfunctionname not in all_functions):
                     renamings[sympy.Function(
                         functionname)] = sympy.Function(newfunctionname)
                     break
         result += newfunctionname + ' = Function(\'' + functionname + '\')\n'
 
diff --git a/sympy/printing/str.py b/sympy/printing/str.py
index cc1d19fcce..24961d2a62 100644
--- a/sympy/printing/str.py
+++ b/sympy/printing/str.py
@@ -214,13 +214,13 @@ def _print_LatticeOp(self, expr):
         return expr.func.__name__ + "(%s)" % ", ".join(self._print(arg) for arg in args)
 
     def _print_Limit(self, expr):
         e, z, z0, dir = expr.args
         if str(dir) == "+":
-            return "Limit(%s, %s, %s)" % (e, z, z0)
+            return "Limit(%s, %s, %s)" % (self._print(e), self._print(z), self._print(z0))
         else:
-            return "Limit(%s, %s, %s, dir='%s')" % (e, z, z0, dir)
+            return "Limit(%s, %s, %s, dir='%s')" % (self._print(e), self._print(z), self._print(z0), self._print(dir))
 
     def _print_list(self, expr):
         return "[%s]" % self.stringify(expr, ", ")
 
     def _print_MatrixBase(self, expr):
@@ -628,11 +628,11 @@ def _print_Relational(self, expr):
             "/=": "DivAugmentedAssignment",
             "%=": "ModAugmentedAssignment",
         }
 
         if expr.rel_op in charmap:
-            return '%s(%s, %s)' % (charmap[expr.rel_op], expr.lhs, expr.rhs)
+            return '%s(%s, %s)' % (charmap[expr.rel_op], self._print(expr.lhs), self._print(expr.rhs))
 
         return '%s %s %s' % (self.parenthesize(expr.lhs, precedence(expr)),
                            self._relationals.get(expr.rel_op) or expr.rel_op,
                            self.parenthesize(expr.rhs, precedence(expr)))
 
