diff --git b/sphinx/builders/html/transforms.py a/sphinx/builders/html/transforms.py
index 726e04725..c91da57e9 100644
--- b/sphinx/builders/html/transforms.py
+++ a/sphinx/builders/html/transforms.py
@@ -40,42 +40,25 @@ class KeyboardTransform(SphinxPostTransform):
     pattern = re.compile(r'(-|\+|\^|\s+)')
 
     def run(self, **kwargs: Any) -> None:
         matcher = NodeMatcher(nodes.literal, classes=["kbd"])
         for node in self.document.traverse(matcher):  # type: nodes.literal
-            text = node[-1].astext()
-            
-            # Special case for single-character separators
-            if text in ('-', '+', '^'):
-                continue
-                
-            parts = self.pattern.split(text)
+            parts = self.pattern.split(node[-1].astext())
             if len(parts) == 1:
                 continue
 
             node.pop()
-            # Keep track of the current position
-            i = 0
-            while i < len(parts):
-                key = parts[i]
-                i += 1
-                
-                if key:  # Only create kbd element if key is not empty
-                    node += nodes.literal('', key, classes=["kbd"])
-                
-                if i < len(parts):
-                    sep = parts[i]
-                    i += 1
-                    
-                    # Check if this is a separator followed by an empty string at the end
-                    if i == len(parts) - 1 and not parts[i]:
-                        # This is a separator at the end, treat it as a keystroke
-                        node += nodes.literal('', sep, classes=["kbd"])
-                        i += 1
-                    else:
-                        # This is a separator between keystrokes
-                        node += nodes.Text(sep)
+            while parts:
+                key = parts.pop(0)
+                node += nodes.literal('', key, classes=["kbd"])
+
+                try:
+                    # key separator (ex. -, +, ^)
+                    sep = parts.pop(0)
+                    node += nodes.Text(sep)
+                except IndexError:
+                    pass
 
 
 def setup(app: Sphinx) -> Dict[str, Any]:
     app.add_post_transform(KeyboardTransform)
 
