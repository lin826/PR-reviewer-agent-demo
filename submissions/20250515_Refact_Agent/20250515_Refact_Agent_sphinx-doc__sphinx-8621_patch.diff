diff --git a/sphinx/builders/html/transforms.py b/sphinx/builders/html/transforms.py
index c91da57e9..2a76cfd87 100644
--- a/sphinx/builders/html/transforms.py
+++ b/sphinx/builders/html/transforms.py
@@ -42,21 +42,40 @@ class KeyboardTransform(SphinxPostTransform):
     def run(self, **kwargs: Any) -> None:
         matcher = NodeMatcher(nodes.literal, classes=["kbd"])
         for node in self.document.traverse(matcher):  # type: nodes.literal
-            parts = self.pattern.split(node[-1].astext())
+            text = node[-1].astext()
+            
+            # If the whole text is a single separator key ("-", "+", "^")
+            # or only whitespace, do **not** split â€“ it is already one key.
+            if text in {'-', '+', '^'} or text.isspace():
+                continue
+                
+            parts = self.pattern.split(text)
+            # Split returns ['', sep, ''] for the cases above; after the guard
+            # above, a length-1 result really means "nothing to do".
             if len(parts) == 1:
                 continue
 
             node.pop()
             while parts:
                 key = parts.pop(0)
-                node += nodes.literal('', key, classes=["kbd"])
-
-                try:
-                    # key separator (ex. -, +, ^)
-                    sep = parts.pop(0)
-                    node += nodes.Text(sep)
-                except IndexError:
-                    pass
+                if key:  # skip empty strings
+                    node += nodes.literal('', key, classes=["kbd"])
+
+                    try:
+                        # key separator (ex. -, +, ^)
+                        sep = parts.pop(0)
+                        node += nodes.Text(sep)
+                    except IndexError:
+                        pass
+                else:
+                    # Handle case where we have an empty string followed by a separator
+                    # This happens in cases like "Alt+-" -> ['Alt', '+', '', '-', '']
+                    try:
+                        if parts and parts[0] in {'-', '+', '^'} or (parts[0].isspace() if parts[0] else False):
+                            sep = parts.pop(0)
+                            node += nodes.literal('', sep, classes=["kbd"])
+                    except IndexError:
+                        pass
 
 
 def setup(app: Sphinx) -> Dict[str, Any]:
