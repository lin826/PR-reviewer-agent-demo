diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py
index 494890cc23..eeccd88b98 100644
--- a/django/contrib/staticfiles/storage.py
+++ b/django/contrib/staticfiles/storage.py
@@ -220,6 +220,8 @@ class HashedFilesMixin:
 
         # where to store the new paths
         hashed_files = {}
+        # track which files have been yielded already
+        yielded = set()
 
         # build a list of adjustable files
         adjustable_paths = [
@@ -229,6 +231,7 @@ class HashedFilesMixin:
         # Do a single pass first. Post-process all files once, then repeat for
         # adjustable files.
         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):
+            yielded.add(name)
             yield name, hashed_name, processed
 
         paths = {path: paths[path] for path in adjustable_paths}
@@ -236,7 +239,15 @@ class HashedFilesMixin:
         for i in range(self.max_post_process_passes):
             substitutions = False
             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
-                yield name, hashed_name, processed
+                # Yield each source file only the *first* time it's processed.
+                # Re-processing the same file in a later pass (to adjust nested
+                # references) shouldn't be reported again because it causes
+                # duplicate work in callers which assume a single yield per
+                # file (collectstatic counters, WhiteNoise compression, S3
+                # uploads, etc.). See ticket #28604.
+                if name not in yielded:
+                    yielded.add(name)
+                    yield name, hashed_name, processed
                 substitutions = substitutions or subst
 
             if not substitutions:
