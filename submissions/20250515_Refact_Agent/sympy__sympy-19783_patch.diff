diff --git a/sympy/physics/quantum/dagger.py b/sympy/physics/quantum/dagger.py
index 17da3cfd2c..953dd8e626 100644
--- a/sympy/physics/quantum/dagger.py
+++ b/sympy/physics/quantum/dagger.py
@@ -84,6 +84,22 @@ def __new__(cls, arg):
         if obj is not None:
             return obj
         return Expr.__new__(cls, arg)
+        
+    def __mul__(self, other):
+        # Right-multiplication: Dagger(A)*I --> Dagger(A)
+        from sympy.physics.quantum.operator import IdentityOperator
+        from sympy import Mul
+        if isinstance(other, IdentityOperator):
+            return self
+        return Mul(self, other)
+        
+    def __rmul__(self, other):
+        # Left-multiplication: I*Dagger(A) --> Dagger(A)
+        from sympy.physics.quantum.operator import IdentityOperator
+        from sympy import Mul
+        if isinstance(other, IdentityOperator):
+            return self
+        return Mul(other, self)
 
 adjoint.__name__ = "Dagger"
 adjoint._sympyrepr = lambda a, b: "Dagger(%s)" % b._print(a.args[0])
diff --git a/sympy/physics/quantum/operator.py b/sympy/physics/quantum/operator.py
index 306bfee64f..a1929676ae 100644
--- a/sympy/physics/quantum/operator.py
+++ b/sympy/physics/quantum/operator.py
@@ -306,9 +306,17 @@ def _print_contents_latex(self, printer, *args):
         return r'{\mathcal{I}}'
 
     def __mul__(self, other):
+        from sympy.physics.quantum.dagger import Dagger
+        from sympy.physics.quantum.tensorproduct import TensorProduct
 
         if isinstance(other, Operator):
             return other
+            
+        if isinstance(other, Dagger):
+            return other
+            
+        if isinstance(other, TensorProduct):
+            return other
 
         return Mul(self, other)
 
diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py
index 6ff0b6a728..8bd3cf6551 100644
--- a/sympy/physics/quantum/tensorproduct.py
+++ b/sympy/physics/quantum/tensorproduct.py
@@ -264,6 +264,15 @@ def _eval_trace(self, **kwargs):
         else:
             return Mul(*[Tr(value).doit() if idx in indices else value
                          for idx, value in enumerate(exp.args)])
+                         
+    def __mul__(self, other):
+        from sympy.physics.quantum.operator import IdentityOperator
+        from sympy import Mul
+        
+        if isinstance(other, IdentityOperator):
+            return self
+            
+        return Mul(self, other)
 
 
 def tensor_product_simp_Mul(e):
