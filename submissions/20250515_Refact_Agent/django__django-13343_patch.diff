diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py
index e10a5bb6d9..ec63a1ad5d 100644
--- a/django/db/models/fields/files.py
+++ b/django/db/models/fields/files.py
@@ -227,6 +227,9 @@ class FileField(Field):
     def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs):
         self._primary_key_set_explicitly = 'primary_key' in kwargs
 
+        # Preserve the original storage parameter before evaluating it
+        self._storage_parameter = storage
+        
         self.storage = storage or default_storage
         if callable(self.storage):
             self.storage = self.storage()
@@ -278,7 +281,12 @@ class FileField(Field):
         if kwargs.get("max_length") == 100:
             del kwargs["max_length"]
         kwargs['upload_to'] = self.upload_to
-        if self.storage is not default_storage:
+        
+        # If the original storage parameter was callable, use that
+        if hasattr(self, '_storage_parameter') and callable(self._storage_parameter):
+            kwargs['storage'] = self._storage_parameter
+        # Otherwise, use the previous behavior
+        elif self.storage is not default_storage:
             kwargs['storage'] = self.storage
         return name, path, args, kwargs
 
diff --git a/tests/field_deconstruction/tests.py b/tests/field_deconstruction/tests.py
index bf00aa44e2..f801afc35a 100644
--- a/tests/field_deconstruction/tests.py
+++ b/tests/field_deconstruction/tests.py
@@ -1,3 +1,16 @@
+import django
+import sys
+import unittest
+from django.conf import settings
+
+# Configure Django settings before importing models
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+    SECRET_KEY='dummy-secret-key-for-testing',
+)
+django.setup()
+
 from django.apps import apps
 from django.db import models
 from django.test import SimpleTestCase, override_settings
@@ -525,3 +538,7 @@ class FieldDeconstructionTests(SimpleTestCase):
         name, path, args, kwargs = field.deconstruct()
         self.assertEqual(args, [])
         self.assertEqual(kwargs, {'editable': True})
+
+if __name__ == "__main__":
+    # Use unittest's built-in test runner
+    unittest.main()
