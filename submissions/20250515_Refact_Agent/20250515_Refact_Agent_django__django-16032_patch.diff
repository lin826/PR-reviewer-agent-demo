diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index 866e38df83..b6fe0c8bc3 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -420,7 +420,7 @@ class In(FieldGetDbPrepValueIterableMixin, BuiltinLookup):
 
         if isinstance(self.rhs, Query):
             self.rhs.clear_ordering(clear_default=True)
-            if not self.rhs.has_select_fields:
+            if self.rhs.default_cols or not self.rhs.has_select_fields:
                 self.rhs.clear_select_clause()
                 self.rhs.add_fields(["pk"])
         return super().get_prep_lookup()
diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py
index 8de2bf1998..31fdaf2744 100644
--- a/tests/annotations/tests.py
+++ b/tests/annotations/tests.py
@@ -1110,6 +1110,30 @@ class NonAggregateAnnotationTestCase(TestCase):
                 with self.assertRaisesMessage(ValueError, msg):
                     Book.objects.annotate(**{crafted_alias: Value(1)})
 
+    def test_annotation_and_alias_filter_in_subquery(self):
+        long_books_qs = (
+            Book.objects.filter(
+                pages__gt=400,
+            )
+            .annotate(book_annotate=Value(1))
+            .alias(book_alias=Value(1))
+        )
+        publisher_books_qs = (
+            Publisher.objects.filter(
+                book__in=long_books_qs
+            )
+            .values("name")
+        )
+        self.assertCountEqual(
+            publisher_books_qs,
+            [
+                {'name': 'Apress'},
+                {'name': 'Sams'},
+                {'name': 'Prentice Hall'},
+                {'name': 'Morgan Kaufmann'}
+            ]
+        )
+
 
 class AliasTests(TestCase):
     @classmethod
