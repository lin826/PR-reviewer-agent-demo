diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 29e33c075f..7d4465500b 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -1407,7 +1407,24 @@ class SQLInsertCompiler(SQLCompiler):
 class SQLDeleteCompiler(SQLCompiler):
     @cached_property
     def single_alias(self):
-        return sum(self.query.alias_refcount[t] > 0 for t in self.query.alias_map) == 1
+        """
+        Return True when the DELETE affects exactly one table alias.
+
+        For a plain `Model.objects.all().delete()` the base table alias may
+        not yet have been initialized and, even after initialization, its
+        reference-count can legitimately be zero (no columns of the base
+        table are referenced in a WHERE/GROUP BY/… clause). Both facts made
+        the previous implementation mis-classify such simple deletes as
+        multi-table operations.
+
+        1. Ensure the base alias exists by creating it on-demand.
+        2. Ignore reference counts – the important criterion is whether the
+           query involves more than one alias.
+        """
+        if not self.query.alias_map:
+            # Lazily create the base alias so that alias_map contains it.
+            self.query.get_initial_alias()
+        return len(self.query.alias_map) == 1
 
     def _as_sql(self, query):
         result = [
