diff --git a/Dockerfile b/Dockerfile
index aafe62a6a..0b37a778d 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,7 +1,30 @@
-FROM python:3.9.0-alpine3.12
 
-COPY ./ /tmp/build
-WORKDIR /tmp/build
-RUN python setup.py install && rm -rf /tmp/build
+FROM swebench/sweb.eval.x86_64.pylint-dev_1776_pylint-4661:latest
 
-ENTRYPOINT ["pylint"]
+WORKDIR /install
+# Install docker cli
+# Add Docker's official GPG key:
+RUN apt-get update
+RUN apt-get install -y ca-certificates curl
+RUN install -m 0755 -d /etc/apt/keyrings
+RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
+RUN chmod a+r /etc/apt/keyrings/docker.asc
+
+# Add the repository to Apt sources:
+RUN echo   "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu   $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" |   tee /etc/apt/sources.list.d/docker.list > /dev/null
+RUN apt-get update && apt-get install -y docker-ce-cli
+
+# Install required dependencies for SWE-bench (verification)
+RUN apt-get install -y -V ca-certificates lsb-release wget
+RUN wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
+RUN apt-get update
+RUN apt-get install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
+
+# Install SWE repo
+RUN git clone https://github.com/princeton-nlp/SWE-bench.git /SWE-bench
+WORKDIR /SWE-bench
+RUN apt-get install -y python3-venv
+RUN python3 -m venv .venv
+RUN . .venv/bin/activate      &&     pip install --upgrade pip &&     pip install . 
+
+WORKDIR /testbed
diff --git a/doc/faq.rst b/doc/faq.rst
index c817855f8..e9e8b4b6c 100644
--- a/doc/faq.rst
+++ b/doc/faq.rst
@@ -93,10 +93,11 @@ localized using the following rules:
 
 * value of the PYLINTHOME environment variable if set
 
-* ".pylint.d" subdirectory of the user's home directory if it is found
-	(not always findable on Windows platforms)
+* XDG_DATA_HOME/pylint directory if XDG_DATA_HOME is set (following the XDG Base Directory Specification)
 
-* ".pylint.d" directory in the current directory
+* $HOME/.local/share/pylint directory (the default XDG data location)
+
+* ".pylint.d" directory in the current directory (only if the user's home directory cannot be determined)
 
 3.3 How do I find the option name (for pylintrc) corresponding to a specific command line option?
 --------------------------------------------------------------------------------------------------------
diff --git a/pylint/config/__init__.py b/pylint/config/__init__.py
index 84774d0e3..73c3916fc 100644
--- a/pylint/config/__init__.py
+++ b/pylint/config/__init__.py
@@ -35,6 +35,7 @@
 import os
 import pickle
 import sys
+from pathlib import Path
 
 from pylint.config.configuration_mixin import ConfigurationMixIn
 from pylint.config.find_default_config_files import find_default_config_files
@@ -55,15 +56,43 @@ __all__ = [
     "UnsupportedAction",
 ]
 
+# --------------------------------------------------------------------------- #
+#  X D G   B A S E   D I R E C T O R Y   C O M P L I A N C E                  #
+# --------------------------------------------------------------------------- #
+# Rules (priority, high → low)                                               #
+#   1. $PYLINTHOME           – legacy, explicit override                     #
+#   2. $XDG_DATA_HOME/pylint – XDG spec                                       #
+#   3. $HOME/.local/share/pylint                                             #
+#   4. ".pylint.d"   (cwd) – last-resort when even $HOME is unknown          #
+# --------------------------------------------------------------------------- #
+
+def _compute_pylint_home() -> str:
+    """Return the directory were pylint persistent data has to be kept
+    according to the XDG Base Directory Specification.  Never raises.
+    """
+    # 1. explicit legacy variable
+    explicit = os.environ.get("PYLINTHOME")
+    if explicit:
+        return explicit
+
+    # guaranteed to resolve even if $HOME is not set (→ "~")
+    user_home = Path.home()
+
+    # 2. XDG spec
+    xdg_data_home = os.environ.get("XDG_DATA_HOME")
+    if xdg_data_home:
+        return os.path.join(xdg_data_home, "pylint")
+
+    # 3. default for data under $HOME
+    if user_home != Path("~"):
+        return str(user_home / ".local" / "share" / "pylint")
+
+    # 4. totally unknown user home ⇒ stay in the CWD
+    return ".pylint.d"
+
+
+PYLINT_HOME: str = _compute_pylint_home()
 USER_HOME = os.path.expanduser("~")
-if "PYLINTHOME" in os.environ:
-    PYLINT_HOME = os.environ["PYLINTHOME"]
-    if USER_HOME == "~":
-        USER_HOME = os.path.dirname(PYLINT_HOME)
-elif USER_HOME == "~":
-    PYLINT_HOME = ".pylint.d"
-else:
-    PYLINT_HOME = os.path.join(USER_HOME, ".pylint.d")
 
 
 def _get_pdata_path(base_name, recurs):
@@ -81,11 +110,11 @@ def load_results(base):
 
 
 def save_results(results, base):
-    if not os.path.exists(PYLINT_HOME):
-        try:
-            os.mkdir(PYLINT_HOME)
-        except OSError:
-            print("Unable to create directory %s" % PYLINT_HOME, file=sys.stderr)
+    try:
+        # make sure the complete directory tree exists
+        os.makedirs(PYLINT_HOME, exist_ok=True)
+    except OSError as ex:
+        print(f"Unable to create directory {PYLINT_HOME}: {ex}", file=sys.stderr)
     data_file = _get_pdata_path(base, 1)
     try:
         with open(data_file, "wb") as stream:
@@ -109,11 +138,15 @@ ENV_HELP = (
     """
 The following environment variables are used:
     * PYLINTHOME
-    Path to the directory where persistent data for the run will be stored. If
-not found, it defaults to ~/.pylint.d/ or .pylint.d (in the current working
-directory).
+      Overrides the directory where persistent data for the run is stored.
+    * XDG_DATA_HOME
+      Used (with subdirectory *pylint*) when PYLINTHOME is not set.
+      Default: ~/.local/share
+    * XDG_CONFIG_HOME
+      Searched (with subdirectory *pylint*) for a default *pylintrc*
+      when neither --rcfile nor PYLINTRC is provided.
     * PYLINTRC
-    Path to the configuration file. See the documentation for the method used
+      Path to the configuration file. See the documentation for the method used
 to search for configuration file.
 """
     % globals()  # type: ignore
diff --git a/pylint/config/find_default_config_files.py b/pylint/config/find_default_config_files.py
index 2a8937e52..7e74732fc 100644
--- a/pylint/config/find_default_config_files.py
+++ b/pylint/config/find_default_config_files.py
@@ -57,13 +57,23 @@ def find_default_config_files():
             yield os.environ["PYLINTRC"]
     else:
         user_home = os.path.expanduser("~")
+
         if user_home not in ("~", "/root"):
-            home_rc = os.path.join(user_home, ".pylintrc")
-            if os.path.isfile(home_rc):
-                yield home_rc
-            home_rc = os.path.join(user_home, ".config", "pylintrc")
-            if os.path.isfile(home_rc):
-                yield home_rc
+            # legacy locations first (back-compat)
+            for legacy in (
+                os.path.join(user_home, ".pylintrc"),
+                os.path.join(user_home, ".config", "pylintrc"),
+            ):
+                if os.path.isfile(legacy):
+                    yield legacy
+
+        # XDG:  $XDG_CONFIG_HOME/pylint/pylintrc   (or ~/.config/pylint/pylintrc)
+        xdg_config_home = os.environ.get(
+            "XDG_CONFIG_HOME", os.path.join(user_home, ".config")
+        )
+        xdg_rc = os.path.join(xdg_config_home, "pylint", "pylintrc")
+        if os.path.isfile(xdg_rc):
+            yield xdg_rc
 
     if os.path.isfile("/etc/pylintrc"):
         yield "/etc/pylintrc"
diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py
index 004c29281..c730bdada 100644
--- a/tests/lint/unittest_lint.py
+++ b/tests/lint/unittest_lint.py
@@ -631,7 +631,7 @@ def test_pylint_home():
     if uhome == "~":
         expected = ".pylint.d"
     else:
-        expected = os.path.join(uhome, ".pylint.d")
+        expected = os.path.join(uhome, ".local", "share", "pylint")
     assert config.PYLINT_HOME == expected
 
     try:
