diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 880a2cc17b..641f2ee969 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -2111,31 +2111,50 @@ class InlineModelAdmin(BaseModelAdmin):
             queryset = queryset.none()
         return queryset
 
+    def _get_related_model_opts(self):
+        """
+        Return the _meta of the related model for an auto-created through table.
+        """
+        for field in self.opts.fields:
+            if field.remote_field and field.remote_field.model != self.parent_model:
+                return field.remote_field.model._meta
+        return None
+
+    def _has_related_change_permission(self, request, obj=None):
+        """
+        Check if the user has change permission for the related model.
+        """
+        opts = self._get_related_model_opts()
+        if opts:
+            codename = get_permission_codename('change', opts)
+            return request.user.has_perm('%s.%s' % (opts.app_label, codename))
+        return False
+
     def has_add_permission(self, request, obj):
         if self.opts.auto_created:
             # We're checking the rights to an auto-created intermediate model,
             # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            # to have the change permission for the related model in order to
+            # be able to add intermediate model instances.
+            return self._has_related_change_permission(request, obj)
         return super().has_add_permission(request)
 
     def has_change_permission(self, request, obj=None):
         if self.opts.auto_created:
             # We're checking the rights to an auto-created intermediate model,
             # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            # to have the change permission for the related model in order to
+            # be able to change intermediate model instances.
+            return self._has_related_change_permission(request, obj)
         return super().has_change_permission(request)
 
     def has_delete_permission(self, request, obj=None):
         if self.opts.auto_created:
             # We're checking the rights to an auto-created intermediate model,
             # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            # to have the change permission for the related model in order to
+            # be able to delete intermediate model instances.
+            return self._has_related_change_permission(request, obj)
         return super().has_delete_permission(request, obj)
 
     def has_view_permission(self, request, obj=None):
