diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 90fc31bee5..b69c431971 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -202,6 +202,19 @@ class CreateModel(ModelOperation):
                     managers=self.managers,
                 ),
             ]
+        elif (
+            isinstance(operation, AlterModelManagers)
+            and self.name_lower == operation.name_lower
+        ):
+            return [
+                CreateModel(
+                    self.name,
+                    fields=self.fields,
+                    options=self.options,
+                    bases=self.bases,
+                    managers=operation.managers,
+                ),
+            ]
         elif (
             isinstance(operation, FieldOperation)
             and self.name_lower == operation.model_name_lower
diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py
index a84321ad3b..648952d4cc 100644
--- a/tests/migrations/test_operations.py
+++ b/tests/migrations/test_operations.py
@@ -3875,6 +3875,48 @@ class OperationTests(OperationTestBase):
         self.assertEqual(managers[1][1].args, ("a", "b", 1, 2))
         self.assertEqual(managers[2][0], "food_mgr_kwargs")
         self.assertIsInstance(managers[2][1], FoodManager)
+        
+    def test_optimize_create_model_and_alter_managers(self):
+        """
+        CreateModel and AlterModelManagers should optimize to a single CreateModel.
+        """
+        # Create a simple CreateModel operation
+        create_model_op = migrations.CreateModel(
+            name="TestModel",
+            fields=[
+                ("id", models.AutoField(primary_key=True)),
+                ("name", models.CharField(max_length=100)),
+            ],
+        )
+
+        # Create an AlterModelManagers operation for the same model
+        alter_managers_op = migrations.AlterModelManagers(
+            name="TestModel",
+            managers=[
+                ("objects", models.Manager()),
+                ("custom", FoodManager("a", "b", 1, 2)),
+            ],
+        )
+
+        # Create a list of operations
+        operations = [create_model_op, alter_managers_op]
+
+        # Try to optimize the operations
+        optimizer = MigrationOptimizer()
+        optimized_operations = optimizer.optimize(operations, "testapp")
+
+        # Check that we have only one operation
+        self.assertEqual(len(optimized_operations), 1)
+        
+        # Check that it's a CreateModel operation
+        self.assertIsInstance(optimized_operations[0], migrations.CreateModel)
+        
+        # Check that it has the managers from the AlterModelManagers operation
+        self.assertEqual(len(optimized_operations[0].managers), 2)
+        self.assertEqual(optimized_operations[0].managers[0][0], "objects")
+        self.assertIsInstance(optimized_operations[0].managers[0][1], models.Manager)
+        self.assertEqual(optimized_operations[0].managers[1][0], "custom")
+        self.assertIsInstance(optimized_operations[0].managers[1][1], FoodManager)
         self.assertEqual(managers[2][1].args, ("x", "y", 3, 4))
 
         new_state = project_state.clone()
