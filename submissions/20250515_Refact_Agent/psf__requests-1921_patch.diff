diff --git a/requests/sessions.py b/requests/sessions.py
index a023e4ec..18e037f5 100644
--- a/requests/sessions.py
+++ b/requests/sessions.py
@@ -57,7 +57,7 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
     # Remove keys that are set to None.
     for (k, v) in request_setting.items():
         if v is None:
-            del merged_setting[k]
+            merged_setting.pop(k, None)  # Use pop with default to avoid KeyError
 
     return merged_setting
 
diff --git a/requests/structures.py b/requests/structures.py
index a1759137..2b88f6a0 100644
--- a/requests/structures.py
+++ b/requests/structures.py
@@ -69,8 +69,26 @@ class CaseInsensitiveDict(collections.MutableMapping):
         self.update(data, **kwargs)
 
     def __setitem__(self, key, value):
-        # Use the lowercased key for lookups, but store the actual
-        # key alongside the value.
+        """
+        Store *key* with *value* in a case-insensitive way.
+
+        The Requests API treats «value is None» as *remove this header*.
+        This is already honoured for per-request ``headers={'H': None}``
+        in :func:`sessions.merge_setting`, but was previously ignored for
+        ``session.headers['H'] = None`` because the mapping kept the
+        literal ``None`` object.  That leaked the string ``"None"`` into
+        the wire (or raised TypeError on Py3).
+
+        To keep both call-sites consistent we interpret assigning
+        ``None`` as a deletion request, matching ``dict.pop`` semantics
+        and what users expect from the documentation.
+        """
+        if value is None:
+            # Do *not* store None – interpret as "delete this key".
+            self._store.pop(key.lower(), None)
+            return
+
+        # Normal storage path
         self._store[key.lower()] = (key, value)
 
     def __getitem__(self, key):
