diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py
index 7f8eb128e1..64d5b1e177 100644
--- a/django/db/models/fields/files.py
+++ b/django/db/models/fields/files.py
@@ -375,7 +375,8 @@ class ImageFileDescriptor(FileDescriptor):
         # hooked up to the post_init signal handles the Model.__init__() cases.
         # Assignment happening outside of Model.__init__() will trigger the
         # update right here.
-        if previous_file is not None:
+        # Only update dimensions if this field actually tracks dimensions
+        if previous_file is not None and (self.field.width_field or self.field.height_field):
             self.field.update_dimension_fields(instance, force=True)
 
 
@@ -441,7 +442,8 @@ class ImageField(FileField):
         # after their corresponding image field don't stay cleared by
         # Model.__init__, see bug #11196.
         # Only run post-initialization dimension update on non-abstract models
-        if not cls._meta.abstract:
+        # and only if we have dimension fields to update
+        if not cls._meta.abstract and (self.width_field or self.height_field):
             signals.post_init.connect(self.update_dimension_fields, sender=cls)
 
     def update_dimension_fields(self, instance, force=False, *args, **kwargs):
@@ -457,25 +459,33 @@ class ImageField(FileField):
         Dimensions can be forced to update with force=True, which is how
         ImageFileDescriptor.__set__ calls this method.
         """
+        print(f"DEBUG: update_dimension_fields called with force={force}")
+        print(f"DEBUG: width_field={self.width_field}, height_field={self.height_field}")
+
         # Nothing to update if the field doesn't have dimension fields or if
         # the field is deferred.
         has_dimension_fields = self.width_field or self.height_field
+        print(f"DEBUG: has_dimension_fields={has_dimension_fields}")
         if not has_dimension_fields or self.attname not in instance.__dict__:
+            print("DEBUG: Early return: No dimension fields or field is deferred")
             return
 
         # getattr will call the ImageFileDescriptor's __get__ method, which
         # coerces the assigned value into an instance of self.attr_class
         # (ImageFieldFile in this case).
         file = getattr(instance, self.attname)
+        print(f"DEBUG: file={file}")
 
         # Nothing to update if we have no file and not being forced to update.
         if not file and not force:
+            print("DEBUG: Early return: No file and not forced to update")
             return
 
         dimension_fields_filled = not (
             (self.width_field and not getattr(instance, self.width_field))
             or (self.height_field and not getattr(instance, self.height_field))
         )
+        print(f"DEBUG: dimension_fields_filled={dimension_fields_filled}")
         # When both dimension fields have values, we are most likely loading
         # data from the database or updating an image field that already had
         # an image stored.  In the first case, we don't want to update the
@@ -484,21 +494,26 @@ class ImageField(FileField):
         # fields and will skip this return because force will be True since we
         # were called from ImageFileDescriptor.__set__.
         if dimension_fields_filled and not force:
+            print("DEBUG: Early return: Dimension fields already filled and not forced")
             return
 
         # file should be an instance of ImageFieldFile or should be None.
         if file:
             width = file.width
             height = file.height
+            print(f"DEBUG: Reading dimensions from file: width={width}, height={height}")
         else:
             # No file, so clear dimensions fields.
             width = None
             height = None
+            print("DEBUG: No file, clearing dimensions")
 
         # Update the width and height fields.
         if self.width_field:
+            print(f"DEBUG: Setting {self.width_field}={width}")
             setattr(instance, self.width_field, width)
         if self.height_field:
+            print(f"DEBUG: Setting {self.height_field}={height}")
             setattr(instance, self.height_field, height)
 
     def formfield(self, **kwargs):
