diff --git a/Dockerfile b/Dockerfile
index 2667145da..d2940a216 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,7 +1,30 @@
-FROM python:3.10.0-alpine3.15
 
-COPY ./ /tmp/build
-WORKDIR /tmp/build
-RUN python setup.py install && rm -rf /tmp/build
+FROM swebench/sweb.eval.x86_64.pylint-dev_1776_pylint-6386:latest
 
-ENTRYPOINT ["pylint"]
+WORKDIR /install
+# Install docker cli
+# Add Docker's official GPG key:
+RUN apt-get update
+RUN apt-get install -y ca-certificates curl
+RUN install -m 0755 -d /etc/apt/keyrings
+RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
+RUN chmod a+r /etc/apt/keyrings/docker.asc
+
+# Add the repository to Apt sources:
+RUN echo   "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu   $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" |   tee /etc/apt/sources.list.d/docker.list > /dev/null
+RUN apt-get update && apt-get install -y docker-ce-cli
+
+# Install required dependencies for SWE-bench (verification)
+RUN apt-get install -y -V ca-certificates lsb-release wget
+RUN wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
+RUN apt-get update
+RUN apt-get install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
+
+# Install SWE repo
+RUN git clone https://github.com/princeton-nlp/SWE-bench.git /SWE-bench
+WORKDIR /SWE-bench
+RUN apt-get install -y python3-venv
+RUN python3 -m venv .venv
+RUN . .venv/bin/activate      &&     pip install --upgrade pip &&     pip install . 
+
+WORKDIR /testbed
diff --git a/pylint/config/utils.py b/pylint/config/utils.py
index 8c790416f..10ba9b3f8 100644
--- a/pylint/config/utils.py
+++ b/pylint/config/utils.py
@@ -210,6 +210,12 @@ PREPROCESSABLE_OPTIONS: dict[
     "--enable-all-extensions": (False, _enable_all_extensions),
 }
 
+# Map short options to their long option counterparts
+SHORT_TO_LONG_OPTIONS = {
+    "-v": "--verbose",
+    # Add other short options here as needed
+}
+
 
 def _preprocess_options(run: Run, args: Sequence[str]) -> list[str]:
     """Preprocess options before full config parsing has started."""
@@ -218,15 +224,36 @@ def _preprocess_options(run: Run, args: Sequence[str]) -> list[str]:
     i = 0
     while i < len(args):
         argument = args[i]
+        
+        # Handle short options by mapping them to their long option counterparts
+        option = None
+        value = None
+        
+        if argument.startswith("-") and not argument.startswith("--"):
+            # Check for short option with value: -v=value
+            if "=" in argument:
+                short_option, value = argument.split("=", 1)
+                if short_option in SHORT_TO_LONG_OPTIONS:
+                    option = SHORT_TO_LONG_OPTIONS[short_option]
+            # Simple short option: -v
+            elif argument in SHORT_TO_LONG_OPTIONS:
+                option = SHORT_TO_LONG_OPTIONS[argument]
+                value = None
+                
+            if option is not None:
+                argument = option
+            
         if not argument.startswith("--"):
             processed_args.append(argument)
             i += 1
             continue
 
-        try:
-            option, value = argument.split("=", 1)
-        except ValueError:
-            option, value = argument, None
+        # Extract option and value if not already done for short options
+        if option is None:
+            try:
+                option, value = argument.split("=", 1)
+            except ValueError:
+                option, value = argument, None
 
         if option not in PREPROCESSABLE_OPTIONS:
             processed_args.append(argument)
