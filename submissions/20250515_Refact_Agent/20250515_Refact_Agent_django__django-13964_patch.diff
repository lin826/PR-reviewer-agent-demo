diff --git a/django/db/models/base.py b/django/db/models/base.py
index 2428218696..01d3d0027e 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -933,14 +933,20 @@ class Model(metaclass=ModelBase):
                         "%s() prohibited to prevent data loss due to unsaved "
                         "related object '%s'." % (operation_name, field.name)
                     )
-                elif getattr(self, field.attname) is None:
-                    # Use pk from related object if it has been saved after
-                    # an assignment.
-                    setattr(self, field.attname, obj.pk)
-                # If the relationship's pk/to_field was changed, clear the
-                # cached relationship.
-                if getattr(obj, field.target_field.attname) != getattr(self, field.attname):
-                    field.delete_cached_value(self)
+                # Synchronize the value stored on this instance with the related
+                # object's primary key whenever they differ. This covers the
+                # case where the related object was assigned before its primary
+                # key was set (e.g. non-auto CharField PKs whose default is an
+                # empty string) as well as manual changes to the related
+                # object's primary key.
+                obj_pk = getattr(obj, field.target_field.attname)
+                if getattr(self, field.attname) != obj_pk:
+                    setattr(self, field.attname, obj_pk)
+                    # The relationship's to_field was changed; clear the cached
+                    # instance so the next attribute access fetches the correct
+                    # object.
+                    if field.is_cached(self):
+                        field.delete_cached_value(self)
 
     def delete(self, using=None, keep_parents=False):
         using = using or router.db_for_write(self.__class__, instance=self)
