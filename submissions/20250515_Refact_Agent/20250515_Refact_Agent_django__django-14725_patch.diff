diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index 75b0646512..512aca8bbc 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -58,6 +58,7 @@ class BaseFormSet(RenderableFormMixin):
             'ManagementForm data is missing or has been tampered with. Missing fields: '
             '%(field_names)s. You may need to file a bug report if the issue persists.'
         ),
+        'no_new_forms': _('No new form may be submitted.'),
     }
     template_name = 'django/forms/formsets/default.html'
     template_name_p = 'django/forms/formsets/p.html'
@@ -402,6 +403,14 @@ class BaseFormSet(RenderableFormMixin):
                     "Please submit at least %d form.",
                     "Please submit at least %d forms.", self.min_num) % self.min_num,
                     code='too_few_forms')
+            # If can_create is False, check that no new forms beyond initial_form_count have changed
+            if hasattr(self, 'can_create') and not self.can_create:
+                for i, form in enumerate(self.forms):
+                    if i >= self.initial_form_count() and form.has_changed():
+                        raise ValidationError(
+                            self.error_messages['no_new_forms'],
+                            code='no_new_forms',
+                        )
             # Give self.clean() a chance to do cross-form validation.
             self.clean()
         except ValidationError as e:
@@ -476,9 +485,9 @@ class BaseFormSet(RenderableFormMixin):
 
 
 def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,
-                    can_delete=False, max_num=None, validate_max=False,
-                    min_num=None, validate_min=False, absolute_max=None,
-                    can_delete_extra=True, renderer=None):
+                     can_delete=False, max_num=None, validate_max=False,
+                     min_num=None, validate_min=False, absolute_max=None,
+                     can_delete_extra=True, can_create=True, renderer=None):
     """Return a FormSet for the given form class."""
     if min_num is None:
         min_num = DEFAULT_MIN_NUM
@@ -499,6 +508,7 @@ def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,
         'can_order': can_order,
         'can_delete': can_delete,
         'can_delete_extra': can_delete_extra,
+        'can_create': can_create,
         'min_num': min_num,
         'max_num': max_num,
         'absolute_max': absolute_max,
diff --git a/django/forms/models.py b/django/forms/models.py
index 7effb202e3..c4e3302d42 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -813,6 +813,9 @@ class BaseModelFormSet(BaseFormSet):
 
     def save_new_objects(self, commit=True):
         self.new_objects = []
+        # If can_create is False, don't save any new objects
+        if hasattr(self, 'can_create') and not self.can_create:
+            return self.new_objects
         for form in self.extra_forms:
             if not form.has_changed():
                 continue
@@ -870,12 +873,12 @@ class BaseModelFormSet(BaseFormSet):
 
 
 def modelformset_factory(model, form=ModelForm, formfield_callback=None,
-                         formset=BaseModelFormSet, extra=1, can_delete=False,
-                         can_order=False, max_num=None, fields=None, exclude=None,
-                         widgets=None, validate_max=False, localized_fields=None,
-                         labels=None, help_texts=None, error_messages=None,
-                         min_num=None, validate_min=False, field_classes=None,
-                         absolute_max=None, can_delete_extra=True, renderer=None):
+                          formset=BaseModelFormSet, extra=1, can_delete=False,
+                          can_order=False, max_num=None, fields=None, exclude=None,
+                          widgets=None, validate_max=False, localized_fields=None,
+                          labels=None, help_texts=None, error_messages=None,
+                          min_num=None, validate_min=False, field_classes=None,
+                          absolute_max=None, can_delete_extra=True, can_create=True, renderer=None):
     """Return a FormSet class for the given Django model class."""
     meta = getattr(form, 'Meta', None)
     if (getattr(meta, 'fields', fields) is None and
@@ -891,10 +894,10 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
                              labels=labels, help_texts=help_texts,
                              error_messages=error_messages, field_classes=field_classes)
     FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,
-                              can_order=can_order, can_delete=can_delete,
-                              validate_min=validate_min, validate_max=validate_max,
-                              absolute_max=absolute_max, can_delete_extra=can_delete_extra,
-                              renderer=renderer)
+                               can_order=can_order, can_delete=can_delete,
+                               validate_min=validate_min, validate_max=validate_max,
+                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,
+                               can_create=can_create, renderer=renderer)
     FormSet.model = model
     return FormSet
 
@@ -1070,13 +1073,13 @@ def _get_foreign_key(parent_model, model, fk_name=None, can_fail=False):
 
 
 def inlineformset_factory(parent_model, model, form=ModelForm,
-                          formset=BaseInlineFormSet, fk_name=None,
-                          fields=None, exclude=None, extra=3, can_order=False,
-                          can_delete=True, max_num=None, formfield_callback=None,
-                          widgets=None, validate_max=False, localized_fields=None,
-                          labels=None, help_texts=None, error_messages=None,
-                          min_num=None, validate_min=False, field_classes=None,
-                          absolute_max=None, can_delete_extra=True, renderer=None):
+                           formset=BaseInlineFormSet, fk_name=None,
+                           fields=None, exclude=None, extra=3, can_order=False,
+                           can_delete=True, max_num=None, formfield_callback=None,
+                           widgets=None, validate_max=False, localized_fields=None,
+                           labels=None, help_texts=None, error_messages=None,
+                           min_num=None, validate_min=False, field_classes=None,
+                           absolute_max=None, can_delete_extra=True, can_create=True, renderer=None):
     """
     Return an ``InlineFormSet`` for the given kwargs.
 
@@ -1108,6 +1111,7 @@ def inlineformset_factory(parent_model, model, form=ModelForm,
         'field_classes': field_classes,
         'absolute_max': absolute_max,
         'can_delete_extra': can_delete_extra,
+        'can_create': can_create,
         'renderer': renderer,
     }
     FormSet = modelformset_factory(model, **kwargs)
