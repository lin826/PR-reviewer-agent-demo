diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 95302a05ca..1cad0d5151 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -164,7 +164,45 @@ def structurally_equal(self, other):
     def _blockmul(self, other):
         if (isinstance(other, BlockMatrix) and
                 self.colblocksizes == other.rowblocksizes):
-            return BlockMatrix(self.blocks*other.blocks)
+            # Get the dimensions
+            m, n = self.blockshape
+            _, p = other.blockshape
+            
+            # Create a new matrix for the result
+            blocks = [[None for j in range(p)] for i in range(m)]
+            
+            # Perform the block matrix multiplication
+            for i in range(m):
+                for j in range(p):
+                    block_sum = None
+                    for k in range(n):
+                        # Get the blocks to multiply
+                        a_block = self.blocks[i, k]
+                        b_block = other.blocks[k, j]
+                        
+                        # Handle the case where one or both blocks are Zero or ZeroMatrix
+                        if (a_block == 0 or isinstance(a_block, ZeroMatrix) or 
+                            b_block == 0 or isinstance(b_block, ZeroMatrix)):
+                            # Create a ZeroMatrix with the correct dimensions
+                            product = ZeroMatrix(self.rowblocksizes[i], other.colblocksizes[j])
+                        else:
+                            # Regular matrix multiplication
+                            product = a_block * b_block
+                        
+                        # Add to the sum
+                        if block_sum is None:
+                            block_sum = product
+                        else:
+                            block_sum = block_sum + product
+                    
+                    # If the sum is still None, use a ZeroMatrix
+                    if block_sum is None:
+                        block_sum = ZeroMatrix(self.rowblocksizes[i], other.colblocksizes[j])
+                    
+                    blocks[i][j] = block_sum
+            
+            # Create a new BlockMatrix with the result
+            return BlockMatrix(blocks)
 
         return self * other
 
