diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index 8253b2f682..ba9698a118 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -1476,10 +1476,25 @@ def _print_Adjoint(self, expr):
         else:
             return r"%s^\dagger" % self._print(mat)
 
-    def _print_MatAdd(self, expr):
+    def _print_MatAdd(self, expr, **kwargs):
         terms = list(expr.args)
-        tex = " + ".join(map(self._print, terms))
-        return tex
+        pieces = []
+
+        for i, term in enumerate(terms):
+            sign = ''
+            if i:
+                if (hasattr(term, 'is_MatMul') and term.is_MatMul or 
+                    hasattr(term, 'is_Mul') and term.is_Mul) and term.args and term.args[0] == -1:
+                    sign = r' - '
+                    # remove the leading -1 before printing
+                    term = term.func(*term.args[1:])
+                else:
+                    sign = r' + '
+            piece = self._print(term)
+            if self._needs_add_brackets(term):
+                piece = r'\left(%s\right)' % piece
+            pieces.append(sign + piece)
+        return ''.join(pieces)
 
     def _print_MatMul(self, expr):
         from sympy import Add, MatAdd, HadamardProduct
diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index db24f4c612..8956802024 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -819,7 +819,26 @@ def _print_BlockMatrix(self, B):
         return self._print(B.blocks)
 
     def _print_MatAdd(self, expr):
-        return self._print_seq(expr.args, None, None, ' + ')
+        terms = list(expr.args)
+        pforms = []
+
+        for i, term in enumerate(terms):
+            if (hasattr(term, 'is_MatMul') and term.is_MatMul or 
+                hasattr(term, 'is_Mul') and term.is_Mul) and term.args and term.args[0] == -1:
+                op = prettyForm(' - ')
+                # remove the leading -1 before printing
+                core = self._print(term.func(*term.args[1:]))
+            else:
+                op = prettyForm(' + ' if i else '')
+                core = self._print(term)
+            if i:
+                pforms.append(op)
+            pforms.append(core)
+
+        if len(pforms) == 1:
+            return pforms[0]
+        
+        return prettyForm.__add__(*pforms)
 
     def _print_MatMul(self, expr):
         args = list(expr.args)
diff --git a/sympy/printing/str.py b/sympy/printing/str.py
index 0baefe0f7f..062f65c13f 100644
--- a/sympy/printing/str.py
+++ b/sympy/printing/str.py
@@ -6,6 +6,7 @@
 
 from sympy.core import S, Rational, Pow, Basic, Mul
 from sympy.core.mul import _keep_coeff
+from sympy.core.function import _coeff_isneg
 from .printer import Printer
 from sympy.printing.precedence import precedence, PRECEDENCE
 
@@ -311,9 +312,24 @@ def _print_HadamardProduct(self, expr):
         return '.*'.join([self.parenthesize(arg, precedence(expr))
             for arg in expr.args])
 
-    def _print_MatAdd(self, expr):
-        return ' + '.join([self.parenthesize(arg, precedence(expr))
-            for arg in expr.args])
+    def _print_MatAdd(self, expr, **kwargs):
+        # Do not use _as_ordered_terms â€“ re-ordering can force complex()
+        # on matrix terms and cause infinite recursion.
+        terms = list(expr.args)
+        pieces = []
+
+        for i, term in enumerate(terms):
+            sign = ''
+            if i:
+                # second and later terms need an explicit sign
+                if term.args and term.args[0] == -1:
+                    sign = '- '
+                    # remove the leading -1 before printing
+                    term = term.func(*term.args[1:])
+                else:
+                    sign = '+ '
+            pieces.append(sign + self._print(term))
+        return ' '.join(pieces)
 
     def _print_NaN(self, expr):
         return 'nan'
