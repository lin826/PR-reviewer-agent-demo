diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py
index 66aafde2d6..30ac56503b 100644
--- a/sympy/concrete/products.py
+++ b/sympy/concrete/products.py
@@ -276,16 +276,30 @@ def _eval_product(self, term, limits):
 
         elif term.is_Add:
             p, q = term.as_numer_denom()
-            q = self._eval_product(q, (k, a, n))
-            if q.is_Number:
+            
+            # the split p/q is valid only when q is independent of k
+            if q.has(k):
+                return None       # keep Product unevaluated; outer code will
+                                  # fall back to safer methods
 
-                # There is expression, which couldn't change by
-                # as_numer_denom(). E.g. n**(2/3) + 1 --> (n**(2/3) + 1, 1).
-                # We have to catch this case.
+            # denominator is harmless → handle it
+            q = self._eval_product(q, (k, a, n))
+            
+            if q is None:         # couldn't evaluate q → give up
+                return None
 
-                p = sum([self._eval_product(i, (k, a, n)) for i in p.as_coeff_Add()])
+            if q.is_Number:
+                # Do *not* expand "product of a sum" – leave unevaluated
+                # unless each addend is k-independent
+                if all(not arg.has(k) for arg in p.args):
+                    p = Mul(*[self._eval_product(i, (k, a, n)) for i in p.args])
+                else:
+                    return None
             else:
                 p = self._eval_product(p, (k, a, n))
+                if p is None:
+                    return None
+
             return p / q
 
         elif term.is_Mul:
