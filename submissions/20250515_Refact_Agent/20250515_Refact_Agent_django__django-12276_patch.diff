diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index 338d54d72f..53ce90b0e5 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -386,6 +386,13 @@ class FileInput(Input):
 
     def value_omitted_from_data(self, data, files, name):
         return name not in files
+        
+    def use_required_attribute(self, initial):
+        """
+        Don't render the HTML "required" attribute if the widget has
+        an initial value (we assume the existing file can be kept).
+        """
+        return super().use_required_attribute(initial) and not initial
 
 
 FILE_INPUT_CONTRADICTION = object()
diff --git a/tests/forms_tests/widget_tests/test_fileinput.py b/tests/forms_tests/widget_tests/test_fileinput.py
index bbd7c7fe52..6dd960b4a7 100644
--- a/tests/forms_tests/widget_tests/test_fileinput.py
+++ b/tests/forms_tests/widget_tests/test_fileinput.py
@@ -1,4 +1,4 @@
-from django.forms import FileInput
+from django.forms import FileInput, Form, FileField
 
 from .base import WidgetTest
 
@@ -18,3 +18,30 @@ class FileInputTest(WidgetTest):
     def test_value_omitted_from_data(self):
         self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), True)
         self.assertIs(self.widget.value_omitted_from_data({}, {'field': 'value'}, 'field'), False)
+        
+    def test_use_required_attribute(self):
+        """
+        FileInput.use_required_attribute() is False when initial data exists,
+        so BoundField.build_widget_attrs omits required="required".
+        """
+        # The raw widget method:
+        self.assertIs(self.widget.use_required_attribute(None), True)
+        self.assertIs(self.widget.use_required_attribute('resume.pdf'), False)
+
+    def test_boundfield_suppresses_required_with_initial(self):
+        """
+        When rendered as part of a Form with initial data,
+        the <input> must not have required="required".
+        """
+        class F(Form):
+            file = FileField(widget=FileInput(), required=True)
+
+        # 1) no initial → required appears
+        f1 = F()
+        rendered1 = f1['file'].as_widget()
+        self.assertIn('required', rendered1)
+
+        # 2) with initial → required suppressed
+        f2 = F(initial={'file': 'existing.txt'})
+        rendered2 = f2['file'].as_widget()
+        self.assertNotIn('required', rendered2)
