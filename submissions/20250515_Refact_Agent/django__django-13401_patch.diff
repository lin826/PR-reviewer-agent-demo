diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 28374272f4..9bb13faf14 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -516,17 +516,25 @@ class Field(RegisterLookupMixin):
     def __eq__(self, other):
         # Needed for @total_ordering
         if isinstance(other, Field):
+            # If either field has a model attribute, compare models first
+            self_model = getattr(self, 'model', None)
+            other_model = getattr(other, 'model', None)
+            if self_model is not other_model:
+                return False
             return self.creation_counter == other.creation_counter
         return NotImplemented
 
     def __lt__(self, other):
         # This is needed because bisect does not take a comparison function.
         if isinstance(other, Field):
-            return self.creation_counter < other.creation_counter
+            if self.creation_counter != other.creation_counter:
+                return self.creation_counter < other.creation_counter
+            # Tie-break by model id to provide deterministic ordering without collisions
+            return id(getattr(self, 'model', None)) < id(getattr(other, 'model', None))
         return NotImplemented
 
     def __hash__(self):
-        return hash(self.creation_counter)
+        return hash((getattr(self, 'model', None), self.creation_counter))
 
     def __deepcopy__(self, memodict):
         # We don't have to deepcopy very much here, since most things are not
