diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index a89c35599f..1b0d4554e0 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -333,7 +333,7 @@ class BaseFormSet:
         self._non_form_errors.
         """
         self._errors = []
-        self._non_form_errors = self.error_class()
+        self._non_form_errors = self.error_class(error_class='nonform')
         empty_forms_count = 0
 
         if not self.is_bound:  # Stop further processing.
@@ -380,7 +380,7 @@ class BaseFormSet:
             # Give self.clean() a chance to do cross-form validation.
             self.clean()
         except ValidationError as e:
-            self._non_form_errors = self.error_class(e.error_list)
+            self._non_form_errors = self.error_class(e.error_list, error_class='nonform')
 
     def clean(self):
         """
diff --git a/docs/ref/forms/formsets.txt b/docs/ref/forms/formsets.txt
index 0e281f2f59..1449574e6e 100644
--- a/docs/ref/forms/formsets.txt
+++ b/docs/ref/forms/formsets.txt
@@ -1,22 +1,113 @@
-=================
-Formset Functions
-=================
+.. _formsets:
 
-Formset API reference. For introductory material about formsets, see the
-:doc:`/topics/forms/formsets` topic guide.
+Formsets
+========
 
-.. module:: django.forms.formsets
-   :synopsis: Django's functions for building formsets.
+A formset is a layer of abstraction to work with multiple forms on the same page.
+It can be best compared to a data grid. Let's say you have the following form::
 
-``formset_factory``
-===================
+    >>> from django import forms
+    >>> class ArticleForm(forms.Form):
+    ...     title = forms.CharField()
+    ...     pub_date = forms.DateField()
 
-.. function:: formset_factory(form, formset=BaseFormSet, extra=1, can_order=False, can_delete=False, max_num=None, validate_max=False, min_num=None, validate_min=False, absolute_max=None, can_delete_extra=True)
+You might want to allow the user to create several articles at once. To create a
+formset out of an ``ArticleForm`` you would do::
 
-    Returns a ``FormSet`` class for the given ``form`` class.
+    >>> from django.forms import formset_factory
+    >>> ArticleFormSet = formset_factory(ArticleForm)
 
-    See :doc:`formsets </topics/forms/formsets>` for example usage.
+You now have created a formset named ``ArticleFormSet``. The formset gives you
+the ability to iterate over the forms in the formset and display them as you
+would with a regular form::
 
-    .. versionchanged:: 3.2
+    >>> formset = ArticleFormSet()
+    >>> for form in formset:
+    ...     print(form.as_table())
+    <tr><th><label for="id_form-0-title">Title:</label></th><td><input type="text" name="form-0-title" id="id_form-0-title"></td></tr>
+    <tr><th><label for="id_form-0-pub_date">Pub date:</label></th><td><input type="text" name="form-0-pub_date" id="id_form-0-pub_date"></td></tr>
 
-        The ``absolute_max`` and ``can_delete_extra`` arguments were added.
+As you can see it only displayed one empty form. The number of empty forms that
+is displayed is controlled by the ``extra`` parameter. By default, ``formset_factory()``
+defines one extra form; the following example will display two blank forms::
+
+    >>> ArticleFormSet = formset_factory(ArticleForm, extra=2)
+
+Formset validation
+-----------------
+
+Validation with a formset is almost identical to a regular ``Form``. There is an
+``is_valid()`` method on the formset to provide a convenient way to validate
+all forms in the formset::
+
+    >>> formset = ArticleFormSet(request.POST, request.FILES)
+    >>> if formset.is_valid():
+    ...     # Do something with the formset.cleaned_data
+    ...     pass
+
+We call ``is_valid()`` if all forms in the formset are valid and if the
+formset doesn't throw any validation errors. For example, if we were to
+extend our ``ArticleFormSet`` to verify that no two articles have the same title::
+
+    >>> from django.forms import BaseFormSet
+    >>> from django.core.exceptions import ValidationError
+    >>> class BaseArticleFormSet(BaseFormSet):
+    ...     def clean(self):
+    ...         """Checks that no two articles have the same title."""
+    ...         if any(self.errors):
+    ...             # Don't bother validating the formset unless each form is valid on its own
+    ...             return
+    ...         titles = []
+    ...         for form in self.forms:
+    ...             title = form.cleaned_data.get('title')
+    ...             if title in titles:
+    ...                 raise ValidationError("Articles in a set must have distinct titles.")
+    ...             titles.append(title)
+    ...
+    >>> ArticleFormSet = formset_factory(ArticleForm, formset=BaseArticleFormSet)
+
+Non-form errors
+--------------
+
+Errors that are not associated with a particular form in the formset (like the
+example above) are raised by calling ``formset.non_form_errors()``. This method
+returns a list of errors that aren't tied to any particular form. In the above
+example, ``formset.non_form_errors()`` might contain the error "Articles in a
+set must have distinct titles."
+
+When rendered, these non-form errors will have the CSS class ``nonform`` to
+distinguish them from form-specific errors. This is similar to how non-field
+errors in a form are given the ``nonfield`` CSS class.
+
+For example::
+
+    >>> from django.core.exceptions import ValidationError
+    >>> class BaseArticleFormSet(BaseFormSet):
+    ...     def clean(self):
+    ...         """Checks that no two articles have the same title."""
+    ...         if any(self.errors):
+    ...             # Don't bother validating the formset unless each form is valid on its own
+    ...             return
+    ...         titles = []
+    ...         for form in self.forms:
+    ...             title = form.cleaned_data.get('title')
+    ...             if title in titles:
+    ...                 raise ValidationError("Articles in a set must have distinct titles.")
+    ...             titles.append(title)
+    ...
+    >>> ArticleFormSet = formset_factory(ArticleForm, formset=BaseArticleFormSet)
+    >>> formset = ArticleFormSet(initial=[
+    ...     {'title': 'Django is now open source',
+    ...      'pub_date': '2008-05-01'},
+    ...     {'title': 'Django is now open source',
+    ...      'pub_date': '2008-05-01'}
+    ... ])
+    >>> formset.is_valid()
+    False
+    >>> formset.non_form_errors()
+    ['Articles in a set must have distinct titles.']
+    >>> print(formset.non_form_errors())
+    <ul class="errorlist nonform"><li>Articles in a set must have distinct titles.</li></ul>
+
+The ``nonform`` CSS class allows you to style these errors differently from
+field-specific errors.
