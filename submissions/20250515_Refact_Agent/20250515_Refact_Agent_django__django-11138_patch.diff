diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py
index 50f85e0621..556cb28a18 100644
--- a/django/db/backends/mysql/operations.py
+++ b/django/db/backends/mysql/operations.py
@@ -69,8 +69,16 @@ class DatabaseOperations(BaseDatabaseOperations):
             return "DATE(%s)" % (field_name)
 
     def _convert_field_to_tz(self, field_name, tzname):
-        if settings.USE_TZ:
-            field_name = "CONVERT_TZ(%s, 'UTC', '%s')" % (field_name, tzname)
+        """
+        Convert the naive datetime stored in `field_name` from the storage
+        timezone (connection.timezone_name) to the requested `tzname`
+        (usually settings.TIME_ZONE).  When the two are identical no
+        conversion is needed.
+        """
+        if settings.USE_TZ and tzname and tzname != self.connection.timezone_name:
+            field_name = "CONVERT_TZ(%s, '%s', '%s')" % (
+                field_name, self.connection.timezone_name, tzname
+            )
         return field_name
 
     def datetime_cast_date_sql(self, field_name, tzname):
diff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py
index c1afb2ed5e..2628ddc494 100644
--- a/django/db/backends/oracle/operations.py
+++ b/django/db/backends/oracle/operations.py
@@ -99,9 +99,13 @@ END;
             return field_name
         if not self._tzname_re.match(tzname):
             raise ValueError("Invalid time zone name: %s" % tzname)
-        # Convert from UTC to local time, returning TIMESTAMP WITH TIME ZONE
-        # and cast it back to TIMESTAMP to strip the TIME ZONE details.
-        return "CAST((FROM_TZ(%s, '0:00') AT TIME ZONE '%s') AS TIMESTAMP)" % (field_name, tzname)
+        src_tz = self.connection.timezone_name or '0:00'
+        if src_tz == tzname:
+            return field_name
+        return (
+            "CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)"
+            % (field_name, src_tz, tzname)
+        )
 
     def datetime_cast_date_sql(self, field_name, tzname):
         field_name = self._convert_field_to_tz(field_name, tzname)
diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py
index c4b02e5c60..c3ae0ce6ce 100644
--- a/django/db/backends/sqlite3/operations.py
+++ b/django/db/backends/sqlite3/operations.py
@@ -85,7 +85,9 @@ class DatabaseOperations(BaseDatabaseOperations):
         return "django_time_trunc('%s', %s)" % (lookup_type.lower(), field_name)
 
     def _convert_tzname_to_sql(self, tzname):
-        return "'%s'" % tzname if settings.USE_TZ else 'NULL'
+        if not settings.USE_TZ or tzname == self.connection.timezone_name:
+            return 'NULL'
+        return "'%s'" % tzname
 
     def datetime_cast_date_sql(self, field_name, tzname):
         return "django_datetime_cast_date(%s, %s)" % (
