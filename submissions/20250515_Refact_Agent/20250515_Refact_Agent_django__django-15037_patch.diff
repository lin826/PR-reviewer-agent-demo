diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py
index f9b4bfb477..842453892f 100644
--- a/django/core/management/commands/inspectdb.py
+++ b/django/core/management/commands/inspectdb.py
@@ -78,6 +78,15 @@ class Command(BaseCommand):
                         constraints = connection.introspection.get_constraints(cursor, table_name)
                     except NotImplementedError:
                         constraints = {}
+                        
+                    # Enhance relations with any FK constraints that might have been missed
+                    # This ensures we capture FKs defined at table-level (common in SQLite)
+                    for constraint_name, constraint in constraints.items():
+                        if constraint['foreign_key'] and len(constraint['columns']) == 1:
+                            target_table, target_column = constraint['foreign_key']
+                            col_name = constraint['columns'][0]
+                            relations[col_name] = (target_column, target_table)
+                            
                     primary_key_column = connection.introspection.get_primary_key_column(cursor, table_name)
                     unique_columns = [
                         c['columns'][0] for c in constraints.values()
@@ -120,14 +129,26 @@ class Command(BaseCommand):
                             rel_type = 'OneToOneField'
                         else:
                             rel_type = 'ForeignKey'
+                        # Which column does this FK point to?
+                        rel_column, rel_table = relations[column_name]
                         rel_to = (
-                            "self" if relations[column_name][1] == table_name
-                            else table2model(relations[column_name][1])
+                            "self" if rel_table == table_name
+                            else table2model(rel_table)
                         )
                         if rel_to in known_models:
                             field_type = '%s(%s' % (rel_type, rel_to)
                         else:
                             field_type = "%s('%s'" % (rel_type, rel_to)
+                        
+                        # Add to_field if the FK doesn't target the PK of the other table.
+                        try:
+                            rel_pk_column = connection.introspection.get_primary_key_column(
+                                cursor, rel_table
+                            )
+                        except Exception:
+                            rel_pk_column = None
+                        if rel_column != rel_pk_column:
+                            extra_params['to_field'] = rel_column
                     else:
                         # Calling `get_field_type` to get the field type string and any
                         # additional parameters and notes.
diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py
index 8be1681106..f9bb38f308 100644
--- a/tests/inspectdb/tests.py
+++ b/tests/inspectdb/tests.py
@@ -463,3 +463,45 @@ class InspectDBTransactionalTests(TransactionTestCase):
                 cursor.execute('DROP FOREIGN TABLE IF EXISTS inspectdb_iris_foreign_table')
                 cursor.execute('DROP SERVER IF EXISTS inspectdb_server')
                 cursor.execute('DROP EXTENSION IF EXISTS file_fdw')
+                
+    @skipUnless(connection.vendor == 'sqlite', 'SQLite specific test')
+    def test_foreign_key_to_unique_field(self):
+        """
+        Test that inspectdb correctly identifies foreign keys to unique fields
+        and adds the to_field parameter.
+        """
+        with connection.cursor() as cursor:
+            cursor.execute('''\
+                CREATE TABLE inspectdb_unique_col_table (
+                    id integer PRIMARY KEY,
+                    other_id integer UNIQUE
+                )
+            ''')
+            cursor.execute('''\
+                CREATE TABLE inspectdb_fk_to_unique_table (
+                    id integer PRIMARY KEY,
+                    other_id integer,
+                    CONSTRAINT fk_unique_col
+                    FOREIGN KEY (other_id)
+                    REFERENCES inspectdb_unique_col_table(other_id)
+                )
+            ''')
+        
+        try:
+            # Run inspectdb and capture the output
+            out = StringIO()
+            call_command(
+                'inspectdb',
+                'inspectdb_unique_col_table',
+                'inspectdb_fk_to_unique_table',
+                stdout=out,
+            )
+            output = out.getvalue()
+            
+            # Check that the foreign key is correctly referencing the unique field
+            self.assertIn("other_id = models.ForeignKey('InspectdbUniqueColTable', models.DO_NOTHING", output)
+            self.assertIn("to_field='other_id'", output)
+        finally:
+            with connection.cursor() as cursor:
+                cursor.execute('DROP TABLE IF EXISTS inspectdb_fk_to_unique_table')
+                cursor.execute('DROP TABLE IF EXISTS inspectdb_unique_col_table')
