diff --git a/sympy/parsing/latex/_parse_latex_antlr.py b/sympy/parsing/latex/_parse_latex_antlr.py
index 2e4a45ad20..a9a864022c 100644
--- a/sympy/parsing/latex/_parse_latex_antlr.py
+++ b/sympy/parsing/latex/_parse_latex_antlr.py
@@ -382,6 +382,19 @@ def convert_frac(frac):
 
     expr_top = convert_expr(frac.upper)
     expr_bot = convert_expr(frac.lower)
+    
+    # If expr_bot is itself an unevaluated reciprocal like 1/x (i.e.
+    # Pow(base, -1, evaluate=False)), directly inverting it produces a
+    # misleading chain "â€¦/1/x". Resolve the fraction once so that the
+    # new inverse is taken of the *whole* denominator.
+    if isinstance(expr_bot, sympy.Pow) and expr_bot.exp == -1 and expr_bot.is_commutative:
+        # For 1/(1/x), return x instead of 1/1/x
+        if expr_top == 1:
+            return expr_bot.base
+        # For a/(1/x), return a*x instead of a/1/x
+        else:
+            return sympy.Mul(expr_top, expr_bot.base, evaluate=False)
+    
     inverse_denom = sympy.Pow(expr_bot, -1, evaluate=False)
     if expr_top == 1:
         return inverse_denom
