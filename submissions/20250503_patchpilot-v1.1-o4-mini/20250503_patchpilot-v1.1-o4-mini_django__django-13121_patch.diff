diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py
index 0403e91..b36745a 100644
--- a/django/db/backends/base/operations.py
+++ b/django/db/backends/base/operations.py
@@ -578,9 +578,32 @@ class BaseDatabaseOperations:
         """
         return []
 
+
     def convert_durationfield_value(self, value, expression, connection):
-        if value is not None:
-            return datetime.timedelta(0, 0, value)
+        """
+        Convert a value returned by the database for a DurationField into a
+        proper datetime.timedelta instance.
+
+        Strategy:
+        1. If ``value`` is ``None`` → return ``None``.
+        2. If the backend has a native duration type, the value is expected to
+           be a textual representation (e.g. “HH:MM:SS[.uuuuuu]”). Parse it
+           with ``parse_duration()``.
+        3. Otherwise, attempt to interpret the value as the number of
+           micro‑seconds and build ``timedelta(microseconds=value)``.
+           If that fails (non‑numeric input), fall back to
+           ``parse_duration()`` for robustness.
+        """
+        from django.utils.dateparse import parse_duration  # Local import to avoid touching the global imports.
+        if value is None:
+            return None
+        if connection.features.has_native_duration_field:
+            return parse_duration(value)
+        try:
+            return datetime.timedelta(microseconds=int(value))
+        except (TypeError, ValueError, decimal.InvalidOperation):
+            return parse_duration(value)
+
 
     def check_expression_support(self, expression):
         """
