diff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py
index 62cdd57..6a95e21 100644
--- a/sklearn/impute/_iterative.py
+++ b/sklearn/impute/_iterative.py
@@ -273,8 +273,11 @@ class IterativeImputer(_BaseImputer):
 
     _parameter_constraints: dict = {
         **_BaseImputer._parameter_constraints,
+
         "estimator": [None, HasMethods(["fit", "predict"])],
+        "fill_value": ["object"],
         "sample_posterior": ["boolean"],
+
         "max_iter": [Interval(Integral, 0, None, closed="left")],
         "tol": [Interval(Real, 0, None, closed="left")],
         "n_nearest_features": [None, Interval(Integral, 1, None, closed="left")],
@@ -299,8 +302,10 @@ class IterativeImputer(_BaseImputer):
         sample_posterior=False,
         max_iter=10,
         tol=1e-3,
+
         n_nearest_features=None,
         initial_strategy="mean",
+        fill_value=None,
         imputation_order="ascending",
         skip_complete=False,
         min_value=-np.inf,
@@ -322,7 +327,9 @@ class IterativeImputer(_BaseImputer):
         self.tol = tol
         self.n_nearest_features = n_nearest_features
         self.initial_strategy = initial_strategy
+        self.fill_value = fill_value
         self.imputation_order = imputation_order
+
         self.skip_complete = skip_complete
         self.min_value = min_value
         self.max_value = max_value
@@ -610,11 +617,14 @@ class IterativeImputer(_BaseImputer):
         X_missing_mask = _get_mask(X, self.missing_values)
         mask_missing_values = X_missing_mask.copy()
         if self.initial_imputer_ is None:
+
             self.initial_imputer_ = SimpleImputer(
                 missing_values=self.missing_values,
                 strategy=self.initial_strategy,
+                fill_value=self.fill_value,
                 keep_empty_features=self.keep_empty_features,
             )
+
             X_filled = self.initial_imputer_.fit_transform(X)
         else:
             X_filled = self.initial_imputer_.transform(X)
@@ -886,4 +896,4 @@ class IterativeImputer(_BaseImputer):
         """
         input_features = _check_feature_names_in(self, input_features)
         names = self.initial_imputer_.get_feature_names_out(input_features)
-        return self._concatenate_indicator_feature_names_out(names, input_features)
+        return self._concatenate_indicator_feature_names_out(names, input_features)
