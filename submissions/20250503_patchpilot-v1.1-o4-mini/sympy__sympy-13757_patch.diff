diff --git a/sympy/core/basic.py b/sympy/core/basic.py
index d4ca323e0d..0977e8172d 100644
--- a/sympy/core/basic.py
+++ b/sympy/core/basic.py
@@ -1918,4 +1918,4 @@ def _make_find_query(query):
         return lambda expr: isinstance(expr, query)
     elif isinstance(query, Basic):
         return lambda expr: expr.match(query) is not None
-    return query
+    return query
diff --git a/sympy/core/expr.py b/sympy/core/expr.py
index 72728c44ef..055df8f9f6 100644
--- a/sympy/core/expr.py
+++ b/sympy/core/expr.py
@@ -3445,4 +3445,4 @@ def _n2(a, b):
 from .function import Derivative, Function
 from .mod import Mod
 from .exprtools import factor_terms
-from .numbers import Integer, Rational
+from .numbers import Integer, Rational
diff --git a/sympy/polys/polyroots.py b/sympy/polys/polyroots.py
index 713c62446f..b036ca1010 100644
--- a/sympy/polys/polyroots.py
+++ b/sympy/polys/polyroots.py
@@ -1118,4 +1118,4 @@ def root_factors(f, *gens, **args):
     if not isinstance(f, Poly):
         factors = [ f.as_expr() for f in factors ]
 
-    return factors
+    return factors
diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py
index d5ac051f63..8d172cab30 100644
--- a/sympy/polys/polytools.py
+++ b/sympy/polys/polytools.py
@@ -355,8 +355,15 @@ def one(self):
         """Return one polynomial with ``self``'s properties. """
         return self.new(self.rep.one(self.rep.lev, self.rep.dom), *self.gens)
 
+
+
+    # Higher operator priority so that Poly methods dominate Expr operations
+    _op_priority = 20
+
     @property
+
     def unit(self):
+
         """Return unit polynomial with ``self``'s properties. """
         return self.new(self.rep.unit(self.rep.lev, self.rep.dom), *self.gens)
 
@@ -7076,4 +7083,4 @@ def _poly(expr, opt):
 
     opt = options.build_options(gens, args)
 
-    return _poly(expr, opt)
+    return _poly(expr, opt)
diff --git a/sympy/solvers/polysys.py b/sympy/solvers/polysys.py
index bd7e538885..65b0f0373b 100644
--- a/sympy/solvers/polysys.py
+++ b/sympy/solvers/polysys.py
@@ -316,4 +316,4 @@ def solve_triangulated(polys, *gens, **args):
     for i, (solution, _) in enumerate(solutions):
         solutions[i] = solution
 
-    return sorted(solutions, key=default_sort_key)
+    return sorted(solutions, key=default_sort_key)
