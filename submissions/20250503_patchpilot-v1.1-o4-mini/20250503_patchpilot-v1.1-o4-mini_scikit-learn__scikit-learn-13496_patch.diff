diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py
index 17608bc..b9c25ad 100644
--- a/sklearn/ensemble/iforest.py
+++ b/sklearn/ensemble/iforest.py
@@ -80,12 +80,19 @@ class IsolationForest(BaseBagging, OutlierMixin):
             - If int, then draw `max_features` features.
             - If float, then draw `max_features * X.shape[1]` features.
 
+
     bootstrap : boolean, optional (default=False)
         If True, individual trees are fit on random subsets of the training
         data sampled with replacement. If False, sampling without replacement
         is performed.
 
+    warm_start : bool, optional (default=False)
+        When set to ``True``, reuse the solution of the previous call to
+        ``fit`` and add more estimators to the ensemble, otherwise, just fit a
+        whole new forest. See :term:`the Glossary <warm_start>`.
+
     n_jobs : int or None, optional (default=None)
+
         The number of jobs to run in parallel for both `fit` and `predict`.
         ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.
         ``-1`` means using all processors. See :term:`Glossary <n_jobs>`
@@ -169,7 +176,9 @@ class IsolationForest(BaseBagging, OutlierMixin):
                  max_samples="auto",
                  contamination="legacy",
                  max_features=1.,
+
                  bootstrap=False,
+                 warm_start=False,
                  n_jobs=None,
                  behaviour='old',
                  random_state=None,
@@ -181,7 +190,9 @@ class IsolationForest(BaseBagging, OutlierMixin):
                 random_state=random_state),
             # here above max_features has no links with self.max_features
             bootstrap=bootstrap,
+            warm_start=warm_start,
             bootstrap_features=False,
+
             n_estimators=n_estimators,
             max_samples=max_samples,
             max_features=max_features,
@@ -507,4 +518,4 @@ def _average_path_length(n_samples_leaf):
         - 2.0 * (n_samples_leaf[not_mask] - 1.0) / n_samples_leaf[not_mask]
     )
 
-    return average_path_length.reshape(n_samples_leaf_shape)
+    return average_path_length.reshape(n_samples_leaf_shape)
