diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py
index f6a043e31f..a3c472fbb7 100644
--- a/django/db/backends/base/operations.py
+++ b/django/db/backends/base/operations.py
@@ -706,4 +706,4 @@ class BaseDatabaseOperations:
         return 'INSERT INTO'
 
     def ignore_conflicts_suffix_sql(self, ignore_conflicts=None):
-        return ''
+        return ''
diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py
index 8d19872bea..f251fdbf2d 100644
--- a/django/db/backends/postgresql/operations.py
+++ b/django/db/backends/postgresql/operations.py
@@ -43,13 +43,30 @@ class DatabaseOperations(BaseDatabaseOperations):
         # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC
         return "DATE_TRUNC('%s', %s)" % (lookup_type, field_name)
 
+
     def _prepare_tzname_delta(self, tzname):
-        if '+' in tzname:
-            return tzname.replace('+', '-')
-        elif '-' in tzname:
-            return tzname.replace('-', '+')
+        """
+        Reverse the sign on numeric UTC offsets while leaving named time zones
+        unchanged. PostgreSQL applies AT TIME ZONE in the opposite direction to
+        the SQL standard for numeric offsets, so "+03" needs to become "-03",
+        and vice‑versa. Offsets are recognized when tzname begins with "+" or
+        "-", or with "UTC+" / "UTC-". Any other strings (for example "Etc/GMT-10"
+        or "Europe/Paris") are returned unchanged.
+        """
+        if not tzname:
+            return tzname
+        # Plain numeric offsets (e.g. "+03", "-05:30").
+        first_char = tzname[0]
+        if first_char in ('+', '-'):
+            swapped_sign = '-' if first_char == '+' else '+'
+            return swapped_sign + tzname[1:]
+        # Offsets with an explicit "UTC" prefix (e.g. "UTC+03", "UTC-04:00").
+        if tzname.startswith('UTC+') or tzname.startswith('UTC-'):
+            swapped_sign = '-' if tzname[3] == '+' else '+'
+            return 'UTC' + swapped_sign + tzname[4:]
         return tzname
 
+
     def _convert_field_to_tz(self, field_name, tzname):
         if tzname and settings.USE_TZ:
             field_name = "%s AT TIME ZONE '%s'" % (field_name, self._prepare_tzname_delta(tzname))
@@ -272,4 +289,4 @@ class DatabaseOperations(BaseDatabaseOperations):
         return prefix
 
     def ignore_conflicts_suffix_sql(self, ignore_conflicts=None):
-        return 'ON CONFLICT DO NOTHING' if ignore_conflicts else super().ignore_conflicts_suffix_sql(ignore_conflicts)
+        return 'ON CONFLICT DO NOTHING' if ignore_conflicts else super().ignore_conflicts_suffix_sql(ignore_conflicts)
diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py
index 20161bef38..9a6873072e 100644
--- a/django/db/models/functions/datetime.py
+++ b/django/db/models/functions/datetime.py
@@ -332,4 +332,4 @@ class TruncSecond(TruncBase):
 
 
 DateTimeField.register_lookup(TruncDate)
-DateTimeField.register_lookup(TruncTime)
+DateTimeField.register_lookup(TruncTime)
diff --git a/django/utils/timezone.py b/django/utils/timezone.py
index bb2b6b9594..17315b612e 100644
--- a/django/utils/timezone.py
+++ b/django/utils/timezone.py
@@ -71,9 +71,32 @@ def get_current_timezone_name():
     return _get_timezone_name(get_current_timezone())
 
 
+
 def _get_timezone_name(timezone):
-    """Return the name of ``timezone``."""
-    return str(timezone)
+    """Return the name of ``timezone``.
+
+    For most time zones, this is their canonical name (e.g. "Europe/Paris").
+    For the special "Etc/GMT±X" zones, Django historically returned the
+    opposite‑sign numeric offset (e.g. "+10" for "Etc/GMT-10"). Reinstate
+    that behaviour to preserve the expected SQL rendering in Trunc()/Extract()
+    and related database functions.
+    """
+    # Obtain the canonical zone name from either a pytz or zoneinfo object.
+    name = getattr(timezone, "zone", None)  # pytz attribute.
+    if name is None:
+        name = getattr(timezone, "key", None)  # zoneinfo attribute.
+    if name is None:
+        name = str(timezone)
+
+    # Detect the special "Etc/GMT±<offset>" pattern and flip its sign.
+    if name.startswith("Etc/GMT") and len(name) > 7:
+        sign = name[7]
+        if sign in ("+", "-") and name[8:]:
+            swapped_sign = "-" if sign == "+" else "+"
+            return swapped_sign + name[8:]
+
+    return name
+
 
 # Timezone selection functions.
 
@@ -266,4 +289,4 @@ def _datetime_ambiguous_or_imaginary(dt, tz):
         else:
             return False
 
-    return tz.utcoffset(dt.replace(fold=not dt.fold)) != tz.utcoffset(dt)
+    return tz.utcoffset(dt.replace(fold=not dt.fold)) != tz.utcoffset(dt)
