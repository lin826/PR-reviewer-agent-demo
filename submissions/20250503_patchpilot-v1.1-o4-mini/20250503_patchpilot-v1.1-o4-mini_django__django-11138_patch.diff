diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py
index 3337c6c..1176012 100644
--- a/django/db/backends/mysql/operations.py
+++ b/django/db/backends/mysql/operations.py
@@ -68,10 +68,15 @@ class DatabaseOperations(BaseDatabaseOperations):
         else:
             return "DATE(%s)" % (field_name)
 
+
     def _convert_field_to_tz(self, field_name, tzname):
-        if settings.USE_TZ:
-            field_name = "CONVERT_TZ(%s, 'UTC', '%s')" % (field_name, tzname)
-        return field_name
+        if not settings.USE_TZ:
+            return field_name
+        db_tz = getattr(self.connection, 'timezone', 'UTC')
+        if db_tz == tzname:
+            return field_name
+        return "CONVERT_TZ(%s, '%s', '%s')" % (field_name, db_tz, tzname)
+
 
     def datetime_cast_date_sql(self, field_name, tzname):
         field_name = self._convert_field_to_tz(field_name, tzname)
@@ -303,4 +308,4 @@ class DatabaseOperations(BaseDatabaseOperations):
         return "REGEXP_LIKE(%%s, %%s, '%s')" % match_option
 
     def insert_statement(self, ignore_conflicts=False):
-        return 'INSERT IGNORE INTO' if ignore_conflicts else super().insert_statement(ignore_conflicts)
+        return 'INSERT IGNORE INTO' if ignore_conflicts else super().insert_statement(ignore_conflicts)
diff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py
index 180886c..c586cb8 100644
--- a/django/db/backends/oracle/operations.py
+++ b/django/db/backends/oracle/operations.py
@@ -94,14 +94,17 @@ END;
     # This regexp matches all time zone names from the zoneinfo database.
     _tzname_re = re.compile(r'^[\w/:+-]+$')
 
+
     def _convert_field_to_tz(self, field_name, tzname):
         if not settings.USE_TZ:
             return field_name
         if not self._tzname_re.match(tzname):
             raise ValueError("Invalid time zone name: %s" % tzname)
-        # Convert from UTC to local time, returning TIMESTAMP WITH TIME ZONE
-        # and cast it back to TIMESTAMP to strip the TIME ZONE details.
-        return "CAST((FROM_TZ(%s, '0:00') AT TIME ZONE '%s') AS TIMESTAMP)" % (field_name, tzname)
+        db_tz = getattr(self.connection, 'timezone', '0:00')
+        if db_tz == tzname:
+            return field_name
+        return "CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)" % (field_name, db_tz, tzname)
+
 
     def datetime_cast_date_sql(self, field_name, tzname):
         field_name = self._convert_field_to_tz(field_name, tzname)
@@ -586,4 +589,4 @@ END;
         """Oracle restricts the number of parameters in a query."""
         if fields:
             return self.connection.features.max_query_params // len(fields)
-        return len(objs)
+        return len(objs)
diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py
index d0eb2d2..eda1fab 100644
--- a/django/db/backends/sqlite3/operations.py
+++ b/django/db/backends/sqlite3/operations.py
@@ -84,8 +84,15 @@ class DatabaseOperations(BaseDatabaseOperations):
     def time_trunc_sql(self, lookup_type, field_name):
         return "django_time_trunc('%s', %s)" % (lookup_type.lower(), field_name)
 
+
     def _convert_tzname_to_sql(self, tzname):
-        return "'%s'" % tzname if settings.USE_TZ else 'NULL'
+        if not settings.USE_TZ:
+            return 'NULL'
+        db_tz = getattr(self.connection, 'timezone_name', 'UTC')
+        if db_tz == tzname:
+            return 'NULL'
+        return "'%s','%s'" % (db_tz, tzname)
+
 
     def datetime_cast_date_sql(self, field_name, tzname):
         return "django_datetime_cast_date(%s, %s)" % (
@@ -330,4 +337,4 @@ class DatabaseOperations(BaseDatabaseOperations):
         return "django_timestamp_diff(%s, %s)" % (lhs_sql, rhs_sql), lhs_params + rhs_params
 
     def insert_statement(self, ignore_conflicts=False):
-        return 'INSERT OR IGNORE INTO' if ignore_conflicts else super().insert_statement(ignore_conflicts)
+        return 'INSERT OR IGNORE INTO' if ignore_conflicts else super().insert_statement(ignore_conflicts)
