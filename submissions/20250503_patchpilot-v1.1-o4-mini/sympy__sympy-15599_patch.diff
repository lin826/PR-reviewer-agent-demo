diff --git a/sympy/core/mod.py b/sympy/core/mod.py
index eae25630cc..c46d539884 100644
--- a/sympy/core/mod.py
+++ b/sympy/core/mod.py
@@ -112,20 +112,41 @@ def doit(p, q):
             both_l = non_mod_l, mod_l = [], []
             for arg in p.args:
                 both_l[isinstance(arg, cls)].append(arg)
-            # if q same for all
-            if mod_l and all(inner.args[1] == q for inner in mod_l):
-                net = Add(*non_mod_l) + Add(*[i.args[0] for i in mod_l])
+
+            # prepare non-Mod terms for possible distribution of Mod
+            was = non_mod_l[:]
+            non_mod_l = [cls(x, q) for x in non_mod_l]
+            changed = was != non_mod_l
+
+            # if an applicable change occurred (non-Mod terms were transformed into Mods
+            # but there were no existing Mods), or all existing Mod terms share the same q
+            if (changed and not mod_l) or (mod_l and all(inner.args[1] == q for inner in mod_l)):
+
+                mod_terms = []
+                for j in non_mod_l:
+                    if isinstance(j, cls):
+                        mod_terms.append(j.args[0])
+                    else:
+                        mod_terms.append(j)
+                net = Add(*mod_terms) + Add(*[i.args[0] for i in mod_l])
                 return cls(net, q)
 
+
         elif isinstance(p, Mul):
             # separating into modulus and non modulus
             both_l = non_mod_l, mod_l = [], []
             for arg in p.args:
+
                 both_l[isinstance(arg, cls)].append(arg)
 
-            if mod_l and all(inner.args[1] == q for inner in mod_l):
+            was = non_mod_l[:]
+            non_mod_l = [cls(x, q) for x in non_mod_l]
+
+            changed = was != non_mod_l
+            if (changed and not mod_l) or (mod_l and all(inner.args[1] == q for inner in mod_l)):
+
                 # finding distributive term
-                non_mod_l = [cls(x, q) for x in non_mod_l]
+
                 mod = []
                 non_mod = []
                 for j in non_mod_l:
diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py
index ba5d3a75c9..72aaea4c6e 100644
--- a/sympy/matrices/matrices.py
+++ b/sympy/matrices/matrices.py
@@ -4564,4 +4564,4 @@ def _find_reasonable_pivot_naive(col, iszerofunc=_iszero, simpfunc=None):
                 # Candidate pivot simplified to a guaranteed non-zero value.
                 return i, tmp_col_val, False, newly_determined
 
-    return indeterminates[0][0], indeterminates[0][1], True, newly_determined
+    return indeterminates[0][0], indeterminates[0][1], True, newly_determined
diff --git a/sympy/simplify/hyperexpand.py b/sympy/simplify/hyperexpand.py
index 7ee1b385c4..e6a25d85c1 100644
--- a/sympy/simplify/hyperexpand.py
+++ b/sympy/simplify/hyperexpand.py
@@ -2470,4 +2470,4 @@ def do_meijer(ap, bq, z):
                    allow_hyper, rewrite=rewrite, place=place)
         if not r.has(nan, zoo, oo, -oo):
             return r
-    return f.replace(hyper, do_replace).replace(meijerg, do_meijer)
+    return f.replace(hyper, do_replace).replace(meijerg, do_meijer)
