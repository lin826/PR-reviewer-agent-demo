diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py
index 8b23275..378b425 100644
--- a/django/db/models/constraints.py
+++ b/django/db/models/constraints.py
@@ -16,13 +16,21 @@ from django.utils.translation import gettext_lazy as _
 __all__ = ["BaseConstraint", "CheckConstraint", "Deferrable", "UniqueConstraint"]
 
 
+
 class BaseConstraint:
     default_violation_error_message = _("Constraint “%(name)s” is violated.")
+    default_violation_error_code = None
     violation_error_message = None
 
     # RemovedInDjango60Warning: When the deprecation ends, replace with:
-    # def __init__(self, *, name, violation_error_message=None):
-    def __init__(self, *args, name=None, violation_error_message=None):
+    # def __init__(self, *, name, violation_error_message=None, violation_error_code=None):
+    def __init__(
+        self,
+        *args,
+        name=None,
+        violation_error_message=None,
+        violation_error_code=None,
+    ):
         # RemovedInDjango60Warning.
         if name is None and not args:
             raise TypeError(
@@ -34,6 +42,10 @@ class BaseConstraint:
             self.violation_error_message = violation_error_message
         else:
             self.violation_error_message = self.default_violation_error_message
+        if violation_error_code is not None:
+            self.violation_error_code = violation_error_code
+        else:
+            self.violation_error_code = self.default_violation_error_code
         # RemovedInDjango60Warning.
         if args:
             warnings.warn(
@@ -42,7 +54,10 @@ class BaseConstraint:
                 RemovedInDjango60Warning,
                 stacklevel=2,
             )
-            for arg, attr in zip(args, ["name", "violation_error_message"]):
+            for arg, attr in zip(
+                args,
+                ["name", "violation_error_message", "violation_error_code"],
+            ):
                 if arg:
                     setattr(self, attr, arg)
 
@@ -65,6 +80,9 @@ class BaseConstraint:
     def get_violation_error_message(self):
         return self.violation_error_message % {"name": self.name}
 
+    def get_violation_error_code(self):
+        return self.violation_error_code
+
     def deconstruct(self):
         path = "%s.%s" % (self.__class__.__module__, self.__class__.__name__)
         path = path.replace("django.db.models.constraints", "django.db.models")
@@ -74,8 +92,14 @@ class BaseConstraint:
             and self.violation_error_message != self.default_violation_error_message
         ):
             kwargs["violation_error_message"] = self.violation_error_message
+        if (
+            self.violation_error_code is not None
+            and self.violation_error_code != self.default_violation_error_code
+        ):
+            kwargs["violation_error_code"] = self.violation_error_code
         return (path, (), kwargs)
 
+
     def clone(self):
         _, args, kwargs = self.deconstruct()
         return self.__class__(*args, **kwargs)
@@ -111,8 +135,10 @@ class CheckConstraint(BaseConstraint):
     def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):
         against = instance._get_field_value_map(meta=model._meta, exclude=exclude)
         try:
+
             if not Q(self.check).check(against, using=using):
-                raise ValidationError(self.get_violation_error_message())
+                raise ValidationError(self.get_violation_error_message(), code=self.get_violation_error_code())
+
         except FieldError:
             pass
 
