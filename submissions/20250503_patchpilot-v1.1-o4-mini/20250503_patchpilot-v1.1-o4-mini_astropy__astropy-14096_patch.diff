diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py
index f158027..69a1384 100644
--- a/astropy/coordinates/sky_coordinate.py
+++ b/astropy/coordinates/sky_coordinate.py
@@ -867,11 +867,29 @@ class SkyCoord(ShapedLikeNDArray):
         )
 
     def __getattr__(self, attr):
+
         """
         Overrides getattr to return coordinates that this can be transformed
         to, based on the alias attr in the primary transform graph.
         """
+        # First try the normal Python lookup again.  If it succeeds we
+        # simply return the result.  If it fails we need to decide
+        # whether the failure is because the attribute is really missing
+        # or because something *inside* the descriptor raised
+        # AttributeError.  In the latter case we must propagate the
+        # original exception so that users see the correct attribute
+        # name in the traceback.
+        try:
+            return object.__getattribute__(self, attr)
+        except AttributeError as exc:
+            # If the attribute actually exists on the class (i.e. is
+            # defined somewhere in the MRO) then the exception came from
+            # inside that attributeâ€™s logic and should not be masked.
+            if any(attr in cls.__dict__ for cls in self.__class__.__mro__):
+                raise
+            # Otherwise, continue with SkyCoord's special handling below.
         if "_sky_coord_frame" in self.__dict__:
+
             if self._is_name(attr):
                 return self  # Should this be a deepcopy of self?
 
