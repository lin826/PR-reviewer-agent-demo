diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py
index c947b29..ba227c4 100644
--- a/src/_pytest/_code/code.py
+++ b/src/_pytest/_code/code.py
@@ -883,12 +883,35 @@ class ExceptionRepr(TerminalRepr):
 class ExceptionChainRepr(ExceptionRepr):
     def __init__(self, chain):
         super().__init__()
+
         self.chain = chain
-        # reprcrash and reprtraceback of the outermost (the newest) exception
-        # in the chain
-        self.reprtraceback = chain[-1][0]
+
+        # Build a single traceback representation containing every entry from
+        # the complete exception chain, inserting a descriptive marker between
+        # chained exceptions when required.
+        all_entries = []
+        for reprtraceback, reprcrash, descr in chain:
+            if reprtraceback is not None:
+                # Regular traceback representation produced by pytest.
+                reprentries = getattr(reprtraceback, "reprentries", None)
+                if reprentries is not None:
+                    all_entries.extend(reprentries)
+                else:
+                    # Fallback for native tracebacks (no structured entries).
+                    all_entries.append(ReprEntryNative(reprtraceback.lines))
+            # Insert the textual description between exceptions (if any).
+            if descr is not None:
+                all_entries.append(
+                    ReprEntry([descr], None, None, None, style="long")
+                )
+
+        # Aggregate all gathered entries into a single ReprTraceback object.
+        self.reprtraceback = ReprTraceback(all_entries, extraline=None, style="long")
+
+        # Keep the crash location information from the outermost exception.
         self.reprcrash = chain[-1][1]
 
+
     def toterminal(self, tw):
         for element in self.chain:
             element[0].toterminal(tw)
