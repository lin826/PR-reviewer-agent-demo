diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py
index 4e6b0df..57a0c84 100644
--- a/sphinx/builders/linkcheck.py
+++ b/sphinx/builders/linkcheck.py
@@ -109,8 +109,49 @@ class CheckExternalLinksBuilder(Builder):
             thread.start()
             self.workers.append(thread)
 
+
+    def _check_local_uri(self, uri: str, docname: str) -> Tuple[str, str, int]:
+        """Validate a local (internal) URI.
+
+        1. Strip any ``#anchor`` part.
+        2. Resolve the remaining path relative to the document to an absolute
+           filename.
+        3. If the target exists on disk, mark it as working.
+        4. Otherwise, if the link ends with ``.html`` try to map it back to a
+           source document (by stripping the extension) and verify that the
+           docname exists.
+        5. If all checks fail, consider the link broken.
+        """
+        # Split off anchor, keep path part only
+        if '#' in uri:
+            path_part, _ = uri.split('#', 1)
+        else:
+            path_part = uri
+
+        # Resolve to absolute path within the project
+        _, abs_path = self.env.relfn2path(path_part, docname)
+
+        # Check if the file exists
+        if path.exists(abs_path):
+            self.good.add(uri)
+            return 'working', '', 0
+
+        # Attempt to map "*.html" to a document in found_docs
+        if path_part.endswith('.html'):
+            doc_candidate = path_part[:-5].lstrip('/')          # strip ".html" and leading "/"
+            doc_candidate = doc_candidate.replace(path.sep, '/')  # normalise separators
+            if doc_candidate in self.env.found_docs:
+                self.good.add(uri)
+                return 'working', '', 0
+
+        # Nothing matched: record as broken
+        info = __('local target not found')
+        self.broken[uri] = info
+        return 'broken', info, 0
+
     def check_thread(self) -> None:
         kwargs = {
+
             'allow_redirects': True,
         }  # type: Dict
         if self.app.config.linkcheck_timeout:
@@ -212,8 +253,10 @@ class CheckExternalLinksBuilder(Builder):
             # check for various conditions without bothering the network
             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):
                 return 'unchecked', '', 0
+
             elif not uri.startswith(('http:', 'https:')):
-                return 'local', '', 0
+                return self._check_local_uri(uri, docname)
+
             elif uri in self.good:
                 return 'working', 'old', 0
             elif uri in self.broken:
@@ -370,4 +413,4 @@ def setup(app: Sphinx) -> Dict[str, Any]:
         'version': 'builtin',
         'parallel_read_safe': True,
         'parallel_write_safe': True,
-    }
+    }
