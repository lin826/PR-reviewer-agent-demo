diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py
index 86692c3..9ff8329 100644
--- a/django/db/backends/sqlite3/schema.py
+++ b/django/db/backends/sqlite3/schema.py
@@ -120,8 +120,33 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
         else:
             super().alter_db_table(model, old_db_table, new_db_table)
 
+
+    def _field_should_be_altered(self, old_field, new_field):
+        """
+        Return True if ``old_field`` should be altered to match ``new_field``.
+
+        On SQLite, changes that only modify ``choices`` don't affect the on‑disk
+        schema and should therefore be treated as no‑ops.
+        """
+        # First, delegate to the base implementation.
+        should_alter = super()._field_should_be_altered(old_field, new_field)
+        if not should_alter:
+            return False
+
+        # If choices differ, check whether they're the sole difference.
+        if old_field.choices != new_field.choices:
+            old_clone = copy.copy(old_field)
+            new_clone = copy.copy(new_field)
+            sentinel = object()
+            old_clone.choices = sentinel
+            new_clone.choices = sentinel
+            if not super()._field_should_be_altered(old_clone, new_clone):
+                return False
+        return True
+
     def alter_field(self, model, old_field, new_field, strict=False):
         if not self._field_should_be_altered(old_field, new_field):
+
             return
         old_field_name = old_field.name
         table_name = model._meta.db_table
