diff --git a/sympy/physics/quantum/dagger.py b/sympy/physics/quantum/dagger.py
index 0107229..fec62a8 100644
--- a/sympy/physics/quantum/dagger.py
+++ b/sympy/physics/quantum/dagger.py
@@ -76,6 +76,7 @@ class Dagger(adjoint):
     .. [2] https://en.wikipedia.org/wiki/Hermitian_transpose
     """
 
+
     def __new__(cls, arg):
         if hasattr(arg, 'adjoint'):
             obj = arg.adjoint()
@@ -85,5 +86,12 @@ class Dagger(adjoint):
             return obj
         return Expr.__new__(cls, arg)
 
+    def __mul__(self, other):
+        from sympy.physics.quantum.operator import IdentityOperator
+        if isinstance(other, IdentityOperator):
+            return self
+        return Expr.__mul__(self, other)
+
+
 adjoint.__name__ = "Dagger"
-adjoint._sympyrepr = lambda a, b: "Dagger(%s)" % b._print(a.args[0])
+adjoint._sympyrepr = lambda a, b: "Dagger(%s)" % b._print(a.args[0])
diff --git a/sympy/physics/quantum/operator.py b/sympy/physics/quantum/operator.py
index 9e9a129..50c138b 100644
--- a/sympy/physics/quantum/operator.py
+++ b/sympy/physics/quantum/operator.py
@@ -307,9 +307,12 @@ class IdentityOperator(Operator):
 
     def __mul__(self, other):
 
-        if isinstance(other, Operator):
+
+        from sympy.physics.quantum.dagger import Dagger
+        if isinstance(other, (Operator, Dagger)):
             return other
 
+
         return Mul(self, other)
 
     def _represent_default_basis(self, **options):
