diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index 397146a354..4d9032819f 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -1693,4 +1693,4 @@ class ManyToManyField(RelatedField):
         return None
 
     def db_parameters(self, connection):
-        return {"type": None, "check": None}
+        return {"type": None, "check": None}
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index f7c6d74e72..8e290b2795 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -348,4 +348,4 @@ class FilteredRelation:
         # Resolve the condition in Join.filtered_relation.
         query = compiler.query
         where = query.build_filtered_relation_q(self.condition, reuse=set(self.path))
-        return compiler.compile(where)
+        return compiler.compile(where)
diff --git a/django/forms/models.py b/django/forms/models.py
index 5d115458a1..f17b5708d3 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -99,8 +99,12 @@ def apply_limit_choices_to_to_formfield(formfield):
     """Apply limit_choices_to to the formfield's queryset if needed."""
     if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):
         limit_choices_to = formfield.get_limit_choices_to()
+
         if limit_choices_to is not None:
-            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to)
+            formfield.queryset = (
+                formfield.queryset.complex_filter(limit_choices_to).distinct()
+            )
+
 
 
 def fields_for_model(model, fields=None, exclude=None, widgets=None,
@@ -1154,8 +1158,10 @@ class ModelChoiceIterator:
     def __iter__(self):
         if self.field.empty_label is not None:
             yield ("", self.field.empty_label)
-        queryset = self.queryset
+
+        queryset = self.queryset.distinct()
         # Can't use iterator() when queryset uses prefetch_related()
+
         if not queryset._prefetch_related_lookups:
             queryset = queryset.iterator()
         for obj in queryset:
@@ -1398,4 +1404,4 @@ def modelform_defines_fields(form_class):
     return hasattr(form_class, '_meta') and (
         form_class._meta.fields is not None or
         form_class._meta.exclude is not None
-    )
+    )
