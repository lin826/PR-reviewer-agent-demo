diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 471c162..de87ad5 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -1297,14 +1297,51 @@ def _format_value(value):
         return ""
 
 
+
 def _format_float(value):
     """Format a floating number to make sure it gets the decimal point."""
+    # 1. Start with Python's default string representation; this is often
+    #    the shortest round‑trippable form.
+    value_str = str(value)
+
+    # 2. Normalise scientific notation to use an upper‑case 'E' and
+    #    ensure the exponent has at least two digits.
+    if "e" in value_str or "E" in value_str:
+        if "e" in value_str:
+            significand, exponent = value_str.split("e")
+        else:
+            significand, exponent = value_str.split("E")
+
+        if exponent and exponent[0] in ("+", "-"):
+            sign = exponent[0]
+            exponent_digits = exponent[1:]
+        else:
+            sign = ""
+            exponent_digits = exponent
+
+        # Strip leading zeros then re‑pad to two digits
+        try:
+            exponent_int = int(exponent_digits)
+        except ValueError:
+            # Should not occur for valid float strings but guard anyway
+            exponent_int = 0
+        value_str = f"{significand}E{sign}{exponent_int:02d}"
+
+    # 3. Guarantee a decimal point for non‑exponent values (except inf/nan).
+    elif "." not in value_str and value_str.lower() not in ("inf", "-inf", "nan"):
+        value_str += ".0"
+
+    # 4. If this representation already fits within 20 characters, use it.
+    if len(value_str) <= 20:
+        return value_str
+
+    # 5. Fall back to the original 16‑significant‑figure formatting.
     value_str = f"{value:.16G}"
     if "." not in value_str and "E" not in value_str:
         value_str += ".0"
     elif "E" in value_str:
         # On some Windows builds of Python (and possibly other platforms?) the
-        # exponent is zero-padded out to, it seems, three digits.  Normalize
+        # exponent is zero‑padded out to, it seems, three digits.  Normalize
         # the format to pad only to two digits.
         significand, exponent = value_str.split("E")
         if exponent[0] in ("+", "-"):
@@ -1328,6 +1365,7 @@ def _format_float(value):
     return value_str
 
 
+
 def _pad(input):
     """Pad blank space to the input string to be multiple of 80."""
     _len = len(input)
