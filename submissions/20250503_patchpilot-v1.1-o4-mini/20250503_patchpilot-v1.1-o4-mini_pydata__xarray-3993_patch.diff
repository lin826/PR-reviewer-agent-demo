diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py
index 4198249..11beeb9 100644
--- a/xarray/core/dataarray.py
+++ b/xarray/core/dataarray.py
@@ -3544,9 +3544,56 @@ class DataArray(AbstractArray, DataWithCoords):
 
         dask.array.core.unify_chunks
         """
+
         ds = self._to_temp_dataset().unify_chunks()
         return self._from_temp_dataset(ds)
 
+    def integrate(
+        self,
+        coord: Union[Hashable, Sequence[Hashable]] = None,
+        *,
+        datetime_unit: str = None,
+        dim: Union[Hashable, Sequence[Hashable]] = None,
+    ) -> "DataArray":
+        """Integrate the array with the trapezoidal rule.
+
+        .. note::
+            This feature is limited to simple cartesian geometry, i.e. the
+            coordinate must be one dimensional.
+
+        Parameters
+        ----------
+        coord : hashable or sequence of hashable
+            Coordinate(s) used for the integration.
+        datetime_unit : {"Y", "M", "W", "D", "h", "m", "s", "ms", "us", "ns", \
+                         "ps", "fs", "as"}, optional
+            Unit to use if a datetime coordinate is supplied.
+        dim : hashable or sequence of hashable, optional
+            Deprecated name for ``coord``. Will be removed in a future version.
+
+        Returns
+        -------
+        integrated : DataArray
+
+        See also
+        --------
+        numpy.trapz : corresponding NumPy function
+        """
+        if coord is None and dim is None:
+            raise TypeError("coord must be supplied")
+        if coord is None and dim is not None:
+            warnings.warn(
+                "`dim` is deprecated; use `coord` instead.",
+                FutureWarning,
+                stacklevel=3,
+            )
+            coord = dim
+        elif coord is not None and dim is not None:
+            raise TypeError("Cannot specify both `coord` and `dim`.")
+        ds = self._to_temp_dataset().integrate(coord, datetime_unit)
+        return self._from_temp_dataset(ds)
+
+
     def map_blocks(
         self,
         func: "Callable[..., T_DSorDA]",
