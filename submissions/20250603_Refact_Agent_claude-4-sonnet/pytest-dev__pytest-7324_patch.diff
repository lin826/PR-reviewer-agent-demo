diff --git a/src/_pytest/mark/expression.py b/src/_pytest/mark/expression.py
index 04c73411a..48379d430 100644
--- a/src/_pytest/mark/expression.py
+++ b/src/_pytest/mark/expression.py
@@ -161,7 +161,16 @@ def not_expr(s: Scanner) -> ast.expr:
         return ret
     ident = s.accept(TokenType.IDENT)
     if ident:
-        return ast.Name(ident.value, ast.Load())
+        # Handle reserved names that can't be used as Name nodes in Python 3.8+
+        # by using alternative internal names
+        if ident.value == "True":
+            return ast.Name("__pytest_True", ast.Load())
+        elif ident.value == "False":
+            return ast.Name("__pytest_False", ast.Load())
+        elif ident.value == "None":
+            return ast.Name("__pytest_None", ast.Load())
+        else:
+            return ast.Name(ident.value, ast.Load())
     s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.IDENT))
 
 
@@ -172,7 +181,15 @@ class MatcherAdapter(Mapping[str, bool]):
         self.matcher = matcher
 
     def __getitem__(self, key: str) -> bool:
-        return self.matcher(key)
+        # Handle special internal names for reserved constants
+        if key == "__pytest_True":
+            return self.matcher("True")
+        elif key == "__pytest_False":
+            return self.matcher("False")
+        elif key == "__pytest_None":
+            return self.matcher("None")
+        else:
+            return self.matcher(key)
 
     def __iter__(self) -> Iterator[str]:
         raise NotImplementedError()
diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py
index 335888618..1052be6ac 100644
--- a/testing/test_mark_expression.py
+++ b/testing/test_mark_expression.py
@@ -166,3 +166,24 @@ def test_valid_idents(ident: str) -> None:
 def test_invalid_idents(ident: str) -> None:
     with pytest.raises(ParseError):
         evaluate(ident, lambda ident: True)
+
+
+def test_reserved_names_as_identifiers() -> None:
+    """Test that Python reserved names can be used as identifiers in expressions.
+    
+    This is a regression test for the issue where Expression.compile("False")
+    would crash on Python 3.8+ due to AST restrictions on Name nodes.
+    """
+    # Test that reserved names work as identifiers and respect the matcher
+    assert evaluate("True", {"True": True}.__getitem__) is True
+    assert evaluate("True", {"True": False}.__getitem__) is False
+    assert evaluate("False", {"False": True}.__getitem__) is True
+    assert evaluate("False", {"False": False}.__getitem__) is False
+    assert evaluate("None", {"None": True}.__getitem__) is True
+    assert evaluate("None", {"None": False}.__getitem__) is False
+    
+    # Test in complex expressions
+    matcher = {"True": True, "False": True, "None": False}.__getitem__
+    assert evaluate("True and False", matcher) is True  # Both match
+    assert evaluate("True and None", matcher) is False  # None doesn't match
+    assert evaluate("not None", matcher) is True  # None doesn't match, so not False = True
