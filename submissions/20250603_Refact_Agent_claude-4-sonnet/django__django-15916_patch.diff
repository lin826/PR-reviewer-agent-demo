diff --git a/django/forms/models.py b/django/forms/models.py
index 192d9fad94..8e5cd80b16 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -253,6 +253,7 @@ class ModelFormOptions:
         self.help_texts = getattr(options, "help_texts", None)
         self.error_messages = getattr(options, "error_messages", None)
         self.field_classes = getattr(options, "field_classes", None)
+        self.formfield_callback = getattr(options, "formfield_callback", None)
 
 
 class ModelFormMetaclass(DeclarativeFieldsMetaclass):
@@ -271,6 +272,10 @@ class ModelFormMetaclass(DeclarativeFieldsMetaclass):
             return new_class
 
         opts = new_class._meta = ModelFormOptions(getattr(new_class, "Meta", None))
+        
+        # If no formfield_callback was provided, check if Meta has one
+        if formfield_callback is None and opts.formfield_callback is not None:
+            formfield_callback = opts.formfield_callback
 
         # We check if a string was passed to `fields` or `exclude`,
         # which is likely to be a mistake where the user typed ('foo') instead
@@ -636,7 +641,9 @@ def modelform_factory(
     class_name = model.__name__ + "Form"
 
     # Class attributes for the new form class.
-    form_class_attrs = {"Meta": Meta, "formfield_callback": formfield_callback}
+    form_class_attrs = {"Meta": Meta}
+    if formfield_callback is not None:
+        form_class_attrs["formfield_callback"] = formfield_callback
 
     if getattr(Meta, "fields", None) is None and getattr(Meta, "exclude", None) is None:
         raise ImproperlyConfigured(
diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py
index d2ce3348c5..3d0b268226 100644
--- a/tests/model_forms/tests.py
+++ b/tests/model_forms/tests.py
@@ -3496,6 +3496,61 @@ class FormFieldCallbackTests(SimpleTestCase):
                 type(NewForm.base_fields[name].widget),
             )
 
+    def test_meta_formfield_callback_inheritance(self):
+        """
+        Test that modelform_factory inherits formfield_callback from the base form's Meta class.
+        Regression test for the issue where formfield_callback defined in a ModelForm's Meta
+        class was not being used when creating forms with modelform_factory.
+        """
+        def make_required_callback(db_field, **kwargs):
+            formfield = db_field.formfield(**kwargs)
+            if formfield:
+                formfield.required = True
+            return formfield
+
+        class BaseFormWithCallback(forms.ModelForm):
+            class Meta:
+                model = Person
+                formfield_callback = make_required_callback
+                fields = "__all__"
+
+        # Test that the original form uses the callback
+        original_form = BaseFormWithCallback()
+        self.assertTrue(original_form.fields['name'].required)
+
+        # Test that factory form inherits the callback from Meta
+        FactoryForm = modelform_factory(Person, form=BaseFormWithCallback)
+        factory_form = FactoryForm()
+        self.assertTrue(factory_form.fields['name'].required)
+
+        # Test that explicit callback overrides Meta callback
+        def override_callback(db_field, **kwargs):
+            formfield = db_field.formfield(**kwargs)
+            if formfield:
+                formfield.help_text = f"Override help for {db_field.name}"
+                formfield.required = False  # Explicitly set to False to test override
+            return formfield
+
+        OverrideForm = modelform_factory(
+            Person, 
+            form=BaseFormWithCallback, 
+            formfield_callback=override_callback
+        )
+        override_form = OverrideForm()
+        # Override callback should be used (not required, has help text)
+        self.assertFalse(override_form.fields['name'].required)
+        self.assertIn("Override help for name", override_form.fields['name'].help_text)
+
+        # Test that None callback doesn't override Meta callback
+        NoneCallbackForm = modelform_factory(
+            Person, 
+            form=BaseFormWithCallback, 
+            formfield_callback=None
+        )
+        none_callback_form = NoneCallbackForm()
+        # Meta callback should still be called
+        self.assertTrue(none_callback_form.fields['name'].required)
+
 
 class LocalizedModelFormTest(TestCase):
     def test_model_form_applies_localize_to_some_fields(self):
