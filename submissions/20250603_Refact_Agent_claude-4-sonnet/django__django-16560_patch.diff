diff --git a/django/contrib/postgres/constraints.py b/django/contrib/postgres/constraints.py
index ad3a5f61f5..b53b4e6724 100644
--- a/django/contrib/postgres/constraints.py
+++ b/django/contrib/postgres/constraints.py
@@ -33,6 +33,7 @@ class ExclusionConstraint(BaseConstraint):
         deferrable=None,
         include=None,
         violation_error_message=None,
+        violation_error_code=None,
     ):
         if index_type and index_type.lower() not in {"gist", "spgist"}:
             raise ValueError(
@@ -60,7 +61,7 @@ class ExclusionConstraint(BaseConstraint):
         self.condition = condition
         self.deferrable = deferrable
         self.include = tuple(include) if include else ()
-        super().__init__(name=name, violation_error_message=violation_error_message)
+        super().__init__(name=name, violation_error_message=violation_error_message, violation_error_code=violation_error_code)
 
     def _get_expressions(self, schema_editor, query):
         expressions = []
@@ -150,6 +151,7 @@ class ExclusionConstraint(BaseConstraint):
                 and self.deferrable == other.deferrable
                 and self.include == other.include
                 and self.violation_error_message == other.violation_error_message
+                and self.violation_error_code == other.violation_error_code
             )
         return super().__eq__(other)
 
@@ -204,9 +206,15 @@ class ExclusionConstraint(BaseConstraint):
             queryset = queryset.exclude(pk=model_class_pk)
         if not self.condition:
             if queryset.exists():
-                raise ValidationError(self.get_violation_error_message())
+                raise ValidationError(
+                    self.get_violation_error_message(),
+                    code=self.get_violation_error_code(),
+                )
         else:
             if (self.condition & Exists(queryset.filter(self.condition))).check(
                 replacement_map, using=using
             ):
-                raise ValidationError(self.get_violation_error_message())
+                raise ValidationError(
+                    self.get_violation_error_message(),
+                    code=self.get_violation_error_code(),
+                )
diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py
index 075ecee1be..7aea9293e0 100644
--- a/django/db/models/constraints.py
+++ b/django/db/models/constraints.py
@@ -19,10 +19,11 @@ __all__ = ["BaseConstraint", "CheckConstraint", "Deferrable", "UniqueConstraint"
 class BaseConstraint:
     default_violation_error_message = _("Constraint “%(name)s” is violated.")
     violation_error_message = None
+    violation_error_code = None
 
     # RemovedInDjango60Warning: When the deprecation ends, replace with:
-    # def __init__(self, *, name, violation_error_message=None):
-    def __init__(self, *args, name=None, violation_error_message=None):
+    # def __init__(self, *, name, violation_error_message=None, violation_error_code=None):
+    def __init__(self, *args, name=None, violation_error_message=None, violation_error_code=None):
         # RemovedInDjango60Warning.
         if name is None and not args:
             raise TypeError(
@@ -34,6 +35,7 @@ class BaseConstraint:
             self.violation_error_message = violation_error_message
         else:
             self.violation_error_message = self.default_violation_error_message
+        self.violation_error_code = violation_error_code
         # RemovedInDjango60Warning.
         if args:
             warnings.warn(
@@ -65,6 +67,9 @@ class BaseConstraint:
     def get_violation_error_message(self):
         return self.violation_error_message % {"name": self.name}
 
+    def get_violation_error_code(self):
+        return self.violation_error_code
+
     def deconstruct(self):
         path = "%s.%s" % (self.__class__.__module__, self.__class__.__name__)
         path = path.replace("django.db.models.constraints", "django.db.models")
@@ -74,6 +79,8 @@ class BaseConstraint:
             and self.violation_error_message != self.default_violation_error_message
         ):
             kwargs["violation_error_message"] = self.violation_error_message
+        if self.violation_error_code is not None:
+            kwargs["violation_error_code"] = self.violation_error_code
         return (path, (), kwargs)
 
     def clone(self):
@@ -82,13 +89,13 @@ class BaseConstraint:
 
 
 class CheckConstraint(BaseConstraint):
-    def __init__(self, *, check, name, violation_error_message=None):
+    def __init__(self, *, check, name, violation_error_message=None, violation_error_code=None):
         self.check = check
         if not getattr(check, "conditional", False):
             raise TypeError(
                 "CheckConstraint.check must be a Q instance or boolean expression."
             )
-        super().__init__(name=name, violation_error_message=violation_error_message)
+        super().__init__(name=name, violation_error_message=violation_error_message, violation_error_code=violation_error_code)
 
     def _get_check_sql(self, model, schema_editor):
         query = Query(model=model, alias_cols=False)
@@ -112,7 +119,10 @@ class CheckConstraint(BaseConstraint):
         against = instance._get_field_value_map(meta=model._meta, exclude=exclude)
         try:
             if not Q(self.check).check(against, using=using):
-                raise ValidationError(self.get_violation_error_message())
+                raise ValidationError(
+                    self.get_violation_error_message(),
+                    code=self.get_violation_error_code(),
+                )
         except FieldError:
             pass
 
@@ -135,6 +145,7 @@ class CheckConstraint(BaseConstraint):
                 self.name == other.name
                 and self.check == other.check
                 and self.violation_error_message == other.violation_error_message
+                and self.violation_error_code == other.violation_error_code
             )
         return super().__eq__(other)
 
@@ -164,6 +175,7 @@ class UniqueConstraint(BaseConstraint):
         include=None,
         opclasses=(),
         violation_error_message=None,
+        violation_error_code=None,
     ):
         if not name:
             raise ValueError("A unique constraint must be named.")
@@ -213,7 +225,7 @@ class UniqueConstraint(BaseConstraint):
             F(expression) if isinstance(expression, str) else expression
             for expression in expressions
         )
-        super().__init__(name=name, violation_error_message=violation_error_message)
+        super().__init__(name=name, violation_error_message=violation_error_message, violation_error_code=violation_error_code)
 
     @property
     def contains_expressions(self):
@@ -321,6 +333,7 @@ class UniqueConstraint(BaseConstraint):
                 and self.opclasses == other.opclasses
                 and self.expressions == other.expressions
                 and self.violation_error_message == other.violation_error_message
+                and self.violation_error_code == other.violation_error_code
             )
         return super().__eq__(other)
 
@@ -385,7 +398,10 @@ class UniqueConstraint(BaseConstraint):
         if not self.condition:
             if queryset.exists():
                 if self.expressions:
-                    raise ValidationError(self.get_violation_error_message())
+                    raise ValidationError(
+                        self.get_violation_error_message(),
+                        code=self.get_violation_error_code(),
+                    )
                 # When fields are defined, use the unique_error_message() for
                 # backward compatibility.
                 for model, constraints in instance.get_constraints():
@@ -400,6 +416,9 @@ class UniqueConstraint(BaseConstraint):
                 if (self.condition & Exists(queryset.filter(self.condition))).check(
                     against, using=using
                 ):
-                    raise ValidationError(self.get_violation_error_message())
+                    raise ValidationError(
+                        self.get_violation_error_message(),
+                        code=self.get_violation_error_code(),
+                    )
             except FieldError:
                 pass
diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py
index b45dc6499a..f30542e4dc 100644
--- a/tests/constraints/tests.py
+++ b/tests/constraints/tests.py
@@ -107,6 +107,52 @@ class BaseConstraintTests(SimpleTestCase):
         c = BaseConstraint("name", "custom %(name)s message")
         self.assertEqual(c.get_violation_error_message(), "custom name message")
 
+    def test_custom_violation_error_code(self):
+        c = BaseConstraint(
+            name="base_name",
+            violation_error_message="custom %(name)s message",
+            violation_error_code="custom_code",
+        )
+        self.assertEqual(c.get_violation_error_code(), "custom_code")
+
+    def test_default_violation_error_code(self):
+        c = BaseConstraint(name="name")
+        self.assertIsNone(c.get_violation_error_code())
+
+    def test_custom_violation_error_code_clone(self):
+        constraint = BaseConstraint(
+            name="base_name",
+            violation_error_message="custom %(name)s message",
+            violation_error_code="custom_code",
+        ).clone()
+        self.assertEqual(constraint.get_violation_error_code(), "custom_code")
+
+    def test_deconstruction_with_violation_error_code(self):
+        constraint = BaseConstraint(
+            name="base_name",
+            violation_error_message="custom %(name)s message",
+            violation_error_code="custom_code",
+        )
+        path, args, kwargs = constraint.deconstruct()
+        self.assertEqual(path, "django.db.models.BaseConstraint")
+        self.assertEqual(args, ())
+        self.assertEqual(
+            kwargs,
+            {
+                "name": "base_name",
+                "violation_error_message": "custom %(name)s message",
+                "violation_error_code": "custom_code",
+            },
+        )
+
+    def test_deconstruction_without_violation_error_code(self):
+        constraint = BaseConstraint(name="base_name")
+        path, args, kwargs = constraint.deconstruct()
+        self.assertEqual(path, "django.db.models.BaseConstraint")
+        self.assertEqual(args, ())
+        self.assertEqual(kwargs, {"name": "base_name"})
+        self.assertNotIn("violation_error_code", kwargs)
+
 
 class CheckConstraintTests(TestCase):
     def test_eq(self):
@@ -282,6 +328,35 @@ class CheckConstraintTests(TestCase):
         )
         constraint.validate(Product, Product())
 
+    def test_validate_with_violation_error_code(self):
+        constraint = models.CheckConstraint(
+            check=models.Q(price__gt=models.F("discounted_price")),
+            name="price_gt_discounted_price",
+            violation_error_message="Price must be greater than discounted price",
+            violation_error_code="invalid_price",
+        )
+        msg = "Price must be greater than discounted price"
+        with self.assertRaises(ValidationError) as cm:
+            constraint.validate(Product, Product(price=10, discounted_price=20))
+        
+        error = cm.exception
+        self.assertEqual(error.message, msg)
+        self.assertEqual(error.code, "invalid_price")
+
+    def test_validate_without_violation_error_code(self):
+        constraint = models.CheckConstraint(
+            check=models.Q(price__gt=models.F("discounted_price")),
+            name="price_gt_discounted_price",
+            violation_error_message="Price must be greater than discounted price",
+        )
+        msg = "Price must be greater than discounted price"
+        with self.assertRaises(ValidationError) as cm:
+            constraint.validate(Product, Product(price=10, discounted_price=20))
+        
+        error = cm.exception
+        self.assertEqual(error.message, msg)
+        self.assertIsNone(error.code)
+
 
 class UniqueConstraintTests(TestCase):
     @classmethod
