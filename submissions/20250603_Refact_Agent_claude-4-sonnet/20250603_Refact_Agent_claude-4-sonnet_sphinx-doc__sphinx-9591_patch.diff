diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index e8330e81c..9875a9f4b 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -861,7 +861,8 @@ class PyProperty(PyObject):
 
         typ = self.options.get('type')
         if typ:
-            signode += addnodes.desc_annotation(typ, ': ' + typ)
+            annotations = _parse_annotation(typ, self.env)
+            signode += addnodes.desc_annotation(typ, '', nodes.Text(': '), *annotations)
 
         return fullname, prefix
 
diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 938f976cd..4c9095c1e 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -2716,26 +2716,26 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #
         if self.isclassmethod:
             self.add_line('   :classmethod:', sourcename)
 
-        if safe_getattr(self.object, 'fget', None):  # property
-            func = self.object.fget
-        elif safe_getattr(self.object, 'func', None):  # cached_property
-            func = self.object.func
-        else:
-            func = None
+        # Add type annotation if available
+        if self.config.autodoc_typehints != 'none':
+            if safe_getattr(self.object, 'fget', None):  # property
+                func = self.object.fget
+            elif safe_getattr(self.object, 'func', None):  # cached_property
+                func = self.object.func
+            else:
+                func = None
 
-        if func and self.config.autodoc_typehints != 'none':
-            try:
-                signature = inspect.signature(func,
-                                              type_aliases=self.config.autodoc_type_aliases)
-                if signature.return_annotation is not Parameter.empty:
-                    objrepr = stringify_typehint(signature.return_annotation)
-                    self.add_line('   :type: ' + objrepr, sourcename)
-            except TypeError as exc:
-                logger.warning(__("Failed to get a function signature for %s: %s"),
-                               self.fullname, exc)
-                return None
-            except ValueError:
-                return None
+            if func:
+                try:
+                    signature = inspect.signature(func,
+                                                  type_aliases=self.config.autodoc_type_aliases)
+                    if signature.return_annotation is not Parameter.empty:
+                        # Use stringify_typehint to get the raw type name for _parse_annotation
+                        objrepr = stringify_typehint(signature.return_annotation)
+                        # Add the type option to the directive
+                        self.add_line('   :type: ' + objrepr, sourcename)
+                except (TypeError, ValueError):
+                    pass
 
 
 class NewTypeAttributeDocumenter(AttributeDocumenter):
diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py
index 8b72f8b7a..f59d1c88a 100644
--- a/tests/test_domain_py.py
+++ b/tests/test_domain_py.py
@@ -833,13 +833,15 @@ def test_pyproperty(app):
                 entries=[('single', 'prop1 (Class property)', 'Class.prop1', '', None)])
     assert_node(doctree[1][1][1], ([desc_signature, ([desc_annotation, "abstract property "],
                                                      [desc_name, "prop1"],
-                                                     [desc_annotation, ": str"])],
+                                                     [desc_annotation, (nodes.Text,
+                                                                        pending_xref)])],
                                    [desc_content, ()]))
     assert_node(doctree[1][1][2], addnodes.index,
                 entries=[('single', 'prop2 (Class property)', 'Class.prop2', '', None)])
     assert_node(doctree[1][1][3], ([desc_signature, ([desc_annotation, "class property "],
                                                      [desc_name, "prop2"],
-                                                     [desc_annotation, ": str"])],
+                                                     [desc_annotation, (nodes.Text,
+                                                                        pending_xref)])],
                                    [desc_content, ()]))
     assert 'Class.prop1' in domain.objects
     assert domain.objects['Class.prop1'] == ('index', 'Class.prop1', 'property', False)
