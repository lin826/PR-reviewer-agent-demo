diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py
index dd5317087..3e7d4632a 100644
--- a/sphinx/builders/linkcheck.py
+++ b/sphinx/builders/linkcheck.py
@@ -213,7 +213,12 @@ class CheckExternalLinksBuilder(Builder):
             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):
                 return 'unchecked', '', 0
             elif not uri.startswith(('http:', 'https:')):
-                return 'local', '', 0
+                # Local link - validate existence
+                local_path = path.join(self.env.srcdir, uri)
+                if path.exists(local_path):
+                    return 'working', '', 0
+                else:
+                    return 'broken', f'file not found: {local_path}', 0
             elif uri in self.good:
                 return 'working', 'old', 0
             elif uri in self.broken:
diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py
index d1fec550f..903bdb8ab 100644
--- a/tests/test_build_linkcheck.py
+++ b/tests/test_build_linkcheck.py
@@ -12,6 +12,7 @@ import json
 import re
 from unittest import mock
 import pytest
+from sphinx.testing.path import path
 
 
 @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)
@@ -157,3 +158,68 @@ def test_linkcheck_request_headers(app, status, warning):
                 assert headers["X-Secret"] == "open sesami"
             else:
                 assert headers["Accept"] == "text/html,application/xhtml+xml;q=0.9,*/*;q=0.8"
+
+
+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-local')
+def test_linkcheck_validates_local_links(app, status, warning):
+    """Test that linkcheck validates local file links."""
+    
+    # Create test files in the source directory
+    srcdir = path(app.srcdir)
+    
+    # Create an existing file
+    existing_file = srcdir / 'existing.txt'
+    existing_file.write_text('This file exists!')
+    
+    # Create a subdirectory with a file
+    subdir = srcdir / 'subdir'
+    subdir.makedirs()
+    nested_file = subdir / 'nested.rst'
+    nested_file.write_text('Nested File\n===========\n\nContent here.')
+    
+    # Create the test document
+    links_file = srcdir / 'links.txt'
+    links_file.write_text('''
+Local Link Validation Test
+==========================
+
+Testing local link validation:
+
+* `Existing file <existing.txt>`_
+* `Missing file <missing.txt>`_
+* `Existing nested file <subdir/nested.rst>`_
+* `Missing nested file <subdir/missing.rst>`_
+
+.. _existing-file: existing.txt
+.. _missing-file: missing.txt
+.. _existing-nested-file: subdir/nested.rst
+.. _missing-nested-file: subdir/missing.rst
+''')
+    
+    # Run linkcheck
+    app.builder.build_all()
+    
+    # Check the output
+    output_path = app.outdir / 'output.txt'
+    assert output_path.exists()
+    
+    content = output_path.read_text()
+    lines = [line.strip() for line in content.split('\n') if line.strip()]
+    
+    # Should have exactly 2 broken links (the missing files)
+    assert len(lines) == 2
+    
+    # Check that missing files are reported as broken
+    missing_file_line = next((line for line in lines if 'missing.txt' in line), None)
+    assert missing_file_line is not None
+    assert '[broken]' in missing_file_line
+    assert 'file not found' in missing_file_line
+    
+    missing_nested_line = next((line for line in lines if 'subdir/missing.rst' in line), None)
+    assert missing_nested_line is not None
+    assert '[broken]' in missing_nested_line
+    assert 'file not found' in missing_nested_line
+    
+    # Existing files should NOT be in the broken links output
+    assert not any('existing.txt' in line for line in lines)
+    assert not any('subdir/nested.rst' in line for line in lines)
