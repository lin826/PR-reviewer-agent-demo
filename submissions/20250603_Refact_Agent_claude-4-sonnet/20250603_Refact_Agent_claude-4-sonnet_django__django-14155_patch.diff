diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 9b00e24509..8e053d7795 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -46,8 +46,23 @@ class ResolverMatch:
         self.namespace = ':'.join(self.namespaces)
 
         if not hasattr(func, '__name__'):
-            # A class-based view
-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__
+            # Check if it's a functools.partial object
+            if hasattr(func, 'func') and hasattr(func.func, '__name__'):
+                # functools.partial - show the underlying function with partial args
+                underlying_func = func.func
+                base_path = underlying_func.__module__ + '.' + underlying_func.__name__
+                
+                # Build a descriptive representation including partial arguments
+                parts = [base_path]
+                if func.args:
+                    parts.extend(repr(arg) for arg in func.args)
+                if func.keywords:
+                    parts.extend(f'{k}={repr(v)}' for k, v in func.keywords.items())
+                
+                self._func_path = f"functools.partial({', '.join(parts)})"
+            else:
+                # A class-based view or other callable without __name__
+                self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__
         else:
             # A function-based view
             self._func_path = func.__module__ + '.' + func.__name__
diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py
index 09028be795..9a8497cded 100644
--- a/tests/urlpatterns_reverse/tests.py
+++ b/tests/urlpatterns_reverse/tests.py
@@ -1145,6 +1145,41 @@ class ResolverMatchTests(SimpleTestCase):
             "namespaces=[], route=^no_kwargs/([0-9]+)/([0-9]+)/$)",
         )
 
+    def test_repr_functools_partial(self):
+        """Test ResolverMatch.__repr__() with functools.partial functions."""
+        import functools
+        
+        def sample_view(request, arg1, arg2='default'):
+            return f"View called with arg1={arg1}, arg2={arg2}"
+        
+        # Test simple partial with kwargs
+        partial_view = functools.partial(sample_view, arg2='partial_default')
+        match = ResolverMatch(partial_view, ('test',), {}, 'test-partial-view')
+        self.assertIn('functools.partial(', repr(match))
+        self.assertIn('sample_view', repr(match))
+        self.assertIn("arg2='partial_default'", repr(match))
+        
+        # Test partial with positional args
+        partial_view = functools.partial(sample_view, 'fixed_arg1')
+        match = ResolverMatch(partial_view, (), {}, 'test-partial-args')
+        self.assertIn('functools.partial(', repr(match))
+        self.assertIn('sample_view', repr(match))
+        self.assertIn("'fixed_arg1'", repr(match))
+        
+        # Test partial with both args and kwargs
+        partial_view = functools.partial(sample_view, 'fixed_arg1', arg2='partial_default')
+        match = ResolverMatch(partial_view, (), {}, 'test-partial-both')
+        self.assertIn('functools.partial(', repr(match))
+        self.assertIn('sample_view', repr(match))
+        self.assertIn("'fixed_arg1'", repr(match))
+        self.assertIn("arg2='partial_default'", repr(match))
+        
+        # Test empty partial
+        partial_view = functools.partial(sample_view)
+        match = ResolverMatch(partial_view, ('arg1',), {}, 'test-empty-partial')
+        expected_func_path = f'functools.partial({sample_view.__module__}.{sample_view.__name__})'
+        self.assertEqual(match._func_path, expected_func_path)
+
 
 @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')
 class ErroneousViewTests(SimpleTestCase):
