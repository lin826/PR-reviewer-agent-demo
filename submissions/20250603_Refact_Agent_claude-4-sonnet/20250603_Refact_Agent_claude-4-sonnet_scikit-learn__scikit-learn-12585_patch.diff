diff --git a/sklearn/base.py b/sklearn/base.py
index 56ffb18bf..34998270c 100644
--- a/sklearn/base.py
+++ b/sklearn/base.py
@@ -48,7 +48,7 @@ def clone(estimator, safe=True):
     # XXX: not handling dictionaries
     if estimator_type in (list, tuple, set, frozenset):
         return estimator_type([clone(e, safe=safe) for e in estimator])
-    elif not hasattr(estimator, 'get_params'):
+    elif not hasattr(estimator, 'get_params') or isinstance(estimator, type):
         if not safe:
             return copy.deepcopy(estimator)
         else:
diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py
index ebcb38925..dc74404bb 100644
--- a/sklearn/tests/test_base.py
+++ b/sklearn/tests/test_base.py
@@ -441,4 +441,44 @@ def test_pickling_works_when_getstate_is_overwritten_in_the_child_class():
     serialized = pickle.dumps(estimator)
     estimator_restored = pickle.loads(serialized)
     assert_equal(estimator_restored.attribute_pickled, 5)
-    assert_equal(estimator_restored._attribute_not_pickled, None)
+
+
+def test_clone_with_estimator_class_parameter():
+    """Test that clone works when parameters are estimator classes."""
+    from sklearn.preprocessing import StandardScaler
+    from sklearn.linear_model import LinearRegression
+    
+    # Test with StandardScaler class as parameter
+    scaler = StandardScaler(with_mean=StandardScaler)
+    cloned = clone(scaler)
+    
+    # The cloned estimator should have the same class as parameter
+    assert cloned.with_mean is StandardScaler
+    assert cloned.copy == scaler.copy
+    assert cloned.with_std == scaler.with_std
+    
+    # Test with different estimator class
+    scaler2 = StandardScaler(with_mean=LinearRegression)
+    cloned2 = clone(scaler2)
+    assert cloned2.with_mean is LinearRegression
+    
+    # Test in both safe and unsafe modes
+    cloned_safe = clone(scaler, safe=True)
+    assert cloned_safe.with_mean is StandardScaler
+    
+    cloned_unsafe = clone(scaler, safe=False)
+    assert cloned_unsafe.with_mean is StandardScaler
+    
+    # Test nested estimator classes
+    scaler1 = StandardScaler(with_mean=StandardScaler)
+    scaler2 = StandardScaler(with_mean=scaler1)
+    cloned_nested = clone(scaler2)
+    assert isinstance(cloned_nested.with_mean, StandardScaler)
+    assert cloned_nested.with_mean.with_mean is StandardScaler
+    
+    # Test that cloning estimator classes directly fails in safe mode
+    assert_raises(TypeError, clone, StandardScaler, safe=True)
+    
+    # Test that cloning estimator classes directly works in unsafe mode
+    cloned_class = clone(StandardScaler, safe=False)
+    assert cloned_class is StandardScaler
