diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d18..cceaeb957f 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -528,7 +528,7 @@ class InheritDocstrings(type):
                 not key.startswith('_'))
 
         for key, val in dct.items():
-            if (inspect.isfunction(val) and
+            if ((inspect.isfunction(val) or isinstance(val, property)) and
                 is_public_member(key) and
                 val.__doc__ is None):
                 for base in cls.__mro__[1:]:
diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py
index 4f632e8d15..10045df5e0 100644
--- a/astropy/utils/tests/test_misc.py
+++ b/astropy/utils/tests/test_misc.py
@@ -89,6 +89,72 @@ def test_inherit_docstrings():
         assert Subclass.__call__.__doc__ == "FOO"
 
 
+def test_inherit_docstrings_properties():
+    """Test that InheritDocstrings works for properties."""
+    
+    class Base(metaclass=misc.InheritDocstrings):
+        @property
+        def prop_with_doc(self):
+            "Property documentation"
+            return "base_value"
+        
+        @property
+        def another_prop(self):
+            "Another property doc"
+            return "another_base"
+
+    class Subclass(Base):
+        @property
+        def prop_with_doc(self):
+            # Should inherit docstring
+            return "sub_value"
+        
+        @property
+        def another_prop(self):
+            "Explicit subclass doc"
+            return "another_sub"
+        
+        @property
+        def new_prop(self):
+            # New property, no inheritance
+            return "new_value"
+
+    # Test basic property docstring inheritance
+    if Base.prop_with_doc.__doc__ is not None:
+        assert Subclass.prop_with_doc.__doc__ == "Property documentation"
+    
+    # Test that existing docstrings are not overridden
+    assert Subclass.another_prop.__doc__ == "Explicit subclass doc"
+    
+    # Test that new properties remain None
+    assert Subclass.new_prop.__doc__ is None
+
+
+def test_inherit_docstrings_multiple_inheritance():
+    """Test that property docstring inheritance follows MRO."""
+    
+    class Base1(metaclass=misc.InheritDocstrings):
+        @property
+        def shared_prop(self):
+            "Documentation from Base1"
+            return "base1"
+
+    class Base2(metaclass=misc.InheritDocstrings):
+        @property
+        def shared_prop(self):
+            "Documentation from Base2"
+            return "base2"
+
+    class Subclass(Base1, Base2):
+        @property
+        def shared_prop(self):
+            # Should inherit from Base1 (first in MRO)
+            return "sub"
+
+    if Base1.shared_prop.__doc__ is not None:
+        assert Subclass.shared_prop.__doc__ == "Documentation from Base1"
+
+
 def test_set_locale():
     # First, test if the required locales are available
     current = locale.setlocale(locale.LC_ALL)
