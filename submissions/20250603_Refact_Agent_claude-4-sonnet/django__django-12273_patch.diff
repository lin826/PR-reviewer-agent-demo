diff --git a/django/db/models/base.py b/django/db/models/base.py
index 844c01e95e..cf634059b7 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -403,6 +403,19 @@ class ModelState:
 
 class Model(metaclass=ModelBase):
 
+    def __setattr__(self, name, value):
+        # Track when primary key fields are intentionally reset to None in multi-table inheritance
+        # Only track if the object is already saved (not during initialization)
+        if (value is None and hasattr(self, '_state') and not self._state.adding and
+            hasattr(self, '_meta') and hasattr(self._meta, 'pk') and self._meta.pk and
+            (name == self._meta.pk.attname or 
+             (self._meta.parents and any(name == parent._meta.pk.attname for parent in self._meta.parents)))):
+            # Mark that a primary key field was intentionally reset
+            if not hasattr(self, '_pk_reset_intent'):
+                self._pk_reset_intent = set()
+            self._pk_reset_intent.add(name)
+        super().__setattr__(name, value)
+
     def __init__(self, *args, **kwargs):
         # Alias some things as locals to avoid repeat global lookups
         cls = self.__class__
@@ -566,9 +579,36 @@ class Model(metaclass=ModelBase):
 
     def _get_pk_val(self, meta=None):
         meta = meta or self._meta
-        return getattr(self, meta.pk.attname)
+        pk_val = getattr(self, meta.pk.attname)
+        
+        # Handle multi-table inheritance case where parent PK was intentionally reset to None
+        if (pk_val is not None and meta.parents and 
+            hasattr(self, '_pk_reset_intent') and self._pk_reset_intent):
+            # Check if any parent's PK was intentionally reset
+            for parent, field in meta.parents.items():
+                if parent._meta.pk.attname in self._pk_reset_intent:
+                    # Parent PK was intentionally reset to None, reset child PK as well
+                    setattr(self, meta.pk.attname, None)
+                    self._state.adding = True
+                    # Clear the intent tracking since we've acted on it
+                    self._pk_reset_intent.clear()
+                    return None
+        
+        return pk_val
 
     def _set_pk_val(self, value):
+        # Track when a primary key is intentionally reset to None in multi-table inheritance
+        if value is None and hasattr(self, '_meta') and self._meta.parents:
+            # Mark that this object's PK was intentionally reset
+            if not hasattr(self, '_pk_reset_intent'):
+                self._pk_reset_intent = set()
+            self._pk_reset_intent.add(self._meta.pk.attname)
+            # Also mark parent PKs as reset if they exist
+            for parent, field in self._meta.parents.items():
+                if hasattr(self, parent._meta.pk.attname):
+                    parent_pk_val = getattr(self, parent._meta.pk.attname)
+                    if parent_pk_val is None:
+                        self._pk_reset_intent.add(parent._meta.pk.attname)
         return setattr(self, self._meta.pk.attname, value)
 
     pk = property(_get_pk_val, _set_pk_val)
