diff --git a/requests/utils.py b/requests/utils.py
index 1c2ae4e0..3e4d48be 100644
--- a/requests/utils.py
+++ b/requests/utils.py
@@ -991,7 +991,22 @@ def get_auth_from_url(url):
     parsed = urlparse(url)
 
     try:
-        auth = (unquote(parsed.username), unquote(parsed.password))
+        # Handle None values explicitly to avoid issues in Python 3.8.12+
+        # where unquote(None) raises TypeError
+        username = parsed.username
+        password = parsed.password
+        
+        if username is not None:
+            username = unquote(username)
+        else:
+            username = ''
+            
+        if password is not None:
+            password = unquote(password)
+        else:
+            password = ''
+            
+        auth = (username, password)
     except (AttributeError, TypeError):
         auth = ('', '')
 
diff --git a/tests/test_requests.py b/tests/test_requests.py
index 29b3aca8..b93a4049 100644
--- a/tests/test_requests.py
+++ b/tests/test_requests.py
@@ -1896,6 +1896,28 @@ class TestRequests:
         headers = adapter.proxy_headers("http://user:@httpbin.org")
         assert headers == {'Proxy-Authorization': 'Basic dXNlcjo='}
 
+    def test_proxy_auth_no_credentials(self):
+        """Test proxy URLs without credentials (Python 3.8.12 compatibility)"""
+        adapter = HTTPAdapter()
+        headers = adapter.proxy_headers("http://httpbin.org")
+        assert headers == {}
+
+    def test_get_auth_from_url_no_credentials(self):
+        """Test get_auth_from_url with URLs that have no credentials"""
+        from requests.utils import get_auth_from_url
+        
+        # Test URLs without any authentication
+        auth = get_auth_from_url("http://proxy.example.com:8080")
+        assert auth == ('', '')
+        
+        # Test empty URL
+        auth = get_auth_from_url("")
+        assert auth == ('', '')
+        
+        # Test minimal URL
+        auth = get_auth_from_url("http://")
+        assert auth == ('', '')
+
     def test_response_json_when_content_is_None(self, httpbin):
         r = requests.get(httpbin('/status/204'))
         # Make sure r.content is None
