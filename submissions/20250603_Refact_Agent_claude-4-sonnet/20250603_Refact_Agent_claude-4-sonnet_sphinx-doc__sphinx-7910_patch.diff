diff --git a/sphinx/ext/napoleon/__init__.py b/sphinx/ext/napoleon/__init__.py
index 10b1ff3a3..6820f0d96 100644
--- a/sphinx/ext/napoleon/__init__.py
+++ b/sphinx/ext/napoleon/__init__.py
@@ -423,7 +423,14 @@ def _skip_member(app: Sphinx, what: str, name: str, obj: Any,
     """
     has_doc = getattr(obj, '__doc__', False)
     is_member = (what == 'class' or what == 'exception' or what == 'module')
-    if name != '__weakref__' and has_doc and is_member:
+    is_init = (name == '__init__')
+    
+    # Special handling for __init__ methods: check them even if they lost their
+    # docstring due to improper decoration (without functools.wraps)
+    should_analyze = (name != '__weakref__' and is_member and 
+                     (has_doc or (is_init and what in ('class', 'exception'))))
+    
+    if should_analyze:
         cls_is_owner = False
         if what == 'class' or what == 'exception':
             qualname = getattr(obj, '__qualname__', '')
@@ -438,7 +445,17 @@ def _skip_member(app: Sphinx, what: str, name: str, obj: Any,
                         mod_path = cls_path.split('.')
                         cls = functools.reduce(getattr, mod_path, mod)
                     else:
-                        cls = obj.__globals__[cls_path]
+                        try:
+                            cls = obj.__globals__[cls_path]
+                        except KeyError:
+                            # Fallback for decorated methods where __globals__ 
+                            # doesn't contain the class (e.g., when decorator 
+                            # is defined in a different module)
+                            import importlib
+                            mod = importlib.import_module(obj.__module__)
+                            cls = getattr(mod, cls_path, None)
+                            if cls is None:
+                                raise AttributeError(f"'{cls_path}' not found in module '{obj.__module__}'")
                 except Exception:
                     cls_is_owner = False
                 else:
@@ -448,7 +465,6 @@ def _skip_member(app: Sphinx, what: str, name: str, obj: Any,
                 cls_is_owner = False
 
         if what == 'module' or cls_is_owner:
-            is_init = (name == '__init__')
             is_special = (not is_init and name.startswith('__') and
                           name.endswith('__'))
             is_private = (not is_init and not is_special and
@@ -456,8 +472,20 @@ def _skip_member(app: Sphinx, what: str, name: str, obj: Any,
             inc_init = app.config.napoleon_include_init_with_doc
             inc_special = app.config.napoleon_include_special_with_doc
             inc_private = app.config.napoleon_include_private_with_doc
-            if ((is_special and inc_special) or
-                    (is_private and inc_private) or
-                    (is_init and inc_init)):
+            
+            # For __init__ methods, check if we should include them based on config
+            # even if they lost their docstring due to improper decoration
+            if is_init and inc_init:
+                # Try to recover original docstring from wrapped function
+                original_doc = has_doc
+                if not original_doc and hasattr(obj, '__wrapped__'):
+                    original_doc = getattr(obj.__wrapped__, '__doc__', False)
+                
+                # Include if original function had documentation or if we should
+                # include all __init__ methods regardless
+                if original_doc:
+                    return False
+            elif ((is_special and inc_special) or
+                  (is_private and inc_private)):
                 return False
     return None
diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py
index 7c3379757..266a4ad9f 100644
--- a/tests/test_ext_napoleon.py
+++ b/tests/test_ext_napoleon.py
@@ -10,6 +10,7 @@
 """
 
 import sys
+import functools
 from collections import namedtuple
 from unittest import TestCase, mock
 
@@ -35,6 +36,14 @@ def __special_undoc__():
     pass
 
 
+def external_decorator(func):
+    """A decorator that simulates being defined in another module."""
+    @functools.wraps(func)
+    def wrapper(*args, **kwargs):
+        return func(*args, **kwargs)
+    return wrapper
+
+
 class SampleClass:
     def _private_doc(self):
         """SampleClass._private_doc.DOCSTRING"""
@@ -67,6 +76,13 @@ class SampleError(Exception):
         pass
 
 
+class SampleClassWithDecoratedInit:
+    @external_decorator
+    def __init__(self):
+        """SampleClassWithDecoratedInit.__init__.DOCSTRING"""
+        pass
+
+
 SampleNamedTuple = namedtuple('SampleNamedTuple', 'user_id block_type def_id')
 
 
@@ -205,3 +221,9 @@ class SkipMemberTest(TestCase):
     def test_module_special_undoc(self):
         self.assertSkip('module', '__special_undoc__', __special_undoc__, True,
                         'napoleon_include_special_with_doc')
+
+    def test_decorated_init_with_doc(self):
+        """Test that decorated __init__ methods with docs are included."""
+        self.assertSkip('class', '__init__',
+                        SampleClassWithDecoratedInit.__init__, False,
+                        'napoleon_include_init_with_doc')
