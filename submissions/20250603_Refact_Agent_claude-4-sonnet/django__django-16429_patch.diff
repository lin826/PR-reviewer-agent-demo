diff --git a/django/utils/timesince.py b/django/utils/timesince.py
index 701c49bab9..f582d0e4f2 100644
--- a/django/utils/timesince.py
+++ b/django/utils/timesince.py
@@ -97,6 +97,7 @@ def timesince(d, now=None, reversed=False, time_strings=None, depth=2):
             d.hour,
             d.minute,
             d.second,
+            tzinfo=d.tzinfo,
         )
     else:
         pivot = d
diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py
index bf05f32f5e..a5a910a499 100644
--- a/tests/utils_tests/test_timesince.py
+++ b/tests/utils_tests/test_timesince.py
@@ -1,6 +1,6 @@
 import datetime
 
-from django.test import TestCase
+from django.test import TestCase, override_settings
 from django.test.utils import requires_tz_support
 from django.utils import timezone, translation
 from django.utils.timesince import timesince, timeuntil
@@ -240,3 +240,23 @@ class TimesinceTests(TestCase):
         msg = "depth must be greater than 0."
         with self.assertRaisesMessage(ValueError, msg):
             timesince(self.t, self.t, depth=0)
+
+    @requires_tz_support
+    @override_settings(USE_TZ=True)
+    def test_long_interval_with_tz(self):
+        """
+        Test that timesince() works with timezone-aware datetimes for intervals
+        greater than 1 month. This is a regression test for the bug where
+        timesince() would raise TypeError: can't subtract offset-naive and
+        offset-aware datetimes.
+        """
+        now = timezone.now()
+        d = now - datetime.timedelta(days=31)
+        self.assertEqual(timesince(d), "1\xa0month")
+        
+        # Test with even longer intervals
+        d_2_months = now - datetime.timedelta(days=62)
+        self.assertEqual(timesince(d_2_months), "2\xa0months")
+        
+        d_1_year = now - datetime.timedelta(days=366)
+        self.assertEqual(timesince(d_1_year), "1\xa0year")
