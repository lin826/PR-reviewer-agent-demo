diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py
index c279f35f87..09f2237d9d 100644
--- a/astropy/timeseries/core.py
+++ b/astropy/timeseries/core.py
@@ -76,9 +76,17 @@ class BaseTimeSeries(QTable):
 
             elif self.colnames[:len(required_columns)] != required_columns:
 
-                raise ValueError("{} object is invalid - expected '{}' "
-                                 "as the first column{} but found '{}'"
-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))
+                # Check if we have missing required columns
+                missing_columns = [col for col in required_columns if col not in self.colnames]
+                if missing_columns:
+                    plural_missing = 's' if len(missing_columns) > 1 else ''
+                    raise ValueError("{} object is invalid - missing required column{}: {}"
+                                     .format(self.__class__.__name__, plural_missing, missing_columns))
+                else:
+                    # Columns are present but in wrong order
+                    raise ValueError("{} object is invalid - expected '{}' "
+                                     "as the first column{} but found '{}'"
+                                     .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))
 
             if (self._required_columns_relax
                     and self._required_columns == self.colnames[:len(self._required_columns)]):
diff --git a/astropy/timeseries/tests/test_binned.py b/astropy/timeseries/tests/test_binned.py
index f0003f202a..251ac19518 100644
--- a/astropy/timeseries/tests/test_binned.py
+++ b/astropy/timeseries/tests/test_binned.py
@@ -27,8 +27,7 @@ def test_empty_initialization_invalid():
     ts = BinnedTimeSeries()
     with pytest.raises(ValueError) as exc:
         ts['flux'] = [1, 2, 3]
-    assert exc.value.args[0] == ("BinnedTimeSeries object is invalid - expected "
-                                 "'time_bin_start' as the first column but found 'flux'")
+    assert exc.value.args[0] == ("BinnedTimeSeries object is invalid - missing required column: ['time_bin_start']")
 
 
 def test_initialization_time_bin_invalid():
diff --git a/astropy/timeseries/tests/test_sampled.py b/astropy/timeseries/tests/test_sampled.py
index bcc06d929e..3bd0a4f98d 100644
--- a/astropy/timeseries/tests/test_sampled.py
+++ b/astropy/timeseries/tests/test_sampled.py
@@ -377,23 +377,19 @@ def test_required_columns():
 
     with pytest.raises(ValueError) as exc:
         ts.copy().keep_columns(['a', 'b'])
-    assert exc.value.args[0] == ("TimeSeries object is invalid - expected "
-                                 "'time' as the first column but found 'a'")
+    assert exc.value.args[0] == ("TimeSeries object is invalid - missing required column: ['time']")
 
     with pytest.raises(ValueError) as exc:
         ts.copy().remove_column('time')
-    assert exc.value.args[0] == ("TimeSeries object is invalid - expected "
-                                 "'time' as the first column but found 'a'")
+    assert exc.value.args[0] == ("TimeSeries object is invalid - missing required column: ['time']")
 
     with pytest.raises(ValueError) as exc:
         ts.copy().remove_columns(['time', 'a'])
-    assert exc.value.args[0] == ("TimeSeries object is invalid - expected "
-                                 "'time' as the first column but found 'b'")
+    assert exc.value.args[0] == ("TimeSeries object is invalid - missing required column: ['time']")
 
     with pytest.raises(ValueError) as exc:
         ts.copy().rename_column('time', 'banana')
-    assert exc.value.args[0] == ("TimeSeries object is invalid - expected "
-                                 "'time' as the first column but found 'banana'")
+    assert exc.value.args[0] == ("TimeSeries object is invalid - missing required column: ['time']")
 
 
 @pytest.mark.parametrize('cls', [BoxLeastSquares, LombScargle])
