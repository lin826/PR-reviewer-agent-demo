diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index d517d7269b..c2aea9c730 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -914,7 +914,7 @@ class ForeignKey(ForeignObject):
             return
 
         using = router.db_for_read(self.remote_field.model, instance=model_instance)
-        qs = self.remote_field.model._default_manager.using(using).filter(
+        qs = self.remote_field.model._base_manager.using(using).filter(
             **{self.remote_field.field_name: value}
         )
         qs = qs.complex_filter(self.get_limit_choices_to())
diff --git a/tests/model_fields/test_foreignkey.py b/tests/model_fields/test_foreignkey.py
index d30cca9b5c..bc1a166537 100644
--- a/tests/model_fields/test_foreignkey.py
+++ b/tests/model_fields/test_foreignkey.py
@@ -147,3 +147,31 @@ class ForeignKeyTests(TestCase):
         )
         with self.assertRaisesMessage(FieldError, msg):
             Related._meta.get_field('child').related_fields
+
+    def test_foreignkey_validation_with_custom_manager(self):
+        """
+        ForeignKey.validate() should use the base manager instead of the default
+        manager to validate foreign key values. This ensures that validation
+        works correctly when the default manager filters out some records but
+        the form queryset includes them.
+        """
+        from django.core.exceptions import ValidationError
+
+        # Create test data using existing models
+        foo1 = Foo.objects.create(a='test_foo_1', d=Decimal('1.0'))
+        foo2 = Foo.objects.create(a='test_foo_2', d=Decimal('2.0'))
+
+        # Test direct field validation using Bar's foreign key to Foo
+        field = Bar._meta.get_field('a')
+
+        # Both foos should validate (using base manager)
+        field.validate(foo1.id, None)
+        field.validate(foo2.id, None)
+
+        # Test that a non-existent ID still fails validation
+        with self.assertRaises(ValidationError):
+            field.validate(999, None)
+
+        # Clean up
+        foo1.delete()
+        foo2.delete()
