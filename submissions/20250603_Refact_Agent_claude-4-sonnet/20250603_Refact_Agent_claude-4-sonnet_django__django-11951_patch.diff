diff --git a/django/db/models/query.py b/django/db/models/query.py
index 794e0faae7..1c88c2b286 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1209,7 +1209,8 @@ class QuerySet:
         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:
             raise NotSupportedError('This database backend does not support ignoring conflicts.')
         ops = connections[self.db].ops
-        batch_size = (batch_size or max(ops.bulk_batch_size(fields, objs), 1))
+        max_batch_size = ops.bulk_batch_size(fields, objs)
+        batch_size = min(batch_size, max_batch_size) if batch_size else max(max_batch_size, 1)
         inserted_rows = []
         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert
         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py
index 47aa7afcdc..2882be6ff2 100644
--- a/tests/bulk_create/tests.py
+++ b/tests/bulk_create/tests.py
@@ -305,3 +305,41 @@ class BulkCreateTests(TestCase):
         # Without ignore_conflicts=True, there's a problem.
         with self.assertRaises(IntegrityError):
             TwoFields.objects.bulk_create(conflicting_objects)
+
+    def test_batch_size_respects_database_limits(self):
+        """
+        Test that bulk_create respects database parameter limits when
+        batch_size is provided, similar to bulk_update behavior.
+        """
+        # Create many objects to test batch size limiting
+        objs = [TwoFields(f1=i, f2=i + 1) for i in range(200)]
+        
+        # Get the database operations
+        ops = connection.ops
+        fields = TwoFields._meta.concrete_fields
+        
+        # Calculate the safe batch size according to database limitations
+        safe_batch_size = ops.bulk_batch_size(fields, objs)
+        
+        # Test with a batch_size larger than the safe limit
+        large_batch_size = safe_batch_size * 2
+        
+        # This should work without errors because bulk_create should
+        # clamp the batch_size to the safe limit
+        TwoFields.objects.bulk_create(objs, batch_size=large_batch_size)
+        self.assertEqual(TwoFields.objects.count(), 200)
+        
+        # Clean up for next test
+        TwoFields.objects.all().delete()
+        
+        # Test that smaller batch_size still works
+        small_batch_size = 10
+        TwoFields.objects.bulk_create(objs[:50], batch_size=small_batch_size)
+        self.assertEqual(TwoFields.objects.count(), 50)
+        
+        # Clean up for next test
+        TwoFields.objects.all().delete()
+        
+        # Test that None batch_size still works
+        TwoFields.objects.bulk_create(objs[:50], batch_size=None)
+        self.assertEqual(TwoFields.objects.count(), 50)
