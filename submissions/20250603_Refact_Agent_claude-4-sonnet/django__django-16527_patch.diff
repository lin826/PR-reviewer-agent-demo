diff --git a/django/contrib/admin/templatetags/admin_modify.py b/django/contrib/admin/templatetags/admin_modify.py
index 9df4b7aadb..5b742af46a 100644
--- a/django/contrib/admin/templatetags/admin_modify.py
+++ b/django/contrib/admin/templatetags/admin_modify.py
@@ -100,6 +100,7 @@ def submit_row(context):
                 and context.get("show_delete", True)
             ),
             "show_save_as_new": not is_popup
+            and has_add_permission
             and has_change_permission
             and change
             and save_as,
diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py
index 03ab9a9454..7a2471d169 100644
--- a/tests/admin_views/tests.py
+++ b/tests/admin_views/tests.py
@@ -2647,6 +2647,56 @@ class AdminViewPermissionsTest(TestCase):
             post, reverse("admin:admin_views_article_change", args=(new_article.pk,))
         )
 
+    def test_save_as_new_button_visibility(self):
+        """
+        The 'Save as new' button should only be visible to users with both
+        'change' and 'add' permissions.
+        """
+        # Create a Person object to test with (PersonAdmin has save_as=True)
+        person = Person.objects.create(name="Test Person", gender=1, alive=True)
+        person_change_url = reverse(
+            "admin:admin_views_person_change", args=(person.pk,)
+        )
+
+        # Set up permissions for Person model
+        person_opts = Person._meta
+        person_add_perm = get_perm(Person, get_permission_codename("add", person_opts))
+        person_change_perm = get_perm(Person, get_permission_codename("change", person_opts))
+
+        # Create users with specific permissions
+        user_with_both = User.objects.create_user(
+            username="both_perms", password="secret", is_staff=True
+        )
+        user_with_both.user_permissions.add(person_add_perm, person_change_perm)
+
+        user_with_change_only = User.objects.create_user(
+            username="change_only", password="secret", is_staff=True
+        )
+        user_with_change_only.user_permissions.add(person_change_perm)
+
+        user_with_add_only = User.objects.create_user(
+            username="add_only", password="secret", is_staff=True
+        )
+        user_with_add_only.user_permissions.add(person_add_perm)
+
+        # User with both add and change permissions should see the button
+        self.client.force_login(user_with_both)
+        response = self.client.get(person_change_url)
+        self.assertTrue(response.context["show_save_as_new"])
+        self.assertContains(response, 'value="Save as new"')
+
+        # User with only change permission should NOT see the button
+        self.client.force_login(user_with_change_only)
+        response = self.client.get(person_change_url)
+        self.assertFalse(response.context["show_save_as_new"])
+        self.assertNotContains(response, 'value="Save as new"')
+
+        # User with only add permission should NOT see the button
+        # (because they can't access the change form)
+        self.client.force_login(user_with_add_only)
+        response = self.client.get(person_change_url)
+        self.assertEqual(response.status_code, 403)
+
     def test_change_view_with_view_only_inlines(self):
         """
         User with change permission to a section but view-only for inlines.
