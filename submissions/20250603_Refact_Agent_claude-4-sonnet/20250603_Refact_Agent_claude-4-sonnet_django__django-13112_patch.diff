diff --git a/django/db/migrations/operations/utils.py b/django/db/migrations/operations/utils.py
index 6e2bacd549..facfd9fc60 100644
--- a/django/db/migrations/operations/utils.py
+++ b/django/db/migrations/operations/utils.py
@@ -19,7 +19,8 @@ def resolve_relation(model, app_label=None, model_name=None):
                 )
             return app_label, model_name
         if '.' in model:
-            return tuple(model.lower().split('.', 1))
+            app_label, model_name = model.split('.', 1)
+            return app_label, model_name.lower()
         if app_label is None:
             raise TypeError(
                 'app_label must be provided to resolve unscoped model '
diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index c2aea9c730..532c0e24d6 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -582,9 +582,9 @@ class ForeignObject(RelatedField):
         if self.remote_field.parent_link:
             kwargs['parent_link'] = self.remote_field.parent_link
         if isinstance(self.remote_field.model, str):
-            kwargs['to'] = self.remote_field.model.lower()
+            kwargs['to'] = self.remote_field.model
         else:
-            kwargs['to'] = self.remote_field.model._meta.label_lower
+            kwargs['to'] = self.remote_field.model._meta.label
         # If swappable is True, then see if we're actually pointing to the target
         # of a swap.
         swappable_setting = self.swappable_setting
