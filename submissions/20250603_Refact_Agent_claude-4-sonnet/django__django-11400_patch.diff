diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py
index d65e01d5e2..019e6ff2dd 100644
--- a/django/contrib/admin/filters.py
+++ b/django/contrib/admin/filters.py
@@ -198,6 +198,9 @@ class RelatedFieldListFilter(FieldListFilter):
         related_admin = model_admin.admin_site._registry.get(field.remote_field.model)
         if related_admin is not None:
             ordering = related_admin.get_ordering(request)
+        # Fall back to the related model's default ordering if no admin ordering is defined
+        if not ordering:
+            ordering = field.remote_field.model._meta.ordering
         return field.get_choices(include_blank=False, ordering=ordering)
 
     def choices(self, changelist):
@@ -419,4 +422,11 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)
 class RelatedOnlyFieldListFilter(RelatedFieldListFilter):
     def field_choices(self, field, request, model_admin):
         pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)
-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})
+        ordering = ()
+        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)
+        if related_admin is not None:
+            ordering = related_admin.get_ordering(request)
+        # Fall back to the related model's default ordering if no admin ordering is defined
+        if not ordering:
+            ordering = field.remote_field.model._meta.ordering
+        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)
diff --git a/tests/admin_filters/models.py b/tests/admin_filters/models.py
index ae78282d34..3429c1543e 100644
--- a/tests/admin_filters/models.py
+++ b/tests/admin_filters/models.py
@@ -42,6 +42,9 @@ class Department(models.Model):
     code = models.CharField(max_length=4, unique=True)
     description = models.CharField(max_length=50, blank=True, null=True)
 
+    class Meta:
+        ordering = ['description']
+
     def __str__(self):
         return self.description
 
diff --git a/tests/admin_filters/tests.py b/tests/admin_filters/tests.py
index 4ff7d012e5..fb0d6e5ed7 100644
--- a/tests/admin_filters/tests.py
+++ b/tests/admin_filters/tests.py
@@ -1185,13 +1185,13 @@ class ListFiltersTests(TestCase):
         self.assertIs(choices[0]['selected'], True)
         self.assertEqual(choices[0]['query_string'], '?')
 
-        self.assertEqual(choices[1]['display'], 'Development')
+        self.assertEqual(choices[1]['display'], 'Design')
         self.assertIs(choices[1]['selected'], False)
-        self.assertEqual(choices[1]['query_string'], '?department__code__exact=DEV')
+        self.assertEqual(choices[1]['query_string'], '?department__code__exact=DSN')
 
-        self.assertEqual(choices[2]['display'], 'Design')
+        self.assertEqual(choices[2]['display'], 'Development')
         self.assertIs(choices[2]['selected'], False)
-        self.assertEqual(choices[2]['query_string'], '?department__code__exact=DSN')
+        self.assertEqual(choices[2]['query_string'], '?department__code__exact=DEV')
 
         # Filter by Department=='Development' --------------------------------
 
@@ -1211,13 +1211,13 @@ class ListFiltersTests(TestCase):
         self.assertIs(choices[0]['selected'], False)
         self.assertEqual(choices[0]['query_string'], '?')
 
-        self.assertEqual(choices[1]['display'], 'Development')
-        self.assertIs(choices[1]['selected'], True)
-        self.assertEqual(choices[1]['query_string'], '?department__code__exact=DEV')
+        self.assertEqual(choices[1]['display'], 'Design')
+        self.assertIs(choices[1]['selected'], False)
+        self.assertEqual(choices[1]['query_string'], '?department__code__exact=DSN')
 
-        self.assertEqual(choices[2]['display'], 'Design')
-        self.assertIs(choices[2]['selected'], False)
-        self.assertEqual(choices[2]['query_string'], '?department__code__exact=DSN')
+        self.assertEqual(choices[2]['display'], 'Development')
+        self.assertIs(choices[2]['selected'], True)
+        self.assertEqual(choices[2]['query_string'], '?department__code__exact=DEV')
 
     def test_lookup_with_dynamic_value(self):
         """
@@ -1253,3 +1253,94 @@ class ListFiltersTests(TestCase):
         changelist = modeladmin.get_changelist_instance(request)
         changelist.get_results(request)
         self.assertEqual(changelist.full_result_count, 4)
+
+    def test_related_field_list_filter_ordering_fallback(self):
+        """
+        Test that RelatedFieldListFilter falls back to model ordering when admin has no ordering.
+        """
+        # Create departments in reverse alphabetical order to test ordering
+        zebra_dept = Department.objects.create(code='ZEB', description='Zebra Department')
+        alpha_dept = Department.objects.create(code='ALP', description='Alpha Department')
+        middle_dept = Department.objects.create(code='MID', description='Middle Department')
+        
+        # Create employees
+        Employee.objects.create(name='Employee 1', department=zebra_dept)
+        Employee.objects.create(name='Employee 2', department=alpha_dept)
+        Employee.objects.create(name='Employee 3', department=middle_dept)
+        
+        # Admin with no ordering defined
+        class DepartmentAdminNoOrdering(ModelAdmin):
+            pass
+        
+        # Register the admin
+        site.register(Department, DepartmentAdminNoOrdering)
+        
+        try:
+            request = self.request_factory.get('/')
+            request.user = self.alfred
+            employee_admin = EmployeeAdmin(Employee, site)
+            department_field = Employee._meta.get_field('department')
+            
+            # Create filter instance
+            from django.contrib.admin.filters import RelatedFieldListFilter
+            filter_instance = RelatedFieldListFilter(
+                department_field, request, {}, Employee, employee_admin, 'department'
+            )
+            
+            # Get choices
+            choices = list(filter_instance.lookup_choices)
+            names = [name for pk, name in choices]
+            
+            # Should be ordered by description (model's Meta.ordering)
+            # Note: There are existing departments from setUpTestData: 'Design' and 'Development'
+            expected_order = ['Alpha Department', 'Design', 'Development', 'Middle Department', 'Zebra Department']
+            self.assertEqual(names, expected_order)
+            
+        finally:
+            site.unregister(Department)
+
+    def test_related_only_field_list_filter_ordering_fallback(self):
+        """
+        Test that RelatedOnlyFieldListFilter falls back to model ordering when admin has no ordering.
+        """
+        # Create departments in reverse alphabetical order to test ordering
+        zebra_dept = Department.objects.create(code='ZEB2', description='Zebra Department 2')
+        alpha_dept = Department.objects.create(code='ALP2', description='Alpha Department 2')
+        middle_dept = Department.objects.create(code='MID2', description='Middle Department 2')
+        
+        # Create employees
+        Employee.objects.create(name='Employee 4', department=zebra_dept)
+        Employee.objects.create(name='Employee 5', department=alpha_dept)
+        Employee.objects.create(name='Employee 6', department=middle_dept)
+        
+        # Admin with no ordering defined
+        class DepartmentAdminNoOrdering(ModelAdmin):
+            pass
+        
+        # Register the admin
+        site.register(Department, DepartmentAdminNoOrdering)
+        
+        try:
+            request = self.request_factory.get('/')
+            request.user = self.alfred
+            employee_admin = EmployeeAdmin(Employee, site)
+            department_field = Employee._meta.get_field('department')
+            
+            # Create filter instance
+            from django.contrib.admin.filters import RelatedOnlyFieldListFilter
+            filter_instance = RelatedOnlyFieldListFilter(
+                department_field, request, {}, Employee, employee_admin, 'department'
+            )
+            
+            # Get choices
+            choices = list(filter_instance.lookup_choices)
+            names = [name for pk, name in choices]
+            
+            # Should be ordered by description (model's Meta.ordering)
+            # Note: RelatedOnlyFieldListFilter only shows departments that have employees
+            # There are existing departments from setUpTestData: 'Design' and 'Development'
+            expected_order = ['Alpha Department 2', 'Design', 'Development', 'Middle Department 2', 'Zebra Department 2']
+            self.assertEqual(names, expected_order)
+            
+        finally:
+            site.unregister(Department)
