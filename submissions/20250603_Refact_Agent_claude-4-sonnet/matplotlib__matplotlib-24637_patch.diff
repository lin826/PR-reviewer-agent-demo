diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py
index efa34dd078..82e8895fed 100644
--- a/lib/matplotlib/offsetbox.py
+++ b/lib/matplotlib/offsetbox.py
@@ -1452,6 +1452,12 @@ or callable, default: value of *xycoords*
             self._renderer = renderer
         if not self.get_visible() or not self._check_xy(renderer):
             return
+        
+        # Open group with gid if it exists (for SVG rendering support)
+        gid = self.get_gid()
+        if gid is not None:
+            renderer.open_group('annotationbox', gid)
+        
         self.update_positions(renderer)
         if self.arrow_patch is not None:
             if self.arrow_patch.figure is None and self.figure is not None:
@@ -1459,6 +1465,11 @@ or callable, default: value of *xycoords*
             self.arrow_patch.draw(renderer)
         self.patch.draw(renderer)
         self.offsetbox.draw(renderer)
+        
+        # Close group if we opened one
+        if gid is not None:
+            renderer.close_group('annotationbox')
+            
         self.stale = False
 
 
diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py
index 5785cf5aff..5270a178ce 100644
--- a/lib/matplotlib/tests/test_offsetbox.py
+++ b/lib/matplotlib/tests/test_offsetbox.py
@@ -388,3 +388,45 @@ def test_paddedbox():
     pb = PaddedBox(at, patch_attrs={'facecolor': 'r'}, draw_frame=True)
     ax.add_artist(pb)
     fig.draw_without_rendering()
+
+
+def test_annotationbox_gid_svg():
+    """Test that AnnotationBbox gid appears in SVG output."""
+    fig, ax = plt.subplots()
+    
+    # Create AnnotationBbox with TextArea
+    textbox = TextArea("Test Text")
+    ab = AnnotationBbox(textbox, [0.5, 0.5], xycoords='data')
+    ab.set_gid('test_annotation_gid')
+    ax.add_artist(ab)
+    
+    # Save to SVG and check for gid
+    svg_buffer = io.BytesIO()
+    fig.savefig(svg_buffer, format="svg")
+    svg_content = svg_buffer.getvalue().decode('utf-8')
+    
+    # Check that the gid appears in the SVG
+    assert 'test_annotation_gid' in svg_content
+    assert '<g id="test_annotation_gid">' in svg_content
+    
+    plt.close(fig)
+
+
+def test_annotationbox_no_gid_svg():
+    """Test that AnnotationBbox without gid works normally in SVG."""
+    fig, ax = plt.subplots()
+    
+    # Create AnnotationBbox without setting gid
+    textbox = TextArea("Test Text")
+    ab = AnnotationBbox(textbox, [0.5, 0.5], xycoords='data')
+    ax.add_artist(ab)
+    
+    # Should not raise any errors when saving to SVG
+    svg_buffer = io.BytesIO()
+    fig.savefig(svg_buffer, format="svg")
+    svg_content = svg_buffer.getvalue().decode('utf-8')
+    
+    # Should contain some content
+    assert len(svg_content) > 100
+    
+    plt.close(fig)
