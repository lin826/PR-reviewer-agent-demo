diff --git a/sympy/printing/repr.py b/sympy/printing/repr.py
index c936a692c0..fd7c9be906 100644
--- a/sympy/printing/repr.py
+++ b/sympy/printing/repr.py
@@ -250,6 +250,42 @@ def _print_tuple(self, expr):
         else:
             return "(%s)" % self.reprify(expr, ", ")
 
+    def _print_set(self, expr):
+        if not expr:
+            return "set()"
+        items = [self.doprint(item) for item in expr]
+        items.sort()  # Ensure consistent ordering
+        return "{%s}" % ", ".join(items)
+
+    def _print_dict(self, expr):
+        if not expr:
+            return "{}"
+        items = ["%s: %s" % (self.doprint(k), self.doprint(v)) for k, v in expr.items()]
+        items.sort()  # Ensure consistent ordering
+        return "{%s}" % ", ".join(items)
+
+    def _print_set(self, expr):
+        if not expr:
+            return "set()"
+        items = []
+        for item in expr:
+            items.append(self.doprint(item))
+        # Sort for consistent output since sets are unordered
+        items.sort()
+        return "{%s}" % ", ".join(items)
+
+    def _print_dict(self, expr):
+        if not expr:
+            return "{}"
+        items = []
+        for key, value in expr.items():
+            key_repr = self.doprint(key)
+            value_repr = self.doprint(value)
+            items.append("%s: %s" % (key_repr, value_repr))
+        # Sort for consistent output
+        items.sort()
+        return "{%s}" % ", ".join(items)
+
     def _print_WildFunction(self, expr):
         return "%s('%s')" % (expr.__class__.__name__, expr.name)
 
diff --git a/sympy/printing/tests/test_repr.py b/sympy/printing/tests/test_repr.py
index f749683ff7..c995dcaf87 100644
--- a/sympy/printing/tests/test_repr.py
+++ b/sympy/printing/tests/test_repr.py
@@ -99,6 +99,42 @@ def test_list():
     sT([x, Integer(4)], "[Symbol('x'), Integer(4)]")
 
 
+def test_set():
+    # Test basic set
+    result = srepr({x, Integer(4)})
+    # Sets are unordered, so we need to check both possible orders
+    expected1 = "{Integer(4), Symbol('x')}"
+    expected2 = "{Symbol('x'), Integer(4)}"
+    assert result in (expected1, expected2)
+    
+    # Test that eval works
+    ENV2 = ENV.copy()
+    recreated = eval(result, ENV2)
+    assert recreated == {x, Integer(4)}
+    
+    # Test empty set
+    sT(set(), "set()")
+
+
+def test_dict():
+    # Test basic dict
+    result = srepr({x: Integer(4), Integer(2): y})
+    # Dicts maintain insertion order in Python 3.7+, but we sort for consistency
+    expected = "{Integer(2): Symbol('y'), Symbol('x'): Integer(4)}"
+    assert result == expected
+    
+    # Test that eval works
+    ENV2 = ENV.copy()
+    recreated = eval(result, ENV2)
+    assert recreated == {x: Integer(4), Integer(2): y}
+    
+    # Test empty dict
+    sT({}, "{}")
+    
+    # Test single item dict
+    sT({x: y}, "{Symbol('x'): Symbol('y')}")
+
+
 def test_Matrix():
     for cls, name in [(Matrix, "MutableDenseMatrix"), (ImmutableDenseMatrix, "ImmutableDenseMatrix")]:
         sT(cls([[x**+1, 1], [y, x + y]]),
