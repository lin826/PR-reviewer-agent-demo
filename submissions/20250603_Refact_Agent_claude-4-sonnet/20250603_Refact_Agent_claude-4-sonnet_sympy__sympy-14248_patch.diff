diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index 8253b2f682..6eefe59d17 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -1477,8 +1477,21 @@ def _print_Adjoint(self, expr):
             return r"%s^\dagger" % self._print(mat)
 
     def _print_MatAdd(self, expr):
+        # Handle signs properly like _print_Add does
         terms = list(expr.args)
-        tex = " + ".join(map(self._print, terms))
+        tex = ""
+        for i, term in enumerate(terms):
+            if i == 0:
+                pass
+            elif self._print(term).startswith('-'):
+                tex += " - "
+                # Remove the leading minus from the term
+                term_tex = self._print(term)[1:]
+                tex += term_tex
+                continue
+            else:
+                tex += " + "
+            tex += self._print(term)
         return tex
 
     def _print_MatMul(self, expr):
@@ -1488,6 +1501,25 @@ def parens(x):
             if isinstance(x, (Add, MatAdd, HadamardProduct)):
                 return r"\left(%s\right)" % self._print(x)
             return self._print(x)
+        
+        # Handle negative coefficients properly
+        if len(expr.args) >= 2 and expr.args[0].is_number and expr.args[0].is_negative:
+            coeff = expr.args[0]
+            if coeff == -1:
+                # Special case: -1 coefficient becomes just a minus sign
+                rest_args = expr.args[1:]
+                if len(rest_args) == 1:
+                    return '-' + parens(rest_args[0])
+                else:
+                    return '-' + ' '.join(map(parens, rest_args))
+            else:
+                # Other negative coefficients: print as negative number
+                positive_coeff = -coeff
+                rest_args = expr.args[1:]
+                args_str = [self._print(positive_coeff)] + [parens(arg) for arg in rest_args]
+                return '-' + ' '.join(args_str)
+        
+        # Default case: no special coefficient handling needed
         return ' '.join(map(parens, expr.args))
 
     def _print_Mod(self, expr, exp=None):
diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index db24f4c612..445b6d529d 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -819,11 +819,85 @@ def _print_BlockMatrix(self, B):
         return self._print(B.blocks)
 
     def _print_MatAdd(self, expr):
-        return self._print_seq(expr.args, None, None, ' + ')
+        # Handle signs properly like _print_Add does
+        terms = expr.args
+        pforms = []
+        
+        for i, term in enumerate(terms):
+            pform = self._print(term)
+            # Check if the printed form starts with a minus sign
+            if str(pform).startswith('-'):
+                if i == 0:
+                    # First term: keep the minus sign
+                    pforms.append(pform)
+                else:
+                    # Subsequent terms: treat as subtraction
+                    # Remove the minus sign and add as subtraction
+                    term_str = str(pform)[1:].strip()
+                    if term_str:
+                        pforms.extend([' - ', prettyForm(term_str)])
+                    else:
+                        pforms.extend([' - ', pform])
+            else:
+                if i == 0:
+                    # First term: no sign needed
+                    pforms.append(pform)
+                else:
+                    # Subsequent terms: add with plus sign
+                    pforms.extend([' + ', pform])
+        
+        if not pforms:
+            return prettyForm('')
+        
+        # Join all parts
+        result = pforms[0]
+        for pform in pforms[1:]:
+            if isinstance(pform, str):
+                result = prettyForm(*result.right(pform))
+            else:
+                result = prettyForm(*result.right(pform))
+        
+        return result
 
     def _print_MatMul(self, expr):
         args = list(expr.args)
         from sympy import Add, MatAdd, HadamardProduct
+        
+        # Handle negative coefficients properly
+        if len(expr.args) >= 2 and expr.args[0].is_number and expr.args[0].is_negative:
+            coeff = expr.args[0]
+            if coeff == -1:
+                # Special case: -1 coefficient becomes just a minus sign
+                rest_args = expr.args[1:]
+                processed_args = []
+                for i, a in enumerate(rest_args):
+                    if (isinstance(a, (Add, MatAdd, HadamardProduct))
+                            and len(rest_args) > 1):
+                        processed_args.append(prettyForm(*self._print(a).parens()))
+                    else:
+                        processed_args.append(self._print(a))
+                
+                if len(processed_args) == 1:
+                    return prettyForm(*processed_args[0].left('-'))
+                else:
+                    result = prettyForm.__mul__(*processed_args)
+                    return prettyForm(*result.left('-'))
+            else:
+                # Other negative coefficients: print as negative number
+                positive_coeff = -coeff
+                rest_args = expr.args[1:]
+                processed_args = [self._print(positive_coeff)]
+                for i, a in enumerate(rest_args):
+                    if (isinstance(a, (Add, MatAdd, HadamardProduct))
+                            and len(rest_args) > 1):
+                        processed_args.append(prettyForm(*self._print(a).parens()))
+                    else:
+                        processed_args.append(self._print(a))
+                
+                result = prettyForm.__mul__(*processed_args)
+                return prettyForm(*result.left('-'))
+        
+        # Default case: no special coefficient handling needed
         for i, a in enumerate(args):
             if (isinstance(a, (Add, MatAdd, HadamardProduct))
                     and len(expr.args) > 1):
diff --git a/sympy/printing/str.py b/sympy/printing/str.py
index 0baefe0f7f..deb0bfbd74 100644
--- a/sympy/printing/str.py
+++ b/sympy/printing/str.py
@@ -304,6 +304,26 @@ def _print_Mul(self, expr):
             return sign + '*'.join(a_str) + "/(%s)" % '*'.join(b_str)
 
     def _print_MatMul(self, expr):
+        # Handle negative coefficients properly
+        if len(expr.args) >= 2 and expr.args[0].is_number and expr.args[0].is_negative:
+            coeff = expr.args[0]
+            if coeff == -1:
+                # Special case: -1 coefficient becomes just a minus sign
+                rest_args = expr.args[1:]
+                if len(rest_args) == 1:
+                    return '-' + self.parenthesize(rest_args[0], precedence(expr))
+                else:
+                    return '-' + '*'.join([self.parenthesize(arg, precedence(expr))
+                        for arg in rest_args])
+            else:
+                # Other negative coefficients: print as negative number
+                positive_coeff = -coeff
+                rest_args = expr.args[1:]
+                args_str = [str(positive_coeff)] + [self.parenthesize(arg, precedence(expr))
+                    for arg in rest_args]
+                return '-' + '*'.join(args_str)
+        
+        # Default case: no special coefficient handling needed
         return '*'.join([self.parenthesize(arg, precedence(expr))
             for arg in expr.args])
 
@@ -312,8 +332,24 @@ def _print_HadamardProduct(self, expr):
             for arg in expr.args])
 
     def _print_MatAdd(self, expr):
-        return ' + '.join([self.parenthesize(arg, precedence(expr))
-            for arg in expr.args])
+        # Handle signs properly like _print_Add does
+        terms = expr.args
+        l = []
+        for i, term in enumerate(terms):
+            t = self._print(term)
+            if t.startswith('-'):
+                sign = "-"
+                t = t[1:]
+            else:
+                sign = "+"
+            if precedence(term) < precedence(expr):
+                l.extend([sign, "(%s)" % t])
+            else:
+                l.extend([sign, t])
+        sign = l.pop(0)
+        if sign == '+':
+            sign = ""
+        return sign + ' '.join(l)
 
     def _print_NaN(self, expr):
         return 'nan'
