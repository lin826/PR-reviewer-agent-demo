diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 8832169021..cb4711d0aa 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -221,6 +221,9 @@ class BoundField:
     def build_widget_attrs(self, attrs, widget=None):
         widget = widget or self.field.widget
         attrs = dict(attrs)  # Copy attrs to avoid modifying the argument.
+        # Include field-level widget attributes (e.g., maxlength, minlength)
+        field_attrs = self.field.widget_attrs(widget)
+        attrs.update(field_attrs)
         if widget.use_required_attribute(self.initial) and self.field.required and self.form.use_required_attribute:
             attrs['required'] = True
         if self.field.disabled:
diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py
index 7085dcfa11..b81ab72e9f 100644
--- a/tests/auth_tests/test_forms.py
+++ b/tests/auth_tests/test_forms.py
@@ -513,6 +513,27 @@ class AuthenticationFormTest(TestDataMixin, TestCase):
             with self.subTest(field_name=field_name, autocomplete=autocomplete):
                 self.assertEqual(form.fields[field_name].widget.attrs['autocomplete'], autocomplete)
 
+    def test_username_field_maxlength_attribute(self):
+        """
+        Test that AuthenticationForm's username field renders with maxlength HTML attribute.
+        Regression test for issue where maxlength was missing from rendered HTML.
+        """
+        form = AuthenticationForm()
+        username_field = form.fields['username']
+        
+        # Verify the field has max_length set
+        self.assertIsNotNone(username_field.max_length)
+        self.assertEqual(username_field.max_length, 150)
+        
+        # Verify widget_attrs includes maxlength
+        widget_attrs = username_field.widget_attrs(username_field.widget)
+        self.assertIn('maxlength', widget_attrs)
+        self.assertEqual(widget_attrs['maxlength'], '150')
+        
+        # Verify the rendered HTML includes maxlength
+        html = str(form['username'])
+        self.assertIn('maxlength="150"', html)
+
 
 class SetPasswordFormTest(TestDataMixin, TestCase):
 
