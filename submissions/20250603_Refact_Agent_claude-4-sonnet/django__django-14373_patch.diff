diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py
index 38e89c47bb..7185c6921c 100644
--- a/django/utils/dateformat.py
+++ b/django/utils/dateformat.py
@@ -314,7 +314,7 @@ class DateFormat(TimeFormat):
 
     def Y(self):
         "Year, 4 digits; e.g. '1999'"
-        return self.data.year
+        return '%04d' % self.data.year
 
     def z(self):
         """Day of the year, i.e. 1 to 366."""
diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py
index c6d3ded80f..2a47b60f36 100644
--- a/tests/utils_tests/test_dateformat.py
+++ b/tests/utils_tests/test_dateformat.py
@@ -179,6 +179,42 @@ class DateFormatTests(SimpleTestCase):
                     expected_date,
                 )
 
+    def test_year_before_1000_Y_format(self):
+        """
+        Test that Y format specifier returns 4-digit zero-padded years
+        for years less than 1000.
+        """
+        tests = [
+            (999, '0999'),
+            (500, '0500'),
+            (42, '0042'),
+            (4, '0004'),
+            (1, '0001'),
+        ]
+        for year, expected_date in tests:
+            with self.subTest(year=year):
+                self.assertEqual(
+                    dateformat.format(datetime(year, 1, 1), 'Y'),
+                    expected_date,
+                )
+
+    def test_year_Y_format_normal_years(self):
+        """
+        Test that Y format specifier works correctly for normal years (>= 1000).
+        """
+        tests = [
+            (1000, '1000'),
+            (1979, '1979'),
+            (2023, '2023'),
+            (9999, '9999'),
+        ]
+        for year, expected_date in tests:
+            with self.subTest(year=year):
+                self.assertEqual(
+                    dateformat.format(datetime(year, 1, 1), 'Y'),
+                    expected_date,
+                )
+
     def test_twelve_hour_format(self):
         tests = [
             (0, '12'),
