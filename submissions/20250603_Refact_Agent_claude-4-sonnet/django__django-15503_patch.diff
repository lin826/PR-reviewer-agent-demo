diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index fdca700c9d..d1ca239057 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -139,6 +139,20 @@ def compile_json_path(key_transforms, include_root=True):
     return "".join(path)
 
 
+def compile_json_path_for_has_key(key_transforms, include_root=True):
+    """
+    Compile JSON path for has_key lookups, treating all keys as object keys.
+    This ensures that string keys that look like numbers (e.g., '1111') are
+    treated as object keys, not array indices.
+    """
+    path = ["$"] if include_root else []
+    for key_transform in key_transforms:
+        # For has_key lookups, always treat keys as object keys, never as array indices
+        path.append(".")
+        path.append(json.dumps(key_transform))
+    return "".join(path)
+
+
 class DataContains(PostgresOperatorLookup):
     lookup_name = "contains"
     postgres_operator = "@>"
@@ -193,11 +207,23 @@ class HasKeyLookup(PostgresOperatorLookup):
                 *_, rhs_key_transforms = key.preprocess_lhs(compiler, connection)
             else:
                 rhs_key_transforms = [key]
+            
+            # Only apply the fix for simple string/integer keys, not for complex expressions
+            if (len(rhs_key_transforms) == 1 and 
+                isinstance(rhs_key_transforms[0], (str, int)) and 
+                not isinstance(key, KeyTransform) and 
+                not hasattr(key, 'resolve_expression')):
+                # Use the has_key specific version for simple keys
+                json_path = compile_json_path_for_has_key(rhs_key_transforms, include_root=False)
+            else:
+                # Use original compile_json_path for everything else
+                json_path = compile_json_path(rhs_key_transforms, include_root=False)
+                
             rhs_params.append(
                 "%s%s"
                 % (
                     lhs_json_path,
-                    compile_json_path(rhs_key_transforms, include_root=False),
+                    json_path,
                 )
             )
         # Add condition for each key.
@@ -237,6 +263,9 @@ class HasKey(HasKeyLookup):
     postgres_operator = "?"
     prepare_rhs = False
 
+    def get_prep_lookup(self):
+        return str(self.rhs)
+
 
 class HasKeys(HasKeyLookup):
     lookup_name = "has_keys"
@@ -252,6 +281,9 @@ class HasAnyKeys(HasKeys):
     postgres_operator = "?|"
     logical_operator = " OR "
 
+    def get_prep_lookup(self):
+        return [str(item) for item in self.rhs]
+
 
 class CaseInsensitiveMixin:
     """
