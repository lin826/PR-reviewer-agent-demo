diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index 842b73e95c..f4bc74b7cd 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -1157,7 +1157,7 @@ class SelectDateWidget(Widget):
             input_format = formats.sanitize_strftime_format(input_format)
             try:
                 date_value = datetime.date(int(y), int(m), int(d))
-            except ValueError:
+            except (ValueError, OverflowError):
                 # Return pseudo-ISO dates with zeros for any unselected values,
                 # e.g. '2017-0-23'.
                 return "%s-%s-%s" % (y or 0, m or 0, d or 0)
diff --git a/tests/forms_tests/widget_tests/test_selectdatewidget.py b/tests/forms_tests/widget_tests/test_selectdatewidget.py
index cfcd037987..0dde69170d 100644
--- a/tests/forms_tests/widget_tests/test_selectdatewidget.py
+++ b/tests/forms_tests/widget_tests/test_selectdatewidget.py
@@ -621,6 +621,36 @@ class SelectDateWidgetTest(WidgetTest):
                     self.widget.value_from_datadict(data, {}, "field"), expected
                 )
 
+    def test_value_from_datadict_overflow_error(self):
+        """
+        Test that extremely large integer values don't cause OverflowError.
+        
+        When datetime.date() receives integers too large for C long conversion,
+        it raises OverflowError instead of ValueError. The widget should handle
+        both exceptions gracefully and return a pseudo-ISO date string.
+        """
+        # Test cases that would cause OverflowError in datetime.date()
+        overflow_tests = [
+            # Very large year
+            (("1234567821345678", "1", "1"), "1234567821345678-1-1"),
+            (("9999999999999999999", "6", "15"), "9999999999999999999-6-15"),
+            # Very large month
+            (("2023", "9999999999999999999", "1"), "2023-9999999999999999999-1"),
+            # Very large day
+            (("2023", "1", "9999999999999999999"), "2023-1-9999999999999999999"),
+            # All large values
+            (("999999999999999", "999999999", "999999999"), "999999999999999-999999999-999999999"),
+        ]
+        
+        for values, expected in overflow_tests:
+            with self.subTest(values=values):
+                data = {}
+                for field_name, value in zip(("year", "month", "day"), values):
+                    data["field_%s" % field_name] = value
+                # Should not raise OverflowError, should return pseudo-ISO format
+                result = self.widget.value_from_datadict(data, {}, "field")
+                self.assertEqual(result, expected)
+
     def test_value_omitted_from_data(self):
         self.assertIs(self.widget.value_omitted_from_data({}, {}, "field"), True)
         self.assertIs(
