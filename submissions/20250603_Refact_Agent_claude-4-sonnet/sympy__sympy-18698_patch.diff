diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py
index c9e77a901f..3fd00a0f3a 100644
--- a/sympy/polys/polytools.py
+++ b/sympy/polys/polytools.py
@@ -5895,6 +5895,56 @@ def _factors_product(factors):
     return Mul(*[f.as_expr()**k for f, k in factors])
 
 
+def _group_factors_by_multiplicity(factors, method):
+    """Group factors with the same multiplicity for square-free factorization.
+    
+    For sqf method, factors with the same exponent should be grouped together.
+    For example: [(x-1, 3), (x-2, 3)] -> [(x**2-3*x+2, 3)]
+    """
+    if method != 'sqf':
+        return factors
+    
+    if not factors:
+        return factors
+    
+    # Group factors by their exponent
+    from collections import defaultdict
+    groups = defaultdict(list)
+    
+    for factor, exp in factors:
+        groups[exp].append(factor)
+    
+    # Rebuild the factor list, combining factors with same exponent
+    result = []
+    for exp in sorted(groups.keys()):
+        factor_list = groups[exp]
+        if len(factor_list) == 1:
+            # Single factor with this exponent
+            result.append((factor_list[0], exp))
+        else:
+            # Multiple factors with same exponent - multiply them together
+            from sympy import Mul, expand
+            if hasattr(factor_list[0], 'as_expr'):
+                # Factors are Poly objects
+                combined = expand(Mul(*[f.as_expr() for f in factor_list]))
+                # Convert back to Poly if needed
+                if hasattr(factor_list[0], 'ring'):
+                    try:
+                        from sympy.polys.polytools import Poly
+                        combined_poly = Poly(combined, *factor_list[0].gens)
+                        result.append((combined_poly, exp))
+                    except:
+                        result.append((combined, exp))
+                else:
+                    result.append((combined, exp))
+            else:
+                # Factors are expressions
+                combined = expand(Mul(*factor_list))
+                result.append((combined, exp))
+    
+    return result
+
+
 def _symbolic_factor_list(expr, opt, method):
     """Helper function for :func:`_symbolic_factor`. """
     coeff, factors = S.One, []
@@ -5997,6 +6047,10 @@ def _generic_factor_list(expr, gens, args, method):
 
         fp = _sorted_factors(fp, method)
         fq = _sorted_factors(fq, method)
+        
+        # Group factors with the same multiplicity for sqf method
+        fp = _group_factors_by_multiplicity(fp, method)
+        fq = _group_factors_by_multiplicity(fq, method)
 
         if not opt.polys:
             fp = [(f.as_expr(), k) for f, k in fp]
