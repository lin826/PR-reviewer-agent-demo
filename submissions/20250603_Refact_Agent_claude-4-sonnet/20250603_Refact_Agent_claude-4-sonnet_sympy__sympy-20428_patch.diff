diff --git a/sympy/polys/densetools.py b/sympy/polys/densetools.py
index f057824642..c3b9b062d9 100644
--- a/sympy/polys/densetools.py
+++ b/sympy/polys/densetools.py
@@ -1198,6 +1198,10 @@ def dup_clear_denoms(f, K0, K1=None, convert=False):
     if not K1.is_one(common):
         f = dup_mul_ground(f, common, K0)
 
+    # Strip leading zeros to ensure canonical representation
+    from .densebasic import dup_strip
+    f = dup_strip(f)
+
     if not convert:
         return common, f
     else:
@@ -1252,6 +1256,10 @@ def dmp_clear_denoms(f, u, K0, K1=None, convert=False):
     if not K1.is_one(common):
         f = dmp_mul_ground(f, common, u, K0)
 
+    # Strip leading zeros to ensure canonical representation
+    from .densebasic import dmp_strip
+    f = dmp_strip(f, u)
+
     if not convert:
         return common, f
     else:
diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py
index c774fc41e2..eb12ba6b63 100644
--- a/sympy/polys/tests/test_polytools.py
+++ b/sympy/polys/tests/test_polytools.py
@@ -1458,6 +1458,40 @@ def test_Poly_rat_clear_denoms():
     assert f.rat_clear_denoms(g) == (f, g)
 
 
+def test_Poly_clear_denoms_zero_polynomial():
+    """Test that clear_denoms() properly strips zero polynomials (issue #17990)"""
+    # Test case: polynomial that evaluates to zero after clearing denominators
+    from sympy import sympify
+    expr = sympify("-117968192370600*18**(1/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) - 15720318185*2**(2/3)*3**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 15720318185*12**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 117968192370600*2**(1/3)*3**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3))")
+    
+    f = Poly(expr, x)
+    coeff, result_poly = f.clear_denoms()
+    
+    # Test that the result is properly stripped (canonical zero representation)
+    assert result_poly.rep.rep == []
+    assert result_poly.is_zero == True
+    assert result_poly.as_expr() == 0
+    assert result_poly.as_expr().is_zero == True
+    
+    # Test that methods that previously failed now work
+    gcd_result = result_poly.terms_gcd()
+    assert gcd_result == ((0,), Poly(0, x, domain='EX'))
+    
+    prim_result = result_poly.primitive()
+    assert prim_result == (0, Poly(0, x, domain='EX'))
+    
+    # Compare with a properly constructed zero polynomial
+    zero_poly = Poly(0, x, domain="EX")
+    assert result_poly.rep.rep == zero_poly.rep.rep
+    assert result_poly.is_zero == zero_poly.is_zero
+    
+    # Test simpler cases that also evaluate to zero
+    f1 = Poly((x - x)/2, x, domain='EX')
+    coeff1, result1 = f1.clear_denoms()
+    assert result1.rep.rep == []
+    assert result1.is_zero == True
+
+
 def test_Poly_integrate():
     assert Poly(x + 1).integrate() == Poly(x**2/2 + x)
     assert Poly(x + 1).integrate(x) == Poly(x**2/2 + x)
