diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 23c3a08c67..7cd6433847 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -185,6 +185,10 @@ def floatformat(text, arg=-1):
     units += -tupl[2] if m else tupl[2]
     prec = abs(p) + units + 1
 
+    # Ensure precision is at least 1 to avoid ValueError
+    if prec < 1:
+        prec = 1
+
     # Avoid conversion to scientific notation by accessing `sign`, `digits`,
     # and `exponent` from Decimal.as_tuple() directly.
     rounded_d = d.quantize(exp, ROUND_HALF_UP, Context(prec=prec))
diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py
index 361a888ce3..3fd3c96bef 100644
--- a/tests/template_tests/filter_tests/test_floatformat.py
+++ b/tests/template_tests/filter_tests/test_floatformat.py
@@ -151,3 +151,29 @@ class FunctionTests(SimpleTestCase):
             self.assertEqual(floatformat(15.2042, "-3"), "15.204")
             self.assertEqual(floatformat(Decimal("1.2345"), 2), "1.23")
             self.assertEqual(floatformat(Decimal("15.2042"), -3), "15.204")
+
+    def test_zero_precision_with_decimal_zeros(self):
+        """
+        Test that floatformat handles zero precision correctly with decimal zero values.
+        This addresses the issue where floatformat('0.00', 0) and floatformat(Decimal('0.00'), 0)
+        would raise ValueError: valid range for prec is [1, MAX_PREC].
+        """
+        # Test cases that previously failed
+        self.assertEqual(floatformat('0.00', 0), '0')
+        self.assertEqual(floatformat(Decimal('0.00'), 0), '0')
+        self.assertEqual(floatformat('0.000', 0), '0')
+        self.assertEqual(floatformat(Decimal('0.000'), 0), '0')
+        self.assertEqual(floatformat('0.0000', 0), '0')
+        self.assertEqual(floatformat(Decimal('0.0000'), 0), '0')
+        
+        # Ensure other zero representations still work
+        self.assertEqual(floatformat('0', 0), '0')
+        self.assertEqual(floatformat('0.0', 0), '0')
+        self.assertEqual(floatformat(Decimal('0'), 0), '0')
+        self.assertEqual(floatformat(Decimal('0.0'), 0), '0')
+        
+        # Test with other precision values to ensure no regression
+        self.assertEqual(floatformat('0.00', 1), '0.0')
+        self.assertEqual(floatformat('0.00', -1), '0')
+        self.assertEqual(floatformat(Decimal('0.00'), 1), '0.0')
+        self.assertEqual(floatformat(Decimal('0.00'), -1), '0')
