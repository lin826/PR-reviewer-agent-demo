diff --git a/pylint/config/argument.py b/pylint/config/argument.py
index 30a5fd175..5feede743 100644
--- a/pylint/config/argument.py
+++ b/pylint/config/argument.py
@@ -111,10 +111,75 @@ def _regex_transformer(value: str) -> Pattern[str]:
         raise argparse.ArgumentTypeError(msg) from e
 
 
+def _regex_aware_csv_transformer(value: str) -> Sequence[str]:
+    """Transforms a comma separated list of regular expressions.
+    
+    This function is aware of regex syntax and will not split on commas
+    that are part of regex constructs like quantifiers {1,3} or character classes.
+    """
+    if not value.strip():
+        return []
+    
+    patterns = []
+    current_pattern = ""
+    i = 0
+    paren_depth = 0
+    bracket_depth = 0
+    brace_depth = 0
+    in_escape = False
+    
+    while i < len(value):
+        char = value[i]
+        
+        if in_escape:
+            # If we're in an escape sequence, add the character and continue
+            current_pattern += char
+            in_escape = False
+        elif char == '\\':
+            # Start of escape sequence
+            current_pattern += char
+            in_escape = True
+        elif char == '(':
+            current_pattern += char
+            paren_depth += 1
+        elif char == ')':
+            current_pattern += char
+            paren_depth = max(0, paren_depth - 1)
+        elif char == '[':
+            current_pattern += char
+            bracket_depth += 1
+        elif char == ']':
+            current_pattern += char
+            bracket_depth = max(0, bracket_depth - 1)
+        elif char == '{':
+            current_pattern += char
+            brace_depth += 1
+        elif char == '}':
+            current_pattern += char
+            brace_depth = max(0, brace_depth - 1)
+        elif char == ',' and paren_depth == 0 and bracket_depth == 0 and brace_depth == 0:
+            # This is a delimiter comma, not part of regex syntax
+            stripped = current_pattern.strip()
+            if stripped:
+                patterns.append(stripped)
+            current_pattern = ""
+        else:
+            current_pattern += char
+        
+        i += 1
+    
+    # Add the last pattern
+    stripped = current_pattern.strip()
+    if stripped:
+        patterns.append(stripped)
+    
+    return patterns
+
+
 def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:
     """Transforms a comma separated list of regular expressions."""
     patterns: list[Pattern[str]] = []
-    for pattern in _csv_transformer(value):
+    for pattern in _regex_aware_csv_transformer(value):
         patterns.append(_regex_transformer(pattern))
     return patterns
 
diff --git a/tests/config/test_config.py b/tests/config/test_config.py
index 83c8b072e..b23ff6dad 100644
--- a/tests/config/test_config.py
+++ b/tests/config/test_config.py
@@ -137,13 +137,13 @@ def test_csv_regex_error(capsys: CaptureFixture) -> None:
     """
     with pytest.raises(SystemExit):
         Run(
-            [str(EMPTY_MODULE), r"--bad-names-rgx=(foo{1,3})"],
+            [str(EMPTY_MODULE), r"--bad-names-rgx=(unclosed_paren"],
             exit=False,
         )
     output = capsys.readouterr()
     assert (
-        r"Error in provided regular expression: (foo{1 beginning at index 0: missing ), unterminated subpattern"
-        in output.err
+        "Error in provided regular expression:" in output.err
+        and "unclosed_paren" in output.err
     )
 
 
