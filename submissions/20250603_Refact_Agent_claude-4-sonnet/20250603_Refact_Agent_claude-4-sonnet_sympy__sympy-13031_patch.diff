diff --git a/sympy/matrices/sparse.py b/sympy/matrices/sparse.py
index e6f36cdf35..ca7efda7f8 100644
--- a/sympy/matrices/sparse.py
+++ b/sympy/matrices/sparse.py
@@ -985,8 +985,9 @@ def col_join(self, other):
         >>> C == A.row_insert(A.rows, Matrix(B))
         True
         """
-        if not self:
-            return type(self)(other)
+        # A null matrix can always be stacked (see #10770)
+        if self.rows == 0 and self.cols != other.cols:
+            return self._new(0, other.cols, []).col_join(other)
         A, B = self, other
         if not A.cols == B.cols:
             raise ShapeError()
@@ -1191,8 +1192,9 @@ def row_join(self, other):
         >>> C == A.col_insert(A.cols, B)
         True
         """
-        if not self:
-            return type(self)(other)
+        # A null matrix can always be stacked (see #10770)
+        if self.cols == 0 and self.rows != other.rows:
+            return self._new(other.rows, 0, []).row_join(other)
         A, B = self, other
         if not A.rows == B.rows:
             raise ShapeError()
diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py
index acea940281..0d838166eb 100644
--- a/sympy/matrices/tests/test_sparse.py
+++ b/sympy/matrices/tests/test_sparse.py
@@ -587,3 +587,44 @@ def test_hermitian():
     assert a.is_hermitian is None
     a[0, 1] = a[1, 0]*I
     assert a.is_hermitian is False
+
+
+def test_sparse_matrix_hstack_vstack_empty():
+    """Test for regression #12938 - SparseMatrix hstack/vstack with empty matrices"""
+    # Test hstack with empty matrices
+    M1 = SparseMatrix.zeros(0, 0)
+    M2 = SparseMatrix.zeros(0, 1)
+    M3 = SparseMatrix.zeros(0, 2)
+    M4 = SparseMatrix.zeros(0, 3)
+    
+    result = SparseMatrix.hstack(M1, M2, M3, M4)
+    assert result.shape == (0, 6)
+    
+    # Test vstack with empty matrices
+    V1 = SparseMatrix.zeros(0, 0)
+    V2 = SparseMatrix.zeros(1, 0)
+    V3 = SparseMatrix.zeros(2, 0)
+    V4 = SparseMatrix.zeros(3, 0)
+    
+    result = SparseMatrix.vstack(V1, V2, V3, V4)
+    assert result.shape == (6, 0)
+    
+    # Test individual row_join operations
+    step1 = M1.row_join(M2)
+    assert step1.shape == (0, 1)
+    
+    step2 = step1.row_join(M3)
+    assert step2.shape == (0, 3)
+    
+    step3 = step2.row_join(M4)
+    assert step3.shape == (0, 6)
+    
+    # Test individual col_join operations
+    step1 = V1.col_join(V2)
+    assert step1.shape == (1, 0)
+    
+    step2 = step1.col_join(V3)
+    assert step2.shape == (3, 0)
+    
+    step3 = step2.col_join(V4)
+    assert step3.shape == (6, 0)
