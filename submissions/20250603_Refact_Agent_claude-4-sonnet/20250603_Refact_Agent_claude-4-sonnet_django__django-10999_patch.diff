diff --git a/django/utils/dateparse.py b/django/utils/dateparse.py
index 8d08b7d1d3..a037758784 100644
--- a/django/utils/dateparse.py
+++ b/django/utils/dateparse.py
@@ -29,7 +29,7 @@ datetime_re = re.compile(
 standard_duration_re = re.compile(
     r'^'
     r'(?:(?P<days>-?\d+) (days?, )?)?'
-    r'((?:(?P<hours>-?\d+):)(?=\d+:\d+))?'
+    r'((?:(?P<hours>-?\d+):)(?=-?\d+:-?\d+))?'
     r'(?:(?P<minutes>-?\d+):)?'
     r'(?P<seconds>-?\d+)'
     r'(?:\.(?P<microseconds>\d{1,6})\d{0,6})?'
diff --git a/tests/utils_tests/test_dateparse.py b/tests/utils_tests/test_dateparse.py
index 8d464278ce..93ef872b06 100644
--- a/tests/utils_tests/test_dateparse.py
+++ b/tests/utils_tests/test_dateparse.py
@@ -121,6 +121,28 @@ class DurationParseTests(unittest.TestCase):
             with self.subTest(source=source):
                 self.assertEqual(parse_duration(source), expected)
 
+    def test_negative_components_combinations(self):
+        """
+        Test combinations of positive/negative hours, minutes, and seconds.
+        This addresses the issue where the regex lookahead didn't account
+        for negative signs in minutes and seconds.
+        """
+        test_values = (
+            # Hours:Minutes:Seconds with mixed signs
+            ('1:-15:30', timedelta(hours=1, minutes=-15, seconds=30)),
+            ('1:15:-30', timedelta(hours=1, minutes=15, seconds=-30)),
+            ('-1:-15:30', timedelta(hours=-1, minutes=-15, seconds=30)),
+            ('-1:15:-30', timedelta(hours=-1, minutes=15, seconds=-30)),
+            ('1:-15:-30', timedelta(hours=1, minutes=-15, seconds=-30)),
+            ('-1:-15:-30', timedelta(hours=-1, minutes=-15, seconds=-30)),
+            # Minutes:Seconds with mixed signs
+            ('15:-30', timedelta(minutes=15, seconds=-30)),
+            ('-15:-30', timedelta(minutes=-15, seconds=-30)),
+        )
+        for source, expected in test_values:
+            with self.subTest(source=source):
+                self.assertEqual(parse_duration(source), expected)
+
     def test_iso_8601(self):
         test_values = (
             ('P4Y', None),
