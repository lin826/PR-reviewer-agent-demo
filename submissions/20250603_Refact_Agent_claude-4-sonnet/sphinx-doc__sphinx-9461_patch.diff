diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py
index 23dd9e930..323c03be9 100644
--- a/sphinx/util/inspect.py
+++ b/sphinx/util/inspect.py
@@ -390,7 +390,14 @@ def isproperty(obj: Any) -> bool:
         if isinstance(obj, cached_property):
             return True
 
-    return isinstance(obj, property)
+    if isinstance(obj, property):
+        return True
+    
+    # Check for classmethod wrapping a property (e.g., @classmethod @property)
+    if isinstance(obj, classmethod) and hasattr(obj, '__func__'):
+        return isinstance(obj.__func__, property)
+
+    return False
 
 
 def isgenericalias(obj: Any) -> bool:
@@ -836,10 +843,20 @@ def getdoc(obj: Any, attrgetter: Callable = safe_getattr,
     * partial functions
     * inherited docstring
     * inherited decorated methods
+    * classmethod wrapping property
     """
     doc = attrgetter(obj, '__doc__', None)
     if ispartial(obj) and doc == obj.__class__.__doc__:
         return getdoc(obj.func)
+    elif isinstance(obj, classmethod) and hasattr(obj, '__func__') and isinstance(obj.__func__, property):
+        # Handle @classmethod @property combination
+        return getdoc(obj.__func__)
+    elif isinstance(obj, classmethod) and doc == obj.__class__.__doc__:
+        # Handle regular classmethod where __doc__ is the classmethod's generic docstring
+        return getdoc(obj.__func__)
+    elif isinstance(obj, staticmethod) and doc == obj.__class__.__doc__:
+        # Handle regular staticmethod where __doc__ is the staticmethod's generic docstring
+        return getdoc(obj.__func__)
     elif doc is None and allow_inherited:
         if cls and name:
             # Check a docstring of the attribute or method from super classes.
diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py
index 2f805a87a..73e6bea5e 100644
--- a/tests/test_util_inspect.py
+++ b/tests/test_util_inspect.py
@@ -645,6 +645,7 @@ def test_isattributedescriptor(app):
     assert inspect.isattributedescriptor(testinstancemethod) is False          # instancemethod (C-API)     # NOQA
 
 
+@pytest.mark.sphinx(testroot='ext-autodoc')
 def test_isproperty(app):
     from target.functions import func
     from target.methods import Base
@@ -655,6 +656,19 @@ def test_isproperty(app):
     assert inspect.isproperty(Base().meth) is False     # method of instance
     assert inspect.isproperty(func) is False            # function
 
+    # Test @classmethod @property combination
+    class TestClassMethodProperty:
+        @classmethod
+        @property
+        def class_prop(cls):
+            """A class property."""
+            return "class_property"
+    
+    # The classmethod wrapper should be detected as a property
+    assert inspect.isproperty(TestClassMethodProperty.__dict__['class_prop']) is True
+    # But the resolved value should not be a property
+    assert inspect.isproperty(TestClassMethodProperty.class_prop) is False
+
 
 @pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')
 @pytest.mark.sphinx(testroot='ext-autodoc')
