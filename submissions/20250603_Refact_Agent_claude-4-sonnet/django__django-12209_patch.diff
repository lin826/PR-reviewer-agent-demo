diff --git a/django/db/models/base.py b/django/db/models/base.py
index e3b14a41a0..c2582a09bb 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -398,6 +398,8 @@ class ModelState:
     # explicit (non-auto) PKs. This impacts validation only; it has no effect
     # on the actual save.
     adding = True
+    # Track whether the primary key was explicitly provided during initialization
+    pk_explicitly_provided = False
     fields_cache = ModelStateFieldsCacheDescriptor()
 
 
@@ -414,6 +416,16 @@ class Model(metaclass=ModelBase):
 
         # Set up the storage for instance state
         self._state = ModelState()
+        
+        # Track whether the primary key was explicitly provided
+        pk_field = opts.pk
+        pk_provided_in_args = len(args) > 0 and pk_field in opts.concrete_fields[:len(args)]
+        pk_provided_in_kwargs = (
+            pk_field.name in kwargs or 
+            pk_field.attname in kwargs or
+            'pk' in kwargs  # Handle the special 'pk' parameter
+        )
+        self._state.pk_explicitly_provided = pk_provided_in_args or pk_provided_in_kwargs
 
         # There is a rather weird disparity here; if kwargs, it's set, then args
         # overrides it. It should be one or the other; don't duplicate the work
@@ -847,10 +859,12 @@ class Model(metaclass=ModelBase):
         if not pk_set and (force_update or update_fields):
             raise ValueError("Cannot force an update in save() with no primary key.")
         updated = False
-        # Skip an UPDATE when adding an instance and primary key has a default.
+        # Skip an UPDATE when adding an instance and primary key has a default,
+        # but only if the pk was not explicitly provided.
         if (
             not force_insert and
             self._state.adding and
+            not self._state.pk_explicitly_provided and
             self._meta.pk.default and
             self._meta.pk.default is not NOT_PROVIDED
         ):
