diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index 000e2e8d3..25bb75b7b 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -1157,9 +1157,45 @@ class PythonDomain(Domain):
                     else:
                         # "fuzzy" searching mode
                         searchname = '.' + name
-                        matches = [(oname, self.objects[oname]) for oname in self.objects
-                                   if oname.endswith(searchname) and
-                                   self.objects[oname].objtype in objtypes]
+                        matches = []
+                        exact_matches = []
+                        fallback_matches = []
+                        
+                        for oname in self.objects:
+                            if (oname.endswith(searchname) and
+                                self.objects[oname].objtype in objtypes):
+                                
+                                if modname and classname:
+                                    # If we have both module and class context, prefer exact matches
+                                    expected_name = modname + '.' + classname + '.' + name
+                                    if oname == expected_name:
+                                        exact_matches.append((oname, self.objects[oname]))
+                                    elif oname.startswith(modname + '.'):
+                                        # Same module but different class - lower priority
+                                        fallback_matches.append((oname, self.objects[oname]))
+                                elif modname:
+                                    # If we have module context, prefer matches in the same module
+                                    expected_name = modname + '.' + name
+                                    if oname == expected_name:
+                                        exact_matches.append((oname, self.objects[oname]))
+                                    elif oname.startswith(modname + '.'):
+                                        # Same module but qualified name - lower priority
+                                        fallback_matches.append((oname, self.objects[oname]))
+                                    elif '.' not in oname:
+                                        # Global scope - lowest priority
+                                        fallback_matches.append((oname, self.objects[oname]))
+                                else:
+                                    # No context provided, only match unqualified names to avoid
+                                    # linking to arbitrary objects in other modules/classes
+                                    if '.' not in oname.replace(searchname, ''):
+                                        fallback_matches.append((oname, self.objects[oname]))
+                        
+                        # Prefer exact matches, fall back to others only if no exact match
+                        if exact_matches:
+                            matches = exact_matches
+                        elif fallback_matches:
+                            # Limit fallback matches to avoid too many irrelevant results
+                            matches = fallback_matches[:1]  # Only take the first fallback match
         else:
             # NOTE: searching for exact match, object type is not considered
             if name in self.objects:
