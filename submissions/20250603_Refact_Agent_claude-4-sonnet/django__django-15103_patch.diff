diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 5ccef38048..12f0d4caaa 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -83,7 +83,7 @@ def escapejs_filter(value):
 
 
 @register.filter(is_safe=True)
-def json_script(value, element_id):
+def json_script(value, element_id=None):
     """
     Output value JSON-encoded, wrapped in a <script type="application/json">
     tag.
diff --git a/django/utils/html.py b/django/utils/html.py
index da1b5675ec..65c5442d8d 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -61,7 +61,7 @@ _json_script_escapes = {
 }
 
 
-def json_script(value, element_id):
+def json_script(value, element_id=None):
     """
     Escape all the HTML/XML special characters with their unicode escapes, so
     value is safe to be output anywhere except for inside a tag attribute. Wrap
@@ -69,10 +69,16 @@ def json_script(value, element_id):
     """
     from django.core.serializers.json import DjangoJSONEncoder
     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)
-    return format_html(
-        '<script id="{}" type="application/json">{}</script>',
-        element_id, mark_safe(json_str)
-    )
+    if element_id is not None:
+        return format_html(
+            '<script id="{}" type="application/json">{}</script>',
+            element_id, mark_safe(json_str)
+        )
+    else:
+        return format_html(
+            '<script type="application/json">{}</script>',
+            mark_safe(json_str)
+        )
 
 
 def conditional_escape(text):
diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py
index 061fe32c12..0733ec376c 100644
--- a/tests/template_tests/filter_tests/test_json_script.py
+++ b/tests/template_tests/filter_tests/test_json_script.py
@@ -17,3 +17,17 @@ class JsonScriptTests(SimpleTestCase):
             '{"a": "testing\\r\\njson \'string\\" \\u003Cb\\u003Eescaping\\u003C/b\\u003E"}'
             '</script>'
         )
+
+    @setup({'json-tag02': '{{ value|json_script }}'})
+    def test_without_id(self):
+        """Test json_script template filter without element_id."""
+        output = self.engine.render_to_string(
+            'json-tag02',
+            {'value': {'a': 'testing\r\njson \'string" <b>escaping</b>'}}
+        )
+        self.assertEqual(
+            output,
+            '<script type="application/json">'
+            '{"a": "testing\\r\\njson \'string\\" \\u003Cb\\u003Eescaping\\u003C/b\\u003E"}'
+            '</script>'
+        )
diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py
index 909620ea3f..5f5a4ab517 100644
--- a/tests/utils_tests/test_html.py
+++ b/tests/utils_tests/test_html.py
@@ -173,6 +173,29 @@ class TestUtilsHtml(SimpleTestCase):
             with self.subTest(arg=arg):
                 self.assertEqual(json_script(arg, 'test_id'), expected)
 
+    def test_json_script_without_id(self):
+        """Test json_script with optional element_id parameter."""
+        tests = (
+            # "<", ">" and "&" are quoted inside JSON strings
+            ('&<>', '<script type="application/json">"\\u0026\\u003C\\u003E"</script>'),
+            # "<", ">" and "&" are quoted inside JSON objects
+            (
+                {'a': '<script>test&ing</script>'},
+                '<script type="application/json">'
+                '{"a": "\\u003Cscript\\u003Etest\\u0026ing\\u003C/script\\u003E"}</script>'
+            ),
+            # Lazy strings are quoted
+            (lazystr('&<>'), '<script type="application/json">"\\u0026\\u003C\\u003E"</script>'),
+            (
+                {'a': lazystr('<script>test&ing</script>')},
+                '<script type="application/json">'
+                '{"a": "\\u003Cscript\\u003Etest\\u0026ing\\u003C/script\\u003E"}</script>'
+            ),
+        )
+        for arg, expected in tests:
+            with self.subTest(arg=arg):
+                self.assertEqual(json_script(arg), expected)
+
     def test_smart_urlquote(self):
         items = (
             ('http://öäü.com/', 'http://xn--4ca9at.com/'),
