diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index a89c35599f..1b0d4554e0 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -333,7 +333,7 @@ class BaseFormSet:
         self._non_form_errors.
         """
         self._errors = []
-        self._non_form_errors = self.error_class()
+        self._non_form_errors = self.error_class(error_class='nonform')
         empty_forms_count = 0
 
         if not self.is_bound:  # Stop further processing.
@@ -380,7 +380,7 @@ class BaseFormSet:
             # Give self.clean() a chance to do cross-form validation.
             self.clean()
         except ValidationError as e:
-            self._non_form_errors = self.error_class(e.error_list)
+            self._non_form_errors = self.error_class(e.error_list, error_class='nonform')
 
     def clean(self):
         """
diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py
index 880ba0b85f..2d5bf6887e 100644
--- a/tests/admin_views/tests.py
+++ b/tests/admin_views/tests.py
@@ -3348,7 +3348,7 @@ class AdminViewListEditable(TestCase):
         response = self.client.post(reverse('admin:admin_views_person_changelist'), data)
         non_form_errors = response.context['cl'].formset.non_form_errors()
         self.assertIsInstance(non_form_errors, ErrorList)
-        self.assertEqual(str(non_form_errors), str(ErrorList(["Grace is not a Zombie"])))
+        self.assertEqual(str(non_form_errors), str(ErrorList(["Grace is not a Zombie"], error_class='nonform')))
 
     def test_list_editable_ordering(self):
         collector = Collector.objects.create(id=1, name="Frederick Clegg")
diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py
index 889560aa74..122f6850db 100644
--- a/tests/forms_tests/tests/test_formsets.py
+++ b/tests/forms_tests/tests/test_formsets.py
@@ -1482,3 +1482,81 @@ class AllValidTests(SimpleTestCase):
         expected_errors = [{'votes': ['This field is required.']}, {'votes': ['This field is required.']}]
         self.assertEqual(formset1._errors, expected_errors)
         self.assertEqual(formset2._errors, expected_errors)
+
+
+class NonFormErrorCSSClassTests(SimpleTestCase):
+    """Tests for the 'nonform' CSS class on FormSet non-form errors."""
+
+    def test_non_form_errors_have_nonform_css_class(self):
+        """FormSet non-form errors should have 'nonform' CSS class."""
+        class TestFormSet(BaseFormSet):
+            def clean(self):
+                super().clean()
+                raise ValidationError("This is a non-form error")
+
+        FormSet = formset_factory(Choice, formset=TestFormSet)
+        data = {
+            'form-TOTAL_FORMS': '1',
+            'form-INITIAL_FORMS': '0',
+            'form-0-choice': 'test',
+            'form-0-votes': '1',
+        }
+        formset = FormSet(data)
+        self.assertFalse(formset.is_valid())
+        
+        non_form_errors = formset.non_form_errors()
+        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')
+        self.assertIn('nonform', non_form_errors.error_class)
+        self.assertIn('<ul class="errorlist nonform">', str(non_form_errors))
+
+    def test_management_form_errors_have_nonform_css_class(self):
+        """FormSet management form errors should have 'nonform' CSS class."""
+        FormSet = formset_factory(Choice)
+        # Missing management form data should trigger non-form errors
+        formset = FormSet({})
+        self.assertFalse(formset.is_valid())
+        
+        non_form_errors = formset.non_form_errors()
+        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')
+        self.assertIn('nonform', non_form_errors.error_class)
+        self.assertIn('<ul class="errorlist nonform">', str(non_form_errors))
+
+    def test_consistency_with_form_non_field_errors(self):
+        """FormSet non-form errors should be consistent with Form non-field errors."""
+        # Test Form non-field errors (should have 'nonfield')
+        class TestForm(Form):
+            choice = CharField()
+            votes = IntegerField()
+            
+            def clean(self):
+                cleaned_data = super().clean()
+                raise ValidationError("This is a non-field error")
+        
+        form = TestForm({'choice': 'test', 'votes': '1'})
+        self.assertFalse(form.is_valid())
+        form_non_field_errors = form.non_field_errors()
+        self.assertEqual(form_non_field_errors.error_class, 'errorlist nonfield')
+        
+        # Test FormSet non-form errors (should have 'nonform')
+        class TestFormSet(BaseFormSet):
+            def clean(self):
+                super().clean()
+                raise ValidationError("This is a non-form error")
+
+        FormSet = formset_factory(Choice, formset=TestFormSet)
+        data = {
+            'form-TOTAL_FORMS': '1',
+            'form-INITIAL_FORMS': '0',
+            'form-0-choice': 'test',
+            'form-0-votes': '1',
+        }
+        formset = FormSet(data)
+        self.assertFalse(formset.is_valid())
+        formset_non_form_errors = formset.non_form_errors()
+        self.assertEqual(formset_non_form_errors.error_class, 'errorlist nonform')
+        
+        # Both should have 'errorlist' but different specific classes
+        self.assertIn('errorlist', form_non_field_errors.error_class)
+        self.assertIn('errorlist', formset_non_form_errors.error_class)
+        self.assertIn('nonfield', form_non_field_errors.error_class)
+        self.assertIn('nonform', formset_non_form_errors.error_class)
