diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py
index dd36dea304..d21aaa5107 100644
--- a/sympy/utilities/iterables.py
+++ b/sympy/utilities/iterables.py
@@ -1738,19 +1738,11 @@ def partitions(n, m=None, k=None, size=False):
     {2: 1, 4: 1}
     {3: 2}
 
-    Note that the _same_ dictionary object is returned each time.
-    This is for speed:  generating each partition goes quickly,
-    taking constant time, independent of n.
+    Each partition is returned as a separate dictionary object.
 
-    >>> [p for p in partitions(6, k=2)]
-    [{1: 6}, {1: 6}, {1: 6}, {1: 6}]
-
-    If you want to build a list of the returned dictionaries then
-    make a copy of them:
-
-    >>> [p.copy() for p in partitions(6, k=2)]  # doctest: +SKIP
+    >>> [p for p in partitions(6, k=2)]  # doctest: +SKIP
     [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]
-    >>> [(M, p.copy()) for M, p in partitions(6, k=2, size=True)]  # doctest: +SKIP
+    >>> [(M, p) for M, p in partitions(6, k=2, size=True)]  # doctest: +SKIP
     [(3, {2: 3}), (4, {1: 2, 2: 2}), (5, {1: 4, 2: 1}), (6, {1: 6})]
 
     References
@@ -1802,9 +1794,9 @@ def partitions(n, m=None, k=None, size=False):
         keys.append(r)
     room = m - q - bool(r)
     if size:
-        yield sum(ms.values()), ms
+        yield sum(ms.values()), ms.copy()
     else:
-        yield ms
+        yield ms.copy()
 
     while keys != [1]:
         # Reuse any 1's.
@@ -1842,9 +1834,9 @@ def partitions(n, m=None, k=None, size=False):
             break
         room -= need
         if size:
-            yield sum(ms.values()), ms
+            yield sum(ms.values()), ms.copy()
         else:
-            yield ms
+            yield ms.copy()
 
 
 def ordered_partitions(n, m=None, sort=True):
diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py
index f3ebd270dc..2873eee59a 100644
--- a/sympy/utilities/tests/test_iterables.py
+++ b/sympy/utilities/tests/test_iterables.py
@@ -481,25 +481,36 @@ def test_partitions():
         assert list(partitions(6, None, 2, size=i)) != ans[i]
         assert list(partitions(6, 2, 0, size=i)) == ans[i]
 
-    assert [p.copy() for p in partitions(6, k=2)] == [
+    assert [p for p in partitions(6, k=2)] == [
         {2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]
 
-    assert [p.copy() for p in partitions(6, k=3)] == [
+    assert [p for p in partitions(6, k=3)] == [
         {3: 2}, {1: 1, 2: 1, 3: 1}, {1: 3, 3: 1}, {2: 3}, {1: 2, 2: 2},
         {1: 4, 2: 1}, {1: 6}]
 
-    assert [p.copy() for p in partitions(8, k=4, m=3)] == [
+    assert [p for p in partitions(8, k=4, m=3)] == [
         {4: 2}, {1: 1, 3: 1, 4: 1}, {2: 2, 4: 1}, {2: 1, 3: 2}] == [
-        i.copy() for i in partitions(8, k=4, m=3) if all(k <= 4 for k in i)
+        i for i in partitions(8, k=4, m=3) if all(k <= 4 for k in i)
         and sum(i.values()) <=3]
 
-    assert [p.copy() for p in partitions(S(3), m=2)] == [
+    assert [p for p in partitions(S(3), m=2)] == [
         {3: 1}, {1: 1, 2: 1}]
 
-    assert [i.copy() for i in partitions(4, k=3)] == [
+    assert [i for i in partitions(4, k=3)] == [
         {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}] == [
-        i.copy() for i in partitions(4) if all(k <= 3 for k in i)]
-
+        i for i in partitions(4) if all(k <= 3 for k in i)]
+
+    # Test that partitions returns independent dictionary objects
+    result = list(partitions(4))
+    # All objects should have different identities
+    ids = [id(p) for p in result]
+    assert len(set(ids)) == len(ids), "partitions should return independent objects"
+    # Modifying one should not affect others
+    if result:
+        original_first = result[0].copy()
+        result[0][999] = 123
+        assert result[1] != result[0], "partitions should be independent"
+        assert 999 not in result[1], "modifying one partition should not affect others"
 
     # Consistency check on output of _partitions and RGS_unrank.
     # This provides a sanity test on both routines.  Also verifies that
