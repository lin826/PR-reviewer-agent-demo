diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index ddfd2b365..bc1d78137 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -756,6 +756,40 @@ class Documenter:
                     # keep documented attributes
                     keep = True
                 isattr = True
+            elif want_all and inspect.isclass(self.object) and self.options.inherited_members and member is INSTANCEATTR:
+                # Check for inherited instance attributes in base class attr_docs
+                # Only do this for INSTANCEATTR members when inherited_members is enabled
+                found_in_base = False
+                for cls in inspect.getmro(self.object):
+                    if cls == self.object:
+                        continue  # Skip the current class, already handled above
+                    try:
+                        module = safe_getattr(cls, '__module__')
+                        qualname = safe_getattr(cls, '__qualname__')
+                        if module and qualname:
+                            try:
+                                from sphinx.pycode import ModuleAnalyzer
+                                cls_analyzer = ModuleAnalyzer.for_module(module)
+                                cls_analyzer.analyze()
+                                if (qualname, membername) in cls_analyzer.attr_docs:
+                                    found_in_base = True
+                                    break
+                            except Exception:
+                                pass
+                    except AttributeError:
+                        pass
+                
+                if found_in_base:
+                    if isprivate:
+                        if self.options.private_members is None:
+                            keep = False
+                        else:
+                            keep = membername in self.options.private_members
+                    else:
+                        # keep documented inherited instance attributes
+                        keep = True
+                    isattr = True
+
             elif want_all and isprivate:
                 if has_doc or self.options.undoc_members:
                     if self.options.private_members is None:
diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py
index d6e73d36a..4d4fd671c 100644
--- a/sphinx/ext/autodoc/importer.py
+++ b/sphinx/ext/autodoc/importer.py
@@ -315,6 +315,27 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,
                 members[name] = ClassAttribute(subject, name, INSTANCEATTR,
                                                '\n'.join(docstring))
 
+    # Also check for inherited instance attributes from base classes
+    if isclass(subject):
+        for cls in getmro(subject):
+            try:
+                module = safe_getattr(cls, '__module__')
+                qualname = safe_getattr(cls, '__qualname__')
+                
+                if module and qualname:
+                    try:
+                        cls_analyzer = ModuleAnalyzer.for_module(module)
+                        cls_analyzer.analyze()
+                        for (ns, name), docstring in cls_analyzer.attr_docs.items():
+                            if ns == qualname and name not in members:
+                                members[name] = ClassAttribute(cls, name, INSTANCEATTR,
+                                                               '\n'.join(docstring))
+                    except Exception:
+                        # If we can't analyze the module, skip it
+                        pass
+            except AttributeError:
+                pass
+
     return members
 
 
diff --git a/tests/roots/test-ext-autodoc/target/inheritance.py b/tests/roots/test-ext-autodoc/target/inheritance.py
index ffac84bb6..dacd2f543 100644
--- a/tests/roots/test-ext-autodoc/target/inheritance.py
+++ b/tests/roots/test-ext-autodoc/target/inheritance.py
@@ -10,8 +10,15 @@ class Base(object):
     def inheritedstaticmeth(cls):
         """Inherited static method."""
 
+    def __init__(self):
+        self.inheritedattr = "inherited value"  #: Inherited attribute.
+
 
 class Derived(Base):
     def inheritedmeth(self):
         # no docstring here
         pass
+
+    def __init__(self):
+        super().__init__()
+        self.derivedattr = "derived value"  #: Derived attribute.
