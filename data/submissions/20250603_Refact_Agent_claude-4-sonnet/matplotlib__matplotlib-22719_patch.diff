diff --git a/lib/matplotlib/category.py b/lib/matplotlib/category.py
index c823b68fd9..254fc75689 100644
--- a/lib/matplotlib/category.py
+++ b/lib/matplotlib/category.py
@@ -54,6 +54,10 @@ class StrCategoryConverter(units.ConversionInterface):
         # dtype = object preserves numerical pass throughs
         values = np.atleast_1d(np.array(value, dtype=object))
         # pass through sequence of non binary numbers
+        # Handle empty arrays - they should not trigger deprecation warnings
+        if values.size == 0:
+            return np.asarray(values, dtype=float)
+        
         with _api.suppress_matplotlib_deprecation_warning():
             is_numlike = all(units.ConversionInterface.is_numlike(v)
                              and not isinstance(v, (str, bytes))
diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py
index f0e424bd8e..b8027582c2 100644
--- a/lib/matplotlib/tests/test_category.py
+++ b/lib/matplotlib/tests/test_category.py
@@ -1,6 +1,7 @@
 """Catch all for categorical functions"""
 import pytest
 import numpy as np
+import warnings
 
 import matplotlib as mpl
 from matplotlib._api import MatplotlibDeprecationWarning
@@ -312,3 +313,66 @@ def test_hist():
     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])
     assert n.shape == (10,)
     np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])
+
+
+def test_empty_data_with_category_units():
+    """Test that empty data doesn't trigger deprecation warnings with category units."""
+    
+    # Test various empty data types
+    empty_data_types = [
+        [],
+        np.array([]),
+        np.array([], dtype=float),
+        np.array([], dtype=int),
+        np.array([], dtype=object),
+    ]
+    
+    for empty_data in empty_data_types:
+        fig, ax = plt.subplots()
+        ax.xaxis.update_units(["a", "b", "c"])
+        
+        # This should not raise any warnings
+        with warnings.catch_warnings():
+            warnings.simplefilter("error", category=MatplotlibDeprecationWarning)
+            
+            # Test plotting empty data
+            ax.plot(empty_data, [])
+            
+            # Test convert_units directly
+            result = ax.xaxis.convert_units(empty_data)
+            assert isinstance(result, (list, np.ndarray))
+            
+        plt.close(fig)
+
+
+def test_empty_data_convert_xunits():
+    """Test that convert_xunits works with empty data."""
+    
+    fig, ax = plt.subplots()
+    ax.xaxis.update_units(["a", "b", "c"])
+    
+    # This should not raise any warnings or errors
+    with warnings.catch_warnings():
+        warnings.simplefilter("error", category=MatplotlibDeprecationWarning)
+        
+        result = ax.convert_xunits([])
+        assert result == []
+        
+        result = ax.convert_xunits(np.array([]))
+        assert isinstance(result, (list, np.ndarray))
+        
+    plt.close(fig)
+
+
+def test_direct_converter_empty_data():
+    """Test that direct converter calls don't warn for empty data."""
+    
+    cc = cat.StrCategoryConverter()
+    unit = cat.UnitData(["a", "b", "c"])
+    
+    # Direct converter calls should not trigger warnings for empty data
+    with warnings.catch_warnings():
+        warnings.simplefilter("error", category=MatplotlibDeprecationWarning)
+        result = cc.convert([], unit, None)
+        assert isinstance(result, np.ndarray)
+        assert result.size == 0
diff --git a/lib/matplotlib/units.py b/lib/matplotlib/units.py
index f0a0072abf..0541c2686b 100644
--- a/lib/matplotlib/units.py
+++ b/lib/matplotlib/units.py
@@ -60,6 +60,18 @@ def _is_natively_supported(x):
     """
     # Matplotlib natively supports all number types except Decimal.
     if np.iterable(x):
+        # Handle empty arrays/iterables - they should be treated as natively supported
+        # to avoid spurious deprecation warnings
+        if hasattr(x, 'size') and x.size == 0:
+            return True
+        elif hasattr(x, '__len__'):
+            try:
+                if len(x) == 0:
+                    return True
+            except TypeError:
+                # Some objects are iterable but don't have len() (e.g., custom unit types)
+                pass
+        
         # Assume lists are homogeneous as other functions in unit system.
         for thisx in x:
             if thisx is ma.masked:
