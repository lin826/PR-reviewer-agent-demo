diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py
index aaab1730b7..3e1a8e8697 100644
--- a/django/db/models/sql/where.py
+++ b/django/db/models/sql/where.py
@@ -129,13 +129,16 @@ class WhereNode(tree.Node):
             # Convert if the database doesn't support XOR:
             #   a XOR b XOR c XOR ...
             # to:
-            #   (a OR b OR c OR ...) AND (a + b + c + ...) == 1
+            #   (a OR b OR c OR ...) AND (a + b + c + ...) % 2 == 1
             lhs = self.__class__(self.children, OR)
             rhs_sum = reduce(
                 operator.add,
                 (Case(When(c, then=1), default=0) for c in self.children),
             )
-            rhs = Exact(1, rhs_sum)
+            from django.db.models import Value
+            from django.db.models.expressions import CombinedExpression, Combinable
+            rhs_parity = CombinedExpression(rhs_sum, Combinable.MOD, Value(2))
+            rhs = Exact(1, rhs_parity)
             return self.__class__([lhs, rhs], AND, self.negated).as_sql(
                 compiler, connection
             )
diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py
index a9cdf9cb31..8ec5108fe6 100644
--- a/tests/xor_lookups/tests.py
+++ b/tests/xor_lookups/tests.py
@@ -65,3 +65,50 @@ class XorLookupsTests(TestCase):
             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),
             self.numbers[5:],
         )
+
+    def test_xor_parity_logic(self):
+        """
+        Test that XOR follows parity logic (odd number of True conditions)
+        rather than exactly-one logic. This is the correct interpretation
+        of XOR for multiple operands.
+        """
+        # Create a specific test number for this test
+        test_num = Number.objects.create(num=100)
+        
+        # Test with identical conditions (all True for same record)
+        # 1 condition: True -> should match (odd)
+        result1 = Number.objects.filter(Q(id=test_num.id)).count()
+        self.assertEqual(result1, 1, "Single condition should match")
+        
+        # 2 conditions: True XOR True -> should not match (even)
+        result2 = Number.objects.filter(Q(id=test_num.id) ^ Q(id=test_num.id)).count()
+        self.assertEqual(result2, 0, "Two identical True conditions should not match")
+        
+        # 3 conditions: True XOR True XOR True -> should match (odd)
+        result3 = Number.objects.filter(Q(id=test_num.id) ^ Q(id=test_num.id) ^ Q(id=test_num.id)).count()
+        self.assertEqual(result3, 1, "Three identical True conditions should match")
+        
+        # 4 conditions: True XOR True XOR True XOR True -> should not match (even)
+        result4 = Number.objects.filter(Q(id=test_num.id) ^ Q(id=test_num.id) ^ Q(id=test_num.id) ^ Q(id=test_num.id)).count()
+        self.assertEqual(result4, 0, "Four identical True conditions should not match")
+        
+        # 5 conditions: True XOR True XOR True XOR True XOR True -> should match (odd)
+        result5 = Number.objects.filter(Q(id=test_num.id) ^ Q(id=test_num.id) ^ Q(id=test_num.id) ^ Q(id=test_num.id) ^ Q(id=test_num.id)).count()
+        self.assertEqual(result5, 1, "Five identical True conditions should match")
+
+    def test_xor_mixed_conditions_parity(self):
+        """Test XOR with mixed True/False conditions follows parity logic"""
+        test_num1 = Number.objects.create(num=101)
+        test_num2 = Number.objects.create(num=102)
+        
+        # True XOR False XOR True -> 2 True conditions (even) -> both records match
+        result1 = Number.objects.filter(Q(id=test_num1.id) ^ Q(id=999) ^ Q(id=test_num2.id)).count()
+        self.assertEqual(result1, 2, "Two True conditions should match both records")
+        
+        # True XOR False XOR False -> 1 True condition (odd) -> one record matches
+        result2 = Number.objects.filter(Q(id=test_num1.id) ^ Q(id=999) ^ Q(id=998)).count()
+        self.assertEqual(result2, 1, "One True condition should match one record")
+        
+        # False XOR False XOR False -> 0 True conditions (even) -> no records match
+        result3 = Number.objects.filter(Q(id=999) ^ Q(id=998) ^ Q(id=997)).count()
+        self.assertEqual(result3, 0, "Zero True conditions should match no records")
