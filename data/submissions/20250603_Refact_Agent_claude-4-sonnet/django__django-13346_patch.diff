diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index fafc1beee8..95e5449a59 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -479,6 +479,29 @@ class KeyTransformGte(KeyTransformNumericLookupMixin, lookups.GreaterThanOrEqual
     pass
 
 
+class KeyTransformIn(lookups.In):
+    def process_rhs(self, compiler, connection):
+        if isinstance(self.rhs, KeyTransform):
+            return super(lookups.In, self).process_rhs(compiler, connection)
+        rhs, rhs_params = super().process_rhs(compiler, connection)
+        if connection.vendor == 'oracle':
+            func = []
+            for value in rhs_params:
+                import json
+                value = json.loads(value)
+                function = 'JSON_QUERY' if isinstance(value, (list, dict)) else 'JSON_VALUE'
+                func.append("%s('%s', '$.value')" % (
+                    function,
+                    json.dumps({'value': value}),
+                ))
+            rhs = rhs % tuple(func)
+            rhs_params = []
+        elif connection.vendor == 'sqlite':
+            func = ["JSON_EXTRACT(%s, '$')" if value != 'null' else '%s' for value in rhs_params]
+            rhs = rhs % tuple(func)
+        return rhs, rhs_params
+
+
 KeyTransform.register_lookup(KeyTransformExact)
 KeyTransform.register_lookup(KeyTransformIExact)
 KeyTransform.register_lookup(KeyTransformIsNull)
@@ -494,6 +517,7 @@ KeyTransform.register_lookup(KeyTransformLt)
 KeyTransform.register_lookup(KeyTransformLte)
 KeyTransform.register_lookup(KeyTransformGt)
 KeyTransform.register_lookup(KeyTransformGte)
+KeyTransform.register_lookup(KeyTransformIn)
 
 
 class KeyTransformFactory:
diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py
index a7648711ac..153b3003cf 100644
--- a/tests/model_fields/test_jsonfield.py
+++ b/tests/model_fields/test_jsonfield.py
@@ -723,3 +723,43 @@ class TestQuerying(TestCase):
                 self.assertIs(NullableJSONModel.objects.filter(
                     **{lookup: value},
                 ).exists(), True)
+
+    def test_key_transform_in_lookup(self):
+        """Test __in lookup with key transforms"""
+        # Create test objects
+        obj1 = NullableJSONModel.objects.create(value={'key': 0, 'name': 'zero'})
+        obj2 = NullableJSONModel.objects.create(value={'key': 1, 'name': 'one'})
+        obj3 = NullableJSONModel.objects.create(value={'key': 2, 'name': 'two'})
+        obj4 = NullableJSONModel.objects.create(value={'key': 'string', 'name': 'string_value'})
+
+        # Test multiple values
+        results = NullableJSONModel.objects.filter(value__key__in=[0, 1, 2])
+        self.assertEqual(len(results), 3)
+
+        # Test string values
+        results = NullableJSONModel.objects.filter(value__key__in=['string'])
+        self.assertEqual(len(results), 1)
+
+        # Test mixed types
+        results = NullableJSONModel.objects.filter(value__key__in=[0, 'string'])
+        self.assertEqual(len(results), 2)
+
+        # Test empty list
+        results = NullableJSONModel.objects.filter(value__key__in=[])
+        self.assertEqual(len(results), 0)
+
+        # Test nonexistent values
+        results = NullableJSONModel.objects.filter(value__key__in=[999, 'nonexistent'])
+        self.assertEqual(len(results), 0)
+
+    def test_nested_key_transform_in_lookup(self):
+        """Test __in lookup with nested key transforms"""
+        nested_obj = NullableJSONModel.objects.create(value={
+            'level1': {
+                'level2': {
+                    'key': 'nested_value'
+                }
+            }
+        })
+        results = NullableJSONModel.objects.filter(value__level1__level2__key__in=['nested_value'])
+        self.assertSequenceEqual(results, [nested_obj])
