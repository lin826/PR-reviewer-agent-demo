diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index 70cbc3ba1..5f3632855 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -18,6 +18,22 @@ from docutils.nodes import Element
 from sphinx import addnodes
 from sphinx.application import Sphinx
 from sphinx.util import inspect, typing
+from sphinx.util.typing import get_type_hints
+
+
+def _apply_type_aliases(annotation: str, type_aliases: Dict[str, str]) -> str:
+    """Apply type aliases to a stringified type annotation."""
+    if not type_aliases:
+        return annotation
+    
+    # Apply type aliases by replacing keys with values
+    for alias_key, alias_value in type_aliases.items():
+        # Replace exact matches and matches followed by brackets (for generics)
+        # Match the alias key as a whole word, optionally followed by brackets
+        pattern = r'\b' + re.escape(alias_key) + r'(?=\[|\b)'
+        annotation = re.sub(pattern, alias_value, annotation)
+    
+    return annotation
 
 
 def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
@@ -27,12 +43,37 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
         if callable(obj):
             annotations = app.env.temp_data.setdefault('annotations', {})
             annotation = annotations.setdefault(name, OrderedDict())
+            
+            # Check if we have string annotations (from __future__ import annotations)
+            raw_annotations = getattr(obj, '__annotations__', {})
+            
             sig = inspect.signature(obj)
             for param in sig.parameters.values():
                 if param.annotation is not param.empty:
-                    annotation[param.name] = typing.stringify(param.annotation)
+                    # Check if we have a string annotation for this parameter
+                    if param.name in raw_annotations and isinstance(raw_annotations[param.name], str):
+                        # Use the string annotation and apply type aliases
+                        stringified = raw_annotations[param.name]
+                        stringified = _apply_type_aliases(stringified, app.config.autodoc_type_aliases)
+                    else:
+                        # Use the resolved annotation
+                        stringified = typing.stringify(param.annotation)
+                        # Apply type aliases after stringification
+                        stringified = _apply_type_aliases(stringified, app.config.autodoc_type_aliases)
+                    annotation[param.name] = stringified
+                    
             if sig.return_annotation is not sig.empty:
-                annotation['return'] = typing.stringify(sig.return_annotation)
+                # Check if we have a string annotation for return
+                if 'return' in raw_annotations and isinstance(raw_annotations['return'], str):
+                    # Use the string annotation and apply type aliases
+                    stringified = raw_annotations['return']
+                    stringified = _apply_type_aliases(stringified, app.config.autodoc_type_aliases)
+                else:
+                    # Use the resolved annotation
+                    stringified = typing.stringify(sig.return_annotation)
+                    # Apply type aliases after stringification
+                    stringified = _apply_type_aliases(stringified, app.config.autodoc_type_aliases)
+                annotation['return'] = stringified
     except (TypeError, ValueError):
         pass
 
@@ -122,7 +163,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No
     if 'return' in annotations and 'return' not in arguments:
         field = nodes.field()
         field += nodes.field_name('', 'rtype')
-        field += nodes.field_body('', nodes.paragraph('', annotation))
+        field += nodes.field_body('', nodes.paragraph('', annotations['return']))
         node += field
 
 
