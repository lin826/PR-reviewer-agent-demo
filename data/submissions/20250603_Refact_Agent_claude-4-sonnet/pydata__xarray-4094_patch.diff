diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py
index b0df8749..d3ecd961 100644
--- a/xarray/core/dataarray.py
+++ b/xarray/core/dataarray.py
@@ -1961,7 +1961,11 @@ class DataArray(AbstractArray, DataWithCoords):
         # pull variables out of datarray
         data_dict = {}
         for k in variables:
-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)
+            selected = self.sel({variable_dim: k}).squeeze(drop=True)
+            # Drop the stacking dimension coordinate if it exists
+            if dim in selected.coords:
+                selected = selected.drop_vars(dim)
+            data_dict[k] = selected
 
         # unstacked dataset
         return Dataset(data_dict)
diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py
index d942667a..65343918 100644
--- a/xarray/tests/test_dataarray.py
+++ b/xarray/tests/test_dataarray.py
@@ -2134,6 +2134,22 @@ class TestDataArray:
         with pytest.raises(ValueError, match="'x' is not a stacked coordinate"):
             data.to_unstacked_dataset("x", 0)
 
+    def test_to_unstacked_dataset_single_dim_variables(self):
+        # Test for issue where single-dimension variables caused MergeError
+        # during unstacking due to conflicting scalar coordinates
+        arr = DataArray(
+            np.arange(3),
+            coords=[("x", [0, 1, 2])],
+        )
+        data = Dataset({"a": arr, "b": arr})
+        
+        # Stack and unstack should work without MergeError
+        stacked = data.to_stacked_array('y', sample_dims=['x'])
+        unstacked = stacked.to_unstacked_dataset('y')
+        
+        # Should be a perfect roundtrip
+        assert_identical(data, unstacked)
+
     def test_transpose(self):
         da = DataArray(
             np.random.randn(3, 4, 5),
