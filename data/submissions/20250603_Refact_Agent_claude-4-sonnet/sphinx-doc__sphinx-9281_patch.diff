diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py
index a415a7074..af6fd1ef6 100644
--- a/sphinx/util/inspect.py
+++ b/sphinx/util/inspect.py
@@ -457,6 +457,8 @@ def object_description(object: Any) -> str:
         else:
             return "frozenset({%s})" % ", ".join(object_description(x)
                                                  for x in sorted_values)
+    if isinstance(object, enum.Enum):
+        return str(object)
     try:
         s = repr(object)
     except Exception as exc:
diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py
index de4ad9236..e27b8e001 100644
--- a/tests/test_util_inspect.py
+++ b/tests/test_util_inspect.py
@@ -516,6 +516,32 @@ def test_dict_customtype():
     assert "<CustomType(2)>: 2" in description
 
 
+def test_enum_object_description():
+    import enum
+
+    class TestEnum(enum.Enum):
+        VALUE_A = 10
+        VALUE_B = 20
+
+    class TestIntEnum(enum.IntEnum):
+        INT_VALUE_A = 1
+        INT_VALUE_B = 2
+
+    class TestFlag(enum.Flag):
+        FLAG_A = 1
+        FLAG_B = 2
+
+    # Test that enum values are rendered cleanly (not with repr's ugly format)
+    assert inspect.object_description(TestEnum.VALUE_A) == "TestEnum.VALUE_A"
+    assert inspect.object_description(TestEnum.VALUE_B) == "TestEnum.VALUE_B"
+    
+    assert inspect.object_description(TestIntEnum.INT_VALUE_A) == "TestIntEnum.INT_VALUE_A"
+    assert inspect.object_description(TestIntEnum.INT_VALUE_B) == "TestIntEnum.INT_VALUE_B"
+    
+    assert inspect.object_description(TestFlag.FLAG_A) == "TestFlag.FLAG_A"
+    assert inspect.object_description(TestFlag.FLAG_B) == "TestFlag.FLAG_B"
+
+
 def test_getslots():
     class Foo:
         pass
