diff --git a/django/contrib/auth/checks.py b/django/contrib/auth/checks.py
index 65fc266f7e..a3f7c8c9bc 100644
--- a/django/contrib/auth/checks.py
+++ b/django/contrib/auth/checks.py
@@ -52,7 +52,21 @@ def check_user_model(app_configs=None, **kwargs):
         )
 
     # Check that the username field is unique
-    if not cls._meta.get_field(cls.USERNAME_FIELD).unique:
+    username_field = cls._meta.get_field(cls.USERNAME_FIELD)
+    is_unique = username_field.unique
+    
+    # Also check for UniqueConstraint on the username field
+    if not is_unique:
+        from django.db.models import UniqueConstraint
+        for constraint in cls._meta.constraints:
+            if (isinstance(constraint, UniqueConstraint) and 
+                len(constraint.fields) == 1 and 
+                constraint.fields[0] == cls.USERNAME_FIELD and
+                constraint.condition is None):  # Only unconditional constraints
+                is_unique = True
+                break
+    
+    if not is_unique:
         if (settings.AUTHENTICATION_BACKENDS ==
                 ['django.contrib.auth.backends.ModelBackend']):
             errors.append(
diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py
index cfaa4063f8..b0157e05bc 100644
--- a/tests/auth_tests/test_checks.py
+++ b/tests/auth_tests/test_checks.py
@@ -85,6 +85,83 @@ class UserModelChecksTests(SimpleTestCase):
                 ),
             ])
 
+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithUniqueConstraint')
+    def test_username_unique_constraint(self):
+        """
+        A USERNAME_FIELD with a single-field UniqueConstraint should not
+        trigger auth.E003.
+        """
+        class CustomUserWithUniqueConstraint(AbstractBaseUser):
+            username = models.CharField(max_length=30)
+            USERNAME_FIELD = 'username'
+            
+            class Meta:
+                app_label = 'auth_tests'
+                constraints = [
+                    models.UniqueConstraint(fields=['username'], name='username_unique')
+                ]
+
+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())
+        self.assertEqual(errors, [])
+
+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithMultiFieldConstraint')
+    def test_username_multi_field_constraint(self):
+        """
+        A USERNAME_FIELD with a multi-field UniqueConstraint should still
+        trigger auth.E003.
+        """
+        class CustomUserWithMultiFieldConstraint(AbstractBaseUser):
+            username = models.CharField(max_length=30)
+            email = models.EmailField()
+            USERNAME_FIELD = 'username'
+            
+            class Meta:
+                app_label = 'auth_tests'
+                constraints = [
+                    models.UniqueConstraint(fields=['username', 'email'], name='username_email_unique')
+                ]
+
+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())
+        self.assertEqual(errors, [
+            checks.Error(
+                "'CustomUserWithMultiFieldConstraint.username' must be "
+                "unique because it is named as the 'USERNAME_FIELD'.",
+                obj=CustomUserWithMultiFieldConstraint,
+                id='auth.E003',
+            ),
+        ])
+
+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithConditionalConstraint')
+    def test_username_conditional_constraint(self):
+        """
+        A USERNAME_FIELD with a conditional UniqueConstraint should still
+        trigger auth.E003.
+        """
+        class CustomUserWithConditionalConstraint(AbstractBaseUser):
+            username = models.CharField(max_length=30)
+            is_active = models.BooleanField(default=True)
+            USERNAME_FIELD = 'username'
+            
+            class Meta:
+                app_label = 'auth_tests'
+                constraints = [
+                    models.UniqueConstraint(
+                        fields=['username'], 
+                        condition=models.Q(is_active=True),
+                        name='username_active_unique'
+                    )
+                ]
+
+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())
+        self.assertEqual(errors, [
+            checks.Error(
+                "'CustomUserWithConditionalConstraint.username' must be "
+                "unique because it is named as the 'USERNAME_FIELD'.",
+                obj=CustomUserWithConditionalConstraint,
+                id='auth.E003',
+            ),
+        ])
+
     @override_settings(AUTH_USER_MODEL='auth_tests.BadUser')
     def test_is_anonymous_authenticated_methods(self):
         """
