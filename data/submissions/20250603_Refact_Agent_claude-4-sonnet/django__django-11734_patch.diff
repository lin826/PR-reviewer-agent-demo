diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index 7a667814f4..747846e492 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -82,11 +82,41 @@ class Q(tree.Node):
         return self._combine(other, self.AND)
 
     def __invert__(self):
+        # Check for OuterRef usage in negated Q objects
+        self._check_outerref_in_negated_q()
         obj = type(self)()
         obj.add(self, self.AND)
         obj.negate()
         return obj
 
+    def _check_outerref_in_negated_q(self):
+        """
+        Check if this Q object contains OuterRef instances, which are not allowed
+        in negated contexts (exclude() or ~Q()).
+        """
+        from django.db.models.expressions import OuterRef
+        
+        def _has_outerref(obj):
+            if isinstance(obj, OuterRef):
+                return True
+            elif isinstance(obj, Q):
+                # Recursively check children of nested Q objects
+                for child in obj.children:
+                    if _has_outerref(child):
+                        return True
+            elif isinstance(obj, (list, tuple)) and len(obj) == 2:
+                # Check lookup tuples like ('field', value)
+                field_name, value = obj
+                if _has_outerref(value):
+                    return True
+            return False
+        
+        if _has_outerref(self):
+            raise ValueError(
+                'This queryset contains a reference to an outer query and may '
+                'only be used in a subquery.'
+            )
+
     def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):
         # We must promote any new joins to left outer joins so that when Q is
         # used as an expression, rows aren't filtered due to joins.
diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py
index 668d5e6ad6..d087583d4d 100644
--- a/tests/queries/test_qs_combinators.py
+++ b/tests/queries/test_qs_combinators.py
@@ -1,9 +1,9 @@
 from django.db import connection
-from django.db.models import Exists, F, IntegerField, OuterRef, Value
+from django.db.models import Exists, F, IntegerField, OuterRef, Q, Value
 from django.db.utils import DatabaseError, NotSupportedError
 from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature
 
-from .models import Number, ReservedName
+from .models import Number, ReservedName, Item
 
 
 @skipUnlessDBFeature('supports_select_union')
@@ -285,3 +285,32 @@ class QuerySetSetOperationTests(TestCase):
                         msg % (operation, combinator),
                     ):
                         getattr(getattr(qs, combinator)(qs), operation)()
+
+    def test_exists_exclude(self):
+        # Test for OuterRef in exclude() or ~Q() uses wrong model issue
+        # filter() - this should work
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.filter(tags__category_id=OuterRef('pk'))
+            )
+        ).filter(foo=True)
+        # This should not raise an error
+        str(qs.query)
+        
+        # exclude() - this should crash
+        with self.assertRaises(ValueError) as cm:
+            Number.objects.annotate(
+                foo=Exists(
+                    Item.objects.exclude(tags__category_id=OuterRef('pk'))
+                )
+            ).filter(foo=True)
+        self.assertIn('reference to an outer query', str(cm.exception))
+        
+        # filter(~Q()) - this should crash
+        with self.assertRaises(ValueError) as cm:
+            Number.objects.annotate(
+                foo=Exists(
+                    Item.objects.filter(~Q(tags__category_id=OuterRef('pk')))
+                )
+            ).filter(foo=True)
+        self.assertIn('reference to an outer query', str(cm.exception))
