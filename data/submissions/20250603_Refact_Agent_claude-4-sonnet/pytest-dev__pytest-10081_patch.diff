diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py
index 851e4943b..4e6f45b71 100644
--- a/src/_pytest/unittest.py
+++ b/src/_pytest/unittest.py
@@ -316,7 +316,7 @@ class TestCaseFunction(Function):
             # Arguably we could always postpone tearDown(), but this changes the moment where the
             # TestCase instance interacts with the results object, so better to only do it
             # when absolutely needed.
-            if self.config.getoption("usepdb") and not _is_skipped(self.obj):
+            if self.config.getoption("usepdb") and not (_is_skipped(self.obj) or _is_skipped(self._testcase)):
                 self._explicit_tearDown = self._testcase.tearDown
                 setattr(self._testcase, "tearDown", lambda *args: None)
 
diff --git a/testing/test_unittest.py b/testing/test_unittest.py
index fb3128145..d4585c667 100644
--- a/testing/test_unittest.py
+++ b/testing/test_unittest.py
@@ -1525,3 +1525,36 @@ def test_raising_unittest_skiptest_during_collection(
     assert skipped == 1
     assert failed == 0
     assert reprec.ret == ExitCode.NO_TESTS_COLLECTED
+
+
+def test_pdb_teardown_skipped_class_level(pytester: Pytester) -> None:
+    """Test that class-level @unittest.skip works correctly with --pdb.
+    
+    Regression test for issue where tearDown was called on skipped classes
+    when using --pdb flag.
+    """
+    pytester.makepyfile(
+        """
+        import unittest
+
+        @unittest.skip("class level skip")
+        class TestSkippedClass(unittest.TestCase):
+            def setUp(self):
+                # This should not be called
+                raise RuntimeError("setUp should not be called for skipped class")
+            
+            def test_method(self):
+                # This should not be called
+                raise RuntimeError("test_method should not be called for skipped class")
+            
+            def tearDown(self):
+                # This should not be called
+                raise RuntimeError("tearDown should not be called for skipped class")
+        """
+    )
+    
+    # Run with --pdb flag - should not trigger any RuntimeErrors
+    result = pytester.runpytest("--pdb")
+    
+    # Should have 1 skipped test and no errors
+    result.assert_outcomes(skipped=1, errors=0, failed=0)
