diff --git a/django/db/models/query.py b/django/db/models/query.py
index 387deca527..409ebcb547 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -541,7 +541,7 @@ class QuerySet:
         if any(f.primary_key for f in fields):
             raise ValueError('bulk_update() cannot be used with primary key fields.')
         if not objs:
-            return
+            return 0
         # PK is used twice in the resulting update query, once in the filter
         # and once in the WHEN. Each field will also have one CAST.
         max_batch_size = connections[self.db].ops.bulk_batch_size(['pk', 'pk'] + fields, objs)
@@ -564,8 +564,10 @@ class QuerySet:
                 update_kwargs[field.attname] = case_statement
             updates.append(([obj.pk for obj in batch_objs], update_kwargs))
         with transaction.atomic(using=self.db, savepoint=False):
+            updated_rows = 0
             for pks, update_kwargs in updates:
-                self.filter(pk__in=pks).update(**update_kwargs)
+                updated_rows += self.filter(pk__in=pks).update(**update_kwargs)
+        return updated_rows
     bulk_update.alters_data = True
 
     def get_or_create(self, defaults=None, **kwargs):
diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py
index be794df718..444cca1b95 100644
--- a/tests/queries/test_bulk_update.py
+++ b/tests/queries/test_bulk_update.py
@@ -125,7 +125,8 @@ class BulkUpdateTests(TestCase):
 
     def test_empty_objects(self):
         with self.assertNumQueries(0):
-            Note.objects.bulk_update([], ['note'])
+            result = Note.objects.bulk_update([], ['note'])
+        self.assertEqual(result, 0)
 
     def test_large_batch(self):
         Note.objects.bulk_create([
@@ -238,5 +239,49 @@ class BulkUpdateTests(TestCase):
         objs = JSONFieldNullable.objects.all()
         for obj in objs:
             obj.json_field = {'c': obj.json_field['a'] + 1}
-        JSONFieldNullable.objects.bulk_update(objs, ['json_field'])
+        result = JSONFieldNullable.objects.bulk_update(objs, ['json_field'])
+        self.assertEqual(result, 10)
         self.assertCountEqual(JSONFieldNullable.objects.filter(json_field__has_key='c'), objs)
+
+    def test_bulk_update_return_value(self):
+        """Test that bulk_update() returns the number of rows updated."""
+        # Test with single object
+        note = Note.objects.create(note='test', misc='misc')
+        note.note = 'updated'
+        result = Note.objects.bulk_update([note], ['note'])
+        self.assertEqual(result, 1)
+        
+        # Test with multiple objects
+        notes = []
+        for i in range(5):
+            note = Note.objects.create(note=f'test{i}', misc=f'misc{i}')
+            notes.append(note)
+        
+        for note in notes:
+            note.note = f'updated-{note.id}'
+        
+        result = Note.objects.bulk_update(notes, ['note'])
+        self.assertEqual(result, 5)
+        
+        # Test with batch_size
+        for note in notes:
+            note.misc = f'batch-updated-{note.id}'
+        
+        result = Note.objects.bulk_update(notes, ['misc'], batch_size=2)
+        self.assertEqual(result, 5)
+        
+        # Test with partial updates (some objects don't exist)
+        new_notes = []
+        for i in range(3):
+            note = Note.objects.create(note=f'partial{i}', misc=f'partial-misc{i}')
+            new_notes.append(note)
+        
+        # Delete one from database but keep in our list
+        deleted_id = new_notes[1].id
+        Note.objects.filter(id=deleted_id).delete()
+        
+        for note in new_notes:
+            note.note = f'partial-updated-{note.id}'
+        
+        result = Note.objects.bulk_update(new_notes, ['note'])
+        self.assertEqual(result, 2)  # Only 2 should be updated
