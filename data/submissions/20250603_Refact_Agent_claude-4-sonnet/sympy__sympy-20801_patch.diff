diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py
index 79f6a7d165..a2557d5251 100644
--- a/sympy/core/numbers.py
+++ b/sympy/core/numbers.py
@@ -1386,10 +1386,10 @@ def __eq__(self, other):
             other = _sympify(other)
         except SympifyError:
             return NotImplemented
-        if not self:
-            return not other
         if isinstance(other, Boolean):
             return False
+        if not self:
+            return not other
         if other.is_NumberSymbol:
             if other.is_irrational:
                 return False
diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py
index 8b3e99126e..b85ae88f7f 100644
--- a/sympy/core/tests/test_numbers.py
+++ b/sympy/core/tests/test_numbers.py
@@ -2026,3 +2026,46 @@ def test_abc():
 
 def test_floordiv():
     assert S(2)//S.Half == 4
+
+
+def test_float_boolean_equality_symmetry():
+    """
+    Test that Float vs Boolean equality is symmetric and always False.
+    
+    This test addresses the issue where S(0.0) == S.false returned True
+    but S.false == S(0.0) returned False, violating equality symmetry.
+    See GitHub issue #20033.
+    """
+    
+    # Test zero float vs false
+    assert (S(0.0) == S.false) is False
+    assert (S.false == S(0.0)) is False
+    
+    # Test zero float vs true  
+    assert (S(0.0) == S.true) is False
+    assert (S.true == S(0.0)) is False
+    
+    # Test non-zero float vs false
+    assert (S(1.0) == S.false) is False
+    assert (S.false == S(1.0)) is False
+    
+    # Test non-zero float vs true
+    assert (S(1.0) == S.true) is False
+    assert (S.true == S(1.0)) is False
+    
+    # Test negative float vs booleans
+    assert (S(-1.0) == S.false) is False
+    assert (S.false == S(-1.0)) is False
+    assert (S(-1.0) == S.true) is False
+    assert (S.true == S(-1.0)) is False
+    
+    # Test fractional float vs booleans
+    assert (S(0.5) == S.false) is False
+    assert (S.false == S(0.5)) is False
+    assert (S(0.5) == S.true) is False
+    assert (S.true == S(0.5)) is False
+    
+    # Ensure numeric equality is preserved
+    assert (S(0.0) == S(0)) is True
+    assert (S(0) == S(0.0)) is True
+    assert (S(0.0) == S(0.0)) is True
