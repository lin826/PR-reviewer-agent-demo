diff --git a/sklearn/metrics/cluster/supervised.py b/sklearn/metrics/cluster/supervised.py
index a987778ae..420c359a7 100644
--- a/sklearn/metrics/cluster/supervised.py
+++ b/sklearn/metrics/cluster/supervised.py
@@ -856,7 +856,7 @@ def fowlkes_mallows_score(labels_true, labels_pred, sparse=False):
     tk = np.dot(c.data, c.data) - n_samples
     pk = np.sum(np.asarray(c.sum(axis=0)).ravel() ** 2) - n_samples
     qk = np.sum(np.asarray(c.sum(axis=1)).ravel() ** 2) - n_samples
-    return tk / np.sqrt(pk * qk) if tk != 0. else 0.
+    return tk / np.sqrt(pk) / np.sqrt(qk) if tk != 0. else 0.
 
 
 def entropy(labels):
diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py
index 8da03d1e1..a7e3c369b 100644
--- a/sklearn/metrics/cluster/tests/test_supervised.py
+++ b/sklearn/metrics/cluster/tests/test_supervised.py
@@ -274,3 +274,37 @@ def test_fowlkes_mallows_score_properties():
     # symmetric and permutation(both together)
     score_both = fowlkes_mallows_score(labels_b, (labels_a + 2) % 3)
     assert_almost_equal(score_both, expected)
+
+
+def test_fowlkes_mallows_score_overflow():
+    # Test for regression where large cluster sizes cause integer overflow
+    # in pk * qk calculation, leading to RuntimeWarning and incorrect results
+    n_samples = 100000
+    
+    # Create labels where most samples are in the same cluster
+    # This maximizes pk and qk values, potentially causing overflow
+    labels_true = np.zeros(n_samples, dtype=int)
+    labels_pred = np.zeros(n_samples, dtype=int)
+    
+    # Put most samples in cluster 0, a few in cluster 1
+    labels_true[n_samples-100:] = 1
+    labels_pred[n_samples-50:] = 1
+    
+    # This should not produce any warnings and should return a valid score
+    import warnings
+    with warnings.catch_warnings(record=True) as w:
+        warnings.simplefilter("always")
+        score = fowlkes_mallows_score(labels_true, labels_pred)
+        
+        # Check that no overflow warnings were produced
+        overflow_warnings = [warning for warning in w 
+                           if "overflow" in str(warning.message)]
+        assert_equal(len(overflow_warnings), 0, 
+                    "fowlkes_mallows_score should not produce overflow warnings")
+        
+        # Check that the score is in valid range [0, 1]
+        assert score >= 0.0, "fowlkes_mallows_score should be >= 0"
+        assert score <= 1.0, "fowlkes_mallows_score should be <= 1"
+        
+        # Check that the score is reasonable (should be close to 1 for this case)
+        assert score > 0.99, "fowlkes_mallows_score should be close to 1 for this test case"
