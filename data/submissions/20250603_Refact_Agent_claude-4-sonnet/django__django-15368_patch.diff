diff --git a/django/db/models/query.py b/django/db/models/query.py
index f8d848e926..3c234d8241 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -670,7 +670,7 @@ class QuerySet:
                 when_statements = []
                 for obj in batch_objs:
                     attr = getattr(obj, field.attname)
-                    if not isinstance(attr, Expression):
+                    if not isinstance(attr, (Expression, F)):
                         attr = Value(attr, output_field=field)
                     when_statements.append(When(pk=obj.pk, then=attr))
                 case_statement = Case(*when_statements, output_field=field)
diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py
index 1d669e0bbd..33635cd6a3 100644
--- a/tests/queries/test_bulk_update.py
+++ b/tests/queries/test_bulk_update.py
@@ -211,6 +211,27 @@ class BulkUpdateTests(TestCase):
         Number.objects.bulk_update(numbers, ['num'])
         self.assertCountEqual(Number.objects.filter(num=1), numbers)
 
+    def test_plain_f_expressions(self):
+        """Test bulk_update with plain F() expressions (not combined)."""
+        # Create notes with different values in note and misc fields
+        notes = [
+            Note.objects.create(note=f'note_{i}', misc=f'misc_{i}')
+            for i in range(3)
+        ]
+        
+        # Assign plain F() expression to copy note field to misc field
+        for note in notes:
+            note.misc = F('note')
+        
+        # Perform bulk update
+        Note.objects.bulk_update(notes, ['misc'])
+        
+        # Verify that misc field now contains the value from note field
+        for i, note in enumerate(notes):
+            note.refresh_from_db()
+            self.assertEqual(note.misc, f'note_{i}')
+            self.assertEqual(note.note, f'note_{i}')  # note field unchanged
+
     def test_booleanfield(self):
         individuals = [Individual.objects.create(alive=False) for _ in range(10)]
         for individual in individuals:
