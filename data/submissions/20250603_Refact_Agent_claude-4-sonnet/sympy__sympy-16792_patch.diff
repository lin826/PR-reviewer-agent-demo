diff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py
index f0befb2bd7..5918f67108 100644
--- a/sympy/utilities/codegen.py
+++ b/sympy/utilities/codegen.py
@@ -739,7 +739,14 @@ def routine(self, name, expr, argument_sequence=None, global_vars=None):
                 try:
                     new_args.append(name_arg_dict[symbol])
                 except KeyError:
-                    new_args.append(InputArgument(symbol))
+                    # Check if this symbol is a MatrixSymbol and needs dimensions
+                    if isinstance(symbol, MatrixSymbol):
+                        dims = []
+                        for dim in symbol.shape:
+                            dims.append((S.Zero, dim - 1))
+                        new_args.append(InputArgument(symbol, dimensions=dims))
+                    else:
+                        new_args.append(InputArgument(symbol))
             arg_list = new_args
 
         return Routine(name, arg_list, return_val, local_vars, global_vars)
diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py
index 47fe933dc1..f11d5aaa7a 100644
--- a/sympy/utilities/tests/test_autowrap.py
+++ b/sympy/utilities/tests/test_autowrap.py
@@ -467,3 +467,26 @@ def test_ufuncify_source_multioutput():
 }
 #endif""" % {'num': CodeWrapper._module_counter}
     assert source == expected
+
+
+def test_cython_wrapper_matrix_symbol_not_in_expression():
+    """Test that MatrixSymbol arguments not appearing in expression are handled correctly."""
+    from sympy import MatrixSymbol
+    
+    # Test case: MatrixSymbol argument that doesn't appear in the expression
+    x = MatrixSymbol('x', 2, 1)
+    routine = make_routine("test", 1.0, argument_sequence=(x,))
+    code_gen = CythonCodeWrapper(C99CodeGen())
+    source = get_string(code_gen.dump_pyx, [routine])
+    
+    expected = (
+        "import numpy as np\n"
+        "cimport numpy as np\n"
+        "\n"
+        "cdef extern from 'file.h':\n"
+        "    double test(double *x)\n"
+        "\n"
+        "def test_c(np.ndarray[np.double_t, ndim=2] x):\n"
+        "\n"
+        "    return test(<double*> x.data)")
+    assert source == expected
