diff --git a/astropy/io/ascii/html.py b/astropy/io/ascii/html.py
index 266cf229cc..1efbdbb69f 100644
--- a/astropy/io/ascii/html.py
+++ b/astropy/io/ascii/html.py
@@ -423,12 +423,22 @@ class HTML(core.BaseReader):
                         # requires that the weakref info._parent be maintained.
                         new_cols = []
 
+                        # Apply formatting using the same mechanism as other ASCII writers
+                        # Set cols on data object temporarily for formatting
+                        self.data.cols = cols
+                        self.data._set_fill_values(cols)
+                        self.data._set_col_formats()
+                        
                         for col, col_escaped in zip(cols, cols_escaped):
                             if len(col.shape) > 1 and self.html['multicol']:
                                 span = col.shape[1]
                                 for i in range(span):
                                     # Split up multicolumns into separate columns
                                     new_col = Column([el[i] for el in col])
+                                    
+                                    # Apply formatting to the new column if the original column has formatting
+                                    if col.info.name in self.data.formats:
+                                        new_col.info.format = self.data.formats[col.info.name]
 
                                     new_col_iter_str_vals = self.fill_values(
                                         col, new_col.info.iter_str_vals())
diff --git a/astropy/io/ascii/tests/test_html.py b/astropy/io/ascii/tests/test_html.py
index 0515efa06d..82d1020b91 100644
--- a/astropy/io/ascii/tests/test_html.py
+++ b/astropy/io/ascii/tests/test_html.py
@@ -728,3 +728,36 @@ def test_read_html_unicode():
                 '</table>']
     dat = Table.read(table_in, format='ascii.html')
     assert np.all(dat['col1'] == ['Δ', 'Δ'])
+
+
+def test_write_html_formats():
+    """
+    Test that HTML writer respects the formats argument.
+    """
+    # Create test table with scientific notation values
+    t = Table([(1.23875234858e-24, 3.2348748432e-15), (2, 4)], names=('a', 'b'))
+    
+    # Test with lambda function format
+    out = StringIO()
+    t.write(out, format="html", formats={"a": lambda x: f"{x:.2e}"})
+    html_output = out.getvalue()
+    
+    # Check that formatting was applied
+    assert "1.24e-24" in html_output
+    assert "3.23e-15" in html_output
+    # Make sure the unformatted values are not present
+    assert "1.23875234858e-24" not in html_output
+    assert "3.2348748432e-15" not in html_output
+    
+    # Test with string format specifiers
+    t2 = Table([(1.234567, 2.345678), (10, 20)], names=('float_col', 'int_col'))
+    out2 = StringIO()
+    t2.write(out2, format="html", formats={"float_col": "%.2f"})
+    html_output2 = out2.getvalue()
+    
+    # Check that formatting was applied
+    assert "1.23" in html_output2
+    assert "2.35" in html_output2
+    # Make sure the unformatted values are not present
+    assert "1.234567" not in html_output2
+    assert "2.345678" not in html_output2
