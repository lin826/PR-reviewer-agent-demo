diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py
index 66aafde2d6..0ccffea27a 100644
--- a/sympy/concrete/products.py
+++ b/sympy/concrete/products.py
@@ -276,6 +276,16 @@ def _eval_product(self, term, limits):
 
         elif term.is_Add:
             p, q = term.as_numer_denom()
+            
+            # Check if any additive term contains exponential functions of the iteration variable
+            # If so, the current symbolic approach may fail, so return None to leave unevaluated
+            for addend in p.as_coeff_Add():
+                if addend.has(k):
+                    # Use find to search for power functions like 2**k where base is numeric and exponent contains k
+                    problematic_powers = addend.find(lambda x: x.is_Pow and x.base.is_number and x.exp.has(k))
+                    if problematic_powers:
+                        return None
+            
             q = self._eval_product(q, (k, a, n))
             if q.is_Number:
 
diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py
index 311d5153e2..1399e223b2 100644
--- a/sympy/concrete/tests/test_products.py
+++ b/sympy/concrete/tests/test_products.py
@@ -358,3 +358,34 @@ def test_issue_9983():
 def test_rewrite_Sum():
     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \
         exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))
+
+
+def test_product_with_exponential_terms():
+    """Test products involving exponential terms with the iteration variable.
+    
+    This addresses the issue where Product(n + 1/2**k, [k, 0, n-1]) was
+    giving incorrect symbolic results due to improper handling of additive
+    terms containing exponential functions of the iteration variable.
+    """
+    from sympy.abc import n, k
+    
+    # Test the specific case from the GitHub issue
+    p = Product(n + 1/2**k, [k, 0, n-1])
+    
+    # The symbolic form should remain unevaluated to avoid incorrect results
+    p_eval = p.doit()
+    assert isinstance(p_eval, Product), "Product with exponential terms should remain unevaluated"
+    
+    # But concrete substitutions should work correctly
+    assert p.subs(n, 1).doit() == 2
+    assert p.subs(n, 2).doit() == Rational(15, 2)
+    assert p.subs(n, 3).doit() == Rational(91, 2)
+    
+    # Test another similar case
+    p2 = Product(n + 1/3**k, [k, 0, n-1])
+    p2_eval = p2.doit()
+    assert isinstance(p2_eval, Product), "Product with exponential terms should remain unevaluated"
+    
+    # Verify concrete values
+    # For n=2: (2 + 1/3^0) * (2 + 1/3^1) = (2 + 1) * (2 + 1/3) = 3 * 7/3 = 7
+    assert p2.subs(n, 2).doit() == 7
