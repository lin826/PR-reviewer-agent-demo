diff --git a/sympy/functions/elementary/miscellaneous.py b/sympy/functions/elementary/miscellaneous.py
index 5f9fe73c5c..7f71a3d1b3 100644
--- a/sympy/functions/elementary/miscellaneous.py
+++ b/sympy/functions/elementary/miscellaneous.py
@@ -339,9 +339,6 @@ def real_root(arg, n=None, evaluate=None):
 
 class MinMaxBase(Expr, LatticeOp):
     def __new__(cls, *args, **assumptions):
-        if not args:
-            raise ValueError("The Max/Min functions must have arguments.")
-
         args = (sympify(arg) for arg in args)
 
         # first standard filter, for cls.zero and cls.identity
diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py
index 00dc946005..084efecc44 100644
--- a/sympy/functions/elementary/tests/test_miscellaneous.py
+++ b/sympy/functions/elementary/tests/test_miscellaneous.py
@@ -85,7 +85,7 @@ def test_Min():
     assert Min(p, p_).func is Min
 
     # lists
-    raises(ValueError, lambda: Min())
+    assert Min() == oo  # zero arguments should return positive infinity
     assert Min(x, y) == Min(y, x)
     assert Min(x, y, z) == Min(z, y, x)
     assert Min(x, Min(y, z)) == Min(z, y, x)
@@ -156,7 +156,7 @@ def test_Max():
 
     # lists
 
-    raises(ValueError, lambda: Max())
+    assert Max() == -oo  # zero arguments should return negative infinity
     assert Max(x, y) == Max(y, x)
     assert Max(x, y, z) == Max(z, y, x)
     assert Max(x, Max(y, z)) == Max(z, y, x)
@@ -456,3 +456,50 @@ def test_issue_14000():
 
     assert root(16, 4, 2, evaluate=False).has(Pow) == True
     assert real_root(-8, 3, evaluate=False).has(Pow) == True
+
+
+def test_zero_argument_minmax():
+    """Test zero-argument Min() and Max() functions."""
+    from sympy.abc import x, y
+    
+    # Basic zero-argument behavior
+    assert Min() == oo
+    assert Max() == -oo
+    
+    # Type consistency
+    from sympy.core.numbers import Infinity, NegativeInfinity
+    assert isinstance(Min(), Infinity)
+    assert isinstance(Max(), NegativeInfinity)
+    
+    # Identity properties - Min() should act as identity for Min operations
+    assert Min(Min(), 5) == 5
+    assert Min(Min(), -10) == -10
+    assert Min(Min(), 0) == 0
+    assert Min(Min(), x) == x
+    
+    # Identity properties - Max() should act as identity for Max operations  
+    assert Max(Max(), 5) == 5
+    assert Max(Max(), -10) == -10
+    assert Max(Max(), 0) == 0
+    assert Max(Max(), x) == x
+    
+    # Edge cases with infinities
+    assert Min(Min(), oo) == oo
+    assert Min(Min(), -oo) == -oo
+    assert Max(Max(), oo) == oo
+    assert Max(Max(), -oo) == -oo
+    
+    # Nested zero-argument calls
+    assert Min(Min()) == oo
+    assert Max(Max()) == -oo
+    
+    # Mixed with regular arguments
+    assert Min(Min(), 5, 10) == 5
+    assert Max(Max(), 5, 10) == 10
+    assert Min(1, 2, Min()) == 1
+    assert Max(1, 2, Max()) == 2
+    
+    # Mathematical consistency - empty set identities
+    # inf({}) = +∞, sup({}) = -∞ in extended real numbers
+    assert Min() == S.Infinity  # infimum of empty set
+    assert Max() == S.NegativeInfinity  # supremum of empty set
