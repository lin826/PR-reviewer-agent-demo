diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 118bfced89..9eba55cd0a 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -1299,6 +1299,22 @@ def _format_value(value):
 
 def _format_float(value):
     """Format a floating number to make sure it gets the decimal point."""
+    # First try using str() which gives a more compact representation
+    # for most float values, avoiding floating-point representation artifacts
+    str_repr = str(value)
+    
+    # Apply FITS formatting rules to the str() representation
+    if "." not in str_repr and "E" not in str_repr and "e" not in str_repr:
+        str_repr += ".0"
+    elif "e" in str_repr:
+        # Convert lowercase 'e' to uppercase 'E' for FITS compliance
+        str_repr = str_repr.replace("e", "E")
+    
+    # If the str() representation fits in 20 characters, use it
+    if len(str_repr) <= 20:
+        return str_repr
+    
+    # Fall back to the original .16G approach for cases where str() is too long
     value_str = f"{value:.16G}"
     if "." not in value_str and "E" not in value_str:
         value_str += ".0"
diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py
index a8f4e1160f..fe78cc83b0 100644
--- a/astropy/io/fits/tests/test_header.py
+++ b/astropy/io/fits/tests/test_header.py
@@ -3012,6 +3012,45 @@ class TestRecordValuedKeywordCards(FitsTestCase):
         assert "FOO.Date" not in h
         assert str(h.cards[0]) == _pad("FOO     = 'Date: 2012-09-19T13:58:53.756061'")
 
+    def test_compact_float_representation(self):
+        """
+        Test that float values use compact string representation when possible.
+        
+        Regression test for: https://github.com/astropy/astropy/issues/XXXXX
+        The issue was that _format_float used f"{value:.16G}" which produced
+        unnecessarily long representations like "0.009124999999999999" instead
+        of the more compact "0.009125", causing comment truncation.
+        """
+        from astropy.io.fits.card import _format_float
+        
+        # Test the specific case from the issue
+        value = 0.009125
+        formatted = _format_float(value)
+        
+        # Should use the compact representation
+        assert formatted == "0.009125"
+        assert len(formatted) == 8  # Much shorter than the 20-char .16G version
+        
+        # Test the exact case from the GitHub issue - should not generate warning
+        keyword = 'HIERARCH ESO IFM CL RADIUS'
+        comment = '[m] radius arround actuator to avoid'
+        
+        with warnings.catch_warnings(record=True) as w:
+            warnings.simplefilter("always")
+            card = fits.Card(keyword, value, comment)
+            
+        # Check that no "Card is too long" warning was generated
+        verify_warnings = [warning for warning in w 
+                          if "Card is too long" in str(warning.message)]
+        assert len(verify_warnings) == 0, f"Unexpected warning: {verify_warnings}"
+        
+        # Check that the comment is preserved
+        assert card.comment == comment
+        card_str = str(card)
+        assert comment in card_str
+        assert "0.009125" in card_str
+        assert "0.009124999999999999" not in card_str
+
     def test_overly_aggressive_rvkc_lookup(self):
         """
         Regression test for https://aeon.stsci.edu/ssb/trac/pyfits/ticket/184
