diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index ce18098fd2..697f22b3f0 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1124,7 +1124,8 @@ class Query(BaseExpression):
 
     def check_filterable(self, expression):
         """Raise an error if expression cannot be used in a WHERE clause."""
-        if not getattr(expression, 'filterable', True):
+        from django.db.models.expressions import BaseExpression
+        if isinstance(expression, BaseExpression) and not expression.filterable:
             raise NotSupportedError(
                 expression.__class__.__name__ + ' is disallowed in the filter '
                 'clause.'
diff --git a/tests/queries/models.py b/tests/queries/models.py
index 247d4b7671..ba22e0eeb1 100644
--- a/tests/queries/models.py
+++ b/tests/queries/models.py
@@ -745,3 +745,16 @@ class JSONFieldNullable(models.Model):
 
     class Meta:
         required_db_features = {'supports_json_field'}
+
+
+# Models for testing the filterable field regression
+class FilterableFieldModel(models.Model):
+    """Model with a field named 'filterable' to test the regression."""
+    name = models.CharField(max_length=100)
+    filterable = models.BooleanField(default=False)
+
+
+class ReferencingFilterableModel(models.Model):
+    """Model that references FilterableFieldModel."""
+    name = models.CharField(max_length=100)
+    ref = models.ForeignKey(FilterableFieldModel, models.CASCADE)
diff --git a/tests/queries/tests.py b/tests/queries/tests.py
index cd31453d08..871846b319 100644
--- a/tests/queries/tests.py
+++ b/tests/queries/tests.py
@@ -20,13 +20,13 @@ from .models import (
     CategoryRelationship, Celebrity, Channel, Chapter, Child, ChildObjectA,
     Classroom, CommonMixedCaseForeignKeys, Company, Cover, CustomPk,
     CustomPkTag, DateTimePK, Detail, DumbCategory, Eaten, Employment,
-    ExtraInfo, Fan, Food, Identifier, Individual, Item, Job,
+    ExtraInfo, Fan, FilterableFieldModel, Food, Identifier, Individual, Item, Job,
     JobResponsibilities, Join, LeafA, LeafB, LoopX, LoopZ, ManagedModel,
     Member, MixedCaseDbColumnCategoryItem, MixedCaseFieldCategoryItem, ModelA,
     ModelB, ModelC, ModelD, MyObject, NamedCategory, Node, Note, NullableName,
     Number, ObjectA, ObjectB, ObjectC, OneToOneCategory, Order, OrderItem,
     Page, Paragraph, Person, Plaything, PointerA, Program, ProxyCategory,
-    ProxyObjectA, ProxyObjectB, Ranking, Related, RelatedIndividual,
+    ProxyObjectA, ProxyObjectB, Ranking, ReferencingFilterableModel, Related, RelatedIndividual,
     RelatedObject, Report, ReportComment, ReservedName, Responsibility, School,
     SharedConnection, SimpleCategory, SingleObject, SpecialCategory, Staff,
     StaffUser, Student, Tag, Task, Teacher, Ticket21203Child,
@@ -3973,4 +3973,60 @@ class Ticket23622Tests(TestCase):
             set(Ticket23605A.objects.filter(qx).values_list('pk', flat=True)),
             set(Ticket23605A.objects.filter(qy).values_list('pk', flat=True))
         )
-        self.assertSequenceEqual(Ticket23605A.objects.filter(qx), [a2])
+
+
+class FilterableRegressionTests(TestCase):
+    """
+    Test that model instances with 'filterable' fields can be used in queries.
+    
+    Regression test for issue where QuerySet raises NotSupportedError when RHS 
+    has filterable=False attribute.
+    """
+    
+    @classmethod
+    def setUpTestData(cls):
+        cls.filterable_false = FilterableFieldModel.objects.create(
+            name="test_false", filterable=False
+        )
+        cls.filterable_true = FilterableFieldModel.objects.create(
+            name="test_true", filterable=True
+        )
+        cls.ref1 = ReferencingFilterableModel.objects.create(
+            name="ref1", ref=cls.filterable_false
+        )
+        cls.ref2 = ReferencingFilterableModel.objects.create(
+            name="ref2", ref=cls.filterable_true
+        )
+    
+    def test_filter_with_filterable_false_model(self):
+        """Model instances with filterable=False should work in filters."""
+        result = ReferencingFilterableModel.objects.filter(ref=self.filterable_false)
+        self.assertEqual(result.count(), 1)
+        self.assertEqual(result.first().name, "ref1")
+    
+    def test_filter_with_filterable_true_model(self):
+        """Model instances with filterable=True should work in filters."""
+        result = ReferencingFilterableModel.objects.filter(ref=self.filterable_true)
+        self.assertEqual(result.count(), 1)
+        self.assertEqual(result.first().name, "ref2")
+    
+    def test_filter_by_filterable_field_itself(self):
+        """Filtering by the 'filterable' field itself should work."""
+        result = FilterableFieldModel.objects.filter(filterable=False)
+        self.assertEqual(result.count(), 1)
+        self.assertEqual(result.first().name, "test_false")
+        
+        result = FilterableFieldModel.objects.filter(filterable=True)
+        self.assertEqual(result.count(), 1)
+        self.assertEqual(result.first().name, "test_true")
+    
+    def test_window_expressions_still_fail_in_where(self):
+        """Window expressions should still be rejected in WHERE clauses."""
+        from django.db.models import Window, F
+        from django.db.models.functions import RowNumber
+        from django.db.utils import NotSupportedError
+        
+        window_expr = Window(expression=RowNumber(), order_by=[F('name')])
+        with self.assertRaises(NotSupportedError) as cm:
+            list(FilterableFieldModel.objects.filter(id=window_expr))
+        self.assertIn("disallowed in the filter clause", str(cm.exception))
