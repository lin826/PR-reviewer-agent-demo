diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py
index 7eaf9a46f..d1d03656d 100644
--- a/sklearn/pipeline.py
+++ b/sklearn/pipeline.py
@@ -199,6 +199,12 @@ class Pipeline(_BaseComposition):
             if trans is not None and trans != 'passthrough':
                 yield idx, name, trans
 
+    def __len__(self):
+        """
+        Returns the length of the Pipeline
+        """
+        return len(self.steps)
+
     def __getitem__(self, ind):
         """Returns a sub-pipeline or a single esimtator in the pipeline
 
diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py
index 8d6fe8f70..c2386511f 100644
--- a/sklearn/tests/test_pipeline.py
+++ b/sklearn/tests/test_pipeline.py
@@ -552,6 +552,43 @@ def test_pipeline_index():
     assert_raises(KeyError, lambda: pipe['foobar'])
 
 
+def test_pipeline_len():
+    # Test that Pipeline implements __len__
+    transf = Transf()
+    clf = FitParamT()
+    
+    # Test 1-step pipeline
+    pipe1 = Pipeline([('clf', clf)])
+    assert_equal(len(pipe1), 1)
+    
+    # Test 2-step pipeline
+    pipe2 = Pipeline([('transf', transf), ('clf', clf)])
+    assert_equal(len(pipe2), 2)
+    
+    # Test 3-step pipeline
+    pipe3 = Pipeline([('transf1', transf), ('transf2', Transf()), ('clf', clf)])
+    assert_equal(len(pipe3), 3)
+    
+    # Test that len() is consistent with steps attribute
+    assert_equal(len(pipe2), len(pipe2.steps))
+    
+    # Test that len() works with slicing using len()
+    full_pipe = pipe3[:len(pipe3)]
+    assert_equal(len(full_pipe), len(pipe3))
+    assert_equal(len(full_pipe), 3)
+    
+    # Test partial slicing with len()
+    partial_pipe = pipe3[:len(pipe3)-1]
+    assert_equal(len(partial_pipe), 2)
+    
+    # Test with passthrough and None steps
+    pipe_with_passthrough = Pipeline([('transf', transf), ('passthrough', 'passthrough'), ('clf', clf)])
+    assert_equal(len(pipe_with_passthrough), 3)
+    
+    pipe_with_none = Pipeline([('transf', transf), ('none', None), ('clf', clf)])
+    assert_equal(len(pipe_with_none), 3)
+
+
 def test_set_pipeline_steps():
     transf1 = Transf()
     transf2 = Transf()
