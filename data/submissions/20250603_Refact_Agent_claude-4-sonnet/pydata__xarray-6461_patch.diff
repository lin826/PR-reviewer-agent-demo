diff --git a/xarray/core/computation.py b/xarray/core/computation.py
index 7676d8e5..c669312e 100644
--- a/xarray/core/computation.py
+++ b/xarray/core/computation.py
@@ -1829,7 +1829,8 @@ def where(cond, x, y, keep_attrs=None):
     if keep_attrs is True:
         # keep the attributes of x, the second parameter, by default to
         # be consistent with the `where` method of `DataArray` and `Dataset`
-        keep_attrs = lambda attrs, context: attrs[1]
+        x_attrs = getattr(x, "attrs", {})
+        keep_attrs = lambda attrs, context: x_attrs
 
     # alignment for three arguments is complicated, so don't support it yet
     return apply_ufunc(
diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py
index 6a86738a..282adfdc 100644
--- a/xarray/tests/test_computation.py
+++ b/xarray/tests/test_computation.py
@@ -1929,6 +1929,28 @@ def test_where_attrs() -> None:
     assert_identical(expected, actual)
 
 
+def test_where_attrs_scalar() -> None:
+    """Test that xr.where works with scalar arguments and keep_attrs=True."""
+    cond = xr.DataArray([True, False, True], dims="x", attrs={"attr": "cond"})
+    
+    # Test with both arguments as scalars
+    actual = xr.where(cond, 1, 0, keep_attrs=True)
+    expected = xr.DataArray([1, 0, 1], dims="x")
+    assert_identical(expected, actual)
+    
+    # Test with second argument as DataArray, third as scalar
+    x = xr.DataArray([10, 10, 10], dims="x", attrs={"attr": "x"})
+    actual = xr.where(cond, x, 0, keep_attrs=True)
+    expected = xr.DataArray([10, 0, 10], dims="x", attrs={"attr": "x"})
+    assert_identical(expected, actual)
+    
+    # Test with second argument as scalar, third as DataArray
+    y = xr.DataArray([5, 5, 5], dims="x", attrs={"attr": "y"})
+    actual = xr.where(cond, 1, y, keep_attrs=True)
+    expected = xr.DataArray([1, 5, 1], dims="x")
+    assert_identical(expected, actual)
+
+
 @pytest.mark.parametrize("use_dask", [True, False])
 @pytest.mark.parametrize("use_datetime", [True, False])
 def test_polyval(use_dask, use_datetime) -> None:
