--- a/pylint/lint/pylinter.py
+++ b/pylint/lint/pylinter.py
@@ -564,13 +564,26 @@
             if not msg.may_be_emitted():
                 self._msgs_state[msg.msgid] = False
 
-    @staticmethod
-    def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:
+    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:
         """Discover python modules and packages in sub-directory.
 
         Returns iterator of paths to discovered modules and packages.
         """
+        from pylint.lint.expand_modules import _is_in_ignore_list_re
+        
         for something in files_or_modules:
+            # Check if the top-level item should be ignored
+            # But don't ignore "." as it's the current directory/search root
+            basename = os.path.basename(something)
+            # Normalize path for ignore-paths matching (remove leading ./)
+            normalized_something = something[2:] if something.startswith("./") else something
+            if something != "." and (
+                basename in self.config.ignore
+                or _is_in_ignore_list_re(basename, self.config.ignore_patterns)
+                or _is_in_ignore_list_re(normalized_something, self.config.ignore_paths)
+            ):
+                continue
+                
             if os.path.isdir(something) and not os.path.isfile(
                 os.path.join(something, "__init__.py")
             ):
@@ -579,15 +592,37 @@
                     if any(root.startswith(s) for s in skip_subtrees):
                         # Skip subtree of already discovered package.
                         continue
+                    
+                    # Check if the directory should be ignored
+                    # But don't ignore the root search directory itself
+                    root_basename = os.path.basename(root)
+                    # Normalize path for ignore-paths matching (remove leading ./)
+                    normalized_root = root[2:] if root.startswith("./") else root
+                    
+                    if root != something and (
+                        root_basename in self.config.ignore
+                        or _is_in_ignore_list_re(root_basename, self.config.ignore_patterns)
+                        or _is_in_ignore_list_re(normalized_root, self.config.ignore_paths)
+                    ):
+                        continue
+                    
                     if "__init__.py" in files:
                         skip_subtrees.append(root)
                         yield root
                     else:
-                        yield from (
-                            os.path.join(root, file)
-                            for file in files
-                            if file.endswith(".py")
-                        )
+                        for file in files:
+                            if file.endswith(".py"):
+                                filepath = os.path.join(root, file)
+                                # Normalize path for ignore-paths matching (remove leading ./)
+                                normalized_filepath = filepath[2:] if filepath.startswith("./") else filepath
+                                # Check if the file should be ignored
+                                if (
+                                    file in self.config.ignore
+                                    or _is_in_ignore_list_re(file, self.config.ignore_patterns)
+                                    or _is_in_ignore_list_re(normalized_filepath, self.config.ignore_paths)
+                                ):
+                                    continue
+                                yield filepath
             else:
                 yield something
 
