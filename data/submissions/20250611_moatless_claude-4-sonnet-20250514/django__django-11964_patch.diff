--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -2,6 +2,7 @@
 import copy
 import datetime
 import decimal
+import enum
 import operator
 import uuid
 import warnings
@@ -1008,9 +1009,24 @@
         return "CharField"
 
     def to_python(self, value):
-        if isinstance(value, str) or value is None:
+        if value is None:
+            return value
+        # Extract the actual value from choice enums
+        if isinstance(value, enum.Enum) and hasattr(value, 'value'):
+            return value.value
+        if isinstance(value, str):
             return value
         return str(value)
+
+    def pre_save(self, model_instance, add):
+        """Return field's value just before saving."""
+        value = getattr(model_instance, self.attname)
+        # Convert enum choice values to their underlying values
+        if isinstance(value, enum.Enum) and hasattr(value, 'value'):
+            converted_value = value.value
+            setattr(model_instance, self.attname, converted_value)
+            return converted_value
+        return value
 
     def get_prep_value(self, value):
         value = super().get_prep_value(value)
@@ -1769,6 +1785,9 @@
     def to_python(self, value):
         if value is None:
             return value
+        # Extract the actual value from choice enums
+        if isinstance(value, enum.Enum) and hasattr(value, 'value'):
+            value = value.value
         try:
             return int(value)
         except (TypeError, ValueError):
@@ -1777,6 +1796,16 @@
                 code='invalid',
                 params={'value': value},
             )
+
+    def pre_save(self, model_instance, add):
+        """Return field's value just before saving."""
+        value = getattr(model_instance, self.attname)
+        # Convert enum choice values to their underlying values
+        if isinstance(value, enum.Enum) and hasattr(value, 'value'):
+            converted_value = value.value
+            setattr(model_instance, self.attname, converted_value)
+            return converted_value
+        return value
 
     def formfield(self, **kwargs):
         return super().formfield(**{
