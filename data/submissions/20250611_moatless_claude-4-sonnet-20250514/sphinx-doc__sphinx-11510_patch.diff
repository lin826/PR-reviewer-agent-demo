--- a/sphinx/directives/other.py
+++ b/sphinx/directives/other.py
@@ -376,7 +376,57 @@
         rel_filename, filename = self.env.relfn2path(self.arguments[0])
         self.arguments[0] = filename
         self.env.note_included(filename)
-        return super().run()
+        
+        # Check if this is a Sphinx document that would have source-read processing
+        include_docname = self.env.path2doc(filename)
+        if include_docname is not None:
+            # This is a Sphinx document, so we need to read it through Sphinx's
+            # source-read mechanism to get the processed content
+            return self._run_with_sphinx_processing(filename, include_docname)
+        else:
+            # Not a Sphinx document, use normal include processing
+            return super().run()
+    
+    def _run_with_sphinx_processing(self, filename: str, docname: str) -> list[Node]:
+        """Read included file through Sphinx's source-read mechanism."""
+        import tempfile
+        import os
+        
+        # Read the file content through Sphinx's mechanism to trigger source-read events
+        content = self._read_with_source_events(filename, docname)
+        
+        # Create a temporary file with the processed content
+        with tempfile.NamedTemporaryFile(mode='w', suffix='.rst', delete=False) as tmp_file:
+            tmp_file.write(content)
+            tmp_filename = tmp_file.name
+        
+        try:
+            # Temporarily replace the filename in arguments and call the parent
+            original_filename = self.arguments[0]
+            self.arguments[0] = tmp_filename
+            result = super().run()
+            return result
+        finally:
+            # Clean up
+            self.arguments[0] = original_filename
+            try:
+                os.unlink(tmp_filename)
+            except OSError:
+                pass
+    
+    def _read_with_source_events(self, filename: str, docname: str) -> str:
+        """Read file content and emit source-read events."""
+        # Read the raw content
+        try:
+            with open(filename, 'r', encoding='utf-8') as f:
+                content = f.read()
+        except (OSError, UnicodeDecodeError) as err:
+            raise self.severe(f'Problems with "{filename}" directive path:\n{err}.')
+        
+        # Emit source-read event to allow processing
+        arg = [content]
+        self.env.events.emit('source-read', docname, arg)
+        return arg[0]
 
 
 def setup(app: Sphinx) -> dict[str, Any]:
