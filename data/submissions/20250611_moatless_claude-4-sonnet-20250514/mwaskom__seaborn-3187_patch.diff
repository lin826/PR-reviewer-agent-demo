--- a/seaborn/_core/scales.py
+++ b/seaborn/_core/scales.py
@@ -379,6 +379,25 @@
             locs = axis.major.locator()
             locs = locs[(vmin <= locs) & (locs <= vmax)]
             labels = axis.major.formatter.format_ticks(locs)
+            
+            # Handle ScalarFormatter offset for large numbers
+            # Check if there's a multiplicative relationship between locs and labels
+            if len(locs) > 0 and len(labels) > 0:
+                try:
+                    # Calculate the ratio between the first location and its label
+                    first_label_val = float(labels[0])
+                    if first_label_val != 0:
+                        ratio = locs[0] / first_label_val
+                        # If the ratio is a power of 10 and >= 1000, it's likely an offset
+                        if ratio >= 1000 and np.isclose(ratio, 10 ** np.round(np.log10(ratio))):
+                            # Format the offset in scientific notation
+                            exponent = int(np.round(np.log10(ratio)))
+                            offset_notation = f"1e{exponent}"
+                            labels = [f"{label} Ã— {offset_notation}" for label in labels]
+                except (ValueError, ZeroDivisionError):
+                    # If we can't parse the label as a number, just use original labels
+                    pass
+            
             new._legend = list(locs), list(labels)
 
         return new
