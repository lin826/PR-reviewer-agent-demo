--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -804,9 +804,23 @@
         inserted = False
         for parent, field in meta.parents.items():
             # Make sure the link fields are synced between parent and self.
+            # If the parent's pk is None but the child's fk is not None, we
+            # restore the parent pk from the child fk. However, if this object
+            # is not in the 'adding' state (i.e., it's a pre-existing object)
+            # and someone explicitly set the parent pk to None, we should
+            # respect that choice and also reset the child fk to None to
+            # create a new object hierarchy.
             if (field and getattr(self, parent._meta.pk.attname) is None and
                     getattr(self, field.attname) is not None):
-                setattr(self, parent._meta.pk.attname, getattr(self, field.attname))
+                # If this is an existing object (not being added) and the parent pk
+                # was explicitly set to None, reset the child fk as well to create
+                # a new object. Otherwise, restore the parent pk from the child fk.
+                if not self._state.adding:
+                    # Reset the child fk to None to create a new object hierarchy
+                    setattr(self, field.attname, None)
+                else:
+                    # For new objects, restore parent pk from child fk
+                    setattr(self, parent._meta.pk.attname, getattr(self, field.attname))
             parent_inserted = self._save_parents(cls=parent, using=using, update_fields=update_fields)
             updated = self._save_table(
                 cls=parent, using=using, update_fields=update_fields,
