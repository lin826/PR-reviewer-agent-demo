--- a/sympy/utilities/codegen.py
+++ b/sympy/utilities/codegen.py
@@ -719,9 +719,12 @@
         if argument_sequence is not None:
             # if the user has supplied IndexedBase instances, we'll accept that
             new_sequence = []
+            # Keep track of original IndexedBase objects for dimension info
+            original_indexed_bases = {}
             for arg in argument_sequence:
                 if isinstance(arg, IndexedBase):
                     new_sequence.append(arg.label)
+                    original_indexed_bases[arg.label] = arg
                 else:
                     new_sequence.append(arg)
             argument_sequence = new_sequence
@@ -739,7 +742,21 @@
                 try:
                     new_args.append(name_arg_dict[symbol])
                 except KeyError:
-                    new_args.append(InputArgument(symbol))
+                    # Check if symbol is an array type and needs dimensions
+                    if isinstance(symbol, MatrixSymbol):
+                        dims = []
+                        for dim in symbol.shape:
+                            dims.append((S.Zero, dim - 1))
+                        new_args.append(InputArgument(symbol, dimensions=dims))
+                    elif symbol in original_indexed_bases:
+                        # Symbol was originally an IndexedBase
+                        original_indexed_base = original_indexed_bases[symbol]
+                        dims = []
+                        for dim in original_indexed_base.shape:
+                            dims.append((S.Zero, dim - 1))
+                        new_args.append(InputArgument(symbol, dimensions=dims))
+                    else:
+                        new_args.append(InputArgument(symbol))
             arg_list = new_args
 
         return Routine(name, arg_list, return_val, local_vars, global_vars)
