--- a/requests/auth.py
+++ b/requests/auth.py
@@ -65,6 +65,22 @@
     authstr = 'Basic ' + to_native_string(
         b64encode(b':'.join((username, password))).strip()
     )
+
+    # Ensure the header value is compatible with Python 3.8.12+ strict header validation
+    # Python 3.8.12 introduced stricter HTTP header validation to prevent header injection
+    # Validate that the header value meets the requirements for safe HTTP header transmission
+    
+    # Check for characters that might cause issues with Python 3.8.12's strict validation
+    # Control characters (0x00-0x1F, 0x7F) and line breaks are particularly problematic
+    if re.search(r'[\x00-\x1f\x7f-\x9f\r\n]', authstr):
+        # This should not happen with properly base64-encoded values, but check defensively
+        # Re-create the auth string to ensure it's clean
+        clean_b64 = to_native_string(
+            b64encode(b':'.join((username, password))).strip()
+        )
+        # Remove any potential problematic characters that shouldn't be in base64
+        clean_b64 = re.sub(r'[^\w+/=]', '', clean_b64)
+        authstr = 'Basic ' + clean_b64
 
     return authstr
 

--- a/requests/adapters.py
+++ b/requests/adapters.py
@@ -10,6 +10,7 @@
 
 import os.path
 import socket
+import re
 
 from urllib3.poolmanager import PoolManager, proxy_from_url
 from urllib3.response import HTTPResponse
@@ -465,6 +466,13 @@
                                         skip_host=skip_host)
 
                     for header, value in request.headers.items():
+                        # Ensure header values are compatible with Python 3.8.12+ strict validation
+                        # Python 3.8.12 introduced stricter HTTP header validation to prevent injection
+                        if isinstance(value, str):
+                            # Remove any control characters that might cause issues
+                            # Only clean if there are actually problematic characters
+                            if re.search(r'[\x00-\x1f\x7f-\x9f\r\n]', value):
+                                value = re.sub(r'[\x00-\x1f\x7f-\x9f\r\n]', '', value)
                         low_conn.putheader(header, value)
 
                     low_conn.endheaders()
