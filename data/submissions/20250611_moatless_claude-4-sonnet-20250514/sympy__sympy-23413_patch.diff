--- a/sympy/polys/matrices/normalforms.py
+++ b/sympy/polys/matrices/normalforms.py
@@ -235,7 +235,41 @@
         # way to the left. In this case, we are still working on the same pivot
         # col for the next row. Therefore:
         if b == 0:
-            k += 1
+            # For k=0 (leftmost column), if b=0, check if the entire column is zero
+            # from this row downwards. For k>0, check if row was zero to the left.
+            if k == 0:
+                # For the leftmost column, only skip if the entire column is zero
+                column_entirely_zero = all(A[row][k] == 0 for row in range(m))
+                if column_entirely_zero:
+                    k += 1
+                else:
+                    # Column k has non-zero entries, so we need to reduce entries to the right
+                    # using the pivot values that exist in this column
+                    # Find the gcd of all non-zero entries in column k to use as effective pivot
+                    effective_pivot = 0
+                    for row in range(m):
+                        if A[row][k] != 0:
+                            if effective_pivot == 0:
+                                effective_pivot = abs(A[row][k])
+                            else:
+                                from math import gcd
+                                effective_pivot = gcd(effective_pivot, abs(A[row][k]))
+                    
+                    if effective_pivot > 0:
+                        # Use this effective pivot to reduce entries to the right
+                        for j in range(k + 1, n):
+                            # Reduce the topmost non-zero entry in column j
+                            for row in range(m):
+                                if A[row][j] != 0:
+                                    q = A[row][j] // effective_pivot
+                                    if q != 0:
+                                        add_columns(A, j, k, 1, -q, 0, 1)
+                                    break
+            else:
+                # For other columns, use the original condition: row zero to the left
+                row_zero_left = all(A[i][j] == 0 for j in range(k))
+                if row_zero_left:
+                    k += 1
         # If the pivot entry is nonzero, then we want to reduce all entries to its
         # right in the sense of the division algorithm, i.e. make them all remainders
         # w.r.t. the pivot as divisor.
