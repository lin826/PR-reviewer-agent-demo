diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py
index a4f4214b1..99a05d59c 100644
--- a/src/_pytest/logging.py
+++ b/src/_pytest/logging.py
@@ -335,6 +335,7 @@ class LogCaptureHandler(logging_StreamHandler):
         """Create a new log handler."""
         super().__init__(StringIO())
         self.records: List[logging.LogRecord] = []
+        self.when: Optional[str] = None
 
     def emit(self, record: logging.LogRecord) -> None:
         """Keep the log records in a list in addition to the log text."""
@@ -342,6 +343,8 @@ class LogCaptureHandler(logging_StreamHandler):
         super().emit(record)
 
     def reset(self) -> None:
+        # Create a new list instead of clearing the existing one
+        # This ensures that each phase gets its own separate list
         self.records = []
         self.stream = StringIO()
 
@@ -406,6 +409,9 @@ class LogCaptureFixture:
     @property
     def records(self) -> List[logging.LogRecord]:
         """The list of log records."""
+        # If we're in a test phase, update the stashed records
+        if hasattr(self.handler, "when") and hasattr(self, "_item") and hasattr(self._item, "stash"):
+            self._item.stash[caplog_records_key][self.handler.when] = self.handler.records
         return self.handler.records
 
     @property
@@ -440,7 +446,18 @@ class LogCaptureFixture:
 
     def clear(self) -> None:
         """Reset the list of log records and the captured log text."""
+        # Reset the handler
         self.handler.reset()
+        
+        # Update the stashed records for the current phase only
+        if hasattr(self, "_item") and hasattr(self._item, "stash"):
+            # Get a reference to the stashed records
+            records_dict = self._item.stash.get(caplog_records_key, {})
+            
+            # Only update the records for the current phase
+            if hasattr(self.handler, "when") and self.handler.when in records_dict:
+                # Update the stash to point to the handler's new records list
+                records_dict[self.handler.when] = self.handler.records
 
     def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> None:
         """Set the level of a logger for the duration of a test.
@@ -696,6 +713,8 @@ class LoggingPlugin:
         ) as report_handler:
             caplog_handler.reset()
             report_handler.reset()
+            # Store the current phase in the handler for reference
+            caplog_handler.when = when
             item.stash[caplog_records_key][when] = caplog_handler.records
             item.stash[caplog_handler_key] = caplog_handler
 
