diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py
index 6752a8e3c0..0d97a6bc4b 100644
--- a/django/db/backends/sqlite3/schema.py
+++ b/django/db/backends/sqlite3/schema.py
@@ -324,10 +324,20 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
 
     def add_field(self, model, field):
         """Create a field on a model."""
-        # Fields with default values cannot by handled by ALTER TABLE ADD
-        # COLUMN statement because DROP DEFAULT is not supported in
-        # ALTER TABLE.
-        if not field.null or self.effective_default(field) is not None:
+        # SQLite refuses to add a column that is declared UNIQUE or
+        # PRIMARY KEY.  Whenever a new column is:
+        #   • NOT NULL              (classic limitation), **or**
+        #   • has a default value   (cannot later DROP DEFAULT), **or**
+        #   • UNIQUE                (implicit on OneToOneField), **or**
+        #   • PRIMARY KEY           (implicit UNIQUE)
+        # we must rebuild the table instead of executing a plain
+        #   ALTER TABLE … ADD COLUMN …
+        if (
+            not field.null
+            or self.effective_default(field) is not None
+            or field.unique
+            or field.primary_key
+        ):
             self._remake_table(model, create_field=field)
         else:
             super().add_field(model, field)
