diff --git a/django/db/models/query.py b/django/db/models/query.py
index 85cd8311a7..a2993773ae 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1218,17 +1218,28 @@ class QuerySet:
     def ordered(self):
         """
         Return True if the QuerySet is ordered -- i.e. has an order_by()
-        clause or a default ordering on the model (or is empty).
+        clause or a default ordering on the model (or is empty).  Default
+        model ordering is ignored when the query introduces a GROUP BY (for
+        example through annotate/aggregate) because the SQL compiler removes
+        it to keep the generated SQL valid.  Mirror that behaviour here so
+        that this property accurately reflects the final SQL.
         """
         if isinstance(self, EmptyQuerySet):
             return True
         if self.query.extra_order_by or self.query.order_by:
             return True
-        elif self.query.default_ordering and self.query.get_meta().ordering:
-            return True
-        else:
+        # Only implicit default model ordering is left to consider.
+        if not (self.query.default_ordering and self.query.get_meta().ordering):
+            return False
+
+        # The SQL compiler will discard default ordering in these cases.
+        if self.query.group_by is not None:
+            return False
+        if self.query.combinator:          # UNION / INTERSECT / etc.
             return False
 
+        return True
+
     @property
     def db(self):
         """Return the database used if this query is executed now."""
