diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py
index 38e89c47bb..7185c6921c 100644
--- a/django/utils/dateformat.py
+++ b/django/utils/dateformat.py
@@ -314,7 +314,7 @@ class DateFormat(TimeFormat):
 
     def Y(self):
         "Year, 4 digits; e.g. '1999'"
-        return self.data.year
+        return '%04d' % self.data.year
 
     def z(self):
         """Day of the year, i.e. 1 to 366."""
diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py
index c6d3ded80f..5f11d0b6df 100644
--- a/tests/utils_tests/test_dateformat.py
+++ b/tests/utils_tests/test_dateformat.py
@@ -115,6 +115,16 @@ class DateFormatTests(SimpleTestCase):
     def test_futuredates(self):
         the_future = datetime(2100, 10, 25, 0, 00)
         self.assertEqual(dateformat.format(the_future, r'Y'), '2100')
+        
+    def test_four_digit_year_padding(self):
+        """Years below 1000 must be zero-padded to four digits."""
+        for year, expected in [(1, "0001"), (9, "0009"), 
+                              (42, "0042"), (999, "0999")]:
+            with self.subTest(year=year):
+                self.assertEqual(dateformat.format(date(year, 1, 1), 'Y'), expected)
+                
+        # A normal year is unchanged
+        self.assertEqual(dateformat.format(date(2023, 1, 1), 'Y'), "2023")
 
     def test_day_of_year_leap(self):
         self.assertEqual(dateformat.format(datetime(2000, 12, 31), 'z'), '366')
