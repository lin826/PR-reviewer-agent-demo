diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 5240b07cd6..00fce2633f 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -464,10 +464,15 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
             # It is allowed to filter on values that would be found from local
             # model anyways. For example, if you filter on employee__department__id,
             # then the id value would be found already from employee__department_id.
-            if not prev_field or (
-                prev_field.is_relation
-                and field not in prev_field.path_infos[-1].target_fields
-            ):
+            # However, if the field is a relation itself (like a OneToOneField used as
+            # primary key), we need to include it in the lookup path.
+            include_current = (
+                not prev_field                       # first segment
+                or not prev_field.is_relation        # not traversing a relation
+                or field not in prev_field.path_infos[-1].target_fields
+                or field.is_relation                 # PK *is* a relation â†’ keep
+            )
+            if include_current:
                 relation_parts.append(part)
             if not getattr(field, "path_infos", None):
                 # This is not a relational field, so further parts
diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py
index c6b4a565c8..a04c779fe0 100644
--- a/tests/modeladmin/tests.py
+++ b/tests/modeladmin/tests.py
@@ -49,6 +49,28 @@ class ModelAdminTests(TestCase):
 
     def setUp(self):
         self.site = AdminSite()
+        
+    @isolate_apps('modeladmin')
+    def test_lookup_allowed_foreign_primary(self):
+        class Country(models.Model):
+            name = models.CharField(max_length=256)
+        
+        class Place(models.Model):
+            country = models.ForeignKey(Country, models.CASCADE)
+        
+        class Restaurant(models.Model):
+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)
+        
+        class Waiter(models.Model):
+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)
+        
+        class WaiterAdmin(ModelAdmin):
+            list_filter = [
+                'restaurant__place__country',
+            ]
+        
+        ma = WaiterAdmin(Waiter, self.site)
+        self.assertIs(ma.lookup_allowed('restaurant__place__country', 'test_value'), True)
 
     def test_modeladmin_str(self):
         ma = ModelAdmin(Band, self.site)
