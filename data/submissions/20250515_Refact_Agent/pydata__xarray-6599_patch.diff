diff --git a/xarray/core/computation.py b/xarray/core/computation.py
index 823cbe02..96efef66 100644
--- a/xarray/core/computation.py
+++ b/xarray/core/computation.py
@@ -1892,7 +1892,6 @@ def polyval(
     xarray.DataArray.polyfit
     numpy.polynomial.polynomial.polyval
     """
-
     if degree_dim not in coeffs._indexes:
         raise ValueError(
             f"Dimension `{degree_dim}` should be a coordinate variable with labels."
@@ -1918,26 +1917,26 @@ def polyval(
 
 
 def _ensure_numeric(data: T_Xarray) -> T_Xarray:
-    """Converts all datetime64 variables to float64
+    """Converts all datetime64 and timedelta64 variables to float64
 
     Parameters
     ----------
     data : DataArray or Dataset
-        Variables with possible datetime dtypes.
+        Variables with possible datetime or timedelta dtypes.
 
     Returns
     -------
     DataArray or Dataset
-        Variables with datetime64 dtypes converted to float64.
+        Variables with datetime64 or timedelta64 dtypes converted to float64.
     """
     from .dataset import Dataset
 
     def to_floatable(x: DataArray) -> DataArray:
-        if x.dtype.kind in "mM":
+        if x.dtype.kind in "mM":  # datetime64 or timedelta64
             return x.copy(
                 data=datetime_to_numeric(
                     x.data,
-                    offset=np.datetime64("1970-01-01"),
+                    offset=None,  # Let datetime_to_numeric determine the appropriate offset
                     datetime_unit="ns",
                 ),
             )
diff --git a/xarray/core/duck_array_ops.py b/xarray/core/duck_array_ops.py
index 253a68b7..2684136f 100644
--- a/xarray/core/duck_array_ops.py
+++ b/xarray/core/duck_array_ops.py
@@ -421,6 +421,17 @@ def datetime_to_numeric(array, offset=None, datetime_unit=None, dtype=float):
     is no `cftime.timedelta` object.
     """
     # TODO: make this function dask-compatible?
+    
+    # Special handling for timedelta arrays (kind 'm')
+    if hasattr(array, 'dtype') and array.dtype.kind == 'm':
+        # For timedelta arrays, we don't need to subtract an offset
+        # Just convert directly to float in the requested units
+        # Use seconds as the default unit for better numerical stability
+        if datetime_unit is None:
+            datetime_unit = "s"
+        array = array / np.timedelta64(1, datetime_unit)
+        return np.where(isnull(array), np.nan, array.astype(dtype))
+    
     # Set offset to minimum if not given
     if offset is None:
         if array.dtype.kind in "Mm":
