diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index 3daf84c108..5894d6c3b8 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -190,10 +190,26 @@ def _collect_factor_and_dimension(self, expr):
                 dim /= idim**count
             return factor, dim
         elif isinstance(expr, Function):
-            fds = [self._collect_factor_and_dimension(
-                arg) for arg in expr.args]
-            return (expr.func(*(f[0] for f in fds)),
-                    *(d[1] for d in fds))
+            fds = [self._collect_factor_and_dimension(arg) for arg in expr.args]
+            factor = expr.func(*(f[0] for f in fds))
+            
+            # Check if all dimensions are the same
+            dims = [d[1] for d in fds]
+            
+            # Special handling for transcendental functions
+            if expr.func.__name__ in ('exp', 'log', 'sin', 'cos', 'tan', 'asin', 'acos', 'atan', 'atan2'):
+                # Check if all arguments are dimensionless
+                if all(self.get_dimension_system().is_dimensionless(dim) for dim in dims):
+                    return factor, Dimension(1)
+            
+            # Default behavior: use the first dimension (maintains backward compatibility)
+            dimension = dims[0] if dims else Dimension(1)
+            
+            # Canonicalize dimensionless quantities
+            if self.get_dimension_system().is_dimensionless(dimension):
+                dimension = Dimension(1)
+                
+            return factor, dimension
         elif isinstance(expr, Dimension):
             return S.One, expr
         else:
