diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py
index 876b1d114e..a7e9964a8a 100644
--- a/lib/matplotlib/figure.py
+++ b/lib/matplotlib/figure.py
@@ -2729,10 +2729,43 @@ None}, default: None
     get_axes = axes.fget
 
     def _get_renderer(self):
+        """
+        Return a backend renderer, creating it with a first draw if necessary.
+
+        Some parts of the code base (OffsetBox, tight-layout, â€¦) need a
+        renderer object even before the user ever called ``fig.canvas.draw()``.
+        The public backends guarantee that doing a first draw initialises as
+        side-effect a renderer that we can re-use.
+        """
+        # First check if the canvas already has a renderer
+        renderer = getattr(self.canvas, "_renderer", None)
+        if renderer is not None:
+            return renderer
+
+        # Try the original approach
         if hasattr(self.canvas, 'get_renderer'):
-            return self.canvas.get_renderer()
+            renderer = self.canvas.get_renderer()
+            if renderer is not None:
+                return renderer
         else:
-            return _get_renderer(self)
+            # Use the imported _get_renderer function as a fallback
+            renderer = _get_renderer(self)
+            if renderer is not None:
+                return renderer
+                
+        # If we still don't have a renderer, force a draw on the canvas
+        # This is a last resort to ensure we have a renderer
+        if not getattr(self, '_in_get_renderer', False):
+            try:
+                self._in_get_renderer = True
+                self.canvas.draw()
+                self._in_get_renderer = False
+                return self.canvas._renderer
+            except Exception:
+                self._in_get_renderer = False
+                
+        # If all else fails, return None
+        return None
 
     def _get_dpi(self):
         return self._dpi
