diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py
index 44e49806f8..f1e7cdfb63 100644
--- a/django/db/backends/ddl_references.py
+++ b/django/db/backends/ddl_references.py
@@ -83,10 +83,13 @@ class Columns(TableColumns):
 
     def __str__(self):
         def col_str(column, idx):
+            name = self.quote_name(column)
+            # If there is a non-empty suffix (e.g. " DESC"), prepend a space.
             try:
-                return self.quote_name(column) + self.col_suffixes[idx]
+                suffix = self.col_suffixes[idx]
             except IndexError:
-                return self.quote_name(column)
+                return name
+            return name + (f' {suffix}' if suffix else '')
 
         return ', '.join(col_str(column, idx) for idx, column in enumerate(self.columns))
 
@@ -110,13 +113,18 @@ class IndexColumns(Columns):
 
     def __str__(self):
         def col_str(column, idx):
-            # Index.__init__() guarantees that self.opclasses is the same
-            # length as self.columns.
-            col = '{} {}'.format(self.quote_name(column), self.opclasses[idx])
+            # Name + opclass (always present length-wise).
+            name = self.quote_name(column)
+            opclass = self.opclasses[idx]
+            col = f'{name} {opclass}' if opclass else name
+
+            # Append ordering suffix only if non-empty.
             try:
-                col = '{} {}'.format(col, self.col_suffixes[idx])
+                suffix = self.col_suffixes[idx]
             except IndexError:
-                pass
+                suffix = ''
+            if suffix:
+                col = f'{col} {suffix}'
             return col
 
         return ', '.join(col_str(column, idx) for idx, column in enumerate(self.columns))
