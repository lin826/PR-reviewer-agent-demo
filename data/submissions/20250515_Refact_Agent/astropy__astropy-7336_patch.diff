diff --git a/astropy/units/decorators.py b/astropy/units/decorators.py
index 8bece5a850..7bf0f9c6e2 100644
--- a/astropy/units/decorators.py
+++ b/astropy/units/decorators.py
@@ -220,9 +220,18 @@ class QuantityInput:
             # Call the original function with any equivalencies in force.
             with add_enabled_equivalencies(self.equivalencies):
                 return_ = wrapped_function(*func_args, **func_kwargs)
-            if wrapped_signature.return_annotation is not inspect.Signature.empty:
+            # Only attempt to convert the return value if the return
+            # annotation actually specifies a unit *and* the returned
+            # object supports ``.to``.  This prevents failures for
+            # constructors or any routine annotated with ``-> None``.
+            if (wrapped_signature.return_annotation is not inspect.Signature.empty
+                    and wrapped_signature.return_annotation is not None
+                    and hasattr(return_, 'to')):
                 return return_.to(wrapped_signature.return_annotation)
             else:
+                # Either there was no return annotation, it was ``None``,
+                # or the returned object cannot be converted â€“ just pass
+                # it through unchanged.
                 return return_
 
         return wrapper
