diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py
index ab475f7d0..a1ae5a102 100644
--- a/astropy/coordinates/sky_coordinate.py
+++ b/astropy/coordinates/sky_coordinate.py
@@ -871,6 +871,21 @@ class SkyCoord(ShapedLikeNDArray):
         Overrides getattr to return coordinates that this can be transformed
         to, based on the alias attr in the primary transform graph.
         """
+        # First - check if this attribute might be a property in a subclass
+        # However, properties should normally not reach __getattr__ unless
+        # they're raising AttributeError internally (the case we want to fix)
+        for cls in type(self).__mro__:
+            if attr in cls.__dict__ and isinstance(cls.__dict__[attr], property):
+                # Re-trigger the property with a clean try-except block
+                # This lets us preserve the original AttributeError from inside the property
+                try:
+                    # This will trigger the property getter
+                    return cls.__dict__[attr].__get__(self, type(self))
+                except AttributeError:
+                    # Re-raise as-is to preserve error details
+                    raise
+
+        # Normal SkyCoord attribute handling
         if "_sky_coord_frame" in self.__dict__:
             if self._is_name(attr):
                 return self  # Should this be a deepcopy of self?
@@ -894,7 +909,7 @@ class SkyCoord(ShapedLikeNDArray):
             if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
                 return self.transform_to(attr)
 
-        # Fail
+        # Fail - attribute not found
         raise AttributeError(
             f"'{self.__class__.__name__}' object has no attribute '{attr}'"
         )

