diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 90d90119d0..6953108eda 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1332,6 +1332,69 @@ class Window(Expression):
             'window': ''.join(window_sql).strip()
         }, params
 
+    def as_sqlite(self, compiler, connection, **extra_context):
+        # For DecimalFields in window functions, we need to apply CAST to the entire window expression,
+        # not just the inner expression part
+        try:
+            if hasattr(self.source_expression, 'output_field') and \
+               self.source_expression.output_field.get_internal_type() == 'DecimalField':
+                # For DecimalField, we need to handle the casting differently
+                # Get the SQL for the source expression without the CAST
+                inner_expr = self.source_expression
+                if hasattr(inner_expr, 'source_expressions') and inner_expr.source_expressions:
+                    # Get the function template and name
+                    function = getattr(inner_expr, 'function', '')
+                    template = getattr(inner_expr, 'template', '%(function)s(%(expressions)s)')
+                    arg_joiner = getattr(inner_expr, 'arg_joiner', ', ')
+                    
+                    # Compile expressions without the CAST
+                    sql_parts = []
+                    params = []
+                    for arg in inner_expr.source_expressions:
+                        arg_sql, arg_params = compiler.compile(arg)
+                        sql_parts.append(arg_sql)
+                        params.extend(arg_params)
+                    
+                    # Format the expression
+                    expr_sql = template % {
+                        'function': function,
+                        'expressions': arg_joiner.join(sql_parts)
+                    }
+                    
+                    # Get the window SQL
+                    window_sql, window_params = [], []
+                    if self.partition_by is not None:
+                        sql_expr, sql_params = self.partition_by.as_sql(
+                            compiler=compiler, connection=connection,
+                            template='PARTITION BY %(expressions)s',
+                        )
+                        window_sql.extend(sql_expr)
+                        window_params.extend(sql_params)
+                    
+                    if self.order_by is not None:
+                        window_sql.append(' ORDER BY ')
+                        order_sql, order_params = compiler.compile(self.order_by)
+                        window_sql.extend(order_sql)
+                        window_params.extend(order_params)
+                    
+                    if self.frame:
+                        frame_sql, frame_params = compiler.compile(self.frame)
+                        window_sql.append(' ' + frame_sql)
+                        window_params.extend(frame_params)
+                    
+                    params.extend(window_params)
+                    
+                    # Construct the final SQL with CAST around the entire expression
+                    sql = 'CAST(%s OVER (%s) AS NUMERIC)' % (
+                        expr_sql, 
+                        ''.join(window_sql).strip()
+                    )
+                    return sql, params
+        except (FieldError, AttributeError):
+            pass
+            
+        return self.as_sql(compiler, connection, **extra_context)
+
     def __str__(self):
         return '{} OVER ({}{}{})'.format(
             str(self.source_expression),

