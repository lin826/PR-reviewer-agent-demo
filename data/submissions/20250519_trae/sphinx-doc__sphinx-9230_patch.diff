diff --git a/sphinx/util/docfields.py b/sphinx/util/docfields.py
index 3a3367ebe..40f7fa492 100644
--- a/sphinx/util/docfields.py
+++ b/sphinx/util/docfields.py
@@ -22,6 +22,35 @@ if TYPE_CHECKING:
     from sphinx.directive import ObjectDescription
 
 
+def split_type_and_argument(arg_string: str) -> Tuple[str, str]:
+    """Split a string 'type arg' into type and arg parts, respecting parentheses nesting.
+    
+    Returns a tuple (type, arg) or (None, arg) if no type is present.
+    """
+    if not arg_string.strip():
+        return "", arg_string
+        
+    stack = []
+    last_white = -1
+    
+    for i, c in enumerate(arg_string):
+        if c in '([{':
+            stack.append(c)
+        elif c in ')]}':
+            # Check for matching brackets
+            if stack and ((c == ')' and stack[-1] == '(') or 
+                          (c == ']' and stack[-1] == '[') or 
+                          (c == '}' and stack[-1] == '{')):
+                stack.pop()
+        elif c.isspace() and not stack:
+            last_white = i
+            
+    if last_white >= 0:
+        return arg_string[:last_white].strip(), arg_string[last_white:].strip()
+    else:
+        return "", arg_string
+
+
 def _is_single_paragraph(node: nodes.field_body) -> bool:
     """True if the node only contains one paragraph (and system messages)."""
     if len(node) == 0:
@@ -297,11 +326,8 @@ class DocFieldTransformer:
 
             # also support syntax like ``:param type name:``
             if typedesc.is_typed:
-                try:
-                    argtype, argname = fieldarg.split(None, 1)
-                except ValueError:
-                    pass
-                else:
+                argtype, argname = split_type_and_argument(fieldarg)
+                if argtype:  # Only if a type was detected
                     types.setdefault(typename, {})[argname] = \
                         [nodes.Text(argtype)]
                     fieldarg = argname

