diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 118bfced8..d2cf6054c 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -1299,6 +1299,27 @@ def _format_value(value):
 
 def _format_float(value):
     """Format a floating number to make sure it gets the decimal point."""
+    # First try using the built-in str() which often produces more compact representations
+    simple_str = str(value)
+    
+    # Check if this simple string meets our requirements
+    if "." not in simple_str and "e" not in simple_str and "E" not in simple_str:
+        simple_str += ".0"
+    elif "e" in simple_str:  # Convert lowercase e to uppercase E for FITS standard
+        significand, exponent = simple_str.split("e")
+        if exponent[0] in ("+", "-"):
+            sign = exponent[0]
+            exponent = exponent[1:]
+        else:
+            sign = ""
+        simple_str = f"{significand}E{sign}{int(exponent):02d}"
+    
+    # If the simple string is not too long and preserves the value accurately,
+    # we can use it instead of the more verbose formatting
+    if len(simple_str) <= 20 and float(simple_str) == value:
+        return simple_str
+    
+    # Otherwise, fall back to the original formatting approach
     value_str = f"{value:.16G}"
     if "." not in value_str and "E" not in value_str:
         value_str += ".0"

