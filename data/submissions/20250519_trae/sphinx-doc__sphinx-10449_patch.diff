diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index 06768168e..d08f0adb9 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -28,7 +28,8 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
             for param in sig.parameters.values():
                 if param.annotation is not param.empty:
                     annotation[param.name] = typing.stringify(param.annotation, mode)
-            if sig.return_annotation is not sig.empty:
+            # Don't add return annotation for classes (comes from __init__)
+            if sig.return_annotation is not sig.empty and objtype != 'class':
                 annotation['return'] = typing.stringify(sig.return_annotation, mode)
     except (TypeError, ValueError):
         pass
@@ -58,11 +59,15 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element
             field_lists.append(field_list)
 
         for field_list in field_lists:
+            # For class documentation, we should not include 'return' type hints
+            # since they come from __init__ method, not the class itself
+            force_rtype = objtype != 'class' and app.config.autodoc_typehints_description_target == "documented_params"
+            
             if app.config.autodoc_typehints_description_target == "all":
-                modify_field_list(field_list, annotations[fullname])
+                modify_field_list(field_list, annotations[fullname], objtype=objtype)
             elif app.config.autodoc_typehints_description_target == "documented_params":
                 augment_descriptions_with_types(
-                    field_list, annotations[fullname], force_rtype=True
+                    field_list, annotations[fullname], force_rtype=force_rtype
                 )
             else:
                 augment_descriptions_with_types(
@@ -83,7 +88,7 @@ def insert_field_list(node: Element) -> nodes.field_list:
     return field_list
 
 
-def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:
+def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], objtype: str = '') -> None:
     arguments: Dict[str, Dict[str, bool]] = {}
     fields = cast(Iterable[nodes.field], node)
     for field in fields:
@@ -123,7 +128,8 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No
             field += nodes.field_body('', nodes.paragraph('', ''))
             node += field
 
-    if 'return' in annotations and 'return' not in arguments:
+    # Don't add return type for class objects (they come from __init__)
+    if 'return' in annotations and 'return' not in arguments and objtype != 'class':
         field = nodes.field()
         field += nodes.field_name('', 'rtype')
         field += nodes.field_body('', nodes.paragraph('', annotation))
@@ -169,6 +175,7 @@ def augment_descriptions_with_types(
             node += field
 
     # Add 'rtype' if 'return' is present and 'rtype' isn't.
+    # Only add when force_rtype is True (which is now controlled by the objtype in merge_typehints)
     if 'return' in annotations:
         rtype = annotations['return']
         if 'return' not in has_type and ('return' in has_description or

