diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index 3daf84c108..4c1897bb0a 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -9,6 +9,7 @@
 from sympy.core.mul import Mul
 from sympy.core.power import Pow
 from sympy.core.singleton import S
+from sympy.functions import exp, log, sin, cos
 from sympy.physics.units.dimensions import _QuantityMapper
 from sympy.physics.units.quantities import Quantity
 
@@ -192,8 +193,24 @@ def _collect_factor_and_dimension(self, expr):
         elif isinstance(expr, Function):
             fds = [self._collect_factor_and_dimension(
                 arg) for arg in expr.args]
-            return (expr.func(*(f[0] for f in fds)),
-                    *(d[1] for d in fds))
+            
+            # For transcendental functions like exp, log, sin, cos, etc.
+            # arguments must be dimensionless
+            # If the function is exp, log, sin, cos, etc. check all arguments
+            if expr.func in (exp, log, sin, cos):
+                for fd in fds:
+                    dim = fd[1]
+                    if not self.get_dimension_system().is_dimensionless(dim):
+                        raise ValueError(f"Dimension of \"{expr}\" is {dim}, but it should be Dimension(1)")
+                return expr.func(*(f[0] for f in fds)), Dimension(1)
+            
+            # For general functions
+            for i, (_, dim) in enumerate(fds):
+                if self.get_dimension_system().is_dimensionless(dim):
+                    # Replace the dimensionless dimension with Dimension(1)
+                    fds[i] = (fds[i][0], Dimension(1))
+            
+            return expr.func(*(f[0] for f in fds)), fds[0][1]
         elif isinstance(expr, Dimension):
             return S.One, expr
         else:

