diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py
index 55874bf2..6bca89e3 100644
--- a/seaborn/_core/scales.py
+++ b/seaborn/_core/scales.py
@@ -378,7 +378,34 @@ class ContinuousBase(Scale):
             axis.set_view_interval(vmin, vmax)
             locs = axis.major.locator()
             locs = locs[(vmin <= locs) & (locs <= vmax)]
-            labels = axis.major.formatter.format_ticks(locs)
+            formatter = axis.major.formatter
+            labels = formatter.format_ticks(locs)
+            
+            # Handle offset for ScalarFormatter
+            if isinstance(formatter, mpl.ticker.ScalarFormatter) and formatter.get_useOffset():
+                offset = formatter.get_offset()
+                if offset:
+                    # Only add the offset if it's not already in the labels
+                    if not any(offset in str(label) for label in labels):
+                        # Format each label with the offset included
+                        orders = {
+                            '1e3': 'K', '1e6': 'M', '1e9': 'B', '1e12': 'T',
+                            '$10^{3}$': 'K', '$10^{6}$': 'M', '$10^{9}$': 'B', '$10^{12}$': 'T'
+                        }
+                        
+                        # Check if the offset is a common power of 10
+                        simplified = None
+                        for power, letter in orders.items():
+                            if power in offset or power.lower() in offset:
+                                simplified = letter
+                                break
+                        
+                        if simplified:
+                            labels = [f"{label}{simplified}" for label in labels]
+                        else:
+                            # Otherwise keep the full offset notation
+                            labels = [f"{label} × {offset}" for label in labels]
+                
             new._legend = list(locs), list(labels)
 
         return new
diff --git a/seaborn/utils.py b/seaborn/utils.py
index 2407853c..54a2d3bd 100644
--- a/seaborn/utils.py
+++ b/seaborn/utils.py
@@ -706,6 +706,31 @@ def locator_to_legend_entries(locator, limits, dtype):
     # formatted_levels = formatter.format_ticks(raw_levels)
     formatter.set_locs(raw_levels)
     formatted_levels = [formatter(x) for x in raw_levels]
+    
+    # If using ScalarFormatter with an offset, apply the offset to the labels
+    if isinstance(formatter, mpl.ticker.ScalarFormatter) and formatter.get_useOffset():
+        offset = formatter.get_offset()
+        if offset:
+            # Only add the offset if it's not already in the labels
+            if not any(offset in str(label) for label in formatted_levels):
+                # Format each label with the offset included
+                orders = {
+                    '1e3': 'K', '1e6': 'M', '1e9': 'B', '1e12': 'T',
+                    '$10^{3}$': 'K', '$10^{6}$': 'M', '$10^{9}$': 'B', '$10^{12}$': 'T'
+                }
+                
+                # Check if the offset is a simple power of 10 and can be replaced with a letter
+                simplified = None
+                for power, letter in orders.items():
+                    if power in offset or power.lower() in offset:
+                        simplified = letter
+                        break
+                
+                if simplified:
+                    formatted_levels = [f"{label}{simplified}" for label in formatted_levels]
+                else:
+                    # Otherwise keep the full offset notation
+                    formatted_levels = [f"{label} × {offset}" for label in formatted_levels]
 
     return raw_levels, formatted_levels
 

