diff --git b/sphinx/util/docfields.py a/sphinx/util/docfields.py
index 27d9e164e..3a3367ebe 100644
--- b/sphinx/util/docfields.py
+++ a/sphinx/util/docfields.py
@@ -202,24 +202,10 @@ class TypedField(GroupedField):
                 bodynode += nodes.list_item('', handle_item(fieldarg, content))
         fieldbody = nodes.field_body('', bodynode)
         return nodes.field('', fieldname, fieldbody)
 
 
-def split_type_and_name(s):
-    """Split a string into type and name parts, respecting parentheses nesting."""
-    paren_depth = 0
-    for i, c in enumerate(s):
-        if c == '(':
-            paren_depth += 1
-        elif c == ')':
-            paren_depth -= 1
-        elif c.isspace() and paren_depth == 0:
-            return s[:i], s[i+1:].strip()
-    # If we get here, there's no space outside parentheses
-    return s, ''
-
-
 class DocFieldTransformer:
     """
     Transforms field lists in "doc field" syntax into better-looking
     equivalents, using the field type definitions given on a domain.
     """
@@ -310,18 +296,17 @@ class DocFieldTransformer:
                 continue
 
             # also support syntax like ``:param type name:``
             if typedesc.is_typed:
                 try:
-                    argtype, argname = split_type_and_name(fieldarg)
+                    argtype, argname = fieldarg.split(None, 1)
                 except ValueError:
                     pass
                 else:
-                    if argname:  # Only proceed if we successfully split into type and name
-                        types.setdefault(typename, {})[argname] = \
-                            [nodes.Text(argtype)]
-                        fieldarg = argname
+                    types.setdefault(typename, {})[argname] = \
+                        [nodes.Text(argtype)]
+                    fieldarg = argname
 
             translatable_content = nodes.inline(field_body.rawsource,
                                                 translatable=True)
             translatable_content.document = field_body.parent.document
             translatable_content.source = field_body.parent.source
