diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 5289ef34a0..34794f6c82 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -496,10 +496,20 @@ def safeseq(value):
     with the results.
     """
     return [mark_safe(obj) for obj in value]
 
 
+@register.filter(is_safe=True)
+def escapeseq(value):
+    """
+    A filter for sequences that escapes each element in the sequence,
+    individually, after converting them to strings. Return a list
+    with the results.
+    """
+    return [conditional_escape(obj) for obj in value]
+
+
 @register.filter(is_safe=True)
 @stringfilter
 def striptags(value):
     """Strip all [X]HTML tags."""
     return strip_tags(value)
diff --git a/docs/ref/templates/builtins.txt b/docs/ref/templates/builtins.txt
index 3aa20dfc71..9d7b561462 100644
--- a/docs/ref/templates/builtins.txt
+++ b/docs/ref/templates/builtins.txt
@@ -2373,10 +2373,29 @@ conjunction with other filters that operate on sequences, such as
 
 You couldn't use the :tfilter:`safe` filter directly in this case, as it would
 first convert the variable into a string, rather than working with the
 individual elements of the sequence.
 
+.. templatefilter:: escapeseq
+
+``escapeseq``
+-----------
+
+Applies the :tfilter:`escape` filter to each element of a sequence. Useful in
+conjunction with other filters that operate on sequences, such as
+:tfilter:`join`. For example:
+
+.. code-block:: html+django
+
+    {{ some_list|escapeseq|join:", " }}
+
+You couldn't use the :tfilter:`escape` filter directly in this case, as it would
+first convert the variable into a string, rather than working with the
+individual elements of the sequence.
+
+This filter is particularly useful in contexts where :ttag:`autoescape` is off.
+
 .. templatefilter:: slice
 
 ``slice``
 ---------
 
