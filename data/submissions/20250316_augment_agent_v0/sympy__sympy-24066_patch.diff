diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index 3daf84c108..51d13bc902 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -188,14 +188,35 @@ def _collect_factor_and_dimension(self, expr):
                 ifactor, idim = self._collect_factor_and_dimension(independent)
                 factor /= ifactor**count
                 dim /= idim**count
             return factor, dim
         elif isinstance(expr, Function):
+            from sympy.functions.elementary.exponential import exp, log
+            from sympy.functions.elementary.trigonometric import sin, cos, tan, asin, acos, atan
+            from sympy.functions.elementary.hyperbolic import sinh, cosh, tanh, asinh, acosh, atanh
+            
+            dimensionless_functions = (exp, log, sin, cos, tan, asin, acos, atan, sinh, cosh, tanh, asinh, acosh, atanh)
+            
             fds = [self._collect_factor_and_dimension(
                 arg) for arg in expr.args]
-            return (expr.func(*(f[0] for f in fds)),
-                    *(d[1] for d in fds))
+            
+            if expr.func in dimensionless_functions:
+                # For functions like exp, sin, cos, etc., the arguments should be dimensionless
+                # and the result is also dimensionless
+                for i, (factor, dim) in enumerate(fds):
+                    if not self.get_dimension_system().is_dimensionless(dim):
+                        raise ValueError(
+                            'Dimension of "{}" is {}, '
+                            'but it should be {}'.format(
+                                expr, dim, Dimension(1)))
+                return (expr.func(*(f[0] for f in fds)), Dimension(1))
+            else:
+                # For other functions, we need to determine the dimension of the result
+                # based on the dimensions of the arguments
+                # This is a simplification; in reality, we would need to know how the
+                # function transforms dimensions
+                return (expr.func(*(f[0] for f in fds)), fds[0][1])
         elif isinstance(expr, Dimension):
             return S.One, expr
         else:
             return expr, Dimension(1)
 
