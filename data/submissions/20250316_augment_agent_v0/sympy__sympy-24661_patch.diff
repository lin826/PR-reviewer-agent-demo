diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py
index 52711d1324..e9ed8fec1b 100644
--- a/sympy/parsing/sympy_parser.py
+++ b/sympy/parsing/sympy_parser.py
@@ -1108,10 +1108,18 @@ class EvaluateFalseTransformer(ast.NodeTransformer):
         ast.Div: 'Mul',
         ast.BitOr: 'Or',
         ast.BitAnd: 'And',
         ast.BitXor: 'Not',
     }
+    comparison_operators = {
+        ast.Lt: 'Lt',
+        ast.Gt: 'Gt',
+        ast.LtE: 'Le',
+        ast.GtE: 'Ge',
+        ast.Eq: 'Eq',
+        ast.NotEq: 'Ne',
+    }
     functions = (
         'Abs', 'im', 're', 'sign', 'arg', 'conjugate',
         'acos', 'acot', 'acsc', 'asec', 'asin', 'atan',
         'acosh', 'acoth', 'acsch', 'asech', 'asinh', 'atanh',
         'cos', 'cot', 'csc', 'sec', 'sin', 'tan',
@@ -1189,10 +1197,29 @@ def visit_BinOp(self, node):
     def visit_Call(self, node):
         new_node = self.generic_visit(node)
         if isinstance(node.func, ast.Name) and node.func.id in self.functions:
             new_node.keywords.append(ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load())))
         return new_node
+        
+    def visit_Compare(self, node):
+        if len(node.ops) != 1 or len(node.comparators) != 1:
+            return node  # Don't handle chained comparisons
+        
+        op = node.ops[0]
+        if op.__class__ in self.comparison_operators:
+            sympy_class = self.comparison_operators[op.__class__]
+            left = self.visit(node.left)
+            right = self.visit(node.comparators[0])
+            
+            return ast.Call(
+                func=ast.Name(id=sympy_class, ctx=ast.Load()),
+                args=[left, right],
+                keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],
+                starargs=None,
+                kwargs=None
+            )
+        return node
 
 
 _transformation = {  # items can be added but never re-ordered
 0: lambda_notation,
 1: auto_symbol,
