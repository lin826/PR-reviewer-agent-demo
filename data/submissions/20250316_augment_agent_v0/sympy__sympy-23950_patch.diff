diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py
index b2d4268d12..ec2bc23cce 100644
--- a/sympy/sets/contains.py
+++ b/sympy/sets/contains.py
@@ -43,6 +43,18 @@ def binary_symbols(self):
             for i in self.args[1].args
             if i.is_Boolean or i.is_Symbol or
             isinstance(i, (Eq, Ne))])
 
     def as_set(self):
-        raise NotImplementedError()
+        """
+        Returns the set that contains the element.
+
+        Examples
+        ========
+
+        >>> from sympy import Symbol, Contains, S
+        >>> x = Symbol('x')
+        >>> Contains(x, S.Reals).as_set()
+        Reals
+        """
+        # Return the set (second argument)
+        return self.args[1]
diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py
index 1973fed19c..b02c12644f 100644
--- a/sympy/sets/tests/test_contains.py
+++ b/sympy/sets/tests/test_contains.py
@@ -39,13 +39,11 @@ def test_binary_symbols():
 
 
 def test_as_set():
     x = Symbol('x')
     y = Symbol('y')
-    # Contains is a BooleanFunction whose value depends on an arg's
-    # containment in a Set -- rewriting as a Set is not yet implemented
-    raises(NotImplementedError, lambda:
-           Contains(x, FiniteSet(y)).as_set())
+    # Contains.as_set() should return the set from its second argument
+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)
 
 def test_type_error():
     # Pass in a parameter not of type "set"
     raises(TypeError, lambda: Contains(2, None))
