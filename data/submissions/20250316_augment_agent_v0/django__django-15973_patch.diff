diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 09785e8586..c4c13f9367 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -448,18 +448,18 @@ class BaseDatabaseSchemaEditor:
         # _remake_table needs it).
         self.deferred_sql.extend(self._model_indexes_sql(model))
 
         # Make M2M tables
         for field in model._meta.local_many_to_many:
-            if field.remote_field.through._meta.auto_created:
+            if not isinstance(field.remote_field.through, str) and field.remote_field.through._meta.auto_created:
                 self.create_model(field.remote_field.through)
 
     def delete_model(self, model):
         """Delete a model from the database."""
         # Handle auto-created intermediary models
         for field in model._meta.local_many_to_many:
-            if field.remote_field.through._meta.auto_created:
+            if not isinstance(field.remote_field.through, str) and field.remote_field.through._meta.auto_created:
                 self.delete_model(field.remote_field.through)
 
         # Delete the table
         self.execute(
             self.sql_delete_table
@@ -628,11 +628,11 @@ class BaseDatabaseSchemaEditor:
         """
         Create a field on a model. Usually involves adding a column, but may
         involve adding a table instead (for M2M fields).
         """
         # Special-case implicit M2M tables
-        if field.many_to_many and field.remote_field.through._meta.auto_created:
+        if field.many_to_many and not isinstance(field.remote_field.through, str) and field.remote_field.through._meta.auto_created:
             return self.create_model(field.remote_field.through)
         # Get the column's definition
         definition, params = self.column_sql(model, field, include_default=True)
         # It might not actually have a column behind it
         if definition is None:
@@ -702,11 +702,11 @@ class BaseDatabaseSchemaEditor:
         """
         Remove a field from a model. Usually involves deleting a column,
         but for M2Ms may involve deleting a table.
         """
         # Special-case implicit M2M tables
-        if field.many_to_many and field.remote_field.through._meta.auto_created:
+        if field.many_to_many and not isinstance(field.remote_field.through, str) and field.remote_field.through._meta.auto_created:
             return self.delete_model(field.remote_field.through)
         # It might not actually have a column behind it
         if field.db_parameters(connection=self.connection)["type"] is None:
             return
         # Drop any FK constraints, MySQL requires explicit deletion
diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py
index 6c106ae868..3b7e757a5e 100644
--- a/django/db/backends/sqlite3/schema.py
+++ b/django/db/backends/sqlite3/schema.py
@@ -256,10 +256,11 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
             del body[delete_field.name]
             del mapping[delete_field.column]
             # Remove any implicit M2M tables
             if (
                 delete_field.many_to_many
+                and not isinstance(delete_field.remote_field.through, str)
                 and delete_field.remote_field.through._meta.auto_created
             ):
                 return self.delete_model(delete_field.remote_field.through)
         # Work inside a new app registry
         apps = Apps()
@@ -401,11 +402,11 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
         but for M2Ms may involve deleting a table.
         """
         # M2M fields are a special case
         if field.many_to_many:
             # For implicit M2M tables, delete the auto-created table
-            if field.remote_field.through._meta.auto_created:
+            if not isinstance(field.remote_field.through, str) and field.remote_field.through._meta.auto_created:
                 self.delete_model(field.remote_field.through)
             # For explicit "through" M2M fields, do nothing
         elif (
             self.connection.features.can_alter_table_drop_column
             # Primary keys, unique fields, indexed fields, and foreign keys are
