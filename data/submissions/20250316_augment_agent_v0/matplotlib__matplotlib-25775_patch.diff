diff --git a/lib/matplotlib/backends/backend_agg.py b/lib/matplotlib/backends/backend_agg.py
index 7d038a998f..dce08702e0 100644
--- a/lib/matplotlib/backends/backend_agg.py
+++ b/lib/matplotlib/backends/backend_agg.py
@@ -204,11 +204,11 @@ class RendererAgg(RendererBase):
         font = self._prepare_font(prop)
         # We pass '0' for angle here, since it will be rotated (in raster
         # space) in the following call to draw_text_image).
         font.set_text(s, 0, flags=get_hinting_flag())
         font.draw_glyphs_to_bitmap(
-            antialiased=mpl.rcParams['text.antialiased'])
+            antialiased=mtext.get_antialiased() if mtext is not None else mpl.rcParams['text.antialiased'])
         d = font.get_descent() / 64.0
         # The descent needs to be adjusted for the angle.
         xo, yo = font.get_bitmap_offset()
         xo /= 64.0
         yo /= 64.0
diff --git a/lib/matplotlib/backends/backend_cairo.py b/lib/matplotlib/backends/backend_cairo.py
index 9ccadcdf1c..fd6c7768dd 100644
--- a/lib/matplotlib/backends/backend_cairo.py
+++ b/lib/matplotlib/backends/backend_cairo.py
@@ -203,11 +203,11 @@ class RendererCairo(RendererBase):
             ctx.save()
             ctx.select_font_face(*_cairo_font_args_from_font_prop(prop))
             ctx.set_font_size(self.points_to_pixels(prop.get_size_in_points()))
             opts = cairo.FontOptions()
             opts.set_antialias(
-                cairo.ANTIALIAS_DEFAULT if mpl.rcParams["text.antialiased"]
+                cairo.ANTIALIAS_DEFAULT if (mtext.get_antialiased() if mtext is not None else mpl.rcParams["text.antialiased"])
                 else cairo.ANTIALIAS_NONE)
             ctx.set_font_options(opts)
             if angle:
                 ctx.rotate(np.deg2rad(-angle))
             ctx.show_text(s)
diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py
index 4591316cf9..aa1196e376 100644
--- a/lib/matplotlib/text.py
+++ b/lib/matplotlib/text.py
@@ -113,10 +113,11 @@ class Text(Artist):
                  rotation_mode=None,
                  usetex=None,          # defaults to rcParams['text.usetex']
                  wrap=False,
                  transform_rotates_text=False,
                  parse_math=None,    # defaults to rcParams['text.parse_math']
+                 antialiased=None,   # defaults to rcParams['text.antialiased']
                  **kwargs
                  ):
         """
         Create a `.Text` instance at *x*, *y* with string *text*.
 
@@ -147,10 +148,11 @@ class Text(Artist):
             multialignment=multialignment,
             rotation=rotation,
             transform_rotates_text=transform_rotates_text,
             linespacing=linespacing,
             rotation_mode=rotation_mode,
+            antialiased=antialiased,
         )
         self.update(kwargs)
 
     def _reset_visual_defaults(
         self,
@@ -165,10 +167,11 @@ class Text(Artist):
         multialignment=None,
         rotation=None,
         transform_rotates_text=False,
         linespacing=None,
         rotation_mode=None,
+        antialiased=None,
     ):
         self.set_text(text)
         self.set_color(
             color if color is not None else mpl.rcParams["text.color"])
         self.set_fontproperties(fontproperties)
@@ -185,10 +188,11 @@ class Text(Artist):
         self._renderer = None
         if linespacing is None:
             linespacing = 1.2  # Maybe use rcParam later.
         self.set_linespacing(linespacing)
         self.set_rotation_mode(rotation_mode)
+        self.set_antialiased(antialiased)
 
     def update(self, kwargs):
         # docstring inherited
         kwargs = cbook.normalize_kwargs(kwargs, Text)
         sentinel = object()  # bbox can be None, so use another sentinel.
@@ -320,10 +324,11 @@ class Text(Artist):
         self._usetex = other._usetex
         self._rotation = other._rotation
         self._transform_rotates_text = other._transform_rotates_text
         self._picker = other._picker
         self._linespacing = other._linespacing
+        self._antialiased = other._antialiased
         self.stale = True
 
     def _get_layout(self, renderer):
         """
         Return the extent (bbox) of the text together with
@@ -1315,10 +1320,30 @@ class Text(Artist):
 
     def get_parse_math(self):
         """Return whether mathtext parsing is considered for this `Text`."""
         return self._parse_math
 
+    def get_antialiased(self):
+        """Return whether the text will be antialiased."""
+        return self._antialiased
+
+    def set_antialiased(self, aa):
+        """
+        Set whether to use antialiased rendering.
+
+        Parameters
+        ----------
+        aa : bool or None
+            If True, the text will be antialiased.
+            If False, the text will not be antialiased.
+            If None, use the default value from rcParams["text.antialiased"] (default: True).
+        """
+        if aa is None:
+            aa = mpl.rcParams['text.antialiased']
+        self._antialiased = aa
+        self.stale = True
+
     def set_fontname(self, fontname):
         """
         Alias for `set_family`.
 
         One-way alias only: the getter differs.
