diff --git a/xarray/core/computation.py b/xarray/core/computation.py
index 3f7e8f74..c506ac68 100644
--- a/xarray/core/computation.py
+++ b/xarray/core/computation.py
@@ -1853,17 +1853,47 @@ def where(cond, x, y, keep_attrs=None):
     --------
     numpy.where : corresponding numpy function
     Dataset.where, DataArray.where :
         equivalent methods
     """
+    from .dataarray import DataArray
+
     if keep_attrs is None:
         keep_attrs = _get_keep_attrs(default=False)
-    if keep_attrs is True:
-        # keep the attributes of x, the second parameter, by default to
-        # be consistent with the `where` method of `DataArray` and `Dataset`
+    
+    # For DataArrays, we need to handle coordinates specially
+    if keep_attrs is True and isinstance(x, DataArray):
+        # First, get the coordinates from x
+        coords = {}
+        for name, coord in x.coords.items():
+            coords[name] = coord.copy()
+        
+        # Apply where without keeping attributes
+        result = apply_ufunc(
+            duck_array_ops.where,
+            cond,
+            x,
+            y,
+            join="exact",
+            dataset_join="exact",
+            dask="allowed",
+            keep_attrs=False,
+        )
+        
+        # Set the attributes of the result to the attributes of x
+        result.attrs = x.attrs
+        
+        # Restore the original coordinate attributes
+        for name, coord in coords.items():
+            if name in result.coords:
+                result.coords[name].attrs = coord.attrs
+        
+        return result
+    elif keep_attrs is True:
+        # For non-DataArrays, use the original behavior
         keep_attrs = lambda attrs, context: getattr(x, "attrs", {})
-
+    
     # alignment for three arguments is complicated, so don't support it yet
     return apply_ufunc(
         duck_array_ops.where,
         cond,
         x,
