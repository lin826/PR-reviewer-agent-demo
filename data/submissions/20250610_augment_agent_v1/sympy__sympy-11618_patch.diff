diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 593048464b..984e73ddcf 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -8,10 +8,11 @@
 
 """
 
 from __future__ import division, print_function
 
+import itertools
 from sympy.core import S, sympify
 from sympy.core.compatibility import iterable
 from sympy.core.containers import Tuple
 from sympy.simplify import nsimplify, simplify
 from sympy.geometry.exceptions import GeometryError
@@ -264,12 +265,13 @@ def distance(self, p):
         >>> p3 = Point(x, y)
         >>> p3.distance(Point(0, 0))
         sqrt(x**2 + y**2)
 
         """
-        return sqrt(sum([(a - b)**2 for a, b in zip(
-            self.args, p.args if isinstance(p, Point) else p)]))
+        p_coords = p.args if isinstance(p, Point) else p
+        return sqrt(sum([(a - b)**2 for a, b in itertools.zip_longest(
+            self.args, p_coords, fillvalue=0)]))
 
     def taxicab_distance(self, p):
         """The Taxicab Distance from self to point p.
 
         Returns the sum of the horizontal and vertical distances to point p.
@@ -298,11 +300,11 @@ def taxicab_distance(self, p):
         >>> p1.taxicab_distance(p2)
         7
 
         """
         p = Point(p)
-        return sum(abs(a - b) for a, b in zip(self.args, p.args))
+        return sum(abs(a - b) for a, b in itertools.zip_longest(self.args, p.args, fillvalue=0))
 
     def midpoint(self, p):
         """The midpoint between self and point p.
 
         Parameters
@@ -327,11 +329,11 @@ def midpoint(self, p):
         >>> p1, p2 = Point(1, 1), Point(13, 5)
         >>> p1.midpoint(p2)
         Point2D(7, 3)
 
         """
-        return Point([simplify((a + b)*S.Half) for a, b in zip(self.args, p.args)])
+        return Point([simplify((a + b)*S.Half) for a, b in itertools.zip_longest(self.args, p.args, fillvalue=0)])
 
     def evalf(self, prec=None, **options):
         """Evaluate the coordinates of the point.
 
         This method will, where possible, create and return a new Point
@@ -404,11 +406,11 @@ def intersection(self, o):
         return o.intersection(self)
 
     def dot(self, p2):
         """Return dot product of self with another Point."""
         p2 = Point(p2)
-        return Add(*[a*b for a,b in zip(self, p2)])
+        return Add(*[a*b for a,b in itertools.zip_longest(self, p2, fillvalue=0)])
 
     def equals(self, other):
         """Returns whether the coordinates of self and other agree."""
         # a point is equal to another point if all its components are equal
         if not isinstance(other, Point) or len(self.args) != len(other.args):
