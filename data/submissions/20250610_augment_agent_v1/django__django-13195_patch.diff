diff --git a/django/contrib/messages/storage/cookie.py b/django/contrib/messages/storage/cookie.py
index 78256ca3b2..fa245f2689 100644
--- a/django/contrib/messages/storage/cookie.py
+++ b/django/contrib/messages/storage/cookie.py
@@ -90,11 +90,17 @@ class CookieStorage(BaseStorage):
                 secure=settings.SESSION_COOKIE_SECURE or None,
                 httponly=settings.SESSION_COOKIE_HTTPONLY or None,
                 samesite=settings.SESSION_COOKIE_SAMESITE,
             )
         else:
-            response.delete_cookie(self.cookie_name, domain=settings.SESSION_COOKIE_DOMAIN)
+            response.delete_cookie(
+                self.cookie_name,
+                domain=settings.SESSION_COOKIE_DOMAIN,
+                samesite=settings.SESSION_COOKIE_SAMESITE,
+                secure=settings.SESSION_COOKIE_SECURE or None,
+                httponly=settings.SESSION_COOKIE_HTTPONLY or None,
+            )
 
     def _store(self, messages, response, remove_oldest=True, *args, **kwargs):
         """
         Store the messages to a cookie and return a list of any messages which
         could not be stored.
diff --git a/django/http/response.py b/django/http/response.py
index e00bcacefb..a101657fdb 100644
--- a/django/http/response.py
+++ b/django/http/response.py
@@ -208,18 +208,31 @@ class HttpResponseBase:
 
     def set_signed_cookie(self, key, value, salt='', **kwargs):
         value = signing.get_cookie_signer(salt=key + salt).sign(value)
         return self.set_cookie(key, value, **kwargs)
 
-    def delete_cookie(self, key, path='/', domain=None):
+    def delete_cookie(self, key, path='/', domain=None, samesite=None, secure=None, httponly=None):
         # Most browsers ignore the Set-Cookie header if the cookie name starts
         # with __Host- or __Secure- and the cookie doesn't use the secure flag.
-        secure = key.startswith(('__Secure-', '__Host-'))
-        self.set_cookie(
-            key, max_age=0, path=path, domain=domain, secure=secure,
-            expires='Thu, 01 Jan 1970 00:00:00 GMT',
-        )
+        if secure is None:
+            secure = key.startswith(('__Secure-', '__Host-'))
+        
+        kwargs = {
+            'max_age': 0,
+            'path': path,
+            'domain': domain,
+            'secure': secure,
+            'expires': 'Thu, 01 Jan 1970 00:00:00 GMT',
+        }
+        
+        if samesite is not None:
+            kwargs['samesite'] = samesite
+        
+        if httponly is not None:
+            kwargs['httponly'] = httponly
+        
+        self.set_cookie(key, **kwargs)
 
     # Common methods used by subclasses
 
     def make_bytes(self, value):
         """Turn a value into a bytestring encoded in the output charset."""
