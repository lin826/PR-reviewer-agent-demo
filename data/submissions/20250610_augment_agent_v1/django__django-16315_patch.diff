diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py
index 76ca815765..f9136daa19 100644
--- a/django/db/backends/mysql/operations.py
+++ b/django/db/backends/mysql/operations.py
@@ -433,10 +433,21 @@ class DatabaseOperations(BaseDatabaseOperations):
             return False
         return super().conditional_expression_supported_in_where_clause(expression)
 
     def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fields):
         if on_conflict == OnConflict.UPDATE:
+            # Create a mapping from field names to database column names
+            field_name_to_column = {}
+            if fields:
+                field_name_to_column = {field.name: field.column for field in fields}
+            
+            # Convert field names to database column names
+            update_columns = [
+                field_name_to_column.get(field_name, field_name) 
+                for field_name in update_fields
+            ]
+            
             conflict_suffix_sql = "ON DUPLICATE KEY UPDATE %(fields)s"
             # The use of VALUES() is deprecated in MySQL 8.0.20+. Instead, use
             # aliases for the new row and its columns available in MySQL
             # 8.0.19+.
             if not self.connection.mysql_is_mariadb:
@@ -449,12 +460,12 @@ class DatabaseOperations(BaseDatabaseOperations):
             else:
                 field_sql = "%(field)s = VALUE(%(field)s)"
 
             fields = ", ".join(
                 [
-                    field_sql % {"field": field}
-                    for field in map(self.quote_name, update_fields)
+                    field_sql % {"field": self.quote_name(column)}
+                    for column in update_columns
                 ]
             )
             return conflict_suffix_sql % {"fields": fields}
         return super().on_conflict_suffix_sql(
             fields,
diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py
index 62273fc43c..44a71e5cbb 100644
--- a/django/db/backends/postgresql/operations.py
+++ b/django/db/backends/postgresql/operations.py
@@ -351,16 +351,31 @@ class DatabaseOperations(BaseDatabaseOperations):
 
     def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fields):
         if on_conflict == OnConflict.IGNORE:
             return "ON CONFLICT DO NOTHING"
         if on_conflict == OnConflict.UPDATE:
+            # Create a mapping from field names to database column names
+            field_name_to_column = {}
+            if fields:
+                field_name_to_column = {field.name: field.column for field in fields}
+            
+            # Convert field names to database column names
+            unique_columns = [
+                field_name_to_column.get(field_name, field_name) 
+                for field_name in unique_fields
+            ]
+            update_columns = [
+                field_name_to_column.get(field_name, field_name) 
+                for field_name in update_fields
+            ]
+            
             return "ON CONFLICT(%s) DO UPDATE SET %s" % (
-                ", ".join(map(self.quote_name, unique_fields)),
+                ", ".join(map(self.quote_name, unique_columns)),
                 ", ".join(
                     [
-                        f"{field} = EXCLUDED.{field}"
-                        for field in map(self.quote_name, update_fields)
+                        f"{self.quote_name(column)} = EXCLUDED.{self.quote_name(column)}"
+                        for column in update_columns
                     ]
                 ),
             )
         return super().on_conflict_suffix_sql(
             fields,
diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py
index bb84d52071..4b7133f5fe 100644
--- a/django/db/backends/sqlite3/operations.py
+++ b/django/db/backends/sqlite3/operations.py
@@ -415,16 +415,31 @@ class DatabaseOperations(BaseDatabaseOperations):
     def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fields):
         if (
             on_conflict == OnConflict.UPDATE
             and self.connection.features.supports_update_conflicts_with_target
         ):
+            # Create a mapping from field names to database column names
+            field_name_to_column = {}
+            if fields:
+                field_name_to_column = {field.name: field.column for field in fields}
+            
+            # Convert field names to database column names
+            unique_columns = [
+                field_name_to_column.get(field_name, field_name) 
+                for field_name in unique_fields
+            ]
+            update_columns = [
+                field_name_to_column.get(field_name, field_name) 
+                for field_name in update_fields
+            ]
+            
             return "ON CONFLICT(%s) DO UPDATE SET %s" % (
-                ", ".join(map(self.quote_name, unique_fields)),
+                ", ".join(map(self.quote_name, unique_columns)),
                 ", ".join(
                     [
-                        f"{field} = EXCLUDED.{field}"
-                        for field in map(self.quote_name, update_fields)
+                        f"{self.quote_name(column)} = EXCLUDED.{self.quote_name(column)}"
+                        for column in update_columns
                     ]
                 ),
             )
         return super().on_conflict_suffix_sql(
             fields,
