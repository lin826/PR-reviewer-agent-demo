diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index ab4ea70492..dcff5534e0 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -62,12 +62,12 @@ def list_aggregate(function):
     """
     return type('ListAggregate', (list,), {'finalize': function, 'step': list.append})
 
 
 def check_sqlite_version():
-    if Database.sqlite_version_info < (3, 8, 3):
-        raise ImproperlyConfigured('SQLite 3.8.3 or later is required (found %s).' % Database.sqlite_version)
+    if Database.sqlite_version_info < (3, 9, 0):
+        raise ImproperlyConfigured('SQLite 3.9.0 or later is required (found %s).' % Database.sqlite_version)
 
 
 check_sqlite_version()
 
 Database.register_converter("bool", b'1'.__eq__)
diff --git a/django/db/backends/sqlite3/features.py b/django/db/backends/sqlite3/features.py
index 3348256c74..b44d50bc59 100644
--- a/django/db/backends/sqlite3/features.py
+++ b/django/db/backends/sqlite3/features.py
@@ -35,11 +35,11 @@ class DatabaseFeatures(BaseDatabaseFeatures):
     supports_parentheses_in_compound = False
     # Deferred constraint checks can be emulated on SQLite < 3.20 but not in a
     # reasonably performant way.
     supports_pragma_foreign_key_check = Database.sqlite_version_info >= (3, 20, 0)
     can_defer_constraint_checks = supports_pragma_foreign_key_check
-    supports_functions_in_partial_indexes = Database.sqlite_version_info >= (3, 15, 0)
+    supports_functions_in_partial_indexes = True
     supports_over_clause = Database.sqlite_version_info >= (3, 25, 0)
     supports_frame_range_fixed_distance = Database.sqlite_version_info >= (3, 28, 0)
     supports_aggregate_filter_clause = Database.sqlite_version_info >= (3, 30, 1)
     supports_order_by_nulls_modifier = Database.sqlite_version_info >= (3, 30, 0)
     order_by_nulls_first = True
diff --git a/docs/ref/contrib/gis/install/index.txt b/docs/ref/contrib/gis/install/index.txt
index 687fe5d59d..c8343913cf 100644
--- a/docs/ref/contrib/gis/install/index.txt
+++ b/docs/ref/contrib/gis/install/index.txt
@@ -59,11 +59,11 @@ supported versions, and any notes for each of the supported database backends:
 Database            Library Requirements            Supported Versions  Notes
 ==================  ==============================  ==================  =========================================
 PostgreSQL          GEOS, GDAL, PROJ, PostGIS       9.6+                Requires PostGIS.
 MySQL               GEOS, GDAL                      5.7+                :ref:`Limited functionality <mysql-spatial-limitations>`.
 Oracle              GEOS, GDAL                      12.2+               XE not supported.
-SQLite              GEOS, GDAL, PROJ, SpatiaLite    3.8.3+              Requires SpatiaLite 4.3+
+SQLite              GEOS, GDAL, PROJ, SpatiaLite    3.9.0+              Requires SpatiaLite 4.3+
 ==================  ==============================  ==================  =========================================
 
 See also `this comparison matrix`__ on the OSGeo Wiki for
 PostgreSQL/PostGIS/GEOS/GDAL possible combinations.
 
diff --git a/docs/ref/databases.txt b/docs/ref/databases.txt
index 809ee68db6..8fc9e89662 100644
--- a/docs/ref/databases.txt
+++ b/docs/ref/databases.txt
@@ -677,11 +677,11 @@ appropriate typecasting.
 .. _sqlite-notes:
 
 SQLite notes
 ============
 
-Django supports SQLite 3.8.3 and later.
+Django supports SQLite 3.9.0 and later.
 
 SQLite_ provides an excellent development alternative for applications that
 are predominantly read-only or require a smaller installation footprint. As
 with all database servers, though, there are some differences that are
 specific to SQLite that you should be aware of.
diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py
index 17a58f32ae..922a2e06ae 100644
--- a/tests/backends/sqlite/tests.py
+++ b/tests/backends/sqlite/tests.py
@@ -28,13 +28,13 @@ except ImproperlyConfigured:
 @unittest.skipUnless(connection.vendor == 'sqlite', 'SQLite tests')
 class Tests(TestCase):
     longMessage = True
 
     def test_check_sqlite_version(self):
-        msg = 'SQLite 3.8.3 or later is required (found 3.8.2).'
-        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 2)), \
-                mock.patch.object(dbapi2, 'sqlite_version', '3.8.2'), \
+        msg = 'SQLite 3.9.0 or later is required (found 3.8.9).'
+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 9)), \
+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.9'), \
                 self.assertRaisesMessage(ImproperlyConfigured, msg):
             check_sqlite_version()
 
     def test_aggregation(self):
         """Raise NotSupportedError when aggregating on date/time fields."""
