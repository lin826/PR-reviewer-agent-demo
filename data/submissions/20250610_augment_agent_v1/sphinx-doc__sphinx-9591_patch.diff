diff --git b/sphinx/domains/python.py a/sphinx/domains/python.py
index 9875a9f4b..e8330e81c 100644
--- b/sphinx/domains/python.py
+++ a/sphinx/domains/python.py
@@ -859,12 +859,11 @@ class PyProperty(PyObject):
     def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]:
         fullname, prefix = super().handle_signature(sig, signode)
 
         typ = self.options.get('type')
         if typ:
-            annotations = _parse_annotation(typ, self.env)
-            signode += addnodes.desc_annotation(typ, '', nodes.Text(': '), *annotations)
+            signode += addnodes.desc_annotation(typ, ': ' + typ)
 
         return fullname, prefix
 
     def get_signature_prefix(self, sig: str) -> str:
         prefix = []
diff --git b/tests/test_domain_py.py a/tests/test_domain_py.py
index 067febcf4..8b72f8b7a 100644
--- b/tests/test_domain_py.py
+++ a/tests/test_domain_py.py
@@ -831,19 +831,17 @@ def test_pyproperty(app):
                                                   desc)])]))
     assert_node(doctree[1][1][0], addnodes.index,
                 entries=[('single', 'prop1 (Class property)', 'Class.prop1', '', None)])
     assert_node(doctree[1][1][1], ([desc_signature, ([desc_annotation, "abstract property "],
                                                      [desc_name, "prop1"],
-                                                     [desc_annotation, (": ",
-                                                                        [pending_xref, "str"])])],
+                                                     [desc_annotation, ": str"])],
                                    [desc_content, ()]))
     assert_node(doctree[1][1][2], addnodes.index,
                 entries=[('single', 'prop2 (Class property)', 'Class.prop2', '', None)])
     assert_node(doctree[1][1][3], ([desc_signature, ([desc_annotation, "class property "],
                                                      [desc_name, "prop2"],
-                                                     [desc_annotation, (": ",
-                                                                        [pending_xref, "str"])])],
+                                                     [desc_annotation, ": str"])],
                                    [desc_content, ()]))
     assert 'Class.prop1' in domain.objects
     assert domain.objects['Class.prop1'] == ('index', 'Class.prop1', 'property', False)
     assert 'Class.prop2' in domain.objects
     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)
