diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py
index ab475f7d0d..922a060876 100644
--- a/astropy/coordinates/sky_coordinate.py
+++ b/astropy/coordinates/sky_coordinate.py
@@ -892,11 +892,27 @@ class SkyCoord(ShapedLikeNDArray):
             # Try to interpret as a new frame for transforming.
             frame_cls = frame_transform_graph.lookup_name(attr)
             if frame_cls is not None and self.frame.is_transformable_to(frame_cls):
                 return self.transform_to(attr)
 
-        # Fail
+        # Check if the attribute exists in the class hierarchy (as a property, method, etc.)
+        # If it does, then the AttributeError we're about to raise would mask the real error
+        # from the property/method, so we should let the original error propagate instead.
+        for cls in self.__class__.__mro__:
+            if attr in cls.__dict__:
+                # The attribute exists in the class hierarchy, so the AttributeError
+                # we're handling was likely raised by a property getter or method.
+                # Don't mask it with our own generic error message.
+                # Instead, try to access it again to get the original error.
+                try:
+                    # This should raise the original AttributeError from the property/method
+                    return super(SkyCoord, self).__getattribute__(attr)
+                except AttributeError:
+                    # Re-raise the original AttributeError instead of masking it
+                    raise
+        
+        # The attribute truly doesn't exist anywhere in the class hierarchy
         raise AttributeError(
             f"'{self.__class__.__name__}' object has no attribute '{attr}'"
         )
 
     def __setattr__(self, attr, val):
