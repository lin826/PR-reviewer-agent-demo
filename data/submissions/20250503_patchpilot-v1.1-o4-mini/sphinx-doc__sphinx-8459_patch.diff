diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index 6f90bd7..bc86656 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -20,6 +20,23 @@ from sphinx.application import Sphinx
 from sphinx.util import inspect, typing
 
 
+
+def _stringify_with_alias(app: Sphinx, annotation: Any) -> str:
+    """Convert *annotation* to string honoring ``autodoc_type_aliases``."""
+    for alias, path in getattr(app.config, 'autodoc_type_aliases', {}).items():
+        try:
+            module_path, attr_name = path.rsplit('.', 1)
+            from importlib import import_module
+            module = import_module(module_path)
+            target = getattr(module, attr_name, None)
+            if target is annotation:
+                return path
+        except Exception:
+            # Ignore failures (import errors, bad paths, etc.) and fall back
+            continue
+    return typing.stringify(annotation)
+
+
 def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
                      options: Dict, args: str, retann: str) -> None:
     """Record type hints to env object."""
@@ -30,13 +47,14 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
             sig = inspect.signature(obj)
             for param in sig.parameters.values():
                 if param.annotation is not param.empty:
-                    annotation[param.name] = typing.stringify(param.annotation)
+                    annotation[param.name] = _stringify_with_alias(app, param.annotation)
             if sig.return_annotation is not sig.empty:
-                annotation['return'] = typing.stringify(sig.return_annotation)
+                annotation['return'] = _stringify_with_alias(app, sig.return_annotation)
     except (TypeError, ValueError):
         pass
 
 
+
 def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:
     if domain != 'py':
         return
@@ -119,13 +137,15 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No
             field += nodes.field_body('', nodes.paragraph('', ''))
             node += field
 
+
     if 'return' in annotations and 'return' not in arguments:
         field = nodes.field()
         field += nodes.field_name('', 'rtype')
-        field += nodes.field_body('', nodes.paragraph('', annotation))
+        field += nodes.field_body('', nodes.paragraph('', annotations['return']))
         node += field
 
 
+
 def setup(app: Sphinx) -> Dict[str, Any]:
     app.connect('autodoc-process-signature', record_typehints)
     app.connect('object-description-transform', merge_typehints)
@@ -134,4 +154,5 @@ def setup(app: Sphinx) -> Dict[str, Any]:
         'version': 'builtin',
         'parallel_read_safe': True,
         'parallel_write_safe': True,
-    }
+    }
+
