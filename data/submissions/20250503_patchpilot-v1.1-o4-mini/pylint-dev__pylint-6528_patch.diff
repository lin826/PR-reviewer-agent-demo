diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py
index 94af730..f46fd0d 100644
--- a/pylint/lint/expand_modules.py
+++ b/pylint/lint/expand_modules.py
@@ -41,9 +41,25 @@ def get_python_path(filepath: str) -> str:
             return os.getcwd()
 
 
+
 def _is_in_ignore_list_re(element: str, ignore_list_re: list[Pattern[str]]) -> bool:
-    """Determines if the element is matched in a regex ignore-list."""
-    return any(file_pattern.match(element) for file_pattern in ignore_list_re)
+    """Determines if the element is matched in a regex ignore-list.
+
+    The function returns True if any regex pattern matches anywhere within the
+    full path *or* matches any individual path component obtained by splitting
+    the normalised path. This behaviour aligns with the expected semantics of
+    Pylint's ``--ignore-patterns`` and ``--ignore-paths`` options.
+    """
+    norm_components = os.path.normpath(element).split(os.sep)
+    for file_pattern in ignore_list_re:
+        # Match against the entire element first.
+        if file_pattern.search(element):
+            return True
+        # Then match against each individual path component.
+        if any(file_pattern.search(component) for component in norm_components):
+            return True
+    return False
+
 
 
 def expand_modules(
@@ -60,13 +76,17 @@ def expand_modules(
     path = sys.path.copy()
 
     for something in files_or_modules:
+
         basename = os.path.basename(something)
-        if (
-            basename in ignore_list
-            or _is_in_ignore_list_re(os.path.basename(something), ignore_list_re)
+        components = os.path.normpath(something).split(os.sep)
+        skip = (
+            any(comp in ignore_list for comp in components)
+            or any(_is_in_ignore_list_re(comp, ignore_list_re) for comp in components)
             or _is_in_ignore_list_re(something, ignore_list_paths_re)
-        ):
+        )
+        if skip:
             continue
+
         module_path = get_python_path(something)
         additional_search_path = [".", module_path] + path
         if os.path.exists(something):
@@ -126,13 +146,19 @@ def expand_modules(
             for subfilepath in modutils.get_module_files(
                 os.path.dirname(filepath), ignore_list, list_all=is_namespace
             ):
+
                 if filepath == subfilepath:
                     continue
-                if _is_in_ignore_list_re(
-                    os.path.basename(subfilepath), ignore_list_re
-                ) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):
+                components = os.path.normpath(subfilepath).split(os.sep)
+                skip = (
+                    any(comp in ignore_list for comp in components)
+                    or any(_is_in_ignore_list_re(comp, ignore_list_re) for comp in components)
+                    or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re)
+                )
+                if skip:
                     continue
 
+
                 modpath = _modpath_from_file(
                     subfilepath, is_namespace, path=additional_search_path
                 )
@@ -146,4 +172,4 @@ def expand_modules(
                         "basename": modname,
                     }
                 )
-    return result, errors
+    return result, errors
