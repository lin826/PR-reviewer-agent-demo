diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py
index cf1aec2..0f2a5b0 100644
--- a/django/db/migrations/recorder.py
+++ b/django/db/migrations/recorder.py
@@ -56,10 +56,17 @@ class MigrationRecorder:
             tables = self.connection.introspection.table_names(cursor)
         return self.Migration._meta.db_table in tables
 
+
     def ensure_schema(self):
         """Ensure the table exists and has the correct schema."""
+        from django.db import router
+        if router.allow_migrate_model(self.connection.alias, self.Migration) is False:
+            # Router forbids migrations on this database; behave as if the table
+            # doesn't exist and never attempt to create it.
+            return
         # If the table's there, that's fine - we've never changed its schema
         # in the codebase.
+
         if self.has_table():
             return
         # Make the table
@@ -81,16 +88,24 @@ class MigrationRecorder:
             # are applied.
             return {}
 
+
     def record_applied(self, app, name):
         """Record that a migration was applied."""
+        from django.db import router
+        if router.allow_migrate_model(self.connection.alias, self.Migration) is False:
+            return
         self.ensure_schema()
         self.migration_qs.create(app=app, name=name)
 
     def record_unapplied(self, app, name):
         """Record that a migration was unapplied."""
+        from django.db import router
+        if router.allow_migrate_model(self.connection.alias, self.Migration) is False:
+            return
         self.ensure_schema()
         self.migration_qs.filter(app=app, name=name).delete()
 
+
     def flush(self):
         """Delete all migration records. Useful for testing migrations."""
-        self.migration_qs.all().delete()
+        self.migration_qs.all().delete()
