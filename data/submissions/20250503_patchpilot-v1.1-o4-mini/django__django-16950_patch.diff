diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 067f431..509d788 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -975,7 +975,17 @@ class Field(RegisterLookupMixin):
 
     def pre_save(self, model_instance, add):
         """Return field's value just before saving."""
+
         value = getattr(model_instance, self.attname)
+        # Ensure Python-side defaults are honoured even if the value was
+        # cleared later by form handling. When a new object is being
+        # saved (add=True) and the current attribute value is None, fall
+        # back to the field's default, mirroring what the database would
+        # do when a DEFAULT is declared.
+        if add and value is None and self.has_default():
+            value = self.get_default()
+            setattr(model_instance, self.attname, value)
+
         if not connection.features.supports_default_keyword_in_insert:
             from django.db.models.expressions import DatabaseDefault
 
