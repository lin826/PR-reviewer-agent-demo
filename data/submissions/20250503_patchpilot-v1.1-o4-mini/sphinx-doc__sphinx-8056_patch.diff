diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py
index f955f19..bdaef45 100644
--- a/sphinx/ext/napoleon/docstring.py
+++ b/sphinx/ext/napoleon/docstring.py
@@ -391,16 +391,21 @@ class GoogleDocstring:
                                 ) -> List[str]:
         lines = []
         for _name, _type, _desc in fields:
+
             _desc = self._strip_empty(_desc)
             if any(_desc):
                 _desc = self._fix_field_desc(_desc)
-                field = ':%s %s: ' % (field_role, _name)
-                lines.extend(self._format_block(field, _desc))
-            else:
-                lines.append(':%s %s:' % (field_role, _name))
+            # Support comma‑separated parameter names (e.g. ``x1, x2``)
+            split_names = [n.strip() for n in _name.split(',')] if _name else ['']
+            for name in split_names:
+                if any(_desc):
+                    field = ':%s %s: ' % (field_role, name)
+                    lines.extend(self._format_block(field, _desc))
+                else:
+                    lines.append(':%s %s:' % (field_role, name))
+                if _type:
+                    lines.append(':%s %s: %s' % (type_role, name, _type))
 
-            if _type:
-                lines.append(':%s %s: %s' % (type_role, _name, _type))
         return lines + ['']
 
     def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:
@@ -432,25 +437,33 @@ class GoogleDocstring:
         else:
             return [field]
 
+
     def _format_fields(self, field_type: str, fields: List[Tuple[str, str, List[str]]]
                        ) -> List[str]:
         field_type = ':%s:' % field_type.strip()
         padding = ' ' * len(field_type)
-        multi = len(fields) > 1
+        # ``multi`` should be True if more than one final parameter will be
+        # rendered, either because there are several ``fields`` or because a
+        # single ``_name`` contains multiple comma‑separated names.
+        multi = len(fields) > 1 or any(',' in _name for _name, _, _ in fields)
         lines = []  # type: List[str]
         for _name, _type, _desc in fields:
-            field = self._format_field(_name, _type, _desc)
-            if multi:
-                if lines:
-                    lines.extend(self._format_block(padding + ' * ', field))
+            # Support comma‑separated parameter names (e.g. ``x1, x2``)
+            split_names = [n.strip() for n in _name.split(',')] if _name else ['']
+            for name in split_names:
+                field = self._format_field(name, _type, _desc)
+                if multi:
+                    if lines:
+                        lines.extend(self._format_block(padding + ' * ', field))
+                    else:
+                        lines.extend(self._format_block(field_type + ' * ', field))
                 else:
-                    lines.extend(self._format_block(field_type + ' * ', field))
-            else:
-                lines.extend(self._format_block(field_type + ' ', field))
+                    lines.extend(self._format_block(field_type + ' ', field))
         if lines and lines[-1]:
             lines.append('')
         return lines
 
+
     def _get_current_indent(self, peek_ahead: int = 0) -> int:
         line = self._line_iter.peek(peek_ahead + 1)[peek_ahead]
         while line != self._line_iter.sentinel:
