diff --git a/xarray/core/nanops.py b/xarray/core/nanops.py
index 74e25c7..2e40c52 100644
--- a/xarray/core/nanops.py
+++ b/xarray/core/nanops.py
@@ -26,26 +26,33 @@ def _maybe_null_out(result, axis, mask, min_count=1):
     """
     xarray version of pandas.core.nanops._maybe_null_out
     """
-    if hasattr(axis, "__len__"):  # if tuple or list
-        raise ValueError(
-            "min_count is not available for reduction with more than one dimensions."
-        )
+
+    # Normalise axis specification to a tuple of positive integers
+    if axis is None:
+        axes = tuple(range(mask.ndim))
+    else:
+        axes = (axis,) if np.isscalar(axis) else tuple(axis)
+        axes = tuple(ax % mask.ndim for ax in axes)
+
+    # Total number of elements involved in the reduction
+    total_count = int(np.prod([mask.shape[ax] for ax in axes]))
 
     if axis is not None and getattr(result, "ndim", False):
-        null_mask = (mask.shape[axis] - mask.sum(axis) - min_count) < 0
+        null_mask = (total_count - mask.sum(axes) - min_count) < 0
         if null_mask.any():
             dtype, fill_value = dtypes.maybe_promote(result.dtype)
             result = result.astype(dtype)
             result[null_mask] = fill_value
 
     elif getattr(result, "dtype", None) not in dtypes.NAT_TYPES:
-        null_mask = mask.size - mask.sum()
+        null_mask = total_count - mask.sum()
         if null_mask < min_count:
             result = np.nan
 
     return result
 
 
+
 def _nan_argminmax_object(func, fill_value, value, axis=None, **kwargs):
     """ In house nanargmin, nanargmax for object arrays. Always return integer
     type
