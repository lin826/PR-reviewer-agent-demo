diff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py
index 9f5c4dd..8f84534 100644
--- a/sympy/utilities/codegen.py
+++ b/sympy/utilities/codegen.py
@@ -200,9 +200,32 @@ class Routine(object):
         self.name = name
         self.arguments = arguments
         self.results = results
+
         self.local_vars = local_vars
         self.global_vars = global_vars
 
+        # Populate missing dimension information for arrayâ€‘like arguments
+        # (e.g. MatrixSymbol, MatrixBase, MatrixExpr, IndexedBase).  This is
+        # required so that downstream C/Cython code generators declare such
+        # arguments as pointers even when they are not used in the wrapped
+        # expressions.
+        for _arg in self.arguments:
+            if getattr(_arg, "dimensions", None) is None:
+                _name = getattr(_arg, "name", None)
+                if _name is not None and hasattr(_name, "shape"):
+                    _shape = _name.shape
+                    if _shape is not None and hasattr(_shape, "__iter__"):
+                        _dims = []
+                        for _d in _shape:
+                            # Skip if any dimension is unknown
+                            if _d is None:
+                                _dims = []
+                                break
+                            _dims.append((0, _d - 1))
+                        if _dims:
+                            _arg.dimensions = tuple(_dims)
+
+
     def __str__(self):
         return self.__class__.__name__ + "({name!r}, {arguments}, {results}, {local_vars}, {global_vars})".format(**self.__dict__)
 
