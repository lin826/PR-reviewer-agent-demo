diff --git a/setup.py b/setup.py
index a427d5493..978e3d8e0 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/domains/std.py b/sphinx/domains/std.py
index d820cfe5c..c7c22761d 100644
--- a/sphinx/domains/std.py
+++ b/sphinx/domains/std.py
@@ -305,7 +305,7 @@ def make_glossary_term(env: "BuildEnvironment", textnodes: Iterable[Node], index
         term['ids'].append(node_id)
 
     std = cast(StandardDomain, env.get_domain('std'))
-    std.note_object('term', termtext.lower(), node_id, location=term)
+    std.note_object('term', termtext, node_id, location=term)
 
     # add an index entry too
     indexnode = addnodes.index()
@@ -928,15 +928,19 @@ class StandardDomain(Domain):
                           node: pending_xref, contnode: Element) -> Element:
         objtypes = self.objtypes_for_role(typ) or []
         for objtype in objtypes:
-            if (objtype, target) in self.objects:
-                docname, labelid = self.objects[objtype, target]
-                break
-        else:
-            docname, labelid = '', ''
-        if not docname:
-            return None
-        return make_refnode(builder, fromdocname, docname,
-                            labelid, contnode)
+            # For terms, use case-insensitive lookup
+            if objtype == 'term':
+                # Try to find a term with case-insensitive matching
+                for (stored_objtype, stored_target), (docname, labelid) in self.objects.items():
+                    if stored_objtype == 'term' and stored_target.lower() == target.lower():
+                        return make_refnode(builder, fromdocname, docname,
+                                            labelid, contnode)
+            else:
+                if (objtype, target) in self.objects:
+                    docname, labelid = self.objects[objtype, target]
+                    return make_refnode(builder, fromdocname, docname,
+                                        labelid, contnode)
+        return None
 
     def resolve_any_xref(self, env: "BuildEnvironment", fromdocname: str,
                          builder: "Builder", target: str, node: pending_xref,
diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py
index aa1d29eb1..333741d88 100644
--- a/tests/test_domain_std.py
+++ b/tests/test_domain_std.py
@@ -280,6 +280,28 @@ def test_glossary_conflicted_labels(app):
     assert ("foo", "foo", "term", "index", "term-0", -1) in objects
 
 
+def test_glossary_case_sensitivity(app, status, warning):
+    # Terms with different cases should be allowed
+    text = (".. glossary::\n"
+            "\n"
+            "   MySQL\n"
+            "       The MySQL database system.\n"
+            "\n"
+            "   mysql\n"
+            "       A command-line tool for MySQL.\n")
+    restructuredtext.parse(app, text, "case_sensitivity")
+    
+    # Should not generate duplicate term warnings
+    assert "duplicate term description" not in warning.getvalue()
+    
+    # Both terms should be registered
+    objects = list(app.env.get_domain("std").get_objects())
+    mysql_objects = [obj for obj in objects if obj[0] in ('MySQL', 'mysql')]
+    assert len(mysql_objects) == 2
+    assert ("MySQL", "MySQL", "term", "case_sensitivity", "term-MySQL", -1) in objects
+    assert ("mysql", "mysql", "term", "case_sensitivity", "term-mysql", -1) in objects
+
+
 def test_cmdoption(app):
     text = (".. program:: ls\n"
             "\n"
diff --git a/tox.ini b/tox.ini
index d9f040544..bf39854b6 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ extras =
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
