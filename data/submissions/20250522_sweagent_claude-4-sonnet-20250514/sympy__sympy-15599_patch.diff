diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..d0c50d25da
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+
+from sympy import Symbol, Mod, sympify
+
+# Test the issue described in the PR
+i = Symbol('i', integer=True)
+
+print("Testing Mod(3*i, 2):")
+result = Mod(3*i, 2)
+print(f"Current result: {result}")
+print(f"Expected result: Mod(i, 2)")
+print(f"Are they equal? {result == Mod(i, 2)}")
+
+print("\nTesting sympify(3*k%2):")
+k = Symbol('k', integer=True)
+result2 = sympify(3*k % 2)
+print(f"Current result: {result2}")
+print(f"Expected result: Mod(k, 2)")
+print(f"Are they equal? {result2 == Mod(k, 2)}")
+
+print("\nTesting other cases:")
+# Test some other cases to make sure we don't break anything
+print(f"Mod(4*i, 4) = {Mod(4*i, 4)}")  # Should be 0
+print(f"Mod(6*i, 3) = {Mod(6*i, 3)}")  # Should be 0
+print(f"Mod(5*i, 3) = {Mod(5*i, 3)}")  # Should be Mod(2*i, 3)
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..1cec2855f5
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,40 @@
+#!/usr/bin/env python3
+
+from sympy import Symbol, Mod, sympify, pi
+from sympy.abc import x, y
+
+# Test the main issue
+i = Symbol('i', integer=True)
+k = Symbol('k', integer=True)
+
+print("=== Main issue tests ===")
+print(f"Mod(3*i, 2) = {Mod(3*i, 2)}")  # Should be Mod(i, 2)
+print(f"sympify(3*k%2) = {sympify(3*k % 2)}")  # Should be Mod(k, 2)
+
+print("\n=== Edge cases ===")
+# Test various coefficient cases
+print(f"Mod(2*i, 2) = {Mod(2*i, 2)}")  # Should be 0
+print(f"Mod(4*i, 2) = {Mod(4*i, 2)}")  # Should be 0
+print(f"Mod(5*i, 2) = {Mod(5*i, 2)}")  # Should be Mod(i, 2)
+print(f"Mod(6*i, 4) = {Mod(6*i, 4)}")  # Should be Mod(2*i, 4)
+print(f"Mod(9*i, 3) = {Mod(9*i, 3)}")  # Should be 0
+print(f"Mod(10*i, 3) = {Mod(10*i, 3)}")  # Should be Mod(i, 3)
+
+print("\n=== Multiple variables ===")
+j = Symbol('j', integer=True)
+print(f"Mod(3*i*j, 2) = {Mod(3*i*j, 2)}")  # Should be Mod(i*j, 2)
+print(f"Mod(6*i*j, 4) = {Mod(6*i*j, 4)}")  # Should be Mod(2*i*j, 4)
+
+print("\n=== Non-integer symbols ===")
+a = Symbol('a')  # Not specified as integer
+print(f"Mod(3*a, 2) = {Mod(3*a, 2)}")  # Should still work
+
+print("\n=== Existing functionality (should not change) ===")
+print(f"Mod(4*i, 4) = {Mod(4*i, 4)}")  # Should be 0
+print(f"(3*i*x) % (2*i*y) = {(3*i*x) % (2*i*y)}")  # Should be i*Mod(3*x, 2*y)
+print(f"(-2*pi) % (3*pi) = {(-2*pi) % (3*pi)}")  # Should be pi
+print(f"(2*x + 2) % (x + 1) = {(2*x + 2) % (x + 1)}")  # Should be 0
+
+print("\n=== Complex cases ===")
+print(f"Mod(15*i, 6) = {Mod(15*i, 6)}")  # Should be Mod(3*i, 6)
+print(f"Mod(21*i, 14) = {Mod(21*i, 14)}")  # Should be Mod(7*i, 14)
\ No newline at end of file
diff --git a/test_simple.py b/test_simple.py
new file mode 100644
index 0000000000..a350319191
--- /dev/null
+++ b/test_simple.py
@@ -0,0 +1,39 @@
+#!/usr/bin/env python3
+
+from sympy import Symbol, Mod, sympify, pi
+from sympy.abc import x, y
+
+# Test the main issue
+i = Symbol('i', integer=True)
+k = Symbol('k', integer=True)
+
+print("=== Main issue tests ===")
+print(f"Mod(3*i, 2) = {Mod(3*i, 2)}")  # Should be Mod(i, 2)
+print(f"sympify(3*k%2) = {sympify(3*k % 2)}")  # Should be Mod(k, 2)
+
+print("\n=== Edge cases ===")
+# Test various coefficient cases
+print(f"Mod(2*i, 2) = {Mod(2*i, 2)}")  # Should be 0
+print(f"Mod(4*i, 2) = {Mod(4*i, 2)}")  # Should be 0
+print(f"Mod(5*i, 2) = {Mod(5*i, 2)}")  # Should be Mod(i, 2)
+print(f"Mod(6*i, 4) = {Mod(6*i, 4)}")  # Should be Mod(2*i, 4)
+print(f"Mod(9*i, 3) = {Mod(9*i, 3)}")  # Should be 0
+print(f"Mod(10*i, 3) = {Mod(10*i, 3)}")  # Should be Mod(i, 3)
+
+print("\n=== Multiple variables (simple) ===")
+j = Symbol('j', integer=True)
+print(f"Mod(3*i, 2) = {Mod(3*i, 2)}")  # Should be Mod(i, 2)
+
+print("\n=== Non-integer symbols ===")
+a = Symbol('a')  # Not specified as integer
+print(f"Mod(3*a, 2) = {Mod(3*a, 2)}")  # Should still work
+
+print("\n=== Existing functionality (should not change) ===")
+print(f"Mod(4*i, 4) = {Mod(4*i, 4)}")  # Should be 0
+print(f"(3*i*x) % (2*i*y) = {(3*i*x) % (2*i*y)}")  # Should be i*Mod(3*x, 2*y)
+print(f"(-2*pi) % (3*pi) = {(-2*pi) % (3*pi)}")  # Should be pi
+print(f"(2*x + 2) % (x + 1) = {(2*x + 2) % (x + 1)}")  # Should be 0
+
+print("\n=== Complex cases ===")
+print(f"Mod(15*i, 6) = {Mod(15*i, 6)}")  # Should be Mod(3*i, 6)
+print(f"Mod(21*i, 14) = {Mod(21*i, 14)}")  # Should be Mod(7*i, 14)
\ No newline at end of file
