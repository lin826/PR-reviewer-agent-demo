diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py
index 4c0e7e2a56..501e86ef80 100644
--- a/django/contrib/admindocs/utils.py
+++ b/django/contrib/admindocs/utils.py
@@ -34,7 +34,12 @@ def trim_docstring(docstring):
         return ''
     # Convert tabs to spaces and split into lines
     lines = docstring.expandtabs().splitlines()
-    indent = min(len(line) - len(line.lstrip()) for line in lines if line.lstrip())
+    # Determine minimum indentation (first line doesn't count):
+    if len(lines) > 1:
+        indents = [len(line) - len(line.lstrip()) for line in lines[1:] if line.lstrip()]
+        indent = min(indents) if indents else 0
+    else:
+        indent = 0
     trimmed = [lines[0].lstrip()] + [line[indent:].rstrip() for line in lines[1:]]
     return "\n".join(trimmed).strip()
 
diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py
index 17ea912015..be5234e178 100644
--- a/tests/admin_docs/test_utils.py
+++ b/tests/admin_docs/test_utils.py
@@ -106,6 +106,31 @@ class TestUtils(AdminDocsSimpleTestCase):
         self.assertEqual(parse_rst('`title`', 'filter'), markup % 'filters/#title')
         self.assertEqual(parse_rst('`title`', 'tag'), markup % 'tags/#title')
 
+    def test_trim_docstring_first_line_content(self):
+        """
+        trim_docstring should handle docstrings with content on the first line
+        correctly by excluding the first line from indentation calculation.
+        """
+        # Test case from GitHub issue: docstring with content on first line
+        docstring_with_first_line_content = '''This is a test function.
+    
+    This is the second line with some indentation.
+        This line has more indentation.
+    '''
+        
+        result = trim_docstring(docstring_with_first_line_content)
+        expected = (
+            'This is a test function.\n\n'
+            'This is the second line with some indentation.\n'
+            '    This line has more indentation.'
+        )
+        self.assertEqual(result, expected)
+        
+        # Test the specific case from the GitHub issue
+        simple_docstring = 'test tests something.\n    '
+        result_simple = trim_docstring(simple_docstring)
+        self.assertEqual(result_simple, 'test tests something.')
+
     def test_publish_parts(self):
         """
         Django shouldn't break the default role for interpreted text
