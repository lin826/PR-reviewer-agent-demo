diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py
index c279f35f87..046cc4043f 100644
--- a/astropy/timeseries/core.py
+++ b/astropy/timeseries/core.py
@@ -75,10 +75,23 @@ class BaseTimeSeries(QTable):
                                  .format(self.__class__.__name__, required_columns[0], plural))
 
             elif self.colnames[:len(required_columns)] != required_columns:
-
-                raise ValueError("{} object is invalid - expected '{}' "
-                                 "as the first column{} but found '{}'"
-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))
+                # Check if columns are missing or in wrong order
+                missing_columns = [col for col in required_columns if col not in self.colnames]
+                
+                if missing_columns:
+                    # Some required columns are missing
+                    missing_plural = 's' if len(missing_columns) > 1 else ''
+                    raise ValueError("{} object is invalid - missing required column{}: '{}'"
+                                    .format(self.__class__.__name__, 
+                                            missing_plural, 
+                                            "', '".join(missing_columns)))
+                else:
+                    # Required columns exist but in wrong order
+                    raise ValueError("{} object is invalid - required column{} in wrong order: "
+                                    "expected '{}', found '{}'"
+                                    .format(self.__class__.__name__, plural,
+                                            "', '".join(required_columns),
+                                            "', '".join(self.colnames[:len(required_columns)])))
 
             if (self._required_columns_relax
                     and self._required_columns == self.colnames[:len(self._required_columns)]):
diff --git a/astropy/timeseries/tests/test_sampled.py b/astropy/timeseries/tests/test_sampled.py
index bcc06d929e..07ccee51cc 100644
--- a/astropy/timeseries/tests/test_sampled.py
+++ b/astropy/timeseries/tests/test_sampled.py
@@ -34,8 +34,8 @@ def test_empty_initialization_invalid():
     ts = TimeSeries()
     with pytest.raises(ValueError) as exc:
         ts['flux'] = [1, 2, 3]
-    assert exc.value.args[0] == ("TimeSeries object is invalid - expected "
-                                 "'time' as the first column but found 'flux'")
+    assert "TimeSeries object is invalid" in exc.value.args[0]
+    assert "missing required column: 'time'" in exc.value.args[0]
 
 
 def test_initialize_only_time():
@@ -366,34 +366,38 @@ def test_required_columns():
 
     with pytest.raises(ValueError) as exc:
         ts.copy().add_column(Column([3, 4, 5], name='c'), index=0)
-    assert exc.value.args[0] == ("TimeSeries object is invalid - expected "
-                                 "'time' as the first column but found 'c'")
+    assert "TimeSeries object is invalid" in exc.value.args[0]
+    assert "required column" in exc.value.args[0]
+    assert "expected 'time'" in exc.value.args[0]
+    assert "found 'c'" in exc.value.args[0]
 
     with pytest.raises(ValueError) as exc:
         ts.copy().add_columns([Column([3, 4, 5], name='d'),
                                Column([3, 4, 5], name='e')], indexes=[0, 1])
-    assert exc.value.args[0] == ("TimeSeries object is invalid - expected "
-                                 "'time' as the first column but found 'd'")
+    assert "TimeSeries object is invalid" in exc.value.args[0]
+    assert "required column" in exc.value.args[0]
+    assert "expected 'time'" in exc.value.args[0]
+    assert "found 'd'" in exc.value.args[0]
 
     with pytest.raises(ValueError) as exc:
         ts.copy().keep_columns(['a', 'b'])
-    assert exc.value.args[0] == ("TimeSeries object is invalid - expected "
-                                 "'time' as the first column but found 'a'")
+    assert "TimeSeries object is invalid" in exc.value.args[0]
+    assert "missing required column: 'time'" in exc.value.args[0]
 
     with pytest.raises(ValueError) as exc:
         ts.copy().remove_column('time')
-    assert exc.value.args[0] == ("TimeSeries object is invalid - expected "
-                                 "'time' as the first column but found 'a'")
+    assert "TimeSeries object is invalid" in exc.value.args[0]
+    assert "missing required column: 'time'" in exc.value.args[0]
 
     with pytest.raises(ValueError) as exc:
         ts.copy().remove_columns(['time', 'a'])
-    assert exc.value.args[0] == ("TimeSeries object is invalid - expected "
-                                 "'time' as the first column but found 'b'")
+    assert "TimeSeries object is invalid" in exc.value.args[0]
+    assert "missing required column: 'time'" in exc.value.args[0]
 
     with pytest.raises(ValueError) as exc:
         ts.copy().rename_column('time', 'banana')
-    assert exc.value.args[0] == ("TimeSeries object is invalid - expected "
-                                 "'time' as the first column but found 'banana'")
+    assert "TimeSeries object is invalid" in exc.value.args[0]
+    assert "missing required column: 'time'" in exc.value.args[0]
 
 
 @pytest.mark.parametrize('cls', [BoxLeastSquares, LombScargle])
