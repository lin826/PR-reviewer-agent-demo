diff --git a/requests/models.py b/requests/models.py
index e7d292d5..6a85c09b 100644
--- a/requests/models.py
+++ b/requests/models.py
@@ -398,6 +398,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
         # non-ASCII characters. This allows users to automatically get the correct IDNA
         # behaviour. For strings containing only ASCII characters, we need to also verify
         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.
+        # We also need to validate ASCII hostnames for empty labels (e.g., ".example.com").
         if not unicode_is_ascii(host):
             try:
                 host = self._get_idna_encoded_host(host)
@@ -405,6 +406,15 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
                 raise InvalidURL('URL has an invalid label.')
         elif host.startswith(u'*'):
             raise InvalidURL('URL has an invalid label.')
+        else:
+            # For ASCII hostnames, check for empty labels which are invalid in IDNA
+            # Empty labels occur when there are leading dots, trailing dots, or consecutive dots
+            if host.startswith('.') or host.endswith('.') or '..' in host:
+                try:
+                    # Force IDNA validation even for ASCII hostnames with suspicious patterns
+                    host = self._get_idna_encoded_host(host)
+                except UnicodeError:
+                    raise InvalidURL('URL has an invalid label.')
 
         # Carefully reconstruct the network location
         netloc = auth or ''
