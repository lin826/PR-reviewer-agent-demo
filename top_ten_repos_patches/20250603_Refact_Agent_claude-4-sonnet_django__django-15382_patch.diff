diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 81f8f79c71..35bcb5c61a 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1210,15 +1210,22 @@ class Exists(Subquery):
         return clone
 
     def as_sql(self, compiler, connection, template=None, **extra_context):
-        query = self.query.exists(using=connection.alias)
-        sql, params = super().as_sql(
-            compiler,
-            connection,
-            template=template,
-            query=query,
-            **extra_context,
-        )
-        if self.negated:
+        from django.core.exceptions import EmptyResultSet
+        try:
+            query = self.query.exists(using=connection.alias)
+            sql, params = super().as_sql(
+                compiler,
+                connection,
+                template=template,
+                query=query,
+                **extra_context,
+            )
+        except EmptyResultSet:
+            # Handle empty subquery case
+            # EXISTS(empty) = FALSE, ~EXISTS(empty) = TRUE
+            sql = '1' if self.negated else '0'
+            params = []
+        if self.negated and sql not in ('0', '1'):
             sql = 'NOT {}'.format(sql)
         return sql, params
 
diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py
index 5cf9dd1ea5..9ef1c7c631 100644
--- a/tests/expressions/tests.py
+++ b/tests/expressions/tests.py
@@ -1905,6 +1905,93 @@ class ExistsTests(TestCase):
         )
         self.assertNotIn('ORDER BY', captured_sql)
 
+    def test_exists_empty_queryset_false(self):
+        """Test that Exists(empty_queryset) evaluates to FALSE."""
+        from datetime import datetime, timedelta
+        Experiment.objects.create(
+            name='test', 
+            estimated_time=timedelta(hours=1),
+            assigned=datetime.now().date(),
+            completed=datetime.now().date(),
+            start=datetime.now(),
+            end=datetime.now()
+        )
+        qs = Experiment.objects.filter(Exists(Experiment.objects.none()))
+        self.assertEqual(list(qs), [])
+        # Check that the query contains '0' (FALSE)
+        self.assertIn('0', str(qs.query))
+
+    def test_not_exists_empty_queryset_true(self):
+        """Test that ~Exists(empty_queryset) evaluates to TRUE."""
+        from datetime import datetime, timedelta
+        exp1 = Experiment.objects.create(
+            name='test', 
+            estimated_time=timedelta(hours=1),
+            assigned=datetime.now().date(),
+            completed=datetime.now().date(),
+            start=datetime.now(),
+            end=datetime.now()
+        )
+        exp2 = Experiment.objects.create(
+            name='other', 
+            estimated_time=timedelta(hours=2),
+            assigned=datetime.now().date(),
+            completed=datetime.now().date(),
+            start=datetime.now(),
+            end=datetime.now()
+        )
+        qs = Experiment.objects.filter(~Exists(Experiment.objects.none()))
+        self.assertEqual(len(list(qs)), 2)
+        # Check that the query contains '1' (TRUE)
+        self.assertIn('1', str(qs.query))
+
+    def test_not_exists_empty_queryset_with_filter(self):
+        """Test that ~Exists(empty_queryset) with additional filter works correctly."""
+        from datetime import datetime, timedelta
+        exp1 = Experiment.objects.create(
+            name='test', 
+            estimated_time=timedelta(hours=1),
+            assigned=datetime.now().date(),
+            completed=datetime.now().date(),
+            start=datetime.now(),
+            end=datetime.now()
+        )
+        exp2 = Experiment.objects.create(
+            name='other', 
+            estimated_time=timedelta(hours=2),
+            assigned=datetime.now().date(),
+            completed=datetime.now().date(),
+            start=datetime.now(),
+            end=datetime.now()
+        )
+        qs = Experiment.objects.filter(~Exists(Experiment.objects.none()), name='test')
+        result = list(qs)
+        self.assertEqual(len(result), 1)
+        self.assertEqual(result[0].name, 'test')
+        # Check that both conditions are in the query
+        query_str = str(qs.query)
+        self.assertIn('1', query_str)  # ~Exists(empty) = TRUE
+        self.assertIn('name', query_str)  # name filter
+
+    def test_exists_empty_queryset_with_filter(self):
+        """Test that Exists(empty_queryset) with additional filter works correctly."""
+        from datetime import datetime, timedelta
+        exp1 = Experiment.objects.create(
+            name='test', 
+            estimated_time=timedelta(hours=1),
+            assigned=datetime.now().date(),
+            completed=datetime.now().date(),
+            start=datetime.now(),
+            end=datetime.now()
+        )
+        qs = Experiment.objects.filter(Exists(Experiment.objects.none()), name='test')
+        result = list(qs)
+        self.assertEqual(len(result), 0)
+        # Check that both conditions are in the query
+        query_str = str(qs.query)
+        self.assertIn('0', query_str)  # Exists(empty) = FALSE
+        self.assertIn('name', query_str)  # name filter
+
 
 class FieldTransformTests(TestCase):
 
