diff --git a/django/db/models/base.py b/django/db/models/base.py
index 55b1691166..011a714993 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -871,8 +871,15 @@ class Model(metaclass=ModelBase):
             returning_fields = meta.db_returning_fields
             results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
             if results:
-                for value, field in zip(results[0], returning_fields):
-                    setattr(self, field.attname, value)
+                # Pick the default connection object for this alias
+                conn = connections[using or DEFAULT_DB_ALIAS]
+                # Only the first row matters for a single-object save
+                row = results[0]
+                for val, field in zip(row, returning_fields):
+                    # run the field's from_db_value converters if any
+                    for conv in field.get_db_converters(conn):
+                        val = conv(val, None, conn)
+                    setattr(self, field.attname, val)
         return updated
 
     def _do_update(self, base_qs, using, pk_val, values, update_fields, forced_update):
diff --git a/django/db/models/query.py b/django/db/models/query.py
index 387deca527..bbdb5ae0f1 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -502,10 +502,16 @@ class QuerySet:
                 returned_columns = self._batched_insert(
                     objs_with_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,
                 )
+                # Get the connection for applying converters
+                conn = connections[self.db]
                 for obj_with_pk, results in zip(objs_with_pk, returned_columns):
                     for result, field in zip(results, opts.db_returning_fields):
                         if field != opts.pk:
-                            setattr(obj_with_pk, field.attname, result)
+                            # Apply field's database converters
+                            val = result
+                            for conv in field.get_db_converters(conn):
+                                val = conv(val, None, conn)
+                            setattr(obj_with_pk, field.attname, val)
                 for obj_with_pk in objs_with_pk:
                     obj_with_pk._state.adding = False
                     obj_with_pk._state.db = self.db
@@ -516,9 +522,15 @@ class QuerySet:
                 )
                 if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:
                     assert len(returned_columns) == len(objs_without_pk)
+                # Get the connection for applying converters
+                conn = connections[self.db]
                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
                     for result, field in zip(results, opts.db_returning_fields):
-                        setattr(obj_without_pk, field.attname, result)
+                        # Apply field's database converters
+                        val = result
+                        for conv in field.get_db_converters(conn):
+                            val = conv(val, None, conn)
+                        setattr(obj_without_pk, field.attname, val)
                     obj_without_pk._state.adding = False
                     obj_without_pk._state.db = self.db
 
