diff --git b/sphinx/ext/autodoc/mock.py a/sphinx/ext/autodoc/mock.py
index 0b55b3fa4..b562f47fd 100644
--- b/sphinx/ext/autodoc/mock.py
+++ a/sphinx/ext/autodoc/mock.py
@@ -38,15 +38,11 @@ class _MockObject:
                                       superclass=superclass, attributes=args[2])
 
         return super().__new__(cls)
 
     def __init__(self, *args: Any, **kwargs: Any) -> None:
-        # Set __qualname__ based on the class name if available
-        if hasattr(self.__class__, '__name__') and self.__class__.__name__ != '_MockObject':
-            self.__qualname__ = self.__class__.__name__
-        else:
-            self.__qualname__ = ''
+        self.__qualname__ = ''
 
     def __len__(self) -> int:
         return 0
 
     def __contains__(self, key: str) -> bool:
diff --git b/tests/test_ext_autodoc_mock.py a/tests/test_ext_autodoc_mock.py
index 5d1f0f892..497bd8a6b 100644
--- b/tests/test_ext_autodoc_mock.py
+++ a/tests/test_ext_autodoc_mock.py
@@ -14,11 +14,10 @@ from importlib import import_module
 from typing import TypeVar
 
 import pytest
 
 from sphinx.ext.autodoc.mock import _MockModule, _MockObject, ismock, mock, undecorate
-from sphinx.util.typing import restify
 
 
 def test_MockModule():
     mock = _MockModule('mocked_module')
     assert isinstance(mock.some_attr, _MockObject)
@@ -149,45 +148,5 @@ def test_ismock():
         assert ismock(mod1.Class) is True
         assert ismock(Inherited) is False
 
         assert ismock(mod2) is False
         assert ismock(mod2.Sphinx) is False
-
-
-def test_mock_qualname_for_restify():
-    """Test that mock objects have correct __qualname__ for restify function.
-    
-    This test ensures that when a class inherits from a mocked class,
-    the base class is correctly displayed in documentation as 'module.Class'
-    instead of just 'module.'.
-    
-    See: https://github.com/sphinx-doc/sphinx/issues/9658
-    """
-    with mock(['torch']):
-        import torch
-        
-        # Create a class that inherits from a mocked class
-        class DeepKernel(torch.nn.Module):
-            """A test class that inherits from torch.nn.Module."""
-            pass
-        
-        # Test the base class restification
-        bases = list(DeepKernel.__bases__)
-        assert len(bases) == 1
-        
-        base_class = bases[0]
-        restified = restify(base_class)
-        
-        # This should be the correct result after the fix
-        expected = ':py:class:`torch.nn.Module`'
-        assert restified == expected
-        
-        # Also test direct mock object restification
-        mock_obj = torch.nn.Module
-        direct_restified = restify(mock_obj)
-        
-        # This should also be correct after the fix
-        assert direct_restified == expected
-        
-        # Test that the mock object has the correct __qualname__
-        assert mock_obj.__qualname__ == 'Module'
-        assert base_class.__qualname__ == 'Module'
