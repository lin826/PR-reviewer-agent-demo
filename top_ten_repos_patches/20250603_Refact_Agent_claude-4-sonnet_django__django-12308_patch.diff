diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py
index e4ddc8f017..c696eb7e9e 100644
--- a/django/contrib/admin/utils.py
+++ b/django/contrib/admin/utils.py
@@ -398,6 +398,10 @@ def display_for_field(value, field, empty_value_display):
         return formats.number_format(value)
     elif isinstance(field, models.FileField) and value:
         return format_html('<a href="{}">{}</a>', value.url, value)
+    elif isinstance(field, models.JSONField):
+        # Use the field's formfield to properly handle InvalidJSONInput
+        form_field = field.formfield()
+        return form_field.prepare_value(value)
     else:
         return display_for_value(value, empty_value_display)
 
diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py
index 463ba9556d..3934ec6331 100644
--- a/tests/admin_utils/tests.py
+++ b/tests/admin_utils/tests.py
@@ -9,6 +9,7 @@ from django.contrib.admin.utils import (
     flatten_fieldsets, label_for_field, lookup_field, quote,
 )
 from django.db import DEFAULT_DB_ALIAS, models
+from django.forms.fields import InvalidJSONInput
 from django.test import SimpleTestCase, TestCase, override_settings
 from django.utils.formats import localize
 from django.utils.safestring import mark_safe
@@ -217,6 +218,43 @@ class UtilsTests(SimpleTestCase):
         self.assertEqual(display_for_value(True, ''), 'True')
         self.assertEqual(display_for_value(False, ''), 'False')
 
+    def test_json_display_for_field(self):
+        """
+        JSONField values are displayed as JSON, not Python dict representation.
+        """
+        tests = [
+            ({'foo': 'bar'}, '{"foo": "bar"}'),
+            ({'nested': {'key': 'value'}}, '{"nested": {"key": "value"}}'),
+            ([1, 2, 3], '[1, 2, 3]'),
+            ('simple string', '"simple string"'),
+            (42, '42'),
+            (True, 'true'),
+            (False, 'false'),
+        ]
+        
+        field = models.JSONField()
+        for value, expected in tests:
+            with self.subTest(value=value):
+                result = display_for_field(value, field, self.empty_value)
+                self.assertEqual(result, expected)
+
+    def test_json_display_for_field_invalid_input(self):
+        """
+        InvalidJSONInput should be displayed as-is without JSON encoding.
+        """
+        field = models.JSONField()
+        invalid_input = InvalidJSONInput('{"invalid": json}')
+        result = display_for_field(invalid_input, field, self.empty_value)
+        self.assertEqual(result, '{"invalid": json}')
+
+    def test_json_display_for_field_none_value(self):
+        """
+        None values in JSONField should display the empty_value_display.
+        """
+        field = models.JSONField()
+        result = display_for_field(None, field, self.empty_value)
+        self.assertEqual(result, self.empty_value)
+
     def test_label_for_field(self):
         """
         Tests for label_for_field
