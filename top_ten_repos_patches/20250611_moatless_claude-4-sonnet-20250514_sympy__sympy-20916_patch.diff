--- a/verify_fix.py
+++ b/verify_fix.py
@@ -0,0 +1,65 @@
+#!/usr/bin/env python3
+"""Verification that the Unicode Greek letter subscript issue has been addressed."""
+
+import sympy as sp
+from sympy.printing.pretty.pretty_symbology import pretty_use_unicode
+from sympy import symbols, Matrix
+
+# Enable unicode pretty printing
+pretty_use_unicode(True)
+
+print("=== Verification of Greek Letter Subscript Issue Fix ===\n")
+
+print("Issue description:")
+print("- Good: [ -t₀⋅w₀   -t₁⋅w₀   -t₂⋅w₀]")
+print("- Bad:  [ -t₀⋅ω0   -t₁⋅ω0   -t₂⋅ω0]")
+print("  (Note: ω0 means omega with regular 0, not subscripted)")
+print()
+
+# Test the exact scenario from the issue
+t0, t1, t2 = symbols('t_0 t_1 t_2')
+w0 = symbols('w_0')  # Latin letter
+omega0 = symbols('omega_0')  # Greek letter
+
+# Test matrix expressions
+matrix_w = Matrix([[-t0*w0, -t1*w0, -t2*w0]])
+matrix_omega = Matrix([[-t0*omega0, -t1*omega0, -t2*omega0]])
+
+print("Current behavior:")
+print(f"Latin w matrix:  {sp.pretty(matrix_w)}")
+print(f"Greek ω matrix:  {sp.pretty(matrix_omega)}")
+print()
+
+# Check if subscripts are properly formatted
+w_result = sp.pretty(matrix_w)
+omega_result = sp.pretty(matrix_omega)
+
+w_has_subscripts = '₀' in w_result and '_0' not in w_result
+omega_has_subscripts = '₀' in omega_result and '_0' not in omega_result
+
+print("Analysis:")
+print(f"✓ Latin w uses proper subscripts: {w_has_subscripts}")
+print(f"✓ Greek ω uses proper subscripts: {omega_has_subscripts}")
+print()
+
+if w_has_subscripts and omega_has_subscripts:
+    print("🎉 ISSUE RESOLVED: Both Latin and Greek letters now use proper Unicode subscripts!")
+    print("   No more 'ω0' (omega with regular 0)")
+    print("   Now properly shows 'ω₀' (omega with subscript 0)")
+else:
+    print("❌ Issue still exists")
+
+print("\n=== Test Coverage Added ===")
+print("Added test_upretty_greek_subscripts() to ensure:")
+print("- Greek letters (alpha, omega, tau, sigma, etc.) use proper subscripts")
+print("- Matrix expressions with Greek subscripts render correctly")
+print("- No regression to fallback format with regular digits")
+
+print(f"\n=== Individual Symbol Tests ===")
+test_symbols = ['alpha_0', 'omega_0', 'tau_0', 'sigma_0']
+for sym_name in test_symbols:
+    sym = symbols(sym_name)
+    result = sp.pretty(sym)
+    has_proper_subscript = '₀' in result and '_0' not in result
+    status = "✓" if has_proper_subscript else "✗"
+    print(f"{status} {sym_name}: {result}")
