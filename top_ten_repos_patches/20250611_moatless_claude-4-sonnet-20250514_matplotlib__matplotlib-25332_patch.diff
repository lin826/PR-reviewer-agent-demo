--- a/lib/matplotlib/figure.py
+++ b/lib/matplotlib/figure.py
@@ -3174,11 +3174,27 @@
         from matplotlib import _pylab_helpers
         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():
             state['_restore_to_pylab'] = True
+
+        # Handle _align_label_groups which contains Grouper objects with 
+        # unpickleable weak references. Save the group information as
+        # regular lists that can be pickled.
+        if '_align_label_groups' in state:
+            align_groups = {}
+            for key, grouper in state['_align_label_groups'].items():
+                # Extract all groups from the grouper as lists of axes
+                align_groups[key] = list(grouper)
+            state['_align_label_groups_data'] = align_groups
+            # Remove the unpickleable grouper objects
+            state.pop('_align_label_groups')
+
         return state
 
     def __setstate__(self, state):
         version = state.pop('__mpl_version__')
         restore_to_pylab = state.pop('_restore_to_pylab', False)
+        
+        # Handle _align_label_groups restoration
+        align_groups_data = state.pop('_align_label_groups_data', None)
 
         if version != mpl.__version__:
             _api.warn_external(
@@ -3186,6 +3202,23 @@
                 f"is unlikely to function correctly.")
 
         self.__dict__ = state
+
+        # Restore _align_label_groups with new Grouper objects
+        if align_groups_data is None:
+            # If there's no saved group data, initialize with empty groupers
+            self._align_label_groups = {"x": cbook.Grouper(), "y": cbook.Grouper()}
+        else:
+            # Restore the groupers and re-establish the groups
+            from . import cbook
+            self._align_label_groups = {"x": cbook.Grouper(), "y": cbook.Grouper()}
+            for key, groups in align_groups_data.items():
+                grouper = self._align_label_groups[key]
+                for group in groups:
+                    # Re-establish each group by joining all axes in the group
+                    if len(group) >= 1:
+                        # Join all axes in this group together
+                        # For single-item groups, this still adds the item to the grouper
+                        grouper.join(*group)
 
         # re-initialise some of the unstored state information
         FigureCanvasBase(self)  # Set self.canvas.
