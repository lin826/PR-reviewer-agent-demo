diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py
index 5f2e64761e..5d13ea0fe9 100644
--- a/django/core/management/__init__.py
+++ b/django/core/management/__init__.py
@@ -128,16 +128,30 @@ def call_command(command_name, *args, **options):
                     yield from get_actions(sub_opt)
             else:
                 yield opt
 
     parser_actions = list(get_actions(parser))
+    
+    def is_action_in_required_mutually_exclusive_group(action, parser):
+        """Check if an action is part of a required mutually exclusive group."""
+        for group in parser._mutually_exclusive_groups:
+            if group.required and action in group._group_actions:
+                return True
+        return False
+    
     # Any required arguments which are passed in via **options must be passed
     # to parse_args().
-    parse_args += [
-        '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])
-        for opt in parser_actions if opt.required and opt.dest in options
-    ]
+    for opt in parser_actions:
+        if ((opt.required or is_action_in_required_mutually_exclusive_group(opt, parser)) 
+            and opt.dest in options):
+            # Handle different action types appropriately
+            if opt.nargs == 0:
+                # For store_true, store_false, store_const actions, just pass the flag
+                parse_args.append(min(opt.option_strings))
+            else:
+                # For other actions, pass flag with value
+                parse_args.append('{}={}'.format(min(opt.option_strings), arg_options[opt.dest]))
     defaults = parser.parse_args(args=parse_args)
     defaults = dict(defaults._get_kwargs(), **arg_options)
     # Raise an error if any unknown options were passed.
     stealth_options = set(command.base_stealth_options + command.stealth_options)
     dest_parameters = {action.dest for action in parser_actions}
