diff --git a/Dockerfile b/Dockerfile
index 2667145da..4e198b210 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,7 +1,30 @@
-FROM python:3.10.0-alpine3.15
 
-COPY ./ /tmp/build
-WORKDIR /tmp/build
-RUN python setup.py install && rm -rf /tmp/build
+FROM swebench/sweb.eval.x86_64.pylint-dev_1776_pylint-6528:latest
 
-ENTRYPOINT ["pylint"]
+WORKDIR /install
+# Install docker cli
+# Add Docker's official GPG key:
+RUN apt-get update
+RUN apt-get install -y ca-certificates curl
+RUN install -m 0755 -d /etc/apt/keyrings
+RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
+RUN chmod a+r /etc/apt/keyrings/docker.asc
+
+# Add the repository to Apt sources:
+RUN echo   "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu   $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" |   tee /etc/apt/sources.list.d/docker.list > /dev/null
+RUN apt-get update && apt-get install -y docker-ce-cli
+
+# Install required dependencies for SWE-bench (verification)
+RUN apt-get install -y -V ca-certificates lsb-release wget
+RUN wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
+RUN apt-get update
+RUN apt-get install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
+
+# Install SWE repo
+RUN git clone https://github.com/princeton-nlp/SWE-bench.git /SWE-bench
+WORKDIR /SWE-bench
+RUN apt-get install -y python3-venv
+RUN python3 -m venv .venv
+RUN . .venv/bin/activate      &&     pip install --upgrade pip &&     pip install . 
+
+WORKDIR /testbed
diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py
index b20cd873c..10bd7c0eb 100644
--- a/pylint/lint/expand_modules.py
+++ b/pylint/lint/expand_modules.py
@@ -43,7 +43,7 @@ def get_python_path(filepath: str) -> str:
 
 def _is_in_ignore_list_re(element: str, ignore_list_re: list[Pattern[str]]) -> bool:
     """Determines if the element is matched in a regex ignore-list."""
-    return any(file_pattern.match(element) for file_pattern in ignore_list_re)
+    return any(file_pattern.search(element) for file_pattern in ignore_list_re)
 
 
 def expand_modules(
diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py
index 53345a6b1..fcc3a7e29 100644
--- a/pylint/lint/pylinter.py
+++ b/pylint/lint/pylinter.py
@@ -8,6 +8,7 @@ import collections
 import contextlib
 import functools
 import os
+import re
 import sys
 import tokenize
 import traceback
@@ -31,7 +32,7 @@ from pylint.constants import (
 )
 from pylint.lint.base_options import _make_linter_options
 from pylint.lint.caching import load_results, save_results
-from pylint.lint.expand_modules import expand_modules
+from pylint.lint.expand_modules import expand_modules, _is_in_ignore_list_re
 from pylint.lint.message_state_handler import _MessageStateHandler
 from pylint.lint.parallel import check_parallel
 from pylint.lint.report_functions import (
@@ -292,6 +293,16 @@ class PyLinter(
 
         # Attributes related to stats
         self.stats = LinterStats()
+        
+        # Initialize ignore paths
+        self._ignore_paths = []
+        # Pre-compile ignore paths patterns
+        if hasattr(self, 'config') and hasattr(self.config, 'ignore_paths'):
+            for pattern in self.config.ignore_paths:
+                try:
+                    self._ignore_paths.append(re.compile(pattern))
+                except re.error:
+                    pass
 
         # Attributes related to (command-line) options and their parsing
         self.options: Options = options + _make_linter_options(self)
@@ -564,30 +575,82 @@ class PyLinter(
             if not msg.may_be_emitted():
                 self._msgs_state[msg.msgid] = False
 
-    @staticmethod
-    def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:
+    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:
         """Discover python modules and packages in sub-directory.
 
         Returns iterator of paths to discovered modules and packages.
+        Respects ignore, ignore-patterns, and ignore-paths settings.
         """
+        # Ensure ignore_paths is initialized
+        if not hasattr(self, "_ignore_paths") or not self._ignore_paths:
+            # Convert string patterns to compiled regex patterns
+            self._ignore_paths = []
+            for pattern in self.config.ignore_paths:
+                try:
+                    self._ignore_paths.append(re.compile(pattern))
+                except re.error:
+                    pass
+
         for something in files_or_modules:
+            # Normalize the path for consistent matching
+            something = os.path.normpath(something)
+            
+            # Check if the item itself should be ignored
+            basename = os.path.basename(something)
+            if (
+                basename in self.config.ignore
+                or _is_in_ignore_list_re(basename, self.config.ignore_patterns)
+                or _is_in_ignore_list_re(something, self._ignore_paths)
+            ):
+                continue
+
             if os.path.isdir(something) and not os.path.isfile(
                 os.path.join(something, "__init__.py")
             ):
                 skip_subtrees: list[str] = []
-                for root, _, files in os.walk(something):
+                for root, dirs, files in os.walk(something):
+                    # Normalize the path for consistent matching
+                    root = os.path.normpath(root)
+                    
                     if any(root.startswith(s) for s in skip_subtrees):
                         # Skip subtree of already discovered package.
                         continue
+                    
+                    # Filter directories based on ignore patterns
+                    # This modifies dirs in-place to skip ignored directories
+                    dirs[:] = [
+                        d for d in dirs
+                        if not (
+                            d in self.config.ignore
+                            or _is_in_ignore_list_re(d, self.config.ignore_patterns)
+                            or _is_in_ignore_list_re(os.path.normpath(os.path.join(root, d)), self._ignore_paths)
+                        )
+                    ]
+                    
                     if "__init__.py" in files:
                         skip_subtrees.append(root)
-                        yield root
+                        # Check if the package directory should be ignored
+                        if not (
+                            os.path.basename(root) in self.config.ignore
+                            or _is_in_ignore_list_re(os.path.basename(root), self.config.ignore_patterns)
+                            or _is_in_ignore_list_re(root, self._ignore_paths)
+                        ):
+                            yield root
                     else:
-                        yield from (
-                            os.path.join(root, file)
-                            for file in files
-                            if file.endswith(".py")
-                        )
+                        for file in files:
+                            if not file.endswith(".py"):
+                                continue
+                            
+                            filepath = os.path.normpath(os.path.join(root, file))
+                            # Check if the file should be ignored
+                            if (
+                                file in self.config.ignore
+                                or _is_in_ignore_list_re(file, self.config.ignore_patterns)
+                                or _is_in_ignore_list_re(filepath, self._ignore_paths)
+                            ):
+                                continue
+                            
+                            yield filepath
             else:
                 yield something
 
@@ -959,7 +1022,13 @@ class PyLinter(
                 self.config.extension_pkg_whitelist
             )
         self.stats.reset_message_count()
-        self._ignore_paths = self.linter.config.ignore_paths
+        # Convert string patterns to compiled regex patterns
+        self._ignore_paths = []
+        for pattern in self.config.ignore_paths:
+            try:
+                self._ignore_paths.append(re.compile(pattern))
+            except re.error:
+                pass
 
     def generate_reports(self) -> int | None:
         """Close the whole package /module, it's time to make reports !
