diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py
index 53345a6b1..3556c06bc 100644
--- a/pylint/lint/pylinter.py
+++ b/pylint/lint/pylinter.py
@@ -562,34 +562,65 @@ class PyLinter(
         # the store
         for msg in self.msgs_store.messages:
             if not msg.may_be_emitted():
                 self._msgs_state[msg.msgid] = False
 
-    @staticmethod
-    def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:
+    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:
         """Discover python modules and packages in sub-directory.
 
         Returns iterator of paths to discovered modules and packages.
         """
+        from pylint.lint.expand_modules import _is_in_ignore_list_re
+        
         for something in files_or_modules:
+            # Check if the top-level directory/file should be ignored
+            basename = os.path.basename(something)
+            if (
+                basename in self.config.ignore
+                or _is_in_ignore_list_re(basename, self.config.ignore_patterns)
+                or _is_in_ignore_list_re(something, self.config.ignore_paths)
+            ):
+                continue
+                
             if os.path.isdir(something) and not os.path.isfile(
                 os.path.join(something, "__init__.py")
             ):
                 skip_subtrees: list[str] = []
-                for root, _, files in os.walk(something):
+                for root, dirs, files in os.walk(something):
                     if any(root.startswith(s) for s in skip_subtrees):
                         # Skip subtree of already discovered package.
                         continue
+                        
+                    # Filter out directories that should be ignored
+                    dirs_to_remove = []
+                    for d in dirs:
+                        if (
+                            d in self.config.ignore
+                            or _is_in_ignore_list_re(d, self.config.ignore_patterns)
+                            or _is_in_ignore_list_re(os.path.join(root, d), self.config.ignore_paths)
+                        ):
+                            dirs_to_remove.append(d)
+                    for d in dirs_to_remove:
+                        dirs.remove(d)
+                        
                     if "__init__.py" in files:
                         skip_subtrees.append(root)
                         yield root
                     else:
-                        yield from (
-                            os.path.join(root, file)
-                            for file in files
-                            if file.endswith(".py")
-                        )
+                        for file in files:
+                            if not file.endswith(".py"):
+                                continue
+                                
+                            # Check if the file should be ignored
+                            if (
+                                file in self.config.ignore
+                                or _is_in_ignore_list_re(file, self.config.ignore_patterns)
+                                or _is_in_ignore_list_re(os.path.join(root, file), self.config.ignore_paths)
+                            ):
+                                continue
+                                
+                            yield os.path.join(root, file)
             else:
                 yield something
 
     def check(self, files_or_modules: Sequence[str] | str) -> None:
         """Main checking entry: check a list of files or modules from their name.
