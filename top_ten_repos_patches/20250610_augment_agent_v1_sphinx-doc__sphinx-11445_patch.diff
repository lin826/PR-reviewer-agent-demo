diff --git b/sphinx/util/rst.py a/sphinx/util/rst.py
index 5955121ae..7a1538325 100644
--- b/sphinx/util/rst.py
+++ a/sphinx/util/rst.py
@@ -23,11 +23,11 @@ except ImportError:
     from jinja2 import environmentfilter as pass_environment
 
 
 logger = logging.getLogger(__name__)
 
-docinfo_re = re.compile(r':\w+:\s+.*')
+docinfo_re = re.compile(':\\w+:.*?')
 symbols_re = re.compile(r'([!-\-/:-@\[-`{-~])')  # symbols without dot(0x2e)
 SECTIONING_CHARS = ['=', '-', '~']
 
 # width of characters
 WIDECHARS: dict[str, str] = defaultdict(lambda: "WF")  # WF: Wide + Full-width
@@ -88,34 +88,11 @@ def prepend_prolog(content: StringList, prolog: str) -> None:
         if pos > 0:
             # insert a blank line after docinfo
             content.insert(pos, '', '<generated>', 0)
             pos += 1
 
-        # Check if we have a section title followed by underline that contains
-        # a domain directive. If so, insert prolog after the section to avoid 
-        # breaking the structure. Only do this for lines that contain domain directives.
-        if pos < len(content):
-            title_line = pos
-            # Look for underline in the next few lines (allowing for blank lines)
-            underline_pos = pos + 1
-            while underline_pos < len(content) and not content[underline_pos].strip():
-                underline_pos += 1
-            
-            # Check if this looks like a section with a domain directive in the title
-            if (underline_pos < len(content) and
-                content[title_line].strip() and  # title line is not empty
-                content[underline_pos].strip() and  # underline is not empty
-                len(set(content[underline_pos].strip())) == 1 and  # underline made of single char
-                content[underline_pos].strip()[0] in '=-~^"\'`#*+<>_' and  # valid underline char
-                ':' in content[title_line] and '`' in content[title_line]):  # likely contains domain directive
-                # This looks like a section title with domain directive, skip past the underline
-                pos = underline_pos + 1
-                # Skip any blank lines after the underline
-                while pos < len(content) and not content[pos].strip():
-                    pos += 1
-
-        # insert prolog (after docinfo and potential section if exists)
+        # insert prolog (after docinfo if exists)
         for lineno, line in enumerate(prolog.splitlines()):
             content.insert(pos + lineno, line, '<rst_prolog>', lineno)
 
         content.insert(pos + lineno + 1, '', '<generated>', 0)
 
