diff --git a/django/contrib/gis/gdal/field.py b/django/contrib/gis/gdal/field.py
index 8fc731acc6..a1a403b2e1 100644
--- a/django/contrib/gis/gdal/field.py
+++ b/django/contrib/gis/gdal/field.py
@@ -229,4 +229,4 @@ OGRFieldTypes = {
     12: OFTInteger64,
     13: OFTInteger64List,
 }
-ROGRFieldTypes = {cls: num for num, cls in OGRFieldTypes.items()}
+ROGRFieldTypes = {cls: num for num, cls in OGRFieldTypes.items()}
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 37f6a3dd58..3d587e4920 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -2217,4 +2217,4 @@ def model_unpickle(model_id):
     return model.__new__(model)
 
 
-model_unpickle.__safe_for_unpickle__ = True
+model_unpickle.__safe_for_unpickle__ = True
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 88c9ca9f28..d66e92cf7e 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -541,21 +541,27 @@ class Field(RegisterLookupMixin):
                 )
         return NotImplemented
 
+
     def __hash__(self):
-        return hash((
-            self.creation_counter,
-            self.model._meta.app_label if hasattr(self, 'model') else None,
-            self.model._meta.model_name if hasattr(self, 'model') else None,
-        ))
+        # Use only the creation_counter so that the hash remains immutable
+        # before and after the field is assigned to a model (see #31750).
+        return hash(self.creation_counter)
+
 
     def __deepcopy__(self, memodict):
         # We don't have to deepcopy very much here, since most things are not
         # intended to be altered after initial creation.
+
         obj = copy.copy(self)
+        # Ensure deep-copied Field instances receive a unique creation_counter
+        # so that their hash remains distinct (see #31750).
+        obj.creation_counter = Field.creation_counter
+        Field.creation_counter += 1
         if self.remote_field:
             obj.remote_field = copy.copy(self.remote_field)
             if hasattr(self.remote_field, 'field') and self.remote_field.field is self:
                 obj.remote_field.field = obj
+
         memodict[id(self)] = obj
         return obj
 
@@ -2537,4 +2543,4 @@ class SmallAutoField(AutoFieldMixin, SmallIntegerField):
         return 'SmallAutoField'
 
     def rel_db_type(self, connection):
-        return SmallIntegerField().db_type(connection=connection)
+        return SmallIntegerField().db_type(connection=connection)
diff --git a/django/db/models/fields/mixins.py b/django/db/models/fields/mixins.py
index 3afa8d9304..5ec8787385 100644
--- a/django/db/models/fields/mixins.py
+++ b/django/db/models/fields/mixins.py
@@ -53,4 +53,4 @@ class CheckFieldDefaultMixin:
     def check(self, **kwargs):
         errors = super().check(**kwargs)
         errors.extend(self._check_default())
-        return errors
+        return errors
diff --git a/django/forms/fields.py b/django/forms/fields.py
index 65d6a9ec82..b31d0eddde 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -1282,4 +1282,4 @@ class JSONField(CharField):
         return (
             json.dumps(initial, sort_keys=True, cls=self.encoder) !=
             json.dumps(self.to_python(data), sort_keys=True, cls=self.encoder)
-        )
+        )
