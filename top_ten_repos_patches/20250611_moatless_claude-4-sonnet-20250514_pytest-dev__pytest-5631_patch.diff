--- a/src/_pytest/compat.py
+++ b/src/_pytest/compat.py
@@ -59,6 +59,25 @@
     return "%s:%d" % (fn, lineno + 1)
 
 
+def _is_in_collection(obj, collection):
+    """Safely check if obj is in collection, handling array-like objects."""
+    try:
+        return obj in collection
+    except ValueError:
+        # Handle numpy arrays and other objects that can't be used in boolean context
+        # when checking membership. For these objects, we check identity and equality
+        # element by element to avoid the boolean context issue.
+        for item in collection:
+            try:
+                if obj is item or obj == item:
+                    return True
+            except ValueError:
+                # If even obj == item fails, check identity only
+                if obj is item:
+                    return True
+        return False
+
+
 def num_mock_patch_args(function):
     """ return number of arguments used up by mock arguments (if any) """
     patchings = getattr(function, "patchings", None)
@@ -68,7 +87,7 @@
     if any(mock_modules):
         sentinels = [m.DEFAULT for m in mock_modules if m is not None]
         return len(
-            [p for p in patchings if not p.attribute_name and p.new in sentinels]
+            [p for p in patchings if not p.attribute_name and _is_in_collection(p.new, sentinels)]
         )
     return len(patchings)
 
