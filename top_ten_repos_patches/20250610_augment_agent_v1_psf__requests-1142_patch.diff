diff --git a/requests/adapters.py b/requests/adapters.py
index c350ae44..b1fe9dd9 100644
--- a/requests/adapters.py
+++ b/requests/adapters.py
@@ -152,11 +152,16 @@ class HTTPAdapter(BaseAdapter):
         conn = self.get_connection(request.url, proxies)
 
         self.cert_verify(conn, request.url, verify, cert)
         url = self.request_url(request, proxies)
 
-        chunked = not (request.body is None or 'Content-Length' in request.headers)
+        # Methods that typically don't have bodies should not use chunked encoding
+        methods_without_body = ('GET', 'HEAD', 'DELETE', 'OPTIONS')
+        if request.method.upper() in methods_without_body:
+            chunked = False
+        else:
+            chunked = not (request.body is None or 'Content-Length' in request.headers)
 
         try:
             if not chunked:
                 resp = conn.urlopen(
                     method=request.method,
diff --git a/requests/models.py b/requests/models.py
index 99260453..adcc5cf7 100644
--- a/requests/models.py
+++ b/requests/models.py
@@ -342,11 +342,12 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
         is_stream = False
 
         is_stream = all([
             hasattr(data, '__iter__'),
             not isinstance(data, basestring),
-            not isinstance(data, dict)
+            not isinstance(data, dict),
+            bool(data)  # Don't treat empty iterables as streams
         ])
 
         try:
             length = str(super_len(data))
         except (TypeError, AttributeError):
@@ -384,17 +385,17 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
                 self.headers['Content-Type'] = content_type
 
         self.body = body
 
     def prepare_content_length(self, body):
-        self.headers['Content-Length'] = '0'
         if hasattr(body, 'seek') and hasattr(body, 'tell'):
             body.seek(0, 2)
             self.headers['Content-Length'] = str(body.tell())
             body.seek(0, 0)
         elif body is not None:
             self.headers['Content-Length'] = str(len(body))
+        # Don't set Content-Length for requests without a body
 
     def prepare_auth(self, auth):
         """Prepares the given HTTP auth data."""
         if auth:
             if isinstance(auth, tuple) and len(auth) == 2:
