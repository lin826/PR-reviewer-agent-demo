diff --git a/sympy/core/expr.py b/sympy/core/expr.py
index e527ff0733..44e777a0a9 100644
--- a/sympy/core/expr.py
+++ b/sympy/core/expr.py
@@ -4143,4 +4143,4 @@ def search_element(self, elem):
 from .function import Function, _derivative_dispatch
 from .mod import Mod
 from .exprtools import factor_terms
-from .numbers import Float, Integer, Rational, _illegal
+from .numbers import Float, Integer, Rational, _illegal
diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py
index f8e6c44def..78ed5f407b 100644
--- a/sympy/functions/elementary/piecewise.py
+++ b/sympy/functions/elementary/piecewise.py
@@ -1462,4 +1462,4 @@ def make_exclusive(*pwargs):
     elif isinstance(expr, Piecewise):
         return make_exclusive(*expr.args)
     else:
-        return expr
+        return expr
diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py
index b2d4268d12..0e5d5924f3 100644
--- a/sympy/sets/contains.py
+++ b/sympy/sets/contains.py
@@ -44,5 +44,50 @@ def binary_symbols(self):
             if i.is_Boolean or i.is_Symbol or
             isinstance(i, (Eq, Ne))])
 
+
     def as_set(self):
-        raise NotImplementedError()
+        """
+        Return a Set representation of this Contains object.
+
+        If the expression part of the Contains object is a single Symbol,
+        the underlying set is returned directly.  Otherwise a ConditionSet
+        is constructed with the single free Symbol occurring in the
+        expression.  If there are zero or more than one free Symbols,
+        the conversion is not implemented.
+
+        Examples
+        ========
+
+        >>> from sympy import Contains, Symbol, Reals
+        >>> x = Symbol('x')
+        >>> Contains(x, Reals).as_set()
+        Reals
+        >>> Contains(x**2, Reals).as_set()
+        ConditionSet(x, Contains(x**2, Reals), UniversalSet)
+        """
+        from sympy.sets.conditionset import ConditionSet
+
+        expr, set_ = self.args
+
+
+        # Trivial case: membership of a single symbol in a set.
+        if expr.is_Symbol:
+            # The set must be concrete; if it still has free symbols the
+            # membership cannot be represented as a plain set.
+            if set_.free_symbols:
+                raise NotImplementedError(
+                    "Contains.as_set is not implemented when the target set "
+                    "contains symbolic parameters."
+                )
+            return set_
+
+
+        free = expr.free_symbols
+        if len(free) != 1:
+            raise NotImplementedError(
+                "Contains.as_set can only handle expressions with a single "
+                "free symbol, got %s." % len(free))
+
+        sym = next(iter(free))
+        # Construct a ConditionSet over the universal set.
+        return ConditionSet(sym, self, S.UniversalSet)
