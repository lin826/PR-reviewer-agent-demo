diff --git a/sympy/parsing/latex/_antlr/latexlexer.py b/sympy/parsing/latex/_antlr/latexlexer.py
index 29eb4b462a..c24599906e 100644
--- a/sympy/parsing/latex/_antlr/latexlexer.py
+++ b/sympy/parsing/latex/_antlr/latexlexer.py
@@ -10,417 +10,354 @@
 # Generated with antlr4
 #    antlr4 is licensed under the BSD-3-Clause License
 #    https://github.com/antlr/antlr4/blob/master/LICENSE.txt
-from __future__ import print_function
+# encoding: utf-8
+
+# *** GENERATED BY `setup.py antlr`, DO NOT EDIT BY HAND ***
+#
+# Generated from ../LaTeX.g4, derived from latex2sympy
+#     latex2sympy is licensed under the MIT license
+#     https://github.com/augustt198/latex2sympy/blob/master/LICENSE.txt
+#
+# Generated with antlr4
+#    antlr4 is licensed under the BSD-3-Clause License
+#    https://github.com/antlr/antlr4/blob/master/LICENSE.txt
 from antlr4 import *
 from io import StringIO
 import sys
-
+if sys.version_info[1] > 5:
+    from typing import TextIO
+else:
+    from typing.io import TextIO
 
 
 def serializedATN():
-    with StringIO() as buf:
-        buf.write(u"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2")
-        buf.write(u"Z\u0390\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4")
-        buf.write(u"\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r")
-        buf.write(u"\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22")
-        buf.write(u"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4")
-        buf.write(u"\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35")
-        buf.write(u"\t\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4")
-        buf.write(u"$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t")
-        buf.write(u",\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63")
-        buf.write(u"\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\4")
-        buf.write(u"9\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA")
-        buf.write(u"\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\t")
-        buf.write(u"J\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S")
-        buf.write(u"\tS\4T\tT\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\3")
-        buf.write(u"\2\3\2\3\3\6\3\u00bb\n\3\r\3\16\3\u00bc\3\3\3\3\3\4\3")
-        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u00cd")
-        buf.write(u"\n\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
-        buf.write(u"\3\5\5\5\u00dc\n\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3")
-        buf.write(u"\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u00ed\n\6\3\6\3\6\3\7")
-        buf.write(u"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b")
-        buf.write(u"\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t")
-        buf.write(u"\3\t\3\t\3\t\3\t\3\t\5\t\u0111\n\t\3\t\3\t\3\n\3\n\3")
-        buf.write(u"\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3")
-        buf.write(u"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
-        buf.write(u"\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3")
-        buf.write(u"\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3")
-        buf.write(u"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
-        buf.write(u"\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3")
-        buf.write(u"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
-        buf.write(u"\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3")
-        buf.write(u"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u0179\n\16")
-        buf.write(u"\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3")
-        buf.write(u"\23\3\23\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\27")
-        buf.write(u"\3\30\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3")
-        buf.write(u"\34\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35")
-        buf.write(u"\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3")
-        buf.write(u"\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3 \3 \3 ")
-        buf.write(u"\3 \3 \3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3")
-        buf.write(u"!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!")
-        buf.write(u"\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3")
-        buf.write(u"!\3!\3!\3!\3!\5!\u01f4\n!\3\"\3\"\3\"\3\"\3\"\3#\3#\3")
-        buf.write(u"#\3#\3#\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3&\3&\3&\3&")
-        buf.write(u"\3&\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3*")
-        buf.write(u"\3*\3*\3*\3*\3+\3+\3+\3+\3+\3,\3,\3,\3,\3,\3-\3-\3-\3")
-        buf.write(u"-\3-\3.\3.\3.\3.\3.\3.\3.\3.\3/\3/\3/\3/\3/\3/\3/\3/")
-        buf.write(u"\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\61\3\61\3")
-        buf.write(u"\61\3\61\3\61\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3\62")
-        buf.write(u"\3\62\3\62\3\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3")
-        buf.write(u"\63\3\64\3\64\3\64\3\64\3\64\3\64\3\65\3\65\3\65\3\65")
-        buf.write(u"\3\65\3\65\3\66\3\66\3\66\3\66\3\66\3\66\3\67\3\67\3")
-        buf.write(u"\67\3\67\3\67\3\67\3\67\3\67\38\38\38\38\38\38\38\38")
-        buf.write(u"\39\39\39\39\39\39\39\39\3:\3:\3:\3:\3:\3:\3:\3:\3;\3")
-        buf.write(u";\3;\3;\3;\3;\3;\3;\3<\3<\3<\3<\3<\3<\3<\3=\3=\3=\3=")
-        buf.write(u"\3=\3=\3=\3>\3>\3>\3>\3>\3>\3?\3?\3?\3?\3?\3?\3?\3?\3")
-        buf.write(u"?\3?\3@\3@\3@\3@\3@\3@\3@\3A\3A\3A\3A\3A\3A\3B\3B\3B")
-        buf.write(u"\3B\3B\3C\3C\3C\3C\3C\3C\3D\3D\3D\3D\3D\3D\3D\3E\3E\3")
-        buf.write(u"E\3E\3E\3E\3E\3E\3F\3F\3F\3F\3F\3F\3F\3F\3G\3G\3G\3G")
-        buf.write(u"\3G\3G\3G\3G\3H\3H\3I\3I\3J\3J\3K\3K\3L\3L\7L\u02fb\n")
-        buf.write(u"L\fL\16L\u02fe\13L\3L\3L\3L\6L\u0303\nL\rL\16L\u0304")
-        buf.write(u"\5L\u0307\nL\3M\3M\3N\3N\3O\6O\u030e\nO\rO\16O\u030f")
-        buf.write(u"\3O\3O\3O\3O\3O\7O\u0317\nO\fO\16O\u031a\13O\3O\7O\u031d")
-        buf.write(u"\nO\fO\16O\u0320\13O\3O\3O\3O\3O\3O\7O\u0327\nO\fO\16")
-        buf.write(u"O\u032a\13O\3O\3O\6O\u032e\nO\rO\16O\u032f\5O\u0332\n")
-        buf.write(u"O\3P\3P\7P\u0336\nP\fP\16P\u0339\13P\5P\u033b\nP\3P\3")
-        buf.write(u"P\3P\7P\u0340\nP\fP\16P\u0343\13P\3P\5P\u0346\nP\5P\u0348")
-        buf.write(u"\nP\3Q\3Q\3Q\3Q\3Q\3R\3R\3S\3S\3S\3S\3S\3S\3S\3S\3S\5")
-        buf.write(u"S\u035a\nS\3T\3T\3T\3T\3T\3T\3U\3U\3U\3U\3U\3U\3U\3U")
-        buf.write(u"\3U\3U\3V\3V\3W\3W\3W\3W\3W\3W\3W\3W\3W\5W\u0377\nW\3")
-        buf.write(u"X\3X\3X\3X\3X\3X\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Z\3Z")
-        buf.write(u"\3[\3[\6[\u038d\n[\r[\16[\u038e\5\u02fc\u0337\u0341\2")
-        buf.write(u"\\\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r")
-        buf.write(u"\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30")
-        buf.write(u"/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K")
-        buf.write(u"\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66k\67m8")
-        buf.write(u"o9q:s;u<w=y>{?}@\177A\u0081B\u0083C\u0085D\u0087E\u0089")
-        buf.write(u"F\u008bG\u008dH\u008fI\u0091J\u0093K\u0095\2\u0097L\u0099")
-        buf.write(u"M\u009b\2\u009dN\u009fO\u00a1P\u00a3Q\u00a5R\u00a7S\u00a9")
-        buf.write(u"T\u00abU\u00adV\u00afW\u00b1X\u00b3Y\u00b5Z\3\2\5\5\2")
-        buf.write(u"\13\f\17\17\"\"\4\2C\\c|\3\2\62;\2\u03b7\2\3\3\2\2\2")
-        buf.write(u"\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r")
-        buf.write(u"\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25")
-        buf.write(u"\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35")
-        buf.write(u"\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2")
-        buf.write(u"\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3")
-        buf.write(u"\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3")
-        buf.write(u"\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2")
-        buf.write(u"A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2")
-        buf.write(u"\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2")
-        buf.write(u"\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2")
-        buf.write(u"\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3")
-        buf.write(u"\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2")
-        buf.write(u"q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2w\3\2\2\2\2y\3\2\2\2")
-        buf.write(u"\2{\3\2\2\2\2}\3\2\2\2\2\177\3\2\2\2\2\u0081\3\2\2\2")
-        buf.write(u"\2\u0083\3\2\2\2\2\u0085\3\2\2\2\2\u0087\3\2\2\2\2\u0089")
-        buf.write(u"\3\2\2\2\2\u008b\3\2\2\2\2\u008d\3\2\2\2\2\u008f\3\2")
-        buf.write(u"\2\2\2\u0091\3\2\2\2\2\u0093\3\2\2\2\2\u0097\3\2\2\2")
-        buf.write(u"\2\u0099\3\2\2\2\2\u009d\3\2\2\2\2\u009f\3\2\2\2\2\u00a1")
-        buf.write(u"\3\2\2\2\2\u00a3\3\2\2\2\2\u00a5\3\2\2\2\2\u00a7\3\2")
-        buf.write(u"\2\2\2\u00a9\3\2\2\2\2\u00ab\3\2\2\2\2\u00ad\3\2\2\2")
-        buf.write(u"\2\u00af\3\2\2\2\2\u00b1\3\2\2\2\2\u00b3\3\2\2\2\2\u00b5")
-        buf.write(u"\3\2\2\2\3\u00b7\3\2\2\2\5\u00ba\3\2\2\2\7\u00cc\3\2")
-        buf.write(u"\2\2\t\u00db\3\2\2\2\13\u00ec\3\2\2\2\r\u00f0\3\2\2\2")
-        buf.write(u"\17\u00f8\3\2\2\2\21\u0110\3\2\2\2\23\u0114\3\2\2\2\25")
-        buf.write(u"\u0123\3\2\2\2\27\u0134\3\2\2\2\31\u013c\3\2\2\2\33\u0178")
-        buf.write(u"\3\2\2\2\35\u017c\3\2\2\2\37\u017e\3\2\2\2!\u0180\3\2")
-        buf.write(u"\2\2#\u0182\3\2\2\2%\u0184\3\2\2\2\'\u0186\3\2\2\2)\u0188")
-        buf.write(u"\3\2\2\2+\u018a\3\2\2\2-\u018c\3\2\2\2/\u018f\3\2\2\2")
-        buf.write(u"\61\u0192\3\2\2\2\63\u0194\3\2\2\2\65\u0196\3\2\2\2\67")
-        buf.write(u"\u0198\3\2\2\29\u01a0\3\2\2\2;\u01a7\3\2\2\2=\u01af\3")
-        buf.write(u"\2\2\2?\u01b7\3\2\2\2A\u01f3\3\2\2\2C\u01f5\3\2\2\2E")
-        buf.write(u"\u01fa\3\2\2\2G\u01ff\3\2\2\2I\u0205\3\2\2\2K\u020a\3")
-        buf.write(u"\2\2\2M\u020f\3\2\2\2O\u0213\3\2\2\2Q\u0218\3\2\2\2S")
-        buf.write(u"\u021d\3\2\2\2U\u0222\3\2\2\2W\u0227\3\2\2\2Y\u022c\3")
-        buf.write(u"\2\2\2[\u0231\3\2\2\2]\u0239\3\2\2\2_\u0241\3\2\2\2a")
-        buf.write(u"\u0249\3\2\2\2c\u0251\3\2\2\2e\u0259\3\2\2\2g\u0261\3")
-        buf.write(u"\2\2\2i\u0267\3\2\2\2k\u026d\3\2\2\2m\u0273\3\2\2\2o")
-        buf.write(u"\u027b\3\2\2\2q\u0283\3\2\2\2s\u028b\3\2\2\2u\u0293\3")
-        buf.write(u"\2\2\2w\u029b\3\2\2\2y\u02a2\3\2\2\2{\u02a9\3\2\2\2}")
-        buf.write(u"\u02af\3\2\2\2\177\u02b9\3\2\2\2\u0081\u02c0\3\2\2\2")
-        buf.write(u"\u0083\u02c6\3\2\2\2\u0085\u02cb\3\2\2\2\u0087\u02d1")
-        buf.write(u"\3\2\2\2\u0089\u02d8\3\2\2\2\u008b\u02e0\3\2\2\2\u008d")
-        buf.write(u"\u02e8\3\2\2\2\u008f\u02f0\3\2\2\2\u0091\u02f2\3\2\2")
-        buf.write(u"\2\u0093\u02f4\3\2\2\2\u0095\u02f6\3\2\2\2\u0097\u02f8")
-        buf.write(u"\3\2\2\2\u0099\u0308\3\2\2\2\u009b\u030a\3\2\2\2\u009d")
-        buf.write(u"\u0331\3\2\2\2\u009f\u0347\3\2\2\2\u00a1\u0349\3\2\2")
-        buf.write(u"\2\u00a3\u034e\3\2\2\2\u00a5\u0359\3\2\2\2\u00a7\u035b")
-        buf.write(u"\3\2\2\2\u00a9\u0361\3\2\2\2\u00ab\u036b\3\2\2\2\u00ad")
-        buf.write(u"\u0376\3\2\2\2\u00af\u0378\3\2\2\2\u00b1\u037e\3\2\2")
-        buf.write(u"\2\u00b3\u0388\3\2\2\2\u00b5\u038a\3\2\2\2\u00b7\u00b8")
-        buf.write(u"\7.\2\2\u00b8\4\3\2\2\2\u00b9\u00bb\t\2\2\2\u00ba\u00b9")
-        buf.write(u"\3\2\2\2\u00bb\u00bc\3\2\2\2\u00bc\u00ba\3\2\2\2\u00bc")
-        buf.write(u"\u00bd\3\2\2\2\u00bd\u00be\3\2\2\2\u00be\u00bf\b\3\2")
-        buf.write(u"\2\u00bf\6\3\2\2\2\u00c0\u00c1\7^\2\2\u00c1\u00cd\7.")
-        buf.write(u"\2\2\u00c2\u00c3\7^\2\2\u00c3\u00c4\7v\2\2\u00c4\u00c5")
-        buf.write(u"\7j\2\2\u00c5\u00c6\7k\2\2\u00c6\u00c7\7p\2\2\u00c7\u00c8")
-        buf.write(u"\7u\2\2\u00c8\u00c9\7r\2\2\u00c9\u00ca\7c\2\2\u00ca\u00cb")
-        buf.write(u"\7e\2\2\u00cb\u00cd\7g\2\2\u00cc\u00c0\3\2\2\2\u00cc")
-        buf.write(u"\u00c2\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce\u00cf\b\4\2")
-        buf.write(u"\2\u00cf\b\3\2\2\2\u00d0\u00d1\7^\2\2\u00d1\u00dc\7<")
-        buf.write(u"\2\2\u00d2\u00d3\7^\2\2\u00d3\u00d4\7o\2\2\u00d4\u00d5")
-        buf.write(u"\7g\2\2\u00d5\u00d6\7f\2\2\u00d6\u00d7\7u\2\2\u00d7\u00d8")
-        buf.write(u"\7r\2\2\u00d8\u00d9\7c\2\2\u00d9\u00da\7e\2\2\u00da\u00dc")
-        buf.write(u"\7g\2\2\u00db\u00d0\3\2\2\2\u00db\u00d2\3\2\2\2\u00dc")
-        buf.write(u"\u00dd\3\2\2\2\u00dd\u00de\b\5\2\2\u00de\n\3\2\2\2\u00df")
-        buf.write(u"\u00e0\7^\2\2\u00e0\u00ed\7=\2\2\u00e1\u00e2\7^\2\2\u00e2")
-        buf.write(u"\u00e3\7v\2\2\u00e3\u00e4\7j\2\2\u00e4\u00e5\7k\2\2\u00e5")
-        buf.write(u"\u00e6\7e\2\2\u00e6\u00e7\7m\2\2\u00e7\u00e8\7u\2\2\u00e8")
-        buf.write(u"\u00e9\7r\2\2\u00e9\u00ea\7c\2\2\u00ea\u00eb\7e\2\2\u00eb")
-        buf.write(u"\u00ed\7g\2\2\u00ec\u00df\3\2\2\2\u00ec\u00e1\3\2\2\2")
-        buf.write(u"\u00ed\u00ee\3\2\2\2\u00ee\u00ef\b\6\2\2\u00ef\f\3\2")
-        buf.write(u"\2\2\u00f0\u00f1\7^\2\2\u00f1\u00f2\7s\2\2\u00f2\u00f3")
-        buf.write(u"\7w\2\2\u00f3\u00f4\7c\2\2\u00f4\u00f5\7f\2\2\u00f5\u00f6")
-        buf.write(u"\3\2\2\2\u00f6\u00f7\b\7\2\2\u00f7\16\3\2\2\2\u00f8\u00f9")
-        buf.write(u"\7^\2\2\u00f9\u00fa\7s\2\2\u00fa\u00fb\7s\2\2\u00fb\u00fc")
-        buf.write(u"\7w\2\2\u00fc\u00fd\7c\2\2\u00fd\u00fe\7f\2\2\u00fe\u00ff")
-        buf.write(u"\3\2\2\2\u00ff\u0100\b\b\2\2\u0100\20\3\2\2\2\u0101\u0102")
-        buf.write(u"\7^\2\2\u0102\u0111\7#\2\2\u0103\u0104\7^\2\2\u0104\u0105")
-        buf.write(u"\7p\2\2\u0105\u0106\7g\2\2\u0106\u0107\7i\2\2\u0107\u0108")
-        buf.write(u"\7v\2\2\u0108\u0109\7j\2\2\u0109\u010a\7k\2\2\u010a\u010b")
-        buf.write(u"\7p\2\2\u010b\u010c\7u\2\2\u010c\u010d\7r\2\2\u010d\u010e")
-        buf.write(u"\7c\2\2\u010e\u010f\7e\2\2\u010f\u0111\7g\2\2\u0110\u0101")
-        buf.write(u"\3\2\2\2\u0110\u0103\3\2\2\2\u0111\u0112\3\2\2\2\u0112")
-        buf.write(u"\u0113\b\t\2\2\u0113\22\3\2\2\2\u0114\u0115\7^\2\2\u0115")
-        buf.write(u"\u0116\7p\2\2\u0116\u0117\7g\2\2\u0117\u0118\7i\2\2\u0118")
-        buf.write(u"\u0119\7o\2\2\u0119\u011a\7g\2\2\u011a\u011b\7f\2\2\u011b")
-        buf.write(u"\u011c\7u\2\2\u011c\u011d\7r\2\2\u011d\u011e\7c\2\2\u011e")
-        buf.write(u"\u011f\7e\2\2\u011f\u0120\7g\2\2\u0120\u0121\3\2\2\2")
-        buf.write(u"\u0121\u0122\b\n\2\2\u0122\24\3\2\2\2\u0123\u0124\7^")
-        buf.write(u"\2\2\u0124\u0125\7p\2\2\u0125\u0126\7g\2\2\u0126\u0127")
-        buf.write(u"\7i\2\2\u0127\u0128\7v\2\2\u0128\u0129\7j\2\2\u0129\u012a")
-        buf.write(u"\7k\2\2\u012a\u012b\7e\2\2\u012b\u012c\7m\2\2\u012c\u012d")
-        buf.write(u"\7u\2\2\u012d\u012e\7r\2\2\u012e\u012f\7c\2\2\u012f\u0130")
-        buf.write(u"\7e\2\2\u0130\u0131\7g\2\2\u0131\u0132\3\2\2\2\u0132")
-        buf.write(u"\u0133\b\13\2\2\u0133\26\3\2\2\2\u0134\u0135\7^\2\2\u0135")
-        buf.write(u"\u0136\7n\2\2\u0136\u0137\7g\2\2\u0137\u0138\7h\2\2\u0138")
-        buf.write(u"\u0139\7v\2\2\u0139\u013a\3\2\2\2\u013a\u013b\b\f\2\2")
-        buf.write(u"\u013b\30\3\2\2\2\u013c\u013d\7^\2\2\u013d\u013e\7t\2")
-        buf.write(u"\2\u013e\u013f\7k\2\2\u013f\u0140\7i\2\2\u0140\u0141")
-        buf.write(u"\7j\2\2\u0141\u0142\7v\2\2\u0142\u0143\3\2\2\2\u0143")
-        buf.write(u"\u0144\b\r\2\2\u0144\32\3\2\2\2\u0145\u0146\7^\2\2\u0146")
-        buf.write(u"\u0147\7x\2\2\u0147\u0148\7t\2\2\u0148\u0149\7w\2\2\u0149")
-        buf.write(u"\u014a\7n\2\2\u014a\u0179\7g\2\2\u014b\u014c\7^\2\2\u014c")
-        buf.write(u"\u014d\7x\2\2\u014d\u014e\7e\2\2\u014e\u014f\7g\2\2\u014f")
-        buf.write(u"\u0150\7p\2\2\u0150\u0151\7v\2\2\u0151\u0152\7g\2\2\u0152")
-        buf.write(u"\u0179\7t\2\2\u0153\u0154\7^\2\2\u0154\u0155\7x\2\2\u0155")
-        buf.write(u"\u0156\7d\2\2\u0156\u0157\7q\2\2\u0157\u0179\7z\2\2\u0158")
-        buf.write(u"\u0159\7^\2\2\u0159\u015a\7x\2\2\u015a\u015b\7u\2\2\u015b")
-        buf.write(u"\u015c\7m\2\2\u015c\u015d\7k\2\2\u015d\u0179\7r\2\2\u015e")
-        buf.write(u"\u015f\7^\2\2\u015f\u0160\7x\2\2\u0160\u0161\7u\2\2\u0161")
-        buf.write(u"\u0162\7r\2\2\u0162\u0163\7c\2\2\u0163\u0164\7e\2\2\u0164")
-        buf.write(u"\u0179\7g\2\2\u0165\u0166\7^\2\2\u0166\u0167\7j\2\2\u0167")
-        buf.write(u"\u0168\7h\2\2\u0168\u0169\7k\2\2\u0169\u0179\7n\2\2\u016a")
-        buf.write(u"\u016b\7^\2\2\u016b\u0179\7,\2\2\u016c\u016d\7^\2\2\u016d")
-        buf.write(u"\u0179\7/\2\2\u016e\u016f\7^\2\2\u016f\u0179\7\60\2\2")
-        buf.write(u"\u0170\u0171\7^\2\2\u0171\u0179\7\61\2\2\u0172\u0173")
-        buf.write(u"\7^\2\2\u0173\u0179\7$\2\2\u0174\u0175\7^\2\2\u0175\u0179")
-        buf.write(u"\7*\2\2\u0176\u0177\7^\2\2\u0177\u0179\7?\2\2\u0178\u0145")
-        buf.write(u"\3\2\2\2\u0178\u014b\3\2\2\2\u0178\u0153\3\2\2\2\u0178")
-        buf.write(u"\u0158\3\2\2\2\u0178\u015e\3\2\2\2\u0178\u0165\3\2\2")
-        buf.write(u"\2\u0178\u016a\3\2\2\2\u0178\u016c\3\2\2\2\u0178\u016e")
-        buf.write(u"\3\2\2\2\u0178\u0170\3\2\2\2\u0178\u0172\3\2\2\2\u0178")
-        buf.write(u"\u0174\3\2\2\2\u0178\u0176\3\2\2\2\u0179\u017a\3\2\2")
-        buf.write(u"\2\u017a\u017b\b\16\2\2\u017b\34\3\2\2\2\u017c\u017d")
-        buf.write(u"\7-\2\2\u017d\36\3\2\2\2\u017e\u017f\7/\2\2\u017f \3")
-        buf.write(u"\2\2\2\u0180\u0181\7,\2\2\u0181\"\3\2\2\2\u0182\u0183")
-        buf.write(u"\7\61\2\2\u0183$\3\2\2\2\u0184\u0185\7*\2\2\u0185&\3")
-        buf.write(u"\2\2\2\u0186\u0187\7+\2\2\u0187(\3\2\2\2\u0188\u0189")
-        buf.write(u"\7}\2\2\u0189*\3\2\2\2\u018a\u018b\7\177\2\2\u018b,\3")
-        buf.write(u"\2\2\2\u018c\u018d\7^\2\2\u018d\u018e\7}\2\2\u018e.\3")
-        buf.write(u"\2\2\2\u018f\u0190\7^\2\2\u0190\u0191\7\177\2\2\u0191")
-        buf.write(u"\60\3\2\2\2\u0192\u0193\7]\2\2\u0193\62\3\2\2\2\u0194")
-        buf.write(u"\u0195\7_\2\2\u0195\64\3\2\2\2\u0196\u0197\7~\2\2\u0197")
-        buf.write(u"\66\3\2\2\2\u0198\u0199\7^\2\2\u0199\u019a\7t\2\2\u019a")
-        buf.write(u"\u019b\7k\2\2\u019b\u019c\7i\2\2\u019c\u019d\7j\2\2\u019d")
-        buf.write(u"\u019e\7v\2\2\u019e\u019f\7~\2\2\u019f8\3\2\2\2\u01a0")
-        buf.write(u"\u01a1\7^\2\2\u01a1\u01a2\7n\2\2\u01a2\u01a3\7g\2\2\u01a3")
-        buf.write(u"\u01a4\7h\2\2\u01a4\u01a5\7v\2\2\u01a5\u01a6\7~\2\2\u01a6")
-        buf.write(u":\3\2\2\2\u01a7\u01a8\7^\2\2\u01a8\u01a9\7n\2\2\u01a9")
-        buf.write(u"\u01aa\7c\2\2\u01aa\u01ab\7p\2\2\u01ab\u01ac\7i\2\2\u01ac")
-        buf.write(u"\u01ad\7n\2\2\u01ad\u01ae\7g\2\2\u01ae<\3\2\2\2\u01af")
-        buf.write(u"\u01b0\7^\2\2\u01b0\u01b1\7t\2\2\u01b1\u01b2\7c\2\2\u01b2")
-        buf.write(u"\u01b3\7p\2\2\u01b3\u01b4\7i\2\2\u01b4\u01b5\7n\2\2\u01b5")
-        buf.write(u"\u01b6\7g\2\2\u01b6>\3\2\2\2\u01b7\u01b8\7^\2\2\u01b8")
-        buf.write(u"\u01b9\7n\2\2\u01b9\u01ba\7k\2\2\u01ba\u01bb\7o\2\2\u01bb")
-        buf.write(u"@\3\2\2\2\u01bc\u01bd\7^\2\2\u01bd\u01be\7v\2\2\u01be")
-        buf.write(u"\u01f4\7q\2\2\u01bf\u01c0\7^\2\2\u01c0\u01c1\7t\2\2\u01c1")
-        buf.write(u"\u01c2\7k\2\2\u01c2\u01c3\7i\2\2\u01c3\u01c4\7j\2\2\u01c4")
-        buf.write(u"\u01c5\7v\2\2\u01c5\u01c6\7c\2\2\u01c6\u01c7\7t\2\2\u01c7")
-        buf.write(u"\u01c8\7t\2\2\u01c8\u01c9\7q\2\2\u01c9\u01f4\7y\2\2\u01ca")
-        buf.write(u"\u01cb\7^\2\2\u01cb\u01cc\7T\2\2\u01cc\u01cd\7k\2\2\u01cd")
-        buf.write(u"\u01ce\7i\2\2\u01ce\u01cf\7j\2\2\u01cf\u01d0\7v\2\2\u01d0")
-        buf.write(u"\u01d1\7c\2\2\u01d1\u01d2\7t\2\2\u01d2\u01d3\7t\2\2\u01d3")
-        buf.write(u"\u01d4\7q\2\2\u01d4\u01f4\7y\2\2\u01d5\u01d6\7^\2\2\u01d6")
-        buf.write(u"\u01d7\7n\2\2\u01d7\u01d8\7q\2\2\u01d8\u01d9\7p\2\2\u01d9")
-        buf.write(u"\u01da\7i\2\2\u01da\u01db\7t\2\2\u01db\u01dc\7k\2\2\u01dc")
-        buf.write(u"\u01dd\7i\2\2\u01dd\u01de\7j\2\2\u01de\u01df\7v\2\2\u01df")
-        buf.write(u"\u01e0\7c\2\2\u01e0\u01e1\7t\2\2\u01e1\u01e2\7t\2\2\u01e2")
-        buf.write(u"\u01e3\7q\2\2\u01e3\u01f4\7y\2\2\u01e4\u01e5\7^\2\2\u01e5")
-        buf.write(u"\u01e6\7N\2\2\u01e6\u01e7\7q\2\2\u01e7\u01e8\7p\2\2\u01e8")
-        buf.write(u"\u01e9\7i\2\2\u01e9\u01ea\7t\2\2\u01ea\u01eb\7k\2\2\u01eb")
-        buf.write(u"\u01ec\7i\2\2\u01ec\u01ed\7j\2\2\u01ed\u01ee\7v\2\2\u01ee")
-        buf.write(u"\u01ef\7c\2\2\u01ef\u01f0\7t\2\2\u01f0\u01f1\7t\2\2\u01f1")
-        buf.write(u"\u01f2\7q\2\2\u01f2\u01f4\7y\2\2\u01f3\u01bc\3\2\2\2")
-        buf.write(u"\u01f3\u01bf\3\2\2\2\u01f3\u01ca\3\2\2\2\u01f3\u01d5")
-        buf.write(u"\3\2\2\2\u01f3\u01e4\3\2\2\2\u01f4B\3\2\2\2\u01f5\u01f6")
-        buf.write(u"\7^\2\2\u01f6\u01f7\7k\2\2\u01f7\u01f8\7p\2\2\u01f8\u01f9")
-        buf.write(u"\7v\2\2\u01f9D\3\2\2\2\u01fa\u01fb\7^\2\2\u01fb\u01fc")
-        buf.write(u"\7u\2\2\u01fc\u01fd\7w\2\2\u01fd\u01fe\7o\2\2\u01feF")
-        buf.write(u"\3\2\2\2\u01ff\u0200\7^\2\2\u0200\u0201\7r\2\2\u0201")
-        buf.write(u"\u0202\7t\2\2\u0202\u0203\7q\2\2\u0203\u0204\7f\2\2\u0204")
-        buf.write(u"H\3\2\2\2\u0205\u0206\7^\2\2\u0206\u0207\7g\2\2\u0207")
-        buf.write(u"\u0208\7z\2\2\u0208\u0209\7r\2\2\u0209J\3\2\2\2\u020a")
-        buf.write(u"\u020b\7^\2\2\u020b\u020c\7n\2\2\u020c\u020d\7q\2\2\u020d")
-        buf.write(u"\u020e\7i\2\2\u020eL\3\2\2\2\u020f\u0210\7^\2\2\u0210")
-        buf.write(u"\u0211\7n\2\2\u0211\u0212\7p\2\2\u0212N\3\2\2\2\u0213")
-        buf.write(u"\u0214\7^\2\2\u0214\u0215\7u\2\2\u0215\u0216\7k\2\2\u0216")
-        buf.write(u"\u0217\7p\2\2\u0217P\3\2\2\2\u0218\u0219\7^\2\2\u0219")
-        buf.write(u"\u021a\7e\2\2\u021a\u021b\7q\2\2\u021b\u021c\7u\2\2\u021c")
-        buf.write(u"R\3\2\2\2\u021d\u021e\7^\2\2\u021e\u021f\7v\2\2\u021f")
-        buf.write(u"\u0220\7c\2\2\u0220\u0221\7p\2\2\u0221T\3\2\2\2\u0222")
-        buf.write(u"\u0223\7^\2\2\u0223\u0224\7e\2\2\u0224\u0225\7u\2\2\u0225")
-        buf.write(u"\u0226\7e\2\2\u0226V\3\2\2\2\u0227\u0228\7^\2\2\u0228")
-        buf.write(u"\u0229\7u\2\2\u0229\u022a\7g\2\2\u022a\u022b\7e\2\2\u022b")
-        buf.write(u"X\3\2\2\2\u022c\u022d\7^\2\2\u022d\u022e\7e\2\2\u022e")
-        buf.write(u"\u022f\7q\2\2\u022f\u0230\7v\2\2\u0230Z\3\2\2\2\u0231")
-        buf.write(u"\u0232\7^\2\2\u0232\u0233\7c\2\2\u0233\u0234\7t\2\2\u0234")
-        buf.write(u"\u0235\7e\2\2\u0235\u0236\7u\2\2\u0236\u0237\7k\2\2\u0237")
-        buf.write(u"\u0238\7p\2\2\u0238\\\3\2\2\2\u0239\u023a\7^\2\2\u023a")
-        buf.write(u"\u023b\7c\2\2\u023b\u023c\7t\2\2\u023c\u023d\7e\2\2\u023d")
-        buf.write(u"\u023e\7e\2\2\u023e\u023f\7q\2\2\u023f\u0240\7u\2\2\u0240")
-        buf.write(u"^\3\2\2\2\u0241\u0242\7^\2\2\u0242\u0243\7c\2\2\u0243")
-        buf.write(u"\u0244\7t\2\2\u0244\u0245\7e\2\2\u0245\u0246\7v\2\2\u0246")
-        buf.write(u"\u0247\7c\2\2\u0247\u0248\7p\2\2\u0248`\3\2\2\2\u0249")
-        buf.write(u"\u024a\7^\2\2\u024a\u024b\7c\2\2\u024b\u024c\7t\2\2\u024c")
-        buf.write(u"\u024d\7e\2\2\u024d\u024e\7e\2\2\u024e\u024f\7u\2\2\u024f")
-        buf.write(u"\u0250\7e\2\2\u0250b\3\2\2\2\u0251\u0252\7^\2\2\u0252")
-        buf.write(u"\u0253\7c\2\2\u0253\u0254\7t\2\2\u0254\u0255\7e\2\2\u0255")
-        buf.write(u"\u0256\7u\2\2\u0256\u0257\7g\2\2\u0257\u0258\7e\2\2\u0258")
-        buf.write(u"d\3\2\2\2\u0259\u025a\7^\2\2\u025a\u025b\7c\2\2\u025b")
-        buf.write(u"\u025c\7t\2\2\u025c\u025d\7e\2\2\u025d\u025e\7e\2\2\u025e")
-        buf.write(u"\u025f\7q\2\2\u025f\u0260\7v\2\2\u0260f\3\2\2\2\u0261")
-        buf.write(u"\u0262\7^\2\2\u0262\u0263\7u\2\2\u0263\u0264\7k\2\2\u0264")
-        buf.write(u"\u0265\7p\2\2\u0265\u0266\7j\2\2\u0266h\3\2\2\2\u0267")
-        buf.write(u"\u0268\7^\2\2\u0268\u0269\7e\2\2\u0269\u026a\7q\2\2\u026a")
-        buf.write(u"\u026b\7u\2\2\u026b\u026c\7j\2\2\u026cj\3\2\2\2\u026d")
-        buf.write(u"\u026e\7^\2\2\u026e\u026f\7v\2\2\u026f\u0270\7c\2\2\u0270")
-        buf.write(u"\u0271\7p\2\2\u0271\u0272\7j\2\2\u0272l\3\2\2\2\u0273")
-        buf.write(u"\u0274\7^\2\2\u0274\u0275\7c\2\2\u0275\u0276\7t\2\2\u0276")
-        buf.write(u"\u0277\7u\2\2\u0277\u0278\7k\2\2\u0278\u0279\7p\2\2\u0279")
-        buf.write(u"\u027a\7j\2\2\u027an\3\2\2\2\u027b\u027c\7^\2\2\u027c")
-        buf.write(u"\u027d\7c\2\2\u027d\u027e\7t\2\2\u027e\u027f\7e\2\2\u027f")
-        buf.write(u"\u0280\7q\2\2\u0280\u0281\7u\2\2\u0281\u0282\7j\2\2\u0282")
-        buf.write(u"p\3\2\2\2\u0283\u0284\7^\2\2\u0284\u0285\7c\2\2\u0285")
-        buf.write(u"\u0286\7t\2\2\u0286\u0287\7v\2\2\u0287\u0288\7c\2\2\u0288")
-        buf.write(u"\u0289\7p\2\2\u0289\u028a\7j\2\2\u028ar\3\2\2\2\u028b")
-        buf.write(u"\u028c\7^\2\2\u028c\u028d\7n\2\2\u028d\u028e\7h\2\2\u028e")
-        buf.write(u"\u028f\7n\2\2\u028f\u0290\7q\2\2\u0290\u0291\7q\2\2\u0291")
-        buf.write(u"\u0292\7t\2\2\u0292t\3\2\2\2\u0293\u0294\7^\2\2\u0294")
-        buf.write(u"\u0295\7t\2\2\u0295\u0296\7h\2\2\u0296\u0297\7n\2\2\u0297")
-        buf.write(u"\u0298\7q\2\2\u0298\u0299\7q\2\2\u0299\u029a\7t\2\2\u029a")
-        buf.write(u"v\3\2\2\2\u029b\u029c\7^\2\2\u029c\u029d\7n\2\2\u029d")
-        buf.write(u"\u029e\7e\2\2\u029e\u029f\7g\2\2\u029f\u02a0\7k\2\2\u02a0")
-        buf.write(u"\u02a1\7n\2\2\u02a1x\3\2\2\2\u02a2\u02a3\7^\2\2\u02a3")
-        buf.write(u"\u02a4\7t\2\2\u02a4\u02a5\7e\2\2\u02a5\u02a6\7g\2\2\u02a6")
-        buf.write(u"\u02a7\7k\2\2\u02a7\u02a8\7n\2\2\u02a8z\3\2\2\2\u02a9")
-        buf.write(u"\u02aa\7^\2\2\u02aa\u02ab\7u\2\2\u02ab\u02ac\7s\2\2\u02ac")
-        buf.write(u"\u02ad\7t\2\2\u02ad\u02ae\7v\2\2\u02ae|\3\2\2\2\u02af")
-        buf.write(u"\u02b0\7^\2\2\u02b0\u02b1\7q\2\2\u02b1\u02b2\7x\2\2\u02b2")
-        buf.write(u"\u02b3\7g\2\2\u02b3\u02b4\7t\2\2\u02b4\u02b5\7n\2\2\u02b5")
-        buf.write(u"\u02b6\7k\2\2\u02b6\u02b7\7p\2\2\u02b7\u02b8\7g\2\2\u02b8")
-        buf.write(u"~\3\2\2\2\u02b9\u02ba\7^\2\2\u02ba\u02bb\7v\2\2\u02bb")
-        buf.write(u"\u02bc\7k\2\2\u02bc\u02bd\7o\2\2\u02bd\u02be\7g\2\2\u02be")
-        buf.write(u"\u02bf\7u\2\2\u02bf\u0080\3\2\2\2\u02c0\u02c1\7^\2\2")
-        buf.write(u"\u02c1\u02c2\7e\2\2\u02c2\u02c3\7f\2\2\u02c3\u02c4\7")
-        buf.write(u"q\2\2\u02c4\u02c5\7v\2\2\u02c5\u0082\3\2\2\2\u02c6\u02c7")
-        buf.write(u"\7^\2\2\u02c7\u02c8\7f\2\2\u02c8\u02c9\7k\2\2\u02c9\u02ca")
-        buf.write(u"\7x\2\2\u02ca\u0084\3\2\2\2\u02cb\u02cc\7^\2\2\u02cc")
-        buf.write(u"\u02cd\7h\2\2\u02cd\u02ce\7t\2\2\u02ce\u02cf\7c\2\2\u02cf")
-        buf.write(u"\u02d0\7e\2\2\u02d0\u0086\3\2\2\2\u02d1\u02d2\7^\2\2")
-        buf.write(u"\u02d2\u02d3\7d\2\2\u02d3\u02d4\7k\2\2\u02d4\u02d5\7")
-        buf.write(u"p\2\2\u02d5\u02d6\7q\2\2\u02d6\u02d7\7o\2\2\u02d7\u0088")
-        buf.write(u"\3\2\2\2\u02d8\u02d9\7^\2\2\u02d9\u02da\7f\2\2\u02da")
-        buf.write(u"\u02db\7d\2\2\u02db\u02dc\7k\2\2\u02dc\u02dd\7p\2\2\u02dd")
-        buf.write(u"\u02de\7q\2\2\u02de\u02df\7o\2\2\u02df\u008a\3\2\2\2")
-        buf.write(u"\u02e0\u02e1\7^\2\2\u02e1\u02e2\7v\2\2\u02e2\u02e3\7")
-        buf.write(u"d\2\2\u02e3\u02e4\7k\2\2\u02e4\u02e5\7p\2\2\u02e5\u02e6")
-        buf.write(u"\7q\2\2\u02e6\u02e7\7o\2\2\u02e7\u008c\3\2\2\2\u02e8")
-        buf.write(u"\u02e9\7^\2\2\u02e9\u02ea\7o\2\2\u02ea\u02eb\7c\2\2\u02eb")
-        buf.write(u"\u02ec\7v\2\2\u02ec\u02ed\7j\2\2\u02ed\u02ee\7k\2\2\u02ee")
-        buf.write(u"\u02ef\7v\2\2\u02ef\u008e\3\2\2\2\u02f0\u02f1\7a\2\2")
-        buf.write(u"\u02f1\u0090\3\2\2\2\u02f2\u02f3\7`\2\2\u02f3\u0092\3")
-        buf.write(u"\2\2\2\u02f4\u02f5\7<\2\2\u02f5\u0094\3\2\2\2\u02f6\u02f7")
-        buf.write(u"\t\2\2\2\u02f7\u0096\3\2\2\2\u02f8\u02fc\7f\2\2\u02f9")
-        buf.write(u"\u02fb\5\u0095K\2\u02fa\u02f9\3\2\2\2\u02fb\u02fe\3\2")
-        buf.write(u"\2\2\u02fc\u02fd\3\2\2\2\u02fc\u02fa\3\2\2\2\u02fd\u0306")
-        buf.write(u"\3\2\2\2\u02fe\u02fc\3\2\2\2\u02ff\u0307\t\3\2\2\u0300")
-        buf.write(u"\u0302\7^\2\2\u0301\u0303\t\3\2\2\u0302\u0301\3\2\2\2")
-        buf.write(u"\u0303\u0304\3\2\2\2\u0304\u0302\3\2\2\2\u0304\u0305")
-        buf.write(u"\3\2\2\2\u0305\u0307\3\2\2\2\u0306\u02ff\3\2\2\2\u0306")
-        buf.write(u"\u0300\3\2\2\2\u0307\u0098\3\2\2\2\u0308\u0309\t\3\2")
-        buf.write(u"\2\u0309\u009a\3\2\2\2\u030a\u030b\t\4\2\2\u030b\u009c")
-        buf.write(u"\3\2\2\2\u030c\u030e\5\u009bN\2\u030d\u030c\3\2\2\2\u030e")
-        buf.write(u"\u030f\3\2\2\2\u030f\u030d\3\2\2\2\u030f\u0310\3\2\2")
-        buf.write(u"\2\u0310\u0318\3\2\2\2\u0311\u0312\7.\2\2\u0312\u0313")
-        buf.write(u"\5\u009bN\2\u0313\u0314\5\u009bN\2\u0314\u0315\5\u009b")
-        buf.write(u"N\2\u0315\u0317\3\2\2\2\u0316\u0311\3\2\2\2\u0317\u031a")
-        buf.write(u"\3\2\2\2\u0318\u0316\3\2\2\2\u0318\u0319\3\2\2\2\u0319")
-        buf.write(u"\u0332\3\2\2\2\u031a\u0318\3\2\2\2\u031b\u031d\5\u009b")
-        buf.write(u"N\2\u031c\u031b\3\2\2\2\u031d\u0320\3\2\2\2\u031e\u031c")
-        buf.write(u"\3\2\2\2\u031e\u031f\3\2\2\2\u031f\u0328\3\2\2\2\u0320")
-        buf.write(u"\u031e\3\2\2\2\u0321\u0322\7.\2\2\u0322\u0323\5\u009b")
-        buf.write(u"N\2\u0323\u0324\5\u009bN\2\u0324\u0325\5\u009bN\2\u0325")
-        buf.write(u"\u0327\3\2\2\2\u0326\u0321\3\2\2\2\u0327\u032a\3\2\2")
-        buf.write(u"\2\u0328\u0326\3\2\2\2\u0328\u0329\3\2\2\2\u0329\u032b")
-        buf.write(u"\3\2\2\2\u032a\u0328\3\2\2\2\u032b\u032d\7\60\2\2\u032c")
-        buf.write(u"\u032e\5\u009bN\2\u032d\u032c\3\2\2\2\u032e\u032f\3\2")
-        buf.write(u"\2\2\u032f\u032d\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u0332")
-        buf.write(u"\3\2\2\2\u0331\u030d\3\2\2\2\u0331\u031e\3\2\2\2\u0332")
-        buf.write(u"\u009e\3\2\2\2\u0333\u0337\7(\2\2\u0334\u0336\5\u0095")
-        buf.write(u"K\2\u0335\u0334\3\2\2\2\u0336\u0339\3\2\2\2\u0337\u0338")
-        buf.write(u"\3\2\2\2\u0337\u0335\3\2\2\2\u0338\u033b\3\2\2\2\u0339")
-        buf.write(u"\u0337\3\2\2\2\u033a\u0333\3\2\2\2\u033a\u033b\3\2\2")
-        buf.write(u"\2\u033b\u033c\3\2\2\2\u033c\u0348\7?\2\2\u033d\u0345")
-        buf.write(u"\7?\2\2\u033e\u0340\5\u0095K\2\u033f\u033e\3\2\2\2\u0340")
-        buf.write(u"\u0343\3\2\2\2\u0341\u0342\3\2\2\2\u0341\u033f\3\2\2")
-        buf.write(u"\2\u0342\u0344\3\2\2\2\u0343\u0341\3\2\2\2\u0344\u0346")
-        buf.write(u"\7(\2\2\u0345\u0341\3\2\2\2\u0345\u0346\3\2\2\2\u0346")
-        buf.write(u"\u0348\3\2\2\2\u0347\u033a\3\2\2\2\u0347\u033d\3\2\2")
-        buf.write(u"\2\u0348\u00a0\3\2\2\2\u0349\u034a\7^\2\2\u034a\u034b")
-        buf.write(u"\7p\2\2\u034b\u034c\7g\2\2\u034c\u034d\7s\2\2\u034d\u00a2")
-        buf.write(u"\3\2\2\2\u034e\u034f\7>\2\2\u034f\u00a4\3\2\2\2\u0350")
-        buf.write(u"\u0351\7^\2\2\u0351\u0352\7n\2\2\u0352\u0353\7g\2\2\u0353")
-        buf.write(u"\u035a\7s\2\2\u0354\u0355\7^\2\2\u0355\u0356\7n\2\2\u0356")
-        buf.write(u"\u035a\7g\2\2\u0357\u035a\5\u00a7T\2\u0358\u035a\5\u00a9")
-        buf.write(u"U\2\u0359\u0350\3\2\2\2\u0359\u0354\3\2\2\2\u0359\u0357")
-        buf.write(u"\3\2\2\2\u0359\u0358\3\2\2\2\u035a\u00a6\3\2\2\2\u035b")
-        buf.write(u"\u035c\7^\2\2\u035c\u035d\7n\2\2\u035d\u035e\7g\2\2\u035e")
-        buf.write(u"\u035f\7s\2\2\u035f\u0360\7s\2\2\u0360\u00a8\3\2\2\2")
-        buf.write(u"\u0361\u0362\7^\2\2\u0362\u0363\7n\2\2\u0363\u0364\7")
-        buf.write(u"g\2\2\u0364\u0365\7s\2\2\u0365\u0366\7u\2\2\u0366\u0367")
-        buf.write(u"\7n\2\2\u0367\u0368\7c\2\2\u0368\u0369\7p\2\2\u0369\u036a")
-        buf.write(u"\7v\2\2\u036a\u00aa\3\2\2\2\u036b\u036c\7@\2\2\u036c")
-        buf.write(u"\u00ac\3\2\2\2\u036d\u036e\7^\2\2\u036e\u036f\7i\2\2")
-        buf.write(u"\u036f\u0370\7g\2\2\u0370\u0377\7s\2\2\u0371\u0372\7")
-        buf.write(u"^\2\2\u0372\u0373\7i\2\2\u0373\u0377\7g\2\2\u0374\u0377")
-        buf.write(u"\5\u00afX\2\u0375\u0377\5\u00b1Y\2\u0376\u036d\3\2\2")
-        buf.write(u"\2\u0376\u0371\3\2\2\2\u0376\u0374\3\2\2\2\u0376\u0375")
-        buf.write(u"\3\2\2\2\u0377\u00ae\3\2\2\2\u0378\u0379\7^\2\2\u0379")
-        buf.write(u"\u037a\7i\2\2\u037a\u037b\7g\2\2\u037b\u037c\7s\2\2\u037c")
-        buf.write(u"\u037d\7s\2\2\u037d\u00b0\3\2\2\2\u037e\u037f\7^\2\2")
-        buf.write(u"\u037f\u0380\7i\2\2\u0380\u0381\7g\2\2\u0381\u0382\7")
-        buf.write(u"s\2\2\u0382\u0383\7u\2\2\u0383\u0384\7n\2\2\u0384\u0385")
-        buf.write(u"\7c\2\2\u0385\u0386\7p\2\2\u0386\u0387\7v\2\2\u0387\u00b2")
-        buf.write(u"\3\2\2\2\u0388\u0389\7#\2\2\u0389\u00b4\3\2\2\2\u038a")
-        buf.write(u"\u038c\7^\2\2\u038b\u038d\t\3\2\2\u038c\u038b\3\2\2\2")
-        buf.write(u"\u038d\u038e\3\2\2\2\u038e\u038c\3\2\2\2\u038e\u038f")
-        buf.write(u"\3\2\2\2\u038f\u00b6\3\2\2\2\33\2\u00bc\u00cc\u00db\u00ec")
-        buf.write(u"\u0110\u0178\u01f3\u02fc\u0304\u0306\u030f\u0318\u031e")
-        buf.write(u"\u0328\u032f\u0331\u0337\u033a\u0341\u0345\u0347\u0359")
-        buf.write(u"\u0376\u038e\3\b\2\2")
-        return buf.getvalue()
-
+    return [
+        4,0,88,910,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
+        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
+        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
+        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
+        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
+        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
+        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
+        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
+        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
+        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
+        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
+        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
+        78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
+        84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,1,0,1,0,1,1,
+        4,1,185,8,1,11,1,12,1,186,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
+        2,1,2,1,2,1,2,1,2,3,2,203,8,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
+        3,1,3,1,3,1,3,1,3,3,3,218,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
+        4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,235,8,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
+        5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
+        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,271,8,7,1,7,1,
+        7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
+        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
+        9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
+        11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
+        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
+        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
+        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
+        12,1,12,1,12,1,12,3,12,375,8,12,1,12,1,12,1,13,1,13,1,14,1,14,1,
+        15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,
+        21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,
+        26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
+        28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,
+        29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,
+        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
+        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
+        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
+        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,498,8,
+        31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,
+        34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,
+        36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,
+        39,1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,42,1,
+        42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,
+        44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,
+        46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,
+        47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,
+        49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,
+        51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,
+        53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
+        55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,
+        56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,
+        58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,
+        60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
+        61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,
+        63,1,63,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,1,
+        66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,1,
+        67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,
+        69,1,69,1,69,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,
+        74,1,74,5,74,761,8,74,10,74,12,74,764,9,74,1,74,1,74,1,74,4,74,769,
+        8,74,11,74,12,74,770,3,74,773,8,74,1,75,1,75,1,76,1,76,1,77,4,77,
+        780,8,77,11,77,12,77,781,1,77,1,77,1,77,1,77,1,77,5,77,789,8,77,
+        10,77,12,77,792,9,77,1,77,5,77,795,8,77,10,77,12,77,798,9,77,1,77,
+        1,77,1,77,1,77,1,77,5,77,805,8,77,10,77,12,77,808,9,77,1,77,1,77,
+        4,77,812,8,77,11,77,12,77,813,3,77,816,8,77,1,78,1,78,5,78,820,8,
+        78,10,78,12,78,823,9,78,3,78,825,8,78,1,78,1,78,1,78,5,78,830,8,
+        78,10,78,12,78,833,9,78,1,78,3,78,836,8,78,3,78,838,8,78,1,79,1,
+        79,1,79,1,79,1,79,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,
+        81,1,81,3,81,856,8,81,1,82,1,82,1,82,1,82,1,82,1,82,1,83,1,83,1,
+        83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,85,1,85,1,85,1,
+        85,1,85,1,85,1,85,1,85,1,85,3,85,885,8,85,1,86,1,86,1,86,1,86,1,
+        86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,88,1,
+        88,1,89,1,89,4,89,907,8,89,11,89,12,89,908,3,762,821,831,0,90,1,
+        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
+        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
+        25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
+        36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,
+        47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,
+        57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,
+        133,67,135,68,137,69,139,70,141,71,143,72,145,73,147,0,149,74,151,
+        75,153,0,155,76,157,77,159,78,161,79,163,80,165,81,167,82,169,83,
+        171,84,173,85,175,86,177,87,179,88,1,0,3,3,0,9,10,13,13,32,32,2,
+        0,65,90,97,122,1,0,48,57,949,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
+        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
+        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
+        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
+        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
+        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
+        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
+        67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
+        77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
+        87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,
+        97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,
+        0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,
+        1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,
+        0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,
+        0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,
+        143,1,0,0,0,0,145,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,155,1,0,
+        0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,
+        1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,
+        0,175,1,0,0,0,0,177,1,0,0,0,0,179,1,0,0,0,1,181,1,0,0,0,3,184,1,
+        0,0,0,5,202,1,0,0,0,7,217,1,0,0,0,9,234,1,0,0,0,11,238,1,0,0,0,13,
+        246,1,0,0,0,15,270,1,0,0,0,17,274,1,0,0,0,19,289,1,0,0,0,21,306,
+        1,0,0,0,23,314,1,0,0,0,25,374,1,0,0,0,27,378,1,0,0,0,29,380,1,0,
+        0,0,31,382,1,0,0,0,33,384,1,0,0,0,35,386,1,0,0,0,37,388,1,0,0,0,
+        39,390,1,0,0,0,41,392,1,0,0,0,43,394,1,0,0,0,45,397,1,0,0,0,47,400,
+        1,0,0,0,49,402,1,0,0,0,51,404,1,0,0,0,53,406,1,0,0,0,55,414,1,0,
+        0,0,57,421,1,0,0,0,59,429,1,0,0,0,61,437,1,0,0,0,63,497,1,0,0,0,
+        65,499,1,0,0,0,67,504,1,0,0,0,69,509,1,0,0,0,71,515,1,0,0,0,73,520,
+        1,0,0,0,75,525,1,0,0,0,77,529,1,0,0,0,79,534,1,0,0,0,81,539,1,0,
+        0,0,83,544,1,0,0,0,85,549,1,0,0,0,87,554,1,0,0,0,89,559,1,0,0,0,
+        91,567,1,0,0,0,93,575,1,0,0,0,95,583,1,0,0,0,97,591,1,0,0,0,99,599,
+        1,0,0,0,101,607,1,0,0,0,103,613,1,0,0,0,105,619,1,0,0,0,107,625,
+        1,0,0,0,109,633,1,0,0,0,111,641,1,0,0,0,113,649,1,0,0,0,115,657,
+        1,0,0,0,117,665,1,0,0,0,119,672,1,0,0,0,121,679,1,0,0,0,123,685,
+        1,0,0,0,125,695,1,0,0,0,127,702,1,0,0,0,129,708,1,0,0,0,131,713,
+        1,0,0,0,133,719,1,0,0,0,135,726,1,0,0,0,137,734,1,0,0,0,139,742,
+        1,0,0,0,141,750,1,0,0,0,143,752,1,0,0,0,145,754,1,0,0,0,147,756,
+        1,0,0,0,149,758,1,0,0,0,151,774,1,0,0,0,153,776,1,0,0,0,155,815,
+        1,0,0,0,157,837,1,0,0,0,159,839,1,0,0,0,161,844,1,0,0,0,163,855,
+        1,0,0,0,165,857,1,0,0,0,167,863,1,0,0,0,169,873,1,0,0,0,171,884,
+        1,0,0,0,173,886,1,0,0,0,175,892,1,0,0,0,177,902,1,0,0,0,179,904,
+        1,0,0,0,181,182,5,44,0,0,182,2,1,0,0,0,183,185,7,0,0,0,184,183,1,
+        0,0,0,185,186,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,188,1,
+        0,0,0,188,189,6,1,0,0,189,4,1,0,0,0,190,191,5,92,0,0,191,203,5,44,
+        0,0,192,193,5,92,0,0,193,194,5,116,0,0,194,195,5,104,0,0,195,196,
+        5,105,0,0,196,197,5,110,0,0,197,198,5,115,0,0,198,199,5,112,0,0,
+        199,200,5,97,0,0,200,201,5,99,0,0,201,203,5,101,0,0,202,190,1,0,
+        0,0,202,192,1,0,0,0,203,204,1,0,0,0,204,205,6,2,0,0,205,6,1,0,0,
+        0,206,207,5,92,0,0,207,218,5,58,0,0,208,209,5,92,0,0,209,210,5,109,
+        0,0,210,211,5,101,0,0,211,212,5,100,0,0,212,213,5,115,0,0,213,214,
+        5,112,0,0,214,215,5,97,0,0,215,216,5,99,0,0,216,218,5,101,0,0,217,
+        206,1,0,0,0,217,208,1,0,0,0,218,219,1,0,0,0,219,220,6,3,0,0,220,
+        8,1,0,0,0,221,222,5,92,0,0,222,235,5,59,0,0,223,224,5,92,0,0,224,
+        225,5,116,0,0,225,226,5,104,0,0,226,227,5,105,0,0,227,228,5,99,0,
+        0,228,229,5,107,0,0,229,230,5,115,0,0,230,231,5,112,0,0,231,232,
+        5,97,0,0,232,233,5,99,0,0,233,235,5,101,0,0,234,221,1,0,0,0,234,
+        223,1,0,0,0,235,236,1,0,0,0,236,237,6,4,0,0,237,10,1,0,0,0,238,239,
+        5,92,0,0,239,240,5,113,0,0,240,241,5,117,0,0,241,242,5,97,0,0,242,
+        243,5,100,0,0,243,244,1,0,0,0,244,245,6,5,0,0,245,12,1,0,0,0,246,
+        247,5,92,0,0,247,248,5,113,0,0,248,249,5,113,0,0,249,250,5,117,0,
+        0,250,251,5,97,0,0,251,252,5,100,0,0,252,253,1,0,0,0,253,254,6,6,
+        0,0,254,14,1,0,0,0,255,256,5,92,0,0,256,271,5,33,0,0,257,258,5,92,
+        0,0,258,259,5,110,0,0,259,260,5,101,0,0,260,261,5,103,0,0,261,262,
+        5,116,0,0,262,263,5,104,0,0,263,264,5,105,0,0,264,265,5,110,0,0,
+        265,266,5,115,0,0,266,267,5,112,0,0,267,268,5,97,0,0,268,269,5,99,
+        0,0,269,271,5,101,0,0,270,255,1,0,0,0,270,257,1,0,0,0,271,272,1,
+        0,0,0,272,273,6,7,0,0,273,16,1,0,0,0,274,275,5,92,0,0,275,276,5,
+        110,0,0,276,277,5,101,0,0,277,278,5,103,0,0,278,279,5,109,0,0,279,
+        280,5,101,0,0,280,281,5,100,0,0,281,282,5,115,0,0,282,283,5,112,
+        0,0,283,284,5,97,0,0,284,285,5,99,0,0,285,286,5,101,0,0,286,287,
+        1,0,0,0,287,288,6,8,0,0,288,18,1,0,0,0,289,290,5,92,0,0,290,291,
+        5,110,0,0,291,292,5,101,0,0,292,293,5,103,0,0,293,294,5,116,0,0,
+        294,295,5,104,0,0,295,296,5,105,0,0,296,297,5,99,0,0,297,298,5,107,
+        0,0,298,299,5,115,0,0,299,300,5,112,0,0,300,301,5,97,0,0,301,302,
+        5,99,0,0,302,303,5,101,0,0,303,304,1,0,0,0,304,305,6,9,0,0,305,20,
+        1,0,0,0,306,307,5,92,0,0,307,308,5,108,0,0,308,309,5,101,0,0,309,
+        310,5,102,0,0,310,311,5,116,0,0,311,312,1,0,0,0,312,313,6,10,0,0,
+        313,22,1,0,0,0,314,315,5,92,0,0,315,316,5,114,0,0,316,317,5,105,
+        0,0,317,318,5,103,0,0,318,319,5,104,0,0,319,320,5,116,0,0,320,321,
+        1,0,0,0,321,322,6,11,0,0,322,24,1,0,0,0,323,324,5,92,0,0,324,325,
+        5,118,0,0,325,326,5,114,0,0,326,327,5,117,0,0,327,328,5,108,0,0,
+        328,375,5,101,0,0,329,330,5,92,0,0,330,331,5,118,0,0,331,332,5,99,
+        0,0,332,333,5,101,0,0,333,334,5,110,0,0,334,335,5,116,0,0,335,336,
+        5,101,0,0,336,375,5,114,0,0,337,338,5,92,0,0,338,339,5,118,0,0,339,
+        340,5,98,0,0,340,341,5,111,0,0,341,375,5,120,0,0,342,343,5,92,0,
+        0,343,344,5,118,0,0,344,345,5,115,0,0,345,346,5,107,0,0,346,347,
+        5,105,0,0,347,375,5,112,0,0,348,349,5,92,0,0,349,350,5,118,0,0,350,
+        351,5,115,0,0,351,352,5,112,0,0,352,353,5,97,0,0,353,354,5,99,0,
+        0,354,375,5,101,0,0,355,356,5,92,0,0,356,357,5,104,0,0,357,358,5,
+        102,0,0,358,359,5,105,0,0,359,375,5,108,0,0,360,361,5,92,0,0,361,
+        375,5,42,0,0,362,363,5,92,0,0,363,375,5,45,0,0,364,365,5,92,0,0,
+        365,375,5,46,0,0,366,367,5,92,0,0,367,375,5,47,0,0,368,369,5,92,
+        0,0,369,375,5,34,0,0,370,371,5,92,0,0,371,375,5,40,0,0,372,373,5,
+        92,0,0,373,375,5,61,0,0,374,323,1,0,0,0,374,329,1,0,0,0,374,337,
+        1,0,0,0,374,342,1,0,0,0,374,348,1,0,0,0,374,355,1,0,0,0,374,360,
+        1,0,0,0,374,362,1,0,0,0,374,364,1,0,0,0,374,366,1,0,0,0,374,368,
+        1,0,0,0,374,370,1,0,0,0,374,372,1,0,0,0,375,376,1,0,0,0,376,377,
+        6,12,0,0,377,26,1,0,0,0,378,379,5,43,0,0,379,28,1,0,0,0,380,381,
+        5,45,0,0,381,30,1,0,0,0,382,383,5,42,0,0,383,32,1,0,0,0,384,385,
+        5,47,0,0,385,34,1,0,0,0,386,387,5,40,0,0,387,36,1,0,0,0,388,389,
+        5,41,0,0,389,38,1,0,0,0,390,391,5,123,0,0,391,40,1,0,0,0,392,393,
+        5,125,0,0,393,42,1,0,0,0,394,395,5,92,0,0,395,396,5,123,0,0,396,
+        44,1,0,0,0,397,398,5,92,0,0,398,399,5,125,0,0,399,46,1,0,0,0,400,
+        401,5,91,0,0,401,48,1,0,0,0,402,403,5,93,0,0,403,50,1,0,0,0,404,
+        405,5,124,0,0,405,52,1,0,0,0,406,407,5,92,0,0,407,408,5,114,0,0,
+        408,409,5,105,0,0,409,410,5,103,0,0,410,411,5,104,0,0,411,412,5,
+        116,0,0,412,413,5,124,0,0,413,54,1,0,0,0,414,415,5,92,0,0,415,416,
+        5,108,0,0,416,417,5,101,0,0,417,418,5,102,0,0,418,419,5,116,0,0,
+        419,420,5,124,0,0,420,56,1,0,0,0,421,422,5,92,0,0,422,423,5,108,
+        0,0,423,424,5,97,0,0,424,425,5,110,0,0,425,426,5,103,0,0,426,427,
+        5,108,0,0,427,428,5,101,0,0,428,58,1,0,0,0,429,430,5,92,0,0,430,
+        431,5,114,0,0,431,432,5,97,0,0,432,433,5,110,0,0,433,434,5,103,0,
+        0,434,435,5,108,0,0,435,436,5,101,0,0,436,60,1,0,0,0,437,438,5,92,
+        0,0,438,439,5,108,0,0,439,440,5,105,0,0,440,441,5,109,0,0,441,62,
+        1,0,0,0,442,443,5,92,0,0,443,444,5,116,0,0,444,498,5,111,0,0,445,
+        446,5,92,0,0,446,447,5,114,0,0,447,448,5,105,0,0,448,449,5,103,0,
+        0,449,450,5,104,0,0,450,451,5,116,0,0,451,452,5,97,0,0,452,453,5,
+        114,0,0,453,454,5,114,0,0,454,455,5,111,0,0,455,498,5,119,0,0,456,
+        457,5,92,0,0,457,458,5,82,0,0,458,459,5,105,0,0,459,460,5,103,0,
+        0,460,461,5,104,0,0,461,462,5,116,0,0,462,463,5,97,0,0,463,464,5,
+        114,0,0,464,465,5,114,0,0,465,466,5,111,0,0,466,498,5,119,0,0,467,
+        468,5,92,0,0,468,469,5,108,0,0,469,470,5,111,0,0,470,471,5,110,0,
+        0,471,472,5,103,0,0,472,473,5,114,0,0,473,474,5,105,0,0,474,475,
+        5,103,0,0,475,476,5,104,0,0,476,477,5,116,0,0,477,478,5,97,0,0,478,
+        479,5,114,0,0,479,480,5,114,0,0,480,481,5,111,0,0,481,498,5,119,
+        0,0,482,483,5,92,0,0,483,484,5,76,0,0,484,485,5,111,0,0,485,486,
+        5,110,0,0,486,487,5,103,0,0,487,488,5,114,0,0,488,489,5,105,0,0,
+        489,490,5,103,0,0,490,491,5,104,0,0,491,492,5,116,0,0,492,493,5,
+        97,0,0,493,494,5,114,0,0,494,495,5,114,0,0,495,496,5,111,0,0,496,
+        498,5,119,0,0,497,442,1,0,0,0,497,445,1,0,0,0,497,456,1,0,0,0,497,
+        467,1,0,0,0,497,482,1,0,0,0,498,64,1,0,0,0,499,500,5,92,0,0,500,
+        501,5,105,0,0,501,502,5,110,0,0,502,503,5,116,0,0,503,66,1,0,0,0,
+        504,505,5,92,0,0,505,506,5,115,0,0,506,507,5,117,0,0,507,508,5,109,
+        0,0,508,68,1,0,0,0,509,510,5,92,0,0,510,511,5,112,0,0,511,512,5,
+        114,0,0,512,513,5,111,0,0,513,514,5,100,0,0,514,70,1,0,0,0,515,516,
+        5,92,0,0,516,517,5,101,0,0,517,518,5,120,0,0,518,519,5,112,0,0,519,
+        72,1,0,0,0,520,521,5,92,0,0,521,522,5,108,0,0,522,523,5,111,0,0,
+        523,524,5,103,0,0,524,74,1,0,0,0,525,526,5,92,0,0,526,527,5,108,
+        0,0,527,528,5,110,0,0,528,76,1,0,0,0,529,530,5,92,0,0,530,531,5,
+        115,0,0,531,532,5,105,0,0,532,533,5,110,0,0,533,78,1,0,0,0,534,535,
+        5,92,0,0,535,536,5,99,0,0,536,537,5,111,0,0,537,538,5,115,0,0,538,
+        80,1,0,0,0,539,540,5,92,0,0,540,541,5,116,0,0,541,542,5,97,0,0,542,
+        543,5,110,0,0,543,82,1,0,0,0,544,545,5,92,0,0,545,546,5,99,0,0,546,
+        547,5,115,0,0,547,548,5,99,0,0,548,84,1,0,0,0,549,550,5,92,0,0,550,
+        551,5,115,0,0,551,552,5,101,0,0,552,553,5,99,0,0,553,86,1,0,0,0,
+        554,555,5,92,0,0,555,556,5,99,0,0,556,557,5,111,0,0,557,558,5,116,
+        0,0,558,88,1,0,0,0,559,560,5,92,0,0,560,561,5,97,0,0,561,562,5,114,
+        0,0,562,563,5,99,0,0,563,564,5,115,0,0,564,565,5,105,0,0,565,566,
+        5,110,0,0,566,90,1,0,0,0,567,568,5,92,0,0,568,569,5,97,0,0,569,570,
+        5,114,0,0,570,571,5,99,0,0,571,572,5,99,0,0,572,573,5,111,0,0,573,
+        574,5,115,0,0,574,92,1,0,0,0,575,576,5,92,0,0,576,577,5,97,0,0,577,
+        578,5,114,0,0,578,579,5,99,0,0,579,580,5,116,0,0,580,581,5,97,0,
+        0,581,582,5,110,0,0,582,94,1,0,0,0,583,584,5,92,0,0,584,585,5,97,
+        0,0,585,586,5,114,0,0,586,587,5,99,0,0,587,588,5,99,0,0,588,589,
+        5,115,0,0,589,590,5,99,0,0,590,96,1,0,0,0,591,592,5,92,0,0,592,593,
+        5,97,0,0,593,594,5,114,0,0,594,595,5,99,0,0,595,596,5,115,0,0,596,
+        597,5,101,0,0,597,598,5,99,0,0,598,98,1,0,0,0,599,600,5,92,0,0,600,
+        601,5,97,0,0,601,602,5,114,0,0,602,603,5,99,0,0,603,604,5,99,0,0,
+        604,605,5,111,0,0,605,606,5,116,0,0,606,100,1,0,0,0,607,608,5,92,
+        0,0,608,609,5,115,0,0,609,610,5,105,0,0,610,611,5,110,0,0,611,612,
+        5,104,0,0,612,102,1,0,0,0,613,614,5,92,0,0,614,615,5,99,0,0,615,
+        616,5,111,0,0,616,617,5,115,0,0,617,618,5,104,0,0,618,104,1,0,0,
+        0,619,620,5,92,0,0,620,621,5,116,0,0,621,622,5,97,0,0,622,623,5,
+        110,0,0,623,624,5,104,0,0,624,106,1,0,0,0,625,626,5,92,0,0,626,627,
+        5,97,0,0,627,628,5,114,0,0,628,629,5,115,0,0,629,630,5,105,0,0,630,
+        631,5,110,0,0,631,632,5,104,0,0,632,108,1,0,0,0,633,634,5,92,0,0,
+        634,635,5,97,0,0,635,636,5,114,0,0,636,637,5,99,0,0,637,638,5,111,
+        0,0,638,639,5,115,0,0,639,640,5,104,0,0,640,110,1,0,0,0,641,642,
+        5,92,0,0,642,643,5,97,0,0,643,644,5,114,0,0,644,645,5,116,0,0,645,
+        646,5,97,0,0,646,647,5,110,0,0,647,648,5,104,0,0,648,112,1,0,0,0,
+        649,650,5,92,0,0,650,651,5,108,0,0,651,652,5,102,0,0,652,653,5,108,
+        0,0,653,654,5,111,0,0,654,655,5,111,0,0,655,656,5,114,0,0,656,114,
+        1,0,0,0,657,658,5,92,0,0,658,659,5,114,0,0,659,660,5,102,0,0,660,
+        661,5,108,0,0,661,662,5,111,0,0,662,663,5,111,0,0,663,664,5,114,
+        0,0,664,116,1,0,0,0,665,666,5,92,0,0,666,667,5,108,0,0,667,668,5,
+        99,0,0,668,669,5,101,0,0,669,670,5,105,0,0,670,671,5,108,0,0,671,
+        118,1,0,0,0,672,673,5,92,0,0,673,674,5,114,0,0,674,675,5,99,0,0,
+        675,676,5,101,0,0,676,677,5,105,0,0,677,678,5,108,0,0,678,120,1,
+        0,0,0,679,680,5,92,0,0,680,681,5,115,0,0,681,682,5,113,0,0,682,683,
+        5,114,0,0,683,684,5,116,0,0,684,122,1,0,0,0,685,686,5,92,0,0,686,
+        687,5,111,0,0,687,688,5,118,0,0,688,689,5,101,0,0,689,690,5,114,
+        0,0,690,691,5,108,0,0,691,692,5,105,0,0,692,693,5,110,0,0,693,694,
+        5,101,0,0,694,124,1,0,0,0,695,696,5,92,0,0,696,697,5,116,0,0,697,
+        698,5,105,0,0,698,699,5,109,0,0,699,700,5,101,0,0,700,701,5,115,
+        0,0,701,126,1,0,0,0,702,703,5,92,0,0,703,704,5,99,0,0,704,705,5,
+        100,0,0,705,706,5,111,0,0,706,707,5,116,0,0,707,128,1,0,0,0,708,
+        709,5,92,0,0,709,710,5,100,0,0,710,711,5,105,0,0,711,712,5,118,0,
+        0,712,130,1,0,0,0,713,714,5,92,0,0,714,715,5,102,0,0,715,716,5,114,
+        0,0,716,717,5,97,0,0,717,718,5,99,0,0,718,132,1,0,0,0,719,720,5,
+        92,0,0,720,721,5,98,0,0,721,722,5,105,0,0,722,723,5,110,0,0,723,
+        724,5,111,0,0,724,725,5,109,0,0,725,134,1,0,0,0,726,727,5,92,0,0,
+        727,728,5,100,0,0,728,729,5,98,0,0,729,730,5,105,0,0,730,731,5,110,
+        0,0,731,732,5,111,0,0,732,733,5,109,0,0,733,136,1,0,0,0,734,735,
+        5,92,0,0,735,736,5,116,0,0,736,737,5,98,0,0,737,738,5,105,0,0,738,
+        739,5,110,0,0,739,740,5,111,0,0,740,741,5,109,0,0,741,138,1,0,0,
+        0,742,743,5,92,0,0,743,744,5,109,0,0,744,745,5,97,0,0,745,746,5,
+        116,0,0,746,747,5,104,0,0,747,748,5,105,0,0,748,749,5,116,0,0,749,
+        140,1,0,0,0,750,751,5,95,0,0,751,142,1,0,0,0,752,753,5,94,0,0,753,
+        144,1,0,0,0,754,755,5,58,0,0,755,146,1,0,0,0,756,757,7,0,0,0,757,
+        148,1,0,0,0,758,762,5,100,0,0,759,761,3,147,73,0,760,759,1,0,0,0,
+        761,764,1,0,0,0,762,763,1,0,0,0,762,760,1,0,0,0,763,772,1,0,0,0,
+        764,762,1,0,0,0,765,773,7,1,0,0,766,768,5,92,0,0,767,769,7,1,0,0,
+        768,767,1,0,0,0,769,770,1,0,0,0,770,768,1,0,0,0,770,771,1,0,0,0,
+        771,773,1,0,0,0,772,765,1,0,0,0,772,766,1,0,0,0,773,150,1,0,0,0,
+        774,775,7,1,0,0,775,152,1,0,0,0,776,777,7,2,0,0,777,154,1,0,0,0,
+        778,780,3,153,76,0,779,778,1,0,0,0,780,781,1,0,0,0,781,779,1,0,0,
+        0,781,782,1,0,0,0,782,790,1,0,0,0,783,784,5,44,0,0,784,785,3,153,
+        76,0,785,786,3,153,76,0,786,787,3,153,76,0,787,789,1,0,0,0,788,783,
+        1,0,0,0,789,792,1,0,0,0,790,788,1,0,0,0,790,791,1,0,0,0,791,816,
+        1,0,0,0,792,790,1,0,0,0,793,795,3,153,76,0,794,793,1,0,0,0,795,798,
+        1,0,0,0,796,794,1,0,0,0,796,797,1,0,0,0,797,806,1,0,0,0,798,796,
+        1,0,0,0,799,800,5,44,0,0,800,801,3,153,76,0,801,802,3,153,76,0,802,
+        803,3,153,76,0,803,805,1,0,0,0,804,799,1,0,0,0,805,808,1,0,0,0,806,
+        804,1,0,0,0,806,807,1,0,0,0,807,809,1,0,0,0,808,806,1,0,0,0,809,
+        811,5,46,0,0,810,812,3,153,76,0,811,810,1,0,0,0,812,813,1,0,0,0,
+        813,811,1,0,0,0,813,814,1,0,0,0,814,816,1,0,0,0,815,779,1,0,0,0,
+        815,796,1,0,0,0,816,156,1,0,0,0,817,821,5,38,0,0,818,820,3,147,73,
+        0,819,818,1,0,0,0,820,823,1,0,0,0,821,822,1,0,0,0,821,819,1,0,0,
+        0,822,825,1,0,0,0,823,821,1,0,0,0,824,817,1,0,0,0,824,825,1,0,0,
+        0,825,826,1,0,0,0,826,838,5,61,0,0,827,835,5,61,0,0,828,830,3,147,
+        73,0,829,828,1,0,0,0,830,833,1,0,0,0,831,832,1,0,0,0,831,829,1,0,
+        0,0,832,834,1,0,0,0,833,831,1,0,0,0,834,836,5,38,0,0,835,831,1,0,
+        0,0,835,836,1,0,0,0,836,838,1,0,0,0,837,824,1,0,0,0,837,827,1,0,
+        0,0,838,158,1,0,0,0,839,840,5,92,0,0,840,841,5,110,0,0,841,842,5,
+        101,0,0,842,843,5,113,0,0,843,160,1,0,0,0,844,845,5,60,0,0,845,162,
+        1,0,0,0,846,847,5,92,0,0,847,848,5,108,0,0,848,849,5,101,0,0,849,
+        856,5,113,0,0,850,851,5,92,0,0,851,852,5,108,0,0,852,856,5,101,0,
+        0,853,856,3,165,82,0,854,856,3,167,83,0,855,846,1,0,0,0,855,850,
+        1,0,0,0,855,853,1,0,0,0,855,854,1,0,0,0,856,164,1,0,0,0,857,858,
+        5,92,0,0,858,859,5,108,0,0,859,860,5,101,0,0,860,861,5,113,0,0,861,
+        862,5,113,0,0,862,166,1,0,0,0,863,864,5,92,0,0,864,865,5,108,0,0,
+        865,866,5,101,0,0,866,867,5,113,0,0,867,868,5,115,0,0,868,869,5,
+        108,0,0,869,870,5,97,0,0,870,871,5,110,0,0,871,872,5,116,0,0,872,
+        168,1,0,0,0,873,874,5,62,0,0,874,170,1,0,0,0,875,876,5,92,0,0,876,
+        877,5,103,0,0,877,878,5,101,0,0,878,885,5,113,0,0,879,880,5,92,0,
+        0,880,881,5,103,0,0,881,885,5,101,0,0,882,885,3,173,86,0,883,885,
+        3,175,87,0,884,875,1,0,0,0,884,879,1,0,0,0,884,882,1,0,0,0,884,883,
+        1,0,0,0,885,172,1,0,0,0,886,887,5,92,0,0,887,888,5,103,0,0,888,889,
+        5,101,0,0,889,890,5,113,0,0,890,891,5,113,0,0,891,174,1,0,0,0,892,
+        893,5,92,0,0,893,894,5,103,0,0,894,895,5,101,0,0,895,896,5,113,0,
+        0,896,897,5,115,0,0,897,898,5,108,0,0,898,899,5,97,0,0,899,900,5,
+        110,0,0,900,901,5,116,0,0,901,176,1,0,0,0,902,903,5,33,0,0,903,178,
+        1,0,0,0,904,906,5,92,0,0,905,907,7,1,0,0,906,905,1,0,0,0,907,908,
+        1,0,0,0,908,906,1,0,0,0,908,909,1,0,0,0,909,180,1,0,0,0,25,0,186,
+        202,217,234,270,374,497,762,770,772,781,790,796,806,813,815,821,
+        824,831,835,837,855,884,908,1,6,0,0
+    ]
 
 class LaTeXLexer(Lexer):
 
@@ -519,69 +456,65 @@ class LaTeXLexer(Lexer):
 
     channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]
 
-    modeNames = [ u"DEFAULT_MODE" ]
+    modeNames = [ "DEFAULT_MODE" ]
 
-    literalNames = [ u"<INVALID>",
-            u"','", u"'\\quad'", u"'\\qquad'", u"'\\negmedspace'", u"'\\negthickspace'",
-            u"'\\left'", u"'\\right'", u"'+'", u"'-'", u"'*'", u"'/'", u"'('",
-            u"')'", u"'{'", u"'}'", u"'\\{'", u"'\\}'", u"'['", u"']'",
-            u"'|'", u"'\\right|'", u"'\\left|'", u"'\\langle'", u"'\\rangle'",
-            u"'\\lim'", u"'\\int'", u"'\\sum'", u"'\\prod'", u"'\\exp'",
-            u"'\\log'", u"'\\ln'", u"'\\sin'", u"'\\cos'", u"'\\tan'", u"'\\csc'",
-            u"'\\sec'", u"'\\cot'", u"'\\arcsin'", u"'\\arccos'", u"'\\arctan'",
-            u"'\\arccsc'", u"'\\arcsec'", u"'\\arccot'", u"'\\sinh'", u"'\\cosh'",
-            u"'\\tanh'", u"'\\arsinh'", u"'\\arcosh'", u"'\\artanh'", u"'\\lfloor'",
-            u"'\\rfloor'", u"'\\lceil'", u"'\\rceil'", u"'\\sqrt'", u"'\\overline'",
-            u"'\\times'", u"'\\cdot'", u"'\\div'", u"'\\frac'", u"'\\binom'",
-            u"'\\dbinom'", u"'\\tbinom'", u"'\\mathit'", u"'_'", u"'^'",
-            u"':'", u"'\\neq'", u"'<'", u"'\\leqq'", u"'\\leqslant'", u"'>'",
-            u"'\\geqq'", u"'\\geqslant'", u"'!'" ]
+    literalNames = [ "<INVALID>",
+            "','", "'\\quad'", "'\\qquad'", "'\\negmedspace'", "'\\negthickspace'",
+            "'\\left'", "'\\right'", "'+'", "'-'", "'*'", "'/'", "'('",
+            "')'", "'{'", "'}'", "'\\{'", "'\\}'", "'['", "']'", "'|'",
+            "'\\right|'", "'\\left|'", "'\\langle'", "'\\rangle'", "'\\lim'",
+            "'\\int'", "'\\sum'", "'\\prod'", "'\\exp'", "'\\log'", "'\\ln'",
+            "'\\sin'", "'\\cos'", "'\\tan'", "'\\csc'", "'\\sec'", "'\\cot'",
+            "'\\arcsin'", "'\\arccos'", "'\\arctan'", "'\\arccsc'", "'\\arcsec'",
+            "'\\arccot'", "'\\sinh'", "'\\cosh'", "'\\tanh'", "'\\arsinh'",
+            "'\\arcosh'", "'\\artanh'", "'\\lfloor'", "'\\rfloor'", "'\\lceil'",
+            "'\\rceil'", "'\\sqrt'", "'\\overline'", "'\\times'", "'\\cdot'",
+            "'\\div'", "'\\frac'", "'\\binom'", "'\\dbinom'", "'\\tbinom'",
+            "'\\mathit'", "'_'", "'^'", "':'", "'\\neq'", "'<'", "'\\leqq'",
+            "'\\leqslant'", "'>'", "'\\geqq'", "'\\geqslant'", "'!'" ]
 
-    symbolicNames = [ u"<INVALID>",
-            u"WS", u"THINSPACE", u"MEDSPACE", u"THICKSPACE", u"QUAD", u"QQUAD",
-            u"NEGTHINSPACE", u"NEGMEDSPACE", u"NEGTHICKSPACE", u"CMD_LEFT",
-            u"CMD_RIGHT", u"IGNORE", u"ADD", u"SUB", u"MUL", u"DIV", u"L_PAREN",
-            u"R_PAREN", u"L_BRACE", u"R_BRACE", u"L_BRACE_LITERAL", u"R_BRACE_LITERAL",
-            u"L_BRACKET", u"R_BRACKET", u"BAR", u"R_BAR", u"L_BAR", u"L_ANGLE",
-            u"R_ANGLE", u"FUNC_LIM", u"LIM_APPROACH_SYM", u"FUNC_INT", u"FUNC_SUM",
-            u"FUNC_PROD", u"FUNC_EXP", u"FUNC_LOG", u"FUNC_LN", u"FUNC_SIN",
-            u"FUNC_COS", u"FUNC_TAN", u"FUNC_CSC", u"FUNC_SEC", u"FUNC_COT",
-            u"FUNC_ARCSIN", u"FUNC_ARCCOS", u"FUNC_ARCTAN", u"FUNC_ARCCSC",
-            u"FUNC_ARCSEC", u"FUNC_ARCCOT", u"FUNC_SINH", u"FUNC_COSH",
-            u"FUNC_TANH", u"FUNC_ARSINH", u"FUNC_ARCOSH", u"FUNC_ARTANH",
-            u"L_FLOOR", u"R_FLOOR", u"L_CEIL", u"R_CEIL", u"FUNC_SQRT",
-            u"FUNC_OVERLINE", u"CMD_TIMES", u"CMD_CDOT", u"CMD_DIV", u"CMD_FRAC",
-            u"CMD_BINOM", u"CMD_DBINOM", u"CMD_TBINOM", u"CMD_MATHIT", u"UNDERSCORE",
-            u"CARET", u"COLON", u"DIFFERENTIAL", u"LETTER", u"NUMBER", u"EQUAL",
-            u"NEQ", u"LT", u"LTE", u"LTE_Q", u"LTE_S", u"GT", u"GTE", u"GTE_Q",
-            u"GTE_S", u"BANG", u"SYMBOL" ]
+    symbolicNames = [ "<INVALID>",
+            "WS", "THINSPACE", "MEDSPACE", "THICKSPACE", "QUAD", "QQUAD",
+            "NEGTHINSPACE", "NEGMEDSPACE", "NEGTHICKSPACE", "CMD_LEFT",
+            "CMD_RIGHT", "IGNORE", "ADD", "SUB", "MUL", "DIV", "L_PAREN",
+            "R_PAREN", "L_BRACE", "R_BRACE", "L_BRACE_LITERAL", "R_BRACE_LITERAL",
+            "L_BRACKET", "R_BRACKET", "BAR", "R_BAR", "L_BAR", "L_ANGLE",
+            "R_ANGLE", "FUNC_LIM", "LIM_APPROACH_SYM", "FUNC_INT", "FUNC_SUM",
+            "FUNC_PROD", "FUNC_EXP", "FUNC_LOG", "FUNC_LN", "FUNC_SIN",
+            "FUNC_COS", "FUNC_TAN", "FUNC_CSC", "FUNC_SEC", "FUNC_COT",
+            "FUNC_ARCSIN", "FUNC_ARCCOS", "FUNC_ARCTAN", "FUNC_ARCCSC",
+            "FUNC_ARCSEC", "FUNC_ARCCOT", "FUNC_SINH", "FUNC_COSH", "FUNC_TANH",
+            "FUNC_ARSINH", "FUNC_ARCOSH", "FUNC_ARTANH", "L_FLOOR", "R_FLOOR",
+            "L_CEIL", "R_CEIL", "FUNC_SQRT", "FUNC_OVERLINE", "CMD_TIMES",
+            "CMD_CDOT", "CMD_DIV", "CMD_FRAC", "CMD_BINOM", "CMD_DBINOM",
+            "CMD_TBINOM", "CMD_MATHIT", "UNDERSCORE", "CARET", "COLON",
+            "DIFFERENTIAL", "LETTER", "NUMBER", "EQUAL", "NEQ", "LT", "LTE",
+            "LTE_Q", "LTE_S", "GT", "GTE", "GTE_Q", "GTE_S", "BANG", "SYMBOL" ]
 
-    ruleNames = [ u"T__0", u"WS", u"THINSPACE", u"MEDSPACE", u"THICKSPACE",
-                  u"QUAD", u"QQUAD", u"NEGTHINSPACE", u"NEGMEDSPACE", u"NEGTHICKSPACE",
-                  u"CMD_LEFT", u"CMD_RIGHT", u"IGNORE", u"ADD", u"SUB",
-                  u"MUL", u"DIV", u"L_PAREN", u"R_PAREN", u"L_BRACE", u"R_BRACE",
-                  u"L_BRACE_LITERAL", u"R_BRACE_LITERAL", u"L_BRACKET",
-                  u"R_BRACKET", u"BAR", u"R_BAR", u"L_BAR", u"L_ANGLE",
-                  u"R_ANGLE", u"FUNC_LIM", u"LIM_APPROACH_SYM", u"FUNC_INT",
-                  u"FUNC_SUM", u"FUNC_PROD", u"FUNC_EXP", u"FUNC_LOG", u"FUNC_LN",
-                  u"FUNC_SIN", u"FUNC_COS", u"FUNC_TAN", u"FUNC_CSC", u"FUNC_SEC",
-                  u"FUNC_COT", u"FUNC_ARCSIN", u"FUNC_ARCCOS", u"FUNC_ARCTAN",
-                  u"FUNC_ARCCSC", u"FUNC_ARCSEC", u"FUNC_ARCCOT", u"FUNC_SINH",
-                  u"FUNC_COSH", u"FUNC_TANH", u"FUNC_ARSINH", u"FUNC_ARCOSH",
-                  u"FUNC_ARTANH", u"L_FLOOR", u"R_FLOOR", u"L_CEIL", u"R_CEIL",
-                  u"FUNC_SQRT", u"FUNC_OVERLINE", u"CMD_TIMES", u"CMD_CDOT",
-                  u"CMD_DIV", u"CMD_FRAC", u"CMD_BINOM", u"CMD_DBINOM",
-                  u"CMD_TBINOM", u"CMD_MATHIT", u"UNDERSCORE", u"CARET",
-                  u"COLON", u"WS_CHAR", u"DIFFERENTIAL", u"LETTER", u"DIGIT",
-                  u"NUMBER", u"EQUAL", u"NEQ", u"LT", u"LTE", u"LTE_Q",
-                  u"LTE_S", u"GT", u"GTE", u"GTE_Q", u"GTE_S", u"BANG",
-                  u"SYMBOL" ]
+    ruleNames = [ "T__0", "WS", "THINSPACE", "MEDSPACE", "THICKSPACE", "QUAD",
+                  "QQUAD", "NEGTHINSPACE", "NEGMEDSPACE", "NEGTHICKSPACE",
+                  "CMD_LEFT", "CMD_RIGHT", "IGNORE", "ADD", "SUB", "MUL",
+                  "DIV", "L_PAREN", "R_PAREN", "L_BRACE", "R_BRACE", "L_BRACE_LITERAL",
+                  "R_BRACE_LITERAL", "L_BRACKET", "R_BRACKET", "BAR", "R_BAR",
+                  "L_BAR", "L_ANGLE", "R_ANGLE", "FUNC_LIM", "LIM_APPROACH_SYM",
+                  "FUNC_INT", "FUNC_SUM", "FUNC_PROD", "FUNC_EXP", "FUNC_LOG",
+                  "FUNC_LN", "FUNC_SIN", "FUNC_COS", "FUNC_TAN", "FUNC_CSC",
+                  "FUNC_SEC", "FUNC_COT", "FUNC_ARCSIN", "FUNC_ARCCOS",
+                  "FUNC_ARCTAN", "FUNC_ARCCSC", "FUNC_ARCSEC", "FUNC_ARCCOT",
+                  "FUNC_SINH", "FUNC_COSH", "FUNC_TANH", "FUNC_ARSINH",
+                  "FUNC_ARCOSH", "FUNC_ARTANH", "L_FLOOR", "R_FLOOR", "L_CEIL",
+                  "R_CEIL", "FUNC_SQRT", "FUNC_OVERLINE", "CMD_TIMES", "CMD_CDOT",
+                  "CMD_DIV", "CMD_FRAC", "CMD_BINOM", "CMD_DBINOM", "CMD_TBINOM",
+                  "CMD_MATHIT", "UNDERSCORE", "CARET", "COLON", "WS_CHAR",
+                  "DIFFERENTIAL", "LETTER", "DIGIT", "NUMBER", "EQUAL",
+                  "NEQ", "LT", "LTE", "LTE_Q", "LTE_S", "GT", "GTE", "GTE_Q",
+                  "GTE_S", "BANG", "SYMBOL" ]
 
-    grammarFileName = u"LaTeX.g4"
+    grammarFileName = "LaTeX.g4"
 
-    def __init__(self, input=None, output=sys.stdout):
-        super(LaTeXLexer, self).__init__(input, output=output)
-        self.checkVersion("4.7.2")
+    def __init__(self, input=None, output:TextIO = sys.stdout):
+        super().__init__(input, output)
+        self.checkVersion("4.13.2")
         self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
         self._actions = None
         self._predicates = None
diff --git a/sympy/parsing/latex/_antlr/latexparser.py b/sympy/parsing/latex/_antlr/latexparser.py
index 0fc7e5a7a6..0e781a0a71 100644
--- a/sympy/parsing/latex/_antlr/latexparser.py
+++ b/sympy/parsing/latex/_antlr/latexparser.py
@@ -10,238 +10,198 @@
 # Generated with antlr4
 #    antlr4 is licensed under the BSD-3-Clause License
 #    https://github.com/antlr/antlr4/blob/master/LICENSE.txt
-from __future__ import print_function
+# encoding: utf-8
+
+# *** GENERATED BY `setup.py antlr`, DO NOT EDIT BY HAND ***
+#
+# Generated from ../LaTeX.g4, derived from latex2sympy
+#     latex2sympy is licensed under the MIT license
+#     https://github.com/augustt198/latex2sympy/blob/master/LICENSE.txt
+#
+# Generated with antlr4
+#    antlr4 is licensed under the BSD-3-Clause License
+#    https://github.com/antlr/antlr4/blob/master/LICENSE.txt
+# encoding: utf-8
 from antlr4 import *
 from io import StringIO
 import sys
-
+if sys.version_info[1] > 5:
+	from typing import TextIO
+else:
+	from typing.io import TextIO
 
 def serializedATN():
-    with StringIO() as buf:
-        buf.write(u"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3")
-        buf.write(u"Z\u01d5\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t")
-        buf.write(u"\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
-        buf.write(u"\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4")
-        buf.write(u"\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30")
-        buf.write(u"\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t")
-        buf.write(u"\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$")
-        buf.write(u"\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\3\2\3\2\3\3\3\3\3")
-        buf.write(u"\3\3\3\3\3\3\3\7\3[\n\3\f\3\16\3^\13\3\3\4\3\4\3\4\3")
-        buf.write(u"\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\7\6l\n\6\f\6\16\6")
-        buf.write(u"o\13\6\3\7\3\7\3\7\3\7\3\7\3\7\7\7w\n\7\f\7\16\7z\13")
-        buf.write(u"\7\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u0082\n\b\f\b\16\b\u0085")
-        buf.write(u"\13\b\3\t\3\t\3\t\6\t\u008a\n\t\r\t\16\t\u008b\5\t\u008e")
-        buf.write(u"\n\t\3\n\3\n\3\n\3\n\7\n\u0094\n\n\f\n\16\n\u0097\13")
-        buf.write(u"\n\5\n\u0099\n\n\3\13\3\13\7\13\u009d\n\13\f\13\16\13")
-        buf.write(u"\u00a0\13\13\3\f\3\f\7\f\u00a4\n\f\f\f\16\f\u00a7\13")
-        buf.write(u"\f\3\r\3\r\5\r\u00ab\n\r\3\16\3\16\3\16\3\16\3\16\3\16")
-        buf.write(u"\5\16\u00b3\n\16\3\17\3\17\3\17\3\17\5\17\u00b9\n\17")
-        buf.write(u"\3\17\3\17\3\20\3\20\3\20\3\20\5\20\u00c1\n\20\3\20\3")
-        buf.write(u"\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
-        buf.write(u"\5\21\u00cf\n\21\3\21\5\21\u00d2\n\21\7\21\u00d4\n\21")
-        buf.write(u"\f\21\16\21\u00d7\13\21\3\22\3\22\3\22\3\22\3\22\3\22")
-        buf.write(u"\3\22\3\22\3\22\3\22\5\22\u00e3\n\22\3\22\5\22\u00e6")
-        buf.write(u"\n\22\7\22\u00e8\n\22\f\22\16\22\u00eb\13\22\3\23\3\23")
-        buf.write(u"\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u00f5\n\23\3\24\3")
-        buf.write(u"\24\3\24\3\24\3\24\3\24\3\24\5\24\u00fe\n\24\3\25\3\25")
-        buf.write(u"\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3")
-        buf.write(u"\25\3\25\3\25\3\25\5\25\u0110\n\25\3\26\3\26\3\26\3\26")
-        buf.write(u"\3\27\3\27\5\27\u0118\n\27\3\27\3\27\3\27\3\27\3\27\5")
-        buf.write(u"\27\u011f\n\27\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31")
-        buf.write(u"\3\32\3\32\3\32\3\32\3\32\3\33\7\33\u012f\n\33\f\33\16")
-        buf.write(u"\33\u0132\13\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3")
-        buf.write(u"\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\36\3\36")
-        buf.write(u"\3\36\3\36\3\37\3\37\3\37\3\37\3 \3 \3!\3!\5!\u0150\n")
-        buf.write(u"!\3!\5!\u0153\n!\3!\5!\u0156\n!\3!\5!\u0159\n!\5!\u015b")
-        buf.write(u"\n!\3!\3!\3!\3!\3!\5!\u0162\n!\3!\3!\5!\u0166\n!\3!\3")
-        buf.write(u"!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u0173\n!\3!\5!\u0176")
-        buf.write(u"\n!\3!\3!\3!\5!\u017b\n!\3!\3!\3!\3!\3!\5!\u0182\n!\3")
-        buf.write(u"!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u0194")
-        buf.write(u"\n!\3!\3!\3!\3!\3!\3!\5!\u019c\n!\3\"\3\"\3\"\3\"\3\"")
-        buf.write(u"\5\"\u01a3\n\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u01ae\n")
-        buf.write(u"#\3#\3#\3$\3$\3$\3$\3$\5$\u01b7\n$\3%\3%\3&\3&\3&\3&")
-        buf.write(u"\3&\3&\5&\u01c1\n&\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u01c9")
-        buf.write(u"\n\'\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3)\2\b\4\n\f\16 \"")
-        buf.write(u"*\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60")
-        buf.write(u"\62\64\668:<>@BDFHJLNP\2\13\4\2ORUV\3\2\20\21\5\2\22")
-        buf.write(u"\23ACKK\4\2MMZZ\3\2\34\35\4\2\34\34\36\36\3\2EG\3\2&")
-        buf.write(u":\3\2$%\2\u01f1\2R\3\2\2\2\4T\3\2\2\2\6_\3\2\2\2\bc\3")
-        buf.write(u"\2\2\2\ne\3\2\2\2\fp\3\2\2\2\16{\3\2\2\2\20\u008d\3\2")
-        buf.write(u"\2\2\22\u0098\3\2\2\2\24\u009a\3\2\2\2\26\u00a1\3\2\2")
-        buf.write(u"\2\30\u00aa\3\2\2\2\32\u00ac\3\2\2\2\34\u00b4\3\2\2\2")
-        buf.write(u"\36\u00bc\3\2\2\2 \u00c4\3\2\2\2\"\u00d8\3\2\2\2$\u00f4")
-        buf.write(u"\3\2\2\2&\u00fd\3\2\2\2(\u010f\3\2\2\2*\u0111\3\2\2\2")
-        buf.write(u",\u011e\3\2\2\2.\u0120\3\2\2\2\60\u0124\3\2\2\2\62\u0128")
-        buf.write(u"\3\2\2\2\64\u0130\3\2\2\2\66\u0133\3\2\2\28\u013b\3\2")
-        buf.write(u"\2\2:\u0143\3\2\2\2<\u0147\3\2\2\2>\u014b\3\2\2\2@\u019b")
-        buf.write(u"\3\2\2\2B\u01a2\3\2\2\2D\u01a4\3\2\2\2F\u01b6\3\2\2\2")
-        buf.write(u"H\u01b8\3\2\2\2J\u01ba\3\2\2\2L\u01c2\3\2\2\2N\u01ca")
-        buf.write(u"\3\2\2\2P\u01cf\3\2\2\2RS\5\4\3\2S\3\3\2\2\2TU\b\3\1")
-        buf.write(u"\2UV\5\b\5\2V\\\3\2\2\2WX\f\4\2\2XY\t\2\2\2Y[\5\4\3\5")
-        buf.write(u"ZW\3\2\2\2[^\3\2\2\2\\Z\3\2\2\2\\]\3\2\2\2]\5\3\2\2\2")
-        buf.write(u"^\\\3\2\2\2_`\5\b\5\2`a\7O\2\2ab\5\b\5\2b\7\3\2\2\2c")
-        buf.write(u"d\5\n\6\2d\t\3\2\2\2ef\b\6\1\2fg\5\f\7\2gm\3\2\2\2hi")
-        buf.write(u"\f\4\2\2ij\t\3\2\2jl\5\n\6\5kh\3\2\2\2lo\3\2\2\2mk\3")
-        buf.write(u"\2\2\2mn\3\2\2\2n\13\3\2\2\2om\3\2\2\2pq\b\7\1\2qr\5")
-        buf.write(u"\20\t\2rx\3\2\2\2st\f\4\2\2tu\t\4\2\2uw\5\f\7\5vs\3\2")
-        buf.write(u"\2\2wz\3\2\2\2xv\3\2\2\2xy\3\2\2\2y\r\3\2\2\2zx\3\2\2")
-        buf.write(u"\2{|\b\b\1\2|}\5\22\n\2}\u0083\3\2\2\2~\177\f\4\2\2\177")
-        buf.write(u"\u0080\t\4\2\2\u0080\u0082\5\16\b\5\u0081~\3\2\2\2\u0082")
-        buf.write(u"\u0085\3\2\2\2\u0083\u0081\3\2\2\2\u0083\u0084\3\2\2")
-        buf.write(u"\2\u0084\17\3\2\2\2\u0085\u0083\3\2\2\2\u0086\u0087\t")
-        buf.write(u"\3\2\2\u0087\u008e\5\20\t\2\u0088\u008a\5\24\13\2\u0089")
-        buf.write(u"\u0088\3\2\2\2\u008a\u008b\3\2\2\2\u008b\u0089\3\2\2")
-        buf.write(u"\2\u008b\u008c\3\2\2\2\u008c\u008e\3\2\2\2\u008d\u0086")
-        buf.write(u"\3\2\2\2\u008d\u0089\3\2\2\2\u008e\21\3\2\2\2\u008f\u0090")
-        buf.write(u"\t\3\2\2\u0090\u0099\5\22\n\2\u0091\u0095\5\24\13\2\u0092")
-        buf.write(u"\u0094\5\26\f\2\u0093\u0092\3\2\2\2\u0094\u0097\3\2\2")
-        buf.write(u"\2\u0095\u0093\3\2\2\2\u0095\u0096\3\2\2\2\u0096\u0099")
-        buf.write(u"\3\2\2\2\u0097\u0095\3\2\2\2\u0098\u008f\3\2\2\2\u0098")
-        buf.write(u"\u0091\3\2\2\2\u0099\23\3\2\2\2\u009a\u009e\5 \21\2\u009b")
-        buf.write(u"\u009d\5\30\r\2\u009c\u009b\3\2\2\2\u009d\u00a0\3\2\2")
-        buf.write(u"\2\u009e\u009c\3\2\2\2\u009e\u009f\3\2\2\2\u009f\25\3")
-        buf.write(u"\2\2\2\u00a0\u009e\3\2\2\2\u00a1\u00a5\5\"\22\2\u00a2")
-        buf.write(u"\u00a4\5\30\r\2\u00a3\u00a2\3\2\2\2\u00a4\u00a7\3\2\2")
-        buf.write(u"\2\u00a5\u00a3\3\2\2\2\u00a5\u00a6\3\2\2\2\u00a6\27\3")
-        buf.write(u"\2\2\2\u00a7\u00a5\3\2\2\2\u00a8\u00ab\7Y\2\2\u00a9\u00ab")
-        buf.write(u"\5\32\16\2\u00aa\u00a8\3\2\2\2\u00aa\u00a9\3\2\2\2\u00ab")
-        buf.write(u"\31\3\2\2\2\u00ac\u00b2\7\34\2\2\u00ad\u00b3\5\36\20")
-        buf.write(u"\2\u00ae\u00b3\5\34\17\2\u00af\u00b0\5\36\20\2\u00b0")
-        buf.write(u"\u00b1\5\34\17\2\u00b1\u00b3\3\2\2\2\u00b2\u00ad\3\2")
-        buf.write(u"\2\2\u00b2\u00ae\3\2\2\2\u00b2\u00af\3\2\2\2\u00b3\33")
-        buf.write(u"\3\2\2\2\u00b4\u00b5\7I\2\2\u00b5\u00b8\7\26\2\2\u00b6")
-        buf.write(u"\u00b9\5\b\5\2\u00b7\u00b9\5\6\4\2\u00b8\u00b6\3\2\2")
-        buf.write(u"\2\u00b8\u00b7\3\2\2\2\u00b9\u00ba\3\2\2\2\u00ba\u00bb")
-        buf.write(u"\7\27\2\2\u00bb\35\3\2\2\2\u00bc\u00bd\7J\2\2\u00bd\u00c0")
-        buf.write(u"\7\26\2\2\u00be\u00c1\5\b\5\2\u00bf\u00c1\5\6\4\2\u00c0")
-        buf.write(u"\u00be\3\2\2\2\u00c0\u00bf\3\2\2\2\u00c1\u00c2\3\2\2")
-        buf.write(u"\2\u00c2\u00c3\7\27\2\2\u00c3\37\3\2\2\2\u00c4\u00c5")
-        buf.write(u"\b\21\1\2\u00c5\u00c6\5$\23\2\u00c6\u00d5\3\2\2\2\u00c7")
-        buf.write(u"\u00c8\f\4\2\2\u00c8\u00ce\7J\2\2\u00c9\u00cf\5,\27\2")
-        buf.write(u"\u00ca\u00cb\7\26\2\2\u00cb\u00cc\5\b\5\2\u00cc\u00cd")
-        buf.write(u"\7\27\2\2\u00cd\u00cf\3\2\2\2\u00ce\u00c9\3\2\2\2\u00ce")
-        buf.write(u"\u00ca\3\2\2\2\u00cf\u00d1\3\2\2\2\u00d0\u00d2\5J&\2")
-        buf.write(u"\u00d1\u00d0\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d4")
-        buf.write(u"\3\2\2\2\u00d3\u00c7\3\2\2\2\u00d4\u00d7\3\2\2\2\u00d5")
-        buf.write(u"\u00d3\3\2\2\2\u00d5\u00d6\3\2\2\2\u00d6!\3\2\2\2\u00d7")
-        buf.write(u"\u00d5\3\2\2\2\u00d8\u00d9\b\22\1\2\u00d9\u00da\5&\24")
-        buf.write(u"\2\u00da\u00e9\3\2\2\2\u00db\u00dc\f\4\2\2\u00dc\u00e2")
-        buf.write(u"\7J\2\2\u00dd\u00e3\5,\27\2\u00de\u00df\7\26\2\2\u00df")
-        buf.write(u"\u00e0\5\b\5\2\u00e0\u00e1\7\27\2\2\u00e1\u00e3\3\2\2")
-        buf.write(u"\2\u00e2\u00dd\3\2\2\2\u00e2\u00de\3\2\2\2\u00e3\u00e5")
-        buf.write(u"\3\2\2\2\u00e4\u00e6\5J&\2\u00e5\u00e4\3\2\2\2\u00e5")
-        buf.write(u"\u00e6\3\2\2\2\u00e6\u00e8\3\2\2\2\u00e7\u00db\3\2\2")
-        buf.write(u"\2\u00e8\u00eb\3\2\2\2\u00e9\u00e7\3\2\2\2\u00e9\u00ea")
-        buf.write(u"\3\2\2\2\u00ea#\3\2\2\2\u00eb\u00e9\3\2\2\2\u00ec\u00f5")
-        buf.write(u"\5(\25\2\u00ed\u00f5\5*\26\2\u00ee\u00f5\5@!\2\u00ef")
-        buf.write(u"\u00f5\5,\27\2\u00f0\u00f5\5\66\34\2\u00f1\u00f5\58\35")
-        buf.write(u"\2\u00f2\u00f5\5:\36\2\u00f3\u00f5\5<\37\2\u00f4\u00ec")
-        buf.write(u"\3\2\2\2\u00f4\u00ed\3\2\2\2\u00f4\u00ee\3\2\2\2\u00f4")
-        buf.write(u"\u00ef\3\2\2\2\u00f4\u00f0\3\2\2\2\u00f4\u00f1\3\2\2")
-        buf.write(u"\2\u00f4\u00f2\3\2\2\2\u00f4\u00f3\3\2\2\2\u00f5%\3\2")
-        buf.write(u"\2\2\u00f6\u00fe\5(\25\2\u00f7\u00fe\5*\26\2\u00f8\u00fe")
-        buf.write(u"\5,\27\2\u00f9\u00fe\5\66\34\2\u00fa\u00fe\58\35\2\u00fb")
-        buf.write(u"\u00fe\5:\36\2\u00fc\u00fe\5<\37\2\u00fd\u00f6\3\2\2")
-        buf.write(u"\2\u00fd\u00f7\3\2\2\2\u00fd\u00f8\3\2\2\2\u00fd\u00f9")
-        buf.write(u"\3\2\2\2\u00fd\u00fa\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fd")
-        buf.write(u"\u00fc\3\2\2\2\u00fe\'\3\2\2\2\u00ff\u0100\7\24\2\2\u0100")
-        buf.write(u"\u0101\5\b\5\2\u0101\u0102\7\25\2\2\u0102\u0110\3\2\2")
-        buf.write(u"\2\u0103\u0104\7\32\2\2\u0104\u0105\5\b\5\2\u0105\u0106")
-        buf.write(u"\7\33\2\2\u0106\u0110\3\2\2\2\u0107\u0108\7\26\2\2\u0108")
-        buf.write(u"\u0109\5\b\5\2\u0109\u010a\7\27\2\2\u010a\u0110\3\2\2")
-        buf.write(u"\2\u010b\u010c\7\30\2\2\u010c\u010d\5\b\5\2\u010d\u010e")
-        buf.write(u"\7\31\2\2\u010e\u0110\3\2\2\2\u010f\u00ff\3\2\2\2\u010f")
-        buf.write(u"\u0103\3\2\2\2\u010f\u0107\3\2\2\2\u010f\u010b\3\2\2")
-        buf.write(u"\2\u0110)\3\2\2\2\u0111\u0112\7\34\2\2\u0112\u0113\5")
-        buf.write(u"\b\5\2\u0113\u0114\7\34\2\2\u0114+\3\2\2\2\u0115\u0117")
-        buf.write(u"\t\5\2\2\u0116\u0118\5J&\2\u0117\u0116\3\2\2\2\u0117")
-        buf.write(u"\u0118\3\2\2\2\u0118\u011f\3\2\2\2\u0119\u011f\7N\2\2")
-        buf.write(u"\u011a\u011f\7L\2\2\u011b\u011f\5\62\32\2\u011c\u011f")
-        buf.write(u"\5.\30\2\u011d\u011f\5\60\31\2\u011e\u0115\3\2\2\2\u011e")
-        buf.write(u"\u0119\3\2\2\2\u011e\u011a\3\2\2\2\u011e\u011b\3\2\2")
-        buf.write(u"\2\u011e\u011c\3\2\2\2\u011e\u011d\3\2\2\2\u011f-\3\2")
-        buf.write(u"\2\2\u0120\u0121\7\37\2\2\u0121\u0122\5\b\5\2\u0122\u0123")
-        buf.write(u"\t\6\2\2\u0123/\3\2\2\2\u0124\u0125\t\7\2\2\u0125\u0126")
-        buf.write(u"\5\b\5\2\u0126\u0127\7 \2\2\u0127\61\3\2\2\2\u0128\u0129")
-        buf.write(u"\7H\2\2\u0129\u012a\7\26\2\2\u012a\u012b\5\64\33\2\u012b")
-        buf.write(u"\u012c\7\27\2\2\u012c\63\3\2\2\2\u012d\u012f\7M\2\2\u012e")
-        buf.write(u"\u012d\3\2\2\2\u012f\u0132\3\2\2\2\u0130\u012e\3\2\2")
-        buf.write(u"\2\u0130\u0131\3\2\2\2\u0131\65\3\2\2\2\u0132\u0130\3")
-        buf.write(u"\2\2\2\u0133\u0134\7D\2\2\u0134\u0135\7\26\2\2\u0135")
-        buf.write(u"\u0136\5\b\5\2\u0136\u0137\7\27\2\2\u0137\u0138\7\26")
-        buf.write(u"\2\2\u0138\u0139\5\b\5\2\u0139\u013a\7\27\2\2\u013a\67")
-        buf.write(u"\3\2\2\2\u013b\u013c\t\b\2\2\u013c\u013d\7\26\2\2\u013d")
-        buf.write(u"\u013e\5\b\5\2\u013e\u013f\7\27\2\2\u013f\u0140\7\26")
-        buf.write(u"\2\2\u0140\u0141\5\b\5\2\u0141\u0142\7\27\2\2\u01429")
-        buf.write(u"\3\2\2\2\u0143\u0144\7;\2\2\u0144\u0145\5\b\5\2\u0145")
-        buf.write(u"\u0146\7<\2\2\u0146;\3\2\2\2\u0147\u0148\7=\2\2\u0148")
-        buf.write(u"\u0149\5\b\5\2\u0149\u014a\7>\2\2\u014a=\3\2\2\2\u014b")
-        buf.write(u"\u014c\t\t\2\2\u014c?\3\2\2\2\u014d\u015a\5> \2\u014e")
-        buf.write(u"\u0150\5J&\2\u014f\u014e\3\2\2\2\u014f\u0150\3\2\2\2")
-        buf.write(u"\u0150\u0152\3\2\2\2\u0151\u0153\5L\'\2\u0152\u0151\3")
-        buf.write(u"\2\2\2\u0152\u0153\3\2\2\2\u0153\u015b\3\2\2\2\u0154")
-        buf.write(u"\u0156\5L\'\2\u0155\u0154\3\2\2\2\u0155\u0156\3\2\2\2")
-        buf.write(u"\u0156\u0158\3\2\2\2\u0157\u0159\5J&\2\u0158\u0157\3")
-        buf.write(u"\2\2\2\u0158\u0159\3\2\2\2\u0159\u015b\3\2\2\2\u015a")
-        buf.write(u"\u014f\3\2\2\2\u015a\u0155\3\2\2\2\u015b\u0161\3\2\2")
-        buf.write(u"\2\u015c\u015d\7\24\2\2\u015d\u015e\5F$\2\u015e\u015f")
-        buf.write(u"\7\25\2\2\u015f\u0162\3\2\2\2\u0160\u0162\5H%\2\u0161")
-        buf.write(u"\u015c\3\2\2\2\u0161\u0160\3\2\2\2\u0162\u019c\3\2\2")
-        buf.write(u"\2\u0163\u0165\t\5\2\2\u0164\u0166\5J&\2\u0165\u0164")
-        buf.write(u"\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u0167\3\2\2\2\u0167")
-        buf.write(u"\u0168\7\24\2\2\u0168\u0169\5B\"\2\u0169\u016a\7\25\2")
-        buf.write(u"\2\u016a\u019c\3\2\2\2\u016b\u0172\7#\2\2\u016c\u016d")
-        buf.write(u"\5J&\2\u016d\u016e\5L\'\2\u016e\u0173\3\2\2\2\u016f\u0170")
-        buf.write(u"\5L\'\2\u0170\u0171\5J&\2\u0171\u0173\3\2\2\2\u0172\u016c")
-        buf.write(u"\3\2\2\2\u0172\u016f\3\2\2\2\u0172\u0173\3\2\2\2\u0173")
-        buf.write(u"\u017a\3\2\2\2\u0174\u0176\5\n\6\2\u0175\u0174\3\2\2")
-        buf.write(u"\2\u0175\u0176\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u017b")
-        buf.write(u"\7L\2\2\u0178\u017b\5\66\34\2\u0179\u017b\5\n\6\2\u017a")
-        buf.write(u"\u0175\3\2\2\2\u017a\u0178\3\2\2\2\u017a\u0179\3\2\2")
-        buf.write(u"\2\u017b\u019c\3\2\2\2\u017c\u0181\7?\2\2\u017d\u017e")
-        buf.write(u"\7\32\2\2\u017e\u017f\5\b\5\2\u017f\u0180\7\33\2\2\u0180")
-        buf.write(u"\u0182\3\2\2\2\u0181\u017d\3\2\2\2\u0181\u0182\3\2\2")
-        buf.write(u"\2\u0182\u0183\3\2\2\2\u0183\u0184\7\26\2\2\u0184\u0185")
-        buf.write(u"\5\b\5\2\u0185\u0186\7\27\2\2\u0186\u019c\3\2\2\2\u0187")
-        buf.write(u"\u0188\7@\2\2\u0188\u0189\7\26\2\2\u0189\u018a\5\b\5")
-        buf.write(u"\2\u018a\u018b\7\27\2\2\u018b\u019c\3\2\2\2\u018c\u0193")
-        buf.write(u"\t\n\2\2\u018d\u018e\5N(\2\u018e\u018f\5L\'\2\u018f\u0194")
-        buf.write(u"\3\2\2\2\u0190\u0191\5L\'\2\u0191\u0192\5N(\2\u0192\u0194")
-        buf.write(u"\3\2\2\2\u0193\u018d\3\2\2\2\u0193\u0190\3\2\2\2\u0194")
-        buf.write(u"\u0195\3\2\2\2\u0195\u0196\5\f\7\2\u0196\u019c\3\2\2")
-        buf.write(u"\2\u0197\u0198\7!\2\2\u0198\u0199\5D#\2\u0199\u019a\5")
-        buf.write(u"\f\7\2\u019a\u019c\3\2\2\2\u019b\u014d\3\2\2\2\u019b")
-        buf.write(u"\u0163\3\2\2\2\u019b\u016b\3\2\2\2\u019b\u017c\3\2\2")
-        buf.write(u"\2\u019b\u0187\3\2\2\2\u019b\u018c\3\2\2\2\u019b\u0197")
-        buf.write(u"\3\2\2\2\u019cA\3\2\2\2\u019d\u019e\5\b\5\2\u019e\u019f")
-        buf.write(u"\7\3\2\2\u019f\u01a0\5B\"\2\u01a0\u01a3\3\2\2\2\u01a1")
-        buf.write(u"\u01a3\5\b\5\2\u01a2\u019d\3\2\2\2\u01a2\u01a1\3\2\2")
-        buf.write(u"\2\u01a3C\3\2\2\2\u01a4\u01a5\7I\2\2\u01a5\u01a6\7\26")
-        buf.write(u"\2\2\u01a6\u01a7\t\5\2\2\u01a7\u01a8\7\"\2\2\u01a8\u01ad")
-        buf.write(u"\5\b\5\2\u01a9\u01aa\7J\2\2\u01aa\u01ab\7\26\2\2\u01ab")
-        buf.write(u"\u01ac\t\3\2\2\u01ac\u01ae\7\27\2\2\u01ad\u01a9\3\2\2")
-        buf.write(u"\2\u01ad\u01ae\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01b0")
-        buf.write(u"\7\27\2\2\u01b0E\3\2\2\2\u01b1\u01b7\5\b\5\2\u01b2\u01b3")
-        buf.write(u"\5\b\5\2\u01b3\u01b4\7\3\2\2\u01b4\u01b5\5F$\2\u01b5")
-        buf.write(u"\u01b7\3\2\2\2\u01b6\u01b1\3\2\2\2\u01b6\u01b2\3\2\2")
-        buf.write(u"\2\u01b7G\3\2\2\2\u01b8\u01b9\5\16\b\2\u01b9I\3\2\2\2")
-        buf.write(u"\u01ba\u01c0\7I\2\2\u01bb\u01c1\5,\27\2\u01bc\u01bd\7")
-        buf.write(u"\26\2\2\u01bd\u01be\5\b\5\2\u01be\u01bf\7\27\2\2\u01bf")
-        buf.write(u"\u01c1\3\2\2\2\u01c0\u01bb\3\2\2\2\u01c0\u01bc\3\2\2")
-        buf.write(u"\2\u01c1K\3\2\2\2\u01c2\u01c8\7J\2\2\u01c3\u01c9\5,\27")
-        buf.write(u"\2\u01c4\u01c5\7\26\2\2\u01c5\u01c6\5\b\5\2\u01c6\u01c7")
-        buf.write(u"\7\27\2\2\u01c7\u01c9\3\2\2\2\u01c8\u01c3\3\2\2\2\u01c8")
-        buf.write(u"\u01c4\3\2\2\2\u01c9M\3\2\2\2\u01ca\u01cb\7I\2\2\u01cb")
-        buf.write(u"\u01cc\7\26\2\2\u01cc\u01cd\5\6\4\2\u01cd\u01ce\7\27")
-        buf.write(u"\2\2\u01ceO\3\2\2\2\u01cf\u01d0\7I\2\2\u01d0\u01d1\7")
-        buf.write(u"\26\2\2\u01d1\u01d2\5\6\4\2\u01d2\u01d3\7\27\2\2\u01d3")
-        buf.write(u"Q\3\2\2\2.\\mx\u0083\u008b\u008d\u0095\u0098\u009e\u00a5")
-        buf.write(u"\u00aa\u00b2\u00b8\u00c0\u00ce\u00d1\u00d5\u00e2\u00e5")
-        buf.write(u"\u00e9\u00f4\u00fd\u010f\u0117\u011e\u0130\u014f\u0152")
-        buf.write(u"\u0155\u0158\u015a\u0161\u0165\u0172\u0175\u017a\u0181")
-        buf.write(u"\u0193\u019b\u01a2\u01ad\u01b6\u01c0\u01c8")
-        return buf.getvalue()
-
+    return [
+        4,1,88,467,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
+        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
+        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
+        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
+        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
+        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
+        1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,5,1,89,8,1,10,1,12,1,92,9,1,1,2,
+        1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,5,4,106,8,4,10,4,12,
+        4,109,9,4,1,5,1,5,1,5,1,5,1,5,1,5,5,5,117,8,5,10,5,12,5,120,9,5,
+        1,6,1,6,1,6,1,6,1,6,1,6,5,6,128,8,6,10,6,12,6,131,9,6,1,7,1,7,1,
+        7,4,7,136,8,7,11,7,12,7,137,3,7,140,8,7,1,8,1,8,1,8,1,8,5,8,146,
+        8,8,10,8,12,8,149,9,8,3,8,151,8,8,1,9,1,9,5,9,155,8,9,10,9,12,9,
+        158,9,9,1,10,1,10,5,10,162,8,10,10,10,12,10,165,9,10,1,11,1,11,3,
+        11,169,8,11,1,12,1,12,1,12,1,12,1,12,1,12,3,12,177,8,12,1,13,1,13,
+        1,13,1,13,3,13,183,8,13,1,13,1,13,1,14,1,14,1,14,1,14,3,14,191,8,
+        14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,
+        15,205,8,15,1,15,3,15,208,8,15,5,15,210,8,15,10,15,12,15,213,9,15,
+        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,225,8,16,
+        1,16,3,16,228,8,16,5,16,230,8,16,10,16,12,16,233,9,16,1,17,1,17,
+        1,17,1,17,1,17,1,17,1,17,1,17,3,17,243,8,17,1,18,1,18,1,18,1,18,
+        1,18,1,18,1,18,3,18,252,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
+        1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,270,8,19,1,20,
+        1,20,1,20,1,20,1,21,1,21,3,21,278,8,21,1,21,1,21,1,21,1,21,1,21,
+        3,21,285,8,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,
+        1,24,1,24,1,24,1,25,5,25,301,8,25,10,25,12,25,304,9,25,1,26,1,26,
+        1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
+        1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,31,1,31,
+        3,31,334,8,31,1,31,3,31,337,8,31,1,31,3,31,340,8,31,1,31,3,31,343,
+        8,31,3,31,345,8,31,1,31,1,31,1,31,1,31,1,31,3,31,352,8,31,1,31,1,
+        31,3,31,356,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
+        31,1,31,3,31,369,8,31,1,31,3,31,372,8,31,1,31,1,31,1,31,3,31,377,
+        8,31,1,31,1,31,1,31,1,31,1,31,3,31,384,8,31,1,31,1,31,1,31,1,31,
+        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,
+        402,8,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,410,8,31,1,32,1,32,1,
+        32,1,32,1,32,3,32,417,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
+        33,1,33,3,33,428,8,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,3,34,437,
+        8,34,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,3,36,447,8,36,1,37,
+        1,37,1,37,1,37,1,37,1,37,3,37,455,8,37,1,38,1,38,1,38,1,38,1,38,
+        1,39,1,39,1,39,1,39,1,39,1,39,0,6,2,8,10,12,30,32,40,0,2,4,6,8,10,
+        12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
+        56,58,60,62,64,66,68,70,72,74,76,78,0,9,2,0,77,80,83,84,1,0,14,15,
+        3,0,16,17,63,65,73,73,2,0,75,75,88,88,1,0,26,27,2,0,26,26,28,28,
+        1,0,67,69,1,0,36,56,1,0,34,35,495,0,80,1,0,0,0,2,82,1,0,0,0,4,93,
+        1,0,0,0,6,97,1,0,0,0,8,99,1,0,0,0,10,110,1,0,0,0,12,121,1,0,0,0,
+        14,139,1,0,0,0,16,150,1,0,0,0,18,152,1,0,0,0,20,159,1,0,0,0,22,168,
+        1,0,0,0,24,170,1,0,0,0,26,178,1,0,0,0,28,186,1,0,0,0,30,194,1,0,
+        0,0,32,214,1,0,0,0,34,242,1,0,0,0,36,251,1,0,0,0,38,269,1,0,0,0,
+        40,271,1,0,0,0,42,284,1,0,0,0,44,286,1,0,0,0,46,290,1,0,0,0,48,294,
+        1,0,0,0,50,302,1,0,0,0,52,305,1,0,0,0,54,313,1,0,0,0,56,321,1,0,
+        0,0,58,325,1,0,0,0,60,329,1,0,0,0,62,409,1,0,0,0,64,416,1,0,0,0,
+        66,418,1,0,0,0,68,436,1,0,0,0,70,438,1,0,0,0,72,440,1,0,0,0,74,448,
+        1,0,0,0,76,456,1,0,0,0,78,461,1,0,0,0,80,81,3,2,1,0,81,1,1,0,0,0,
+        82,83,6,1,-1,0,83,84,3,6,3,0,84,90,1,0,0,0,85,86,10,2,0,0,86,87,
+        7,0,0,0,87,89,3,2,1,3,88,85,1,0,0,0,89,92,1,0,0,0,90,88,1,0,0,0,
+        90,91,1,0,0,0,91,3,1,0,0,0,92,90,1,0,0,0,93,94,3,6,3,0,94,95,5,77,
+        0,0,95,96,3,6,3,0,96,5,1,0,0,0,97,98,3,8,4,0,98,7,1,0,0,0,99,100,
+        6,4,-1,0,100,101,3,10,5,0,101,107,1,0,0,0,102,103,10,2,0,0,103,104,
+        7,1,0,0,104,106,3,8,4,3,105,102,1,0,0,0,106,109,1,0,0,0,107,105,
+        1,0,0,0,107,108,1,0,0,0,108,9,1,0,0,0,109,107,1,0,0,0,110,111,6,
+        5,-1,0,111,112,3,14,7,0,112,118,1,0,0,0,113,114,10,2,0,0,114,115,
+        7,2,0,0,115,117,3,10,5,3,116,113,1,0,0,0,117,120,1,0,0,0,118,116,
+        1,0,0,0,118,119,1,0,0,0,119,11,1,0,0,0,120,118,1,0,0,0,121,122,6,
+        6,-1,0,122,123,3,16,8,0,123,129,1,0,0,0,124,125,10,2,0,0,125,126,
+        7,2,0,0,126,128,3,12,6,3,127,124,1,0,0,0,128,131,1,0,0,0,129,127,
+        1,0,0,0,129,130,1,0,0,0,130,13,1,0,0,0,131,129,1,0,0,0,132,133,7,
+        1,0,0,133,140,3,14,7,0,134,136,3,18,9,0,135,134,1,0,0,0,136,137,
+        1,0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,140,1,0,0,0,139,132,
+        1,0,0,0,139,135,1,0,0,0,140,15,1,0,0,0,141,142,7,1,0,0,142,151,3,
+        16,8,0,143,147,3,18,9,0,144,146,3,20,10,0,145,144,1,0,0,0,146,149,
+        1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,151,1,0,0,0,149,147,
+        1,0,0,0,150,141,1,0,0,0,150,143,1,0,0,0,151,17,1,0,0,0,152,156,3,
+        30,15,0,153,155,3,22,11,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,
+        1,0,0,0,156,157,1,0,0,0,157,19,1,0,0,0,158,156,1,0,0,0,159,163,3,
+        32,16,0,160,162,3,22,11,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,
+        1,0,0,0,163,164,1,0,0,0,164,21,1,0,0,0,165,163,1,0,0,0,166,169,5,
+        87,0,0,167,169,3,24,12,0,168,166,1,0,0,0,168,167,1,0,0,0,169,23,
+        1,0,0,0,170,176,5,26,0,0,171,177,3,28,14,0,172,177,3,26,13,0,173,
+        174,3,28,14,0,174,175,3,26,13,0,175,177,1,0,0,0,176,171,1,0,0,0,
+        176,172,1,0,0,0,176,173,1,0,0,0,177,25,1,0,0,0,178,179,5,71,0,0,
+        179,182,5,20,0,0,180,183,3,6,3,0,181,183,3,4,2,0,182,180,1,0,0,0,
+        182,181,1,0,0,0,183,184,1,0,0,0,184,185,5,21,0,0,185,27,1,0,0,0,
+        186,187,5,72,0,0,187,190,5,20,0,0,188,191,3,6,3,0,189,191,3,4,2,
+        0,190,188,1,0,0,0,190,189,1,0,0,0,191,192,1,0,0,0,192,193,5,21,0,
+        0,193,29,1,0,0,0,194,195,6,15,-1,0,195,196,3,34,17,0,196,211,1,0,
+        0,0,197,198,10,2,0,0,198,204,5,72,0,0,199,205,3,42,21,0,200,201,
+        5,20,0,0,201,202,3,6,3,0,202,203,5,21,0,0,203,205,1,0,0,0,204,199,
+        1,0,0,0,204,200,1,0,0,0,205,207,1,0,0,0,206,208,3,72,36,0,207,206,
+        1,0,0,0,207,208,1,0,0,0,208,210,1,0,0,0,209,197,1,0,0,0,210,213,
+        1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,31,1,0,0,0,213,211,1,
+        0,0,0,214,215,6,16,-1,0,215,216,3,36,18,0,216,231,1,0,0,0,217,218,
+        10,2,0,0,218,224,5,72,0,0,219,225,3,42,21,0,220,221,5,20,0,0,221,
+        222,3,6,3,0,222,223,5,21,0,0,223,225,1,0,0,0,224,219,1,0,0,0,224,
+        220,1,0,0,0,225,227,1,0,0,0,226,228,3,72,36,0,227,226,1,0,0,0,227,
+        228,1,0,0,0,228,230,1,0,0,0,229,217,1,0,0,0,230,233,1,0,0,0,231,
+        229,1,0,0,0,231,232,1,0,0,0,232,33,1,0,0,0,233,231,1,0,0,0,234,243,
+        3,38,19,0,235,243,3,40,20,0,236,243,3,62,31,0,237,243,3,42,21,0,
+        238,243,3,52,26,0,239,243,3,54,27,0,240,243,3,56,28,0,241,243,3,
+        58,29,0,242,234,1,0,0,0,242,235,1,0,0,0,242,236,1,0,0,0,242,237,
+        1,0,0,0,242,238,1,0,0,0,242,239,1,0,0,0,242,240,1,0,0,0,242,241,
+        1,0,0,0,243,35,1,0,0,0,244,252,3,38,19,0,245,252,3,40,20,0,246,252,
+        3,42,21,0,247,252,3,52,26,0,248,252,3,54,27,0,249,252,3,56,28,0,
+        250,252,3,58,29,0,251,244,1,0,0,0,251,245,1,0,0,0,251,246,1,0,0,
+        0,251,247,1,0,0,0,251,248,1,0,0,0,251,249,1,0,0,0,251,250,1,0,0,
+        0,252,37,1,0,0,0,253,254,5,18,0,0,254,255,3,6,3,0,255,256,5,19,0,
+        0,256,270,1,0,0,0,257,258,5,24,0,0,258,259,3,6,3,0,259,260,5,25,
+        0,0,260,270,1,0,0,0,261,262,5,20,0,0,262,263,3,6,3,0,263,264,5,21,
+        0,0,264,270,1,0,0,0,265,266,5,22,0,0,266,267,3,6,3,0,267,268,5,23,
+        0,0,268,270,1,0,0,0,269,253,1,0,0,0,269,257,1,0,0,0,269,261,1,0,
+        0,0,269,265,1,0,0,0,270,39,1,0,0,0,271,272,5,26,0,0,272,273,3,6,
+        3,0,273,274,5,26,0,0,274,41,1,0,0,0,275,277,7,3,0,0,276,278,3,72,
+        36,0,277,276,1,0,0,0,277,278,1,0,0,0,278,285,1,0,0,0,279,285,5,76,
+        0,0,280,285,5,74,0,0,281,285,3,48,24,0,282,285,3,44,22,0,283,285,
+        3,46,23,0,284,275,1,0,0,0,284,279,1,0,0,0,284,280,1,0,0,0,284,281,
+        1,0,0,0,284,282,1,0,0,0,284,283,1,0,0,0,285,43,1,0,0,0,286,287,5,
+        29,0,0,287,288,3,6,3,0,288,289,7,4,0,0,289,45,1,0,0,0,290,291,7,
+        5,0,0,291,292,3,6,3,0,292,293,5,30,0,0,293,47,1,0,0,0,294,295,5,
+        70,0,0,295,296,5,20,0,0,296,297,3,50,25,0,297,298,5,21,0,0,298,49,
+        1,0,0,0,299,301,5,75,0,0,300,299,1,0,0,0,301,304,1,0,0,0,302,300,
+        1,0,0,0,302,303,1,0,0,0,303,51,1,0,0,0,304,302,1,0,0,0,305,306,5,
+        66,0,0,306,307,5,20,0,0,307,308,3,6,3,0,308,309,5,21,0,0,309,310,
+        5,20,0,0,310,311,3,6,3,0,311,312,5,21,0,0,312,53,1,0,0,0,313,314,
+        7,6,0,0,314,315,5,20,0,0,315,316,3,6,3,0,316,317,5,21,0,0,317,318,
+        5,20,0,0,318,319,3,6,3,0,319,320,5,21,0,0,320,55,1,0,0,0,321,322,
+        5,57,0,0,322,323,3,6,3,0,323,324,5,58,0,0,324,57,1,0,0,0,325,326,
+        5,59,0,0,326,327,3,6,3,0,327,328,5,60,0,0,328,59,1,0,0,0,329,330,
+        7,7,0,0,330,61,1,0,0,0,331,344,3,60,30,0,332,334,3,72,36,0,333,332,
+        1,0,0,0,333,334,1,0,0,0,334,336,1,0,0,0,335,337,3,74,37,0,336,335,
+        1,0,0,0,336,337,1,0,0,0,337,345,1,0,0,0,338,340,3,74,37,0,339,338,
+        1,0,0,0,339,340,1,0,0,0,340,342,1,0,0,0,341,343,3,72,36,0,342,341,
+        1,0,0,0,342,343,1,0,0,0,343,345,1,0,0,0,344,333,1,0,0,0,344,339,
+        1,0,0,0,345,351,1,0,0,0,346,347,5,18,0,0,347,348,3,68,34,0,348,349,
+        5,19,0,0,349,352,1,0,0,0,350,352,3,70,35,0,351,346,1,0,0,0,351,350,
+        1,0,0,0,352,410,1,0,0,0,353,355,7,3,0,0,354,356,3,72,36,0,355,354,
+        1,0,0,0,355,356,1,0,0,0,356,357,1,0,0,0,357,358,5,18,0,0,358,359,
+        3,64,32,0,359,360,5,19,0,0,360,410,1,0,0,0,361,368,5,33,0,0,362,
+        363,3,72,36,0,363,364,3,74,37,0,364,369,1,0,0,0,365,366,3,74,37,
+        0,366,367,3,72,36,0,367,369,1,0,0,0,368,362,1,0,0,0,368,365,1,0,
+        0,0,368,369,1,0,0,0,369,376,1,0,0,0,370,372,3,8,4,0,371,370,1,0,
+        0,0,371,372,1,0,0,0,372,373,1,0,0,0,373,377,5,74,0,0,374,377,3,52,
+        26,0,375,377,3,8,4,0,376,371,1,0,0,0,376,374,1,0,0,0,376,375,1,0,
+        0,0,377,410,1,0,0,0,378,383,5,61,0,0,379,380,5,24,0,0,380,381,3,
+        6,3,0,381,382,5,25,0,0,382,384,1,0,0,0,383,379,1,0,0,0,383,384,1,
+        0,0,0,384,385,1,0,0,0,385,386,5,20,0,0,386,387,3,6,3,0,387,388,5,
+        21,0,0,388,410,1,0,0,0,389,390,5,62,0,0,390,391,5,20,0,0,391,392,
+        3,6,3,0,392,393,5,21,0,0,393,410,1,0,0,0,394,401,7,8,0,0,395,396,
+        3,76,38,0,396,397,3,74,37,0,397,402,1,0,0,0,398,399,3,74,37,0,399,
+        400,3,76,38,0,400,402,1,0,0,0,401,395,1,0,0,0,401,398,1,0,0,0,402,
+        403,1,0,0,0,403,404,3,10,5,0,404,410,1,0,0,0,405,406,5,31,0,0,406,
+        407,3,66,33,0,407,408,3,10,5,0,408,410,1,0,0,0,409,331,1,0,0,0,409,
+        353,1,0,0,0,409,361,1,0,0,0,409,378,1,0,0,0,409,389,1,0,0,0,409,
+        394,1,0,0,0,409,405,1,0,0,0,410,63,1,0,0,0,411,412,3,6,3,0,412,413,
+        5,1,0,0,413,414,3,64,32,0,414,417,1,0,0,0,415,417,3,6,3,0,416,411,
+        1,0,0,0,416,415,1,0,0,0,417,65,1,0,0,0,418,419,5,71,0,0,419,420,
+        5,20,0,0,420,421,7,3,0,0,421,422,5,32,0,0,422,427,3,6,3,0,423,424,
+        5,72,0,0,424,425,5,20,0,0,425,426,7,1,0,0,426,428,5,21,0,0,427,423,
+        1,0,0,0,427,428,1,0,0,0,428,429,1,0,0,0,429,430,5,21,0,0,430,67,
+        1,0,0,0,431,437,3,6,3,0,432,433,3,6,3,0,433,434,5,1,0,0,434,435,
+        3,68,34,0,435,437,1,0,0,0,436,431,1,0,0,0,436,432,1,0,0,0,437,69,
+        1,0,0,0,438,439,3,12,6,0,439,71,1,0,0,0,440,446,5,71,0,0,441,447,
+        3,42,21,0,442,443,5,20,0,0,443,444,3,6,3,0,444,445,5,21,0,0,445,
+        447,1,0,0,0,446,441,1,0,0,0,446,442,1,0,0,0,447,73,1,0,0,0,448,454,
+        5,72,0,0,449,455,3,42,21,0,450,451,5,20,0,0,451,452,3,6,3,0,452,
+        453,5,21,0,0,453,455,1,0,0,0,454,449,1,0,0,0,454,450,1,0,0,0,455,
+        75,1,0,0,0,456,457,5,71,0,0,457,458,5,20,0,0,458,459,3,4,2,0,459,
+        460,5,21,0,0,460,77,1,0,0,0,461,462,5,71,0,0,462,463,5,20,0,0,463,
+        464,3,4,2,0,464,465,5,21,0,0,465,79,1,0,0,0,44,90,107,118,129,137,
+        139,147,150,156,163,168,176,182,190,204,207,211,224,227,231,242,
+        251,269,277,284,302,333,336,339,342,344,351,355,368,371,376,383,
+        401,409,416,427,436,446,454
+    ]
 
 class LaTeXParser ( Parser ):
 
@@ -253,47 +213,45 @@ class LaTeXParser ( Parser ):
 
     sharedContextCache = PredictionContextCache()
 
-    literalNames = [ u"<INVALID>", u"','", u"<INVALID>", u"<INVALID>", u"<INVALID>",
-                     u"<INVALID>", u"'\\quad'", u"'\\qquad'", u"<INVALID>",
-                     u"'\\negmedspace'", u"'\\negthickspace'", u"'\\left'",
-                     u"'\\right'", u"<INVALID>", u"'+'", u"'-'", u"'*'",
-                     u"'/'", u"'('", u"')'", u"'{'", u"'}'", u"'\\{'", u"'\\}'",
-                     u"'['", u"']'", u"'|'", u"'\\right|'", u"'\\left|'",
-                     u"'\\langle'", u"'\\rangle'", u"'\\lim'", u"<INVALID>",
-                     u"'\\int'", u"'\\sum'", u"'\\prod'", u"'\\exp'", u"'\\log'",
-                     u"'\\ln'", u"'\\sin'", u"'\\cos'", u"'\\tan'", u"'\\csc'",
-                     u"'\\sec'", u"'\\cot'", u"'\\arcsin'", u"'\\arccos'",
-                     u"'\\arctan'", u"'\\arccsc'", u"'\\arcsec'", u"'\\arccot'",
-                     u"'\\sinh'", u"'\\cosh'", u"'\\tanh'", u"'\\arsinh'",
-                     u"'\\arcosh'", u"'\\artanh'", u"'\\lfloor'", u"'\\rfloor'",
-                     u"'\\lceil'", u"'\\rceil'", u"'\\sqrt'", u"'\\overline'",
-                     u"'\\times'", u"'\\cdot'", u"'\\div'", u"'\\frac'",
-                     u"'\\binom'", u"'\\dbinom'", u"'\\tbinom'", u"'\\mathit'",
-                     u"'_'", u"'^'", u"':'", u"<INVALID>", u"<INVALID>",
-                     u"<INVALID>", u"<INVALID>", u"'\\neq'", u"'<'", u"<INVALID>",
-                     u"'\\leqq'", u"'\\leqslant'", u"'>'", u"<INVALID>",
-                     u"'\\geqq'", u"'\\geqslant'", u"'!'" ]
-
-    symbolicNames = [ u"<INVALID>", u"<INVALID>", u"WS", u"THINSPACE", u"MEDSPACE",
-                      u"THICKSPACE", u"QUAD", u"QQUAD", u"NEGTHINSPACE",
-                      u"NEGMEDSPACE", u"NEGTHICKSPACE", u"CMD_LEFT", u"CMD_RIGHT",
-                      u"IGNORE", u"ADD", u"SUB", u"MUL", u"DIV", u"L_PAREN",
-                      u"R_PAREN", u"L_BRACE", u"R_BRACE", u"L_BRACE_LITERAL",
-                      u"R_BRACE_LITERAL", u"L_BRACKET", u"R_BRACKET", u"BAR",
-                      u"R_BAR", u"L_BAR", u"L_ANGLE", u"R_ANGLE", u"FUNC_LIM",
-                      u"LIM_APPROACH_SYM", u"FUNC_INT", u"FUNC_SUM", u"FUNC_PROD",
-                      u"FUNC_EXP", u"FUNC_LOG", u"FUNC_LN", u"FUNC_SIN",
-                      u"FUNC_COS", u"FUNC_TAN", u"FUNC_CSC", u"FUNC_SEC",
-                      u"FUNC_COT", u"FUNC_ARCSIN", u"FUNC_ARCCOS", u"FUNC_ARCTAN",
-                      u"FUNC_ARCCSC", u"FUNC_ARCSEC", u"FUNC_ARCCOT", u"FUNC_SINH",
-                      u"FUNC_COSH", u"FUNC_TANH", u"FUNC_ARSINH", u"FUNC_ARCOSH",
-                      u"FUNC_ARTANH", u"L_FLOOR", u"R_FLOOR", u"L_CEIL",
-                      u"R_CEIL", u"FUNC_SQRT", u"FUNC_OVERLINE", u"CMD_TIMES",
-                      u"CMD_CDOT", u"CMD_DIV", u"CMD_FRAC", u"CMD_BINOM",
-                      u"CMD_DBINOM", u"CMD_TBINOM", u"CMD_MATHIT", u"UNDERSCORE",
-                      u"CARET", u"COLON", u"DIFFERENTIAL", u"LETTER", u"NUMBER",
-                      u"EQUAL", u"NEQ", u"LT", u"LTE", u"LTE_Q", u"LTE_S",
-                      u"GT", u"GTE", u"GTE_Q", u"GTE_S", u"BANG", u"SYMBOL" ]
+    literalNames = [ "<INVALID>", "','", "<INVALID>", "<INVALID>", "<INVALID>",
+                     "<INVALID>", "'\\quad'", "'\\qquad'", "<INVALID>",
+                     "'\\negmedspace'", "'\\negthickspace'", "'\\left'",
+                     "'\\right'", "<INVALID>", "'+'", "'-'", "'*'", "'/'",
+                     "'('", "')'", "'{'", "'}'", "'\\{'", "'\\}'", "'['",
+                     "']'", "'|'", "'\\right|'", "'\\left|'", "'\\langle'",
+                     "'\\rangle'", "'\\lim'", "<INVALID>", "'\\int'", "'\\sum'",
+                     "'\\prod'", "'\\exp'", "'\\log'", "'\\ln'", "'\\sin'",
+                     "'\\cos'", "'\\tan'", "'\\csc'", "'\\sec'", "'\\cot'",
+                     "'\\arcsin'", "'\\arccos'", "'\\arctan'", "'\\arccsc'",
+                     "'\\arcsec'", "'\\arccot'", "'\\sinh'", "'\\cosh'",
+                     "'\\tanh'", "'\\arsinh'", "'\\arcosh'", "'\\artanh'",
+                     "'\\lfloor'", "'\\rfloor'", "'\\lceil'", "'\\rceil'",
+                     "'\\sqrt'", "'\\overline'", "'\\times'", "'\\cdot'",
+                     "'\\div'", "'\\frac'", "'\\binom'", "'\\dbinom'", "'\\tbinom'",
+                     "'\\mathit'", "'_'", "'^'", "':'", "<INVALID>", "<INVALID>",
+                     "<INVALID>", "<INVALID>", "'\\neq'", "'<'", "<INVALID>",
+                     "'\\leqq'", "'\\leqslant'", "'>'", "<INVALID>", "'\\geqq'",
+                     "'\\geqslant'", "'!'" ]
+
+    symbolicNames = [ "<INVALID>", "<INVALID>", "WS", "THINSPACE", "MEDSPACE",
+                      "THICKSPACE", "QUAD", "QQUAD", "NEGTHINSPACE", "NEGMEDSPACE",
+                      "NEGTHICKSPACE", "CMD_LEFT", "CMD_RIGHT", "IGNORE",
+                      "ADD", "SUB", "MUL", "DIV", "L_PAREN", "R_PAREN",
+                      "L_BRACE", "R_BRACE", "L_BRACE_LITERAL", "R_BRACE_LITERAL",
+                      "L_BRACKET", "R_BRACKET", "BAR", "R_BAR", "L_BAR",
+                      "L_ANGLE", "R_ANGLE", "FUNC_LIM", "LIM_APPROACH_SYM",
+                      "FUNC_INT", "FUNC_SUM", "FUNC_PROD", "FUNC_EXP", "FUNC_LOG",
+                      "FUNC_LN", "FUNC_SIN", "FUNC_COS", "FUNC_TAN", "FUNC_CSC",
+                      "FUNC_SEC", "FUNC_COT", "FUNC_ARCSIN", "FUNC_ARCCOS",
+                      "FUNC_ARCTAN", "FUNC_ARCCSC", "FUNC_ARCSEC", "FUNC_ARCCOT",
+                      "FUNC_SINH", "FUNC_COSH", "FUNC_TANH", "FUNC_ARSINH",
+                      "FUNC_ARCOSH", "FUNC_ARTANH", "L_FLOOR", "R_FLOOR",
+                      "L_CEIL", "R_CEIL", "FUNC_SQRT", "FUNC_OVERLINE",
+                      "CMD_TIMES", "CMD_CDOT", "CMD_DIV", "CMD_FRAC", "CMD_BINOM",
+                      "CMD_DBINOM", "CMD_TBINOM", "CMD_MATHIT", "UNDERSCORE",
+                      "CARET", "COLON", "DIFFERENTIAL", "LETTER", "NUMBER",
+                      "EQUAL", "NEQ", "LT", "LTE", "LTE_Q", "LTE_S", "GT",
+                      "GTE", "GTE_Q", "GTE_S", "BANG", "SYMBOL" ]
 
     RULE_math = 0
     RULE_relation = 1
@@ -336,15 +294,14 @@ class LaTeXParser ( Parser ):
     RULE_subeq = 38
     RULE_supeq = 39
 
-    ruleNames =  [ u"math", u"relation", u"equality", u"expr", u"additive",
-                   u"mp", u"mp_nofunc", u"unary", u"unary_nofunc", u"postfix",
-                   u"postfix_nofunc", u"postfix_op", u"eval_at", u"eval_at_sub",
-                   u"eval_at_sup", u"exp", u"exp_nofunc", u"comp", u"comp_nofunc",
-                   u"group", u"abs_group", u"atom", u"bra", u"ket", u"mathit",
-                   u"mathit_text", u"frac", u"binom", u"floor", u"ceil",
-                   u"func_normal", u"func", u"args", u"limit_sub", u"func_arg",
-                   u"func_arg_noparens", u"subexpr", u"supexpr", u"subeq",
-                   u"supeq" ]
+    ruleNames =  [ "math", "relation", "equality", "expr", "additive", "mp",
+                   "mp_nofunc", "unary", "unary_nofunc", "postfix", "postfix_nofunc",
+                   "postfix_op", "eval_at", "eval_at_sub", "eval_at_sup",
+                   "exp", "exp_nofunc", "comp", "comp_nofunc", "group",
+                   "abs_group", "atom", "bra", "ket", "mathit", "mathit_text",
+                   "frac", "binom", "floor", "ceil", "func_normal", "func",
+                   "args", "limit_sub", "func_arg", "func_arg_noparens",
+                   "subexpr", "supexpr", "subeq", "supeq" ]
 
     EOF = Token.EOF
     T__0=1
@@ -436,9 +393,9 @@ class LaTeXParser ( Parser ):
     BANG=87
     SYMBOL=88
 
-    def __init__(self, input, output=sys.stdout):
-        super(LaTeXParser, self).__init__(input, output=output)
-        self.checkVersion("4.7.2")
+    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
+        super().__init__(input, output)
+        self.checkVersion("4.13.2")
         self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
         self._predicates = None
 
@@ -446,9 +403,10 @@ def __init__(self, input, output=sys.stdout):
 
 
     class MathContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.MathContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def relation(self):
@@ -479,16 +437,17 @@ def math(self):
 
 
     class RelationContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.RelationContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def expr(self):
             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
 
 
-        def relation(self, i=None):
+        def relation(self, i:int=None):
             if i is None:
                 return self.getTypedRuleContexts(LaTeXParser.RelationContext)
             else:
@@ -518,7 +477,7 @@ def getRuleIndex(self):
 
 
 
-    def relation(self, _p=0):
+    def relation(self, _p:int=0):
         _parentctx = self._ctx
         _parentState = self.state
         localctx = LaTeXParser.RelationContext(self, self._ctx, _parentState)
@@ -547,7 +506,7 @@ def relation(self, _p=0):
                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                     self.state = 86
                     _la = self._input.LA(1)
-                    if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (LaTeXParser.EQUAL - 77)) | (1 << (LaTeXParser.NEQ - 77)) | (1 << (LaTeXParser.LT - 77)) | (1 << (LaTeXParser.LTE - 77)) | (1 << (LaTeXParser.GT - 77)) | (1 << (LaTeXParser.GTE - 77)))) != 0)):
+                    if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 207) != 0)):
                         self._errHandler.recoverInline(self)
                     else:
                         self._errHandler.reportMatch(self)
@@ -568,12 +527,13 @@ def relation(self, _p=0):
 
 
     class EqualityContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.EqualityContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
-        def expr(self, i=None):
+        def expr(self, i:int=None):
             if i is None:
                 return self.getTypedRuleContexts(LaTeXParser.ExprContext)
             else:
@@ -611,9 +571,10 @@ def equality(self):
 
 
     class ExprContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.ExprContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def additive(self):
@@ -644,16 +605,17 @@ def expr(self):
 
 
     class AdditiveContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.AdditiveContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def mp(self):
             return self.getTypedRuleContext(LaTeXParser.MpContext,0)
 
 
-        def additive(self, i=None):
+        def additive(self, i:int=None):
             if i is None:
                 return self.getTypedRuleContexts(LaTeXParser.AdditiveContext)
             else:
@@ -671,7 +633,7 @@ def getRuleIndex(self):
 
 
 
-    def additive(self, _p=0):
+    def additive(self, _p:int=0):
         _parentctx = self._ctx
         _parentState = self.state
         localctx = LaTeXParser.AdditiveContext(self, self._ctx, _parentState)
@@ -700,7 +662,7 @@ def additive(self, _p=0):
                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                     self.state = 103
                     _la = self._input.LA(1)
-                    if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):
+                    if not(_la==14 or _la==15):
                         self._errHandler.recoverInline(self)
                     else:
                         self._errHandler.reportMatch(self)
@@ -721,16 +683,17 @@ def additive(self, _p=0):
 
 
     class MpContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.MpContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def unary(self):
             return self.getTypedRuleContext(LaTeXParser.UnaryContext,0)
 
 
-        def mp(self, i=None):
+        def mp(self, i:int=None):
             if i is None:
                 return self.getTypedRuleContexts(LaTeXParser.MpContext)
             else:
@@ -760,7 +723,7 @@ def getRuleIndex(self):
 
 
 
-    def mp(self, _p=0):
+    def mp(self, _p:int=0):
         _parentctx = self._ctx
         _parentState = self.state
         localctx = LaTeXParser.MpContext(self, self._ctx, _parentState)
@@ -789,7 +752,7 @@ def mp(self, _p=0):
                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                     self.state = 114
                     _la = self._input.LA(1)
-                    if not(((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & ((1 << (LaTeXParser.MUL - 16)) | (1 << (LaTeXParser.DIV - 16)) | (1 << (LaTeXParser.CMD_TIMES - 16)) | (1 << (LaTeXParser.CMD_CDOT - 16)) | (1 << (LaTeXParser.CMD_DIV - 16)) | (1 << (LaTeXParser.COLON - 16)))) != 0)):
+                    if not(((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & 145100350494343171) != 0)):
                         self._errHandler.recoverInline(self)
                     else:
                         self._errHandler.reportMatch(self)
@@ -810,16 +773,17 @@ def mp(self, _p=0):
 
 
     class Mp_nofuncContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.Mp_nofuncContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def unary_nofunc(self):
             return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext,0)
 
 
-        def mp_nofunc(self, i=None):
+        def mp_nofunc(self, i:int=None):
             if i is None:
                 return self.getTypedRuleContexts(LaTeXParser.Mp_nofuncContext)
             else:
@@ -849,7 +813,7 @@ def getRuleIndex(self):
 
 
 
-    def mp_nofunc(self, _p=0):
+    def mp_nofunc(self, _p:int=0):
         _parentctx = self._ctx
         _parentState = self.state
         localctx = LaTeXParser.Mp_nofuncContext(self, self._ctx, _parentState)
@@ -878,7 +842,7 @@ def mp_nofunc(self, _p=0):
                         raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                     self.state = 125
                     _la = self._input.LA(1)
-                    if not(((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & ((1 << (LaTeXParser.MUL - 16)) | (1 << (LaTeXParser.DIV - 16)) | (1 << (LaTeXParser.CMD_TIMES - 16)) | (1 << (LaTeXParser.CMD_CDOT - 16)) | (1 << (LaTeXParser.CMD_DIV - 16)) | (1 << (LaTeXParser.COLON - 16)))) != 0)):
+                    if not(((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & 145100350494343171) != 0)):
                         self._errHandler.recoverInline(self)
                     else:
                         self._errHandler.reportMatch(self)
@@ -899,9 +863,10 @@ def mp_nofunc(self, _p=0):
 
 
     class UnaryContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.UnaryContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def unary(self):
@@ -914,7 +879,7 @@ def ADD(self):
         def SUB(self):
             return self.getToken(LaTeXParser.SUB, 0)
 
-        def postfix(self, i=None):
+        def postfix(self, i:int=None):
             if i is None:
                 return self.getTypedRuleContexts(LaTeXParser.PostfixContext)
             else:
@@ -936,11 +901,11 @@ def unary(self):
             self.state = 139
             self._errHandler.sync(self)
             token = self._input.LA(1)
-            if token in [LaTeXParser.ADD, LaTeXParser.SUB]:
+            if token in [14, 15]:
                 self.enterOuterAlt(localctx, 1)
                 self.state = 132
                 _la = self._input.LA(1)
-                if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):
+                if not(_la==14 or _la==15):
                     self._errHandler.recoverInline(self)
                 else:
                     self._errHandler.reportMatch(self)
@@ -948,7 +913,7 @@ def unary(self):
                 self.state = 133
                 self.unary()
                 pass
-            elif token in [LaTeXParser.L_PAREN, LaTeXParser.L_BRACE, LaTeXParser.L_BRACE_LITERAL, LaTeXParser.L_BRACKET, LaTeXParser.BAR, LaTeXParser.L_BAR, LaTeXParser.L_ANGLE, LaTeXParser.FUNC_LIM, LaTeXParser.FUNC_INT, LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD, LaTeXParser.FUNC_EXP, LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH, LaTeXParser.L_FLOOR, LaTeXParser.L_CEIL, LaTeXParser.FUNC_SQRT, LaTeXParser.FUNC_OVERLINE, LaTeXParser.CMD_FRAC, LaTeXParser.CMD_BINOM, LaTeXParser.CMD_DBINOM, LaTeXParser.CMD_TBINOM, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
+            elif token in [18, 20, 22, 24, 26, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 66, 67, 68, 69, 70, 74, 75, 76, 88]:
                 self.enterOuterAlt(localctx, 2)
                 self.state = 135
                 self._errHandler.sync(self)
@@ -978,9 +943,10 @@ def unary(self):
 
 
     class Unary_nofuncContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.Unary_nofuncContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def unary_nofunc(self):
@@ -997,7 +963,7 @@ def postfix(self):
             return self.getTypedRuleContext(LaTeXParser.PostfixContext,0)
 
 
-        def postfix_nofunc(self, i=None):
+        def postfix_nofunc(self, i:int=None):
             if i is None:
                 return self.getTypedRuleContexts(LaTeXParser.Postfix_nofuncContext)
             else:
@@ -1019,11 +985,11 @@ def unary_nofunc(self):
             self.state = 150
             self._errHandler.sync(self)
             token = self._input.LA(1)
-            if token in [LaTeXParser.ADD, LaTeXParser.SUB]:
+            if token in [14, 15]:
                 self.enterOuterAlt(localctx, 1)
                 self.state = 141
                 _la = self._input.LA(1)
-                if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):
+                if not(_la==14 or _la==15):
                     self._errHandler.recoverInline(self)
                 else:
                     self._errHandler.reportMatch(self)
@@ -1031,7 +997,7 @@ def unary_nofunc(self):
                 self.state = 142
                 self.unary_nofunc()
                 pass
-            elif token in [LaTeXParser.L_PAREN, LaTeXParser.L_BRACE, LaTeXParser.L_BRACE_LITERAL, LaTeXParser.L_BRACKET, LaTeXParser.BAR, LaTeXParser.L_BAR, LaTeXParser.L_ANGLE, LaTeXParser.FUNC_LIM, LaTeXParser.FUNC_INT, LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD, LaTeXParser.FUNC_EXP, LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH, LaTeXParser.L_FLOOR, LaTeXParser.L_CEIL, LaTeXParser.FUNC_SQRT, LaTeXParser.FUNC_OVERLINE, LaTeXParser.CMD_FRAC, LaTeXParser.CMD_BINOM, LaTeXParser.CMD_DBINOM, LaTeXParser.CMD_TBINOM, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
+            elif token in [18, 20, 22, 24, 26, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 66, 67, 68, 69, 70, 74, 75, 76, 88]:
                 self.enterOuterAlt(localctx, 2)
                 self.state = 143
                 self.postfix()
@@ -1060,16 +1026,17 @@ def unary_nofunc(self):
 
 
     class PostfixContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.PostfixContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def exp(self):
             return self.getTypedRuleContext(LaTeXParser.ExpContext,0)
 
 
-        def postfix_op(self, i=None):
+        def postfix_op(self, i:int=None):
             if i is None:
                 return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)
             else:
@@ -1111,16 +1078,17 @@ def postfix(self):
 
 
     class Postfix_nofuncContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.Postfix_nofuncContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def exp_nofunc(self):
             return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext,0)
 
 
-        def postfix_op(self, i=None):
+        def postfix_op(self, i:int=None):
             if i is None:
                 return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)
             else:
@@ -1162,9 +1130,10 @@ def postfix_nofunc(self):
 
 
     class Postfix_opContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.Postfix_opContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def BANG(self):
@@ -1188,12 +1157,12 @@ def postfix_op(self):
             self.state = 168
             self._errHandler.sync(self)
             token = self._input.LA(1)
-            if token in [LaTeXParser.BANG]:
+            if token in [87]:
                 self.enterOuterAlt(localctx, 1)
                 self.state = 166
                 self.match(LaTeXParser.BANG)
                 pass
-            elif token in [LaTeXParser.BAR]:
+            elif token in [26]:
                 self.enterOuterAlt(localctx, 2)
                 self.state = 167
                 self.eval_at()
@@ -1211,9 +1180,10 @@ def postfix_op(self):
 
 
     class Eval_atContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.Eval_atContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def BAR(self):
@@ -1272,9 +1242,10 @@ def eval_at(self):
 
 
     class Eval_at_subContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.Eval_at_subContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def UNDERSCORE(self):
@@ -1336,9 +1307,10 @@ def eval_at_sub(self):
 
 
     class Eval_at_supContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.Eval_at_supContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def CARET(self):
@@ -1400,9 +1372,10 @@ def eval_at_sup(self):
 
 
     class ExpContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.ExpContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def comp(self):
@@ -1439,7 +1412,7 @@ def getRuleIndex(self):
 
 
 
-    def exp(self, _p=0):
+    def exp(self, _p:int=0):
         _parentctx = self._ctx
         _parentState = self.state
         localctx = LaTeXParser.ExpContext(self, self._ctx, _parentState)
@@ -1470,11 +1443,11 @@ def exp(self, _p=0):
                     self.state = 204
                     self._errHandler.sync(self)
                     token = self._input.LA(1)
-                    if token in [LaTeXParser.BAR, LaTeXParser.L_BAR, LaTeXParser.L_ANGLE, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
+                    if token in [26, 28, 29, 70, 74, 75, 76, 88]:
                         self.state = 199
                         self.atom()
                         pass
-                    elif token in [LaTeXParser.L_BRACE]:
+                    elif token in [20]:
                         self.state = 200
                         self.match(LaTeXParser.L_BRACE)
                         self.state = 201
@@ -1507,9 +1480,10 @@ def exp(self, _p=0):
 
 
     class Exp_nofuncContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.Exp_nofuncContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def comp_nofunc(self):
@@ -1546,7 +1520,7 @@ def getRuleIndex(self):
 
 
 
-    def exp_nofunc(self, _p=0):
+    def exp_nofunc(self, _p:int=0):
         _parentctx = self._ctx
         _parentState = self.state
         localctx = LaTeXParser.Exp_nofuncContext(self, self._ctx, _parentState)
@@ -1577,11 +1551,11 @@ def exp_nofunc(self, _p=0):
                     self.state = 224
                     self._errHandler.sync(self)
                     token = self._input.LA(1)
-                    if token in [LaTeXParser.BAR, LaTeXParser.L_BAR, LaTeXParser.L_ANGLE, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
+                    if token in [26, 28, 29, 70, 74, 75, 76, 88]:
                         self.state = 219
                         self.atom()
                         pass
-                    elif token in [LaTeXParser.L_BRACE]:
+                    elif token in [20]:
                         self.state = 220
                         self.match(LaTeXParser.L_BRACE)
                         self.state = 221
@@ -1614,9 +1588,10 @@ def exp_nofunc(self, _p=0):
 
 
     class CompContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.CompContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def group(self):
@@ -1724,9 +1699,10 @@ def comp(self):
 
 
     class Comp_nofuncContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.Comp_nofuncContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def group(self):
@@ -1824,9 +1800,10 @@ def comp_nofunc(self):
 
 
     class GroupContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.GroupContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def L_PAREN(self):
@@ -1871,7 +1848,7 @@ def group(self):
             self.state = 269
             self._errHandler.sync(self)
             token = self._input.LA(1)
-            if token in [LaTeXParser.L_PAREN]:
+            if token in [18]:
                 self.enterOuterAlt(localctx, 1)
                 self.state = 253
                 self.match(LaTeXParser.L_PAREN)
@@ -1880,7 +1857,7 @@ def group(self):
                 self.state = 255
                 self.match(LaTeXParser.R_PAREN)
                 pass
-            elif token in [LaTeXParser.L_BRACKET]:
+            elif token in [24]:
                 self.enterOuterAlt(localctx, 2)
                 self.state = 257
                 self.match(LaTeXParser.L_BRACKET)
@@ -1889,7 +1866,7 @@ def group(self):
                 self.state = 259
                 self.match(LaTeXParser.R_BRACKET)
                 pass
-            elif token in [LaTeXParser.L_BRACE]:
+            elif token in [20]:
                 self.enterOuterAlt(localctx, 3)
                 self.state = 261
                 self.match(LaTeXParser.L_BRACE)
@@ -1898,7 +1875,7 @@ def group(self):
                 self.state = 263
                 self.match(LaTeXParser.R_BRACE)
                 pass
-            elif token in [LaTeXParser.L_BRACE_LITERAL]:
+            elif token in [22]:
                 self.enterOuterAlt(localctx, 4)
                 self.state = 265
                 self.match(LaTeXParser.L_BRACE_LITERAL)
@@ -1920,12 +1897,13 @@ def group(self):
 
 
     class Abs_groupContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.Abs_groupContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
-        def BAR(self, i=None):
+        def BAR(self, i:int=None):
             if i is None:
                 return self.getTokens(LaTeXParser.BAR)
             else:
@@ -1963,9 +1941,10 @@ def abs_group(self):
 
 
     class AtomContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.AtomContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def LETTER(self):
@@ -2011,11 +1990,11 @@ def atom(self):
             self.state = 284
             self._errHandler.sync(self)
             token = self._input.LA(1)
-            if token in [LaTeXParser.LETTER, LaTeXParser.SYMBOL]:
+            if token in [75, 88]:
                 self.enterOuterAlt(localctx, 1)
                 self.state = 275
                 _la = self._input.LA(1)
-                if not(_la==LaTeXParser.LETTER or _la==LaTeXParser.SYMBOL):
+                if not(_la==75 or _la==88):
                     self._errHandler.recoverInline(self)
                 else:
                     self._errHandler.reportMatch(self)
@@ -2029,27 +2008,27 @@ def atom(self):
 
 
                 pass
-            elif token in [LaTeXParser.NUMBER]:
+            elif token in [76]:
                 self.enterOuterAlt(localctx, 2)
                 self.state = 279
                 self.match(LaTeXParser.NUMBER)
                 pass
-            elif token in [LaTeXParser.DIFFERENTIAL]:
+            elif token in [74]:
                 self.enterOuterAlt(localctx, 3)
                 self.state = 280
                 self.match(LaTeXParser.DIFFERENTIAL)
                 pass
-            elif token in [LaTeXParser.CMD_MATHIT]:
+            elif token in [70]:
                 self.enterOuterAlt(localctx, 4)
                 self.state = 281
                 self.mathit()
                 pass
-            elif token in [LaTeXParser.L_ANGLE]:
+            elif token in [29]:
                 self.enterOuterAlt(localctx, 5)
                 self.state = 282
                 self.bra()
                 pass
-            elif token in [LaTeXParser.BAR, LaTeXParser.L_BAR]:
+            elif token in [26, 28]:
                 self.enterOuterAlt(localctx, 6)
                 self.state = 283
                 self.ket()
@@ -2067,9 +2046,10 @@ def atom(self):
 
 
     class BraContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.BraContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def L_ANGLE(self):
@@ -2104,7 +2084,7 @@ def bra(self):
             self.expr()
             self.state = 288
             _la = self._input.LA(1)
-            if not(_la==LaTeXParser.BAR or _la==LaTeXParser.R_BAR):
+            if not(_la==26 or _la==27):
                 self._errHandler.recoverInline(self)
             else:
                 self._errHandler.reportMatch(self)
@@ -2119,9 +2099,10 @@ def bra(self):
 
 
     class KetContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.KetContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def expr(self):
@@ -2152,7 +2133,7 @@ def ket(self):
             self.enterOuterAlt(localctx, 1)
             self.state = 290
             _la = self._input.LA(1)
-            if not(_la==LaTeXParser.BAR or _la==LaTeXParser.L_BAR):
+            if not(_la==26 or _la==28):
                 self._errHandler.recoverInline(self)
             else:
                 self._errHandler.reportMatch(self)
@@ -2171,9 +2152,10 @@ def ket(self):
 
 
     class MathitContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.MathitContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def CMD_MATHIT(self):
@@ -2219,12 +2201,13 @@ def mathit(self):
 
 
     class Mathit_textContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.Mathit_textContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
-        def LETTER(self, i=None):
+        def LETTER(self, i:int=None):
             if i is None:
                 return self.getTokens(LaTeXParser.LETTER)
             else:
@@ -2246,7 +2229,7 @@ def mathit_text(self):
             self.state = 302
             self._errHandler.sync(self)
             _la = self._input.LA(1)
-            while _la==LaTeXParser.LETTER:
+            while _la==75:
                 self.state = 299
                 self.match(LaTeXParser.LETTER)
                 self.state = 304
@@ -2263,9 +2246,10 @@ def mathit_text(self):
 
 
     class FracContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.FracContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
             self.upper = None # ExprContext
             self.lower = None # ExprContext
@@ -2273,19 +2257,19 @@ def __init__(self, parser, parent=None, invokingState=-1):
         def CMD_FRAC(self):
             return self.getToken(LaTeXParser.CMD_FRAC, 0)
 
-        def L_BRACE(self, i=None):
+        def L_BRACE(self, i:int=None):
             if i is None:
                 return self.getTokens(LaTeXParser.L_BRACE)
             else:
                 return self.getToken(LaTeXParser.L_BRACE, i)
 
-        def R_BRACE(self, i=None):
+        def R_BRACE(self, i:int=None):
             if i is None:
                 return self.getTokens(LaTeXParser.R_BRACE)
             else:
                 return self.getToken(LaTeXParser.R_BRACE, i)
 
-        def expr(self, i=None):
+        def expr(self, i:int=None):
             if i is None:
                 return self.getTypedRuleContexts(LaTeXParser.ExprContext)
             else:
@@ -2328,20 +2312,21 @@ def frac(self):
 
 
     class BinomContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.BinomContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
             self.n = None # ExprContext
             self.k = None # ExprContext
 
-        def L_BRACE(self, i=None):
+        def L_BRACE(self, i:int=None):
             if i is None:
                 return self.getTokens(LaTeXParser.L_BRACE)
             else:
                 return self.getToken(LaTeXParser.L_BRACE, i)
 
-        def R_BRACE(self, i=None):
+        def R_BRACE(self, i:int=None):
             if i is None:
                 return self.getTokens(LaTeXParser.R_BRACE)
             else:
@@ -2356,7 +2341,7 @@ def CMD_DBINOM(self):
         def CMD_TBINOM(self):
             return self.getToken(LaTeXParser.CMD_TBINOM, 0)
 
-        def expr(self, i=None):
+        def expr(self, i:int=None):
             if i is None:
                 return self.getTypedRuleContexts(LaTeXParser.ExprContext)
             else:
@@ -2378,7 +2363,7 @@ def binom(self):
             self.enterOuterAlt(localctx, 1)
             self.state = 313
             _la = self._input.LA(1)
-            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (LaTeXParser.CMD_BINOM - 67)) | (1 << (LaTeXParser.CMD_DBINOM - 67)) | (1 << (LaTeXParser.CMD_TBINOM - 67)))) != 0)):
+            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 7) != 0)):
                 self._errHandler.recoverInline(self)
             else:
                 self._errHandler.reportMatch(self)
@@ -2405,9 +2390,10 @@ def binom(self):
 
 
     class FloorContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.FloorContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
             self.val = None # ExprContext
 
@@ -2449,9 +2435,10 @@ def floor(self):
 
 
     class CeilContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.CeilContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
             self.val = None # ExprContext
 
@@ -2493,9 +2480,10 @@ def ceil(self):
 
 
     class Func_normalContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.Func_normalContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def FUNC_EXP(self):
@@ -2576,7 +2564,7 @@ def func_normal(self):
             self.enterOuterAlt(localctx, 1)
             self.state = 329
             _la = self._input.LA(1)
-            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LaTeXParser.FUNC_EXP) | (1 << LaTeXParser.FUNC_LOG) | (1 << LaTeXParser.FUNC_LN) | (1 << LaTeXParser.FUNC_SIN) | (1 << LaTeXParser.FUNC_COS) | (1 << LaTeXParser.FUNC_TAN) | (1 << LaTeXParser.FUNC_CSC) | (1 << LaTeXParser.FUNC_SEC) | (1 << LaTeXParser.FUNC_COT) | (1 << LaTeXParser.FUNC_ARCSIN) | (1 << LaTeXParser.FUNC_ARCCOS) | (1 << LaTeXParser.FUNC_ARCTAN) | (1 << LaTeXParser.FUNC_ARCCSC) | (1 << LaTeXParser.FUNC_ARCSEC) | (1 << LaTeXParser.FUNC_ARCCOT) | (1 << LaTeXParser.FUNC_SINH) | (1 << LaTeXParser.FUNC_COSH) | (1 << LaTeXParser.FUNC_TANH) | (1 << LaTeXParser.FUNC_ARSINH) | (1 << LaTeXParser.FUNC_ARCOSH) | (1 << LaTeXParser.FUNC_ARTANH))) != 0)):
+            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 144115119356379136) != 0)):
                 self._errHandler.recoverInline(self)
             else:
                 self._errHandler.reportMatch(self)
@@ -2591,9 +2579,10 @@ def func_normal(self):
 
 
     class FuncContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.FuncContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
             self.root = None # ExprContext
             self.base = None # ExprContext
@@ -2657,7 +2646,7 @@ def L_BRACE(self):
         def R_BRACE(self):
             return self.getToken(LaTeXParser.R_BRACE, 0)
 
-        def expr(self, i=None):
+        def expr(self, i:int=None):
             if i is None:
                 return self.getTypedRuleContexts(LaTeXParser.ExprContext)
             else:
@@ -2709,7 +2698,7 @@ def func(self):
             self.state = 409
             self._errHandler.sync(self)
             token = self._input.LA(1)
-            if token in [LaTeXParser.FUNC_EXP, LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH]:
+            if token in [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56]:
                 self.enterOuterAlt(localctx, 1)
                 self.state = 331
                 self.func_normal()
@@ -2720,7 +2709,7 @@ def func(self):
                     self.state = 333
                     self._errHandler.sync(self)
                     _la = self._input.LA(1)
-                    if _la==LaTeXParser.UNDERSCORE:
+                    if _la==71:
                         self.state = 332
                         self.subexpr()
 
@@ -2728,7 +2717,7 @@ def func(self):
                     self.state = 336
                     self._errHandler.sync(self)
                     _la = self._input.LA(1)
-                    if _la==LaTeXParser.CARET:
+                    if _la==72:
                         self.state = 335
                         self.supexpr()
 
@@ -2739,7 +2728,7 @@ def func(self):
                     self.state = 339
                     self._errHandler.sync(self)
                     _la = self._input.LA(1)
-                    if _la==LaTeXParser.CARET:
+                    if _la==72:
                         self.state = 338
                         self.supexpr()
 
@@ -2747,7 +2736,7 @@ def func(self):
                     self.state = 342
                     self._errHandler.sync(self)
                     _la = self._input.LA(1)
-                    if _la==LaTeXParser.UNDERSCORE:
+                    if _la==71:
                         self.state = 341
                         self.subexpr()
 
@@ -2774,11 +2763,11 @@ def func(self):
 
 
                 pass
-            elif token in [LaTeXParser.LETTER, LaTeXParser.SYMBOL]:
+            elif token in [75, 88]:
                 self.enterOuterAlt(localctx, 2)
                 self.state = 353
                 _la = self._input.LA(1)
-                if not(_la==LaTeXParser.LETTER or _la==LaTeXParser.SYMBOL):
+                if not(_la==75 or _la==88):
                     self._errHandler.recoverInline(self)
                 else:
                     self._errHandler.reportMatch(self)
@@ -2786,7 +2775,7 @@ def func(self):
                 self.state = 355
                 self._errHandler.sync(self)
                 _la = self._input.LA(1)
-                if _la==LaTeXParser.UNDERSCORE:
+                if _la==71:
                     self.state = 354
                     self.subexpr()
 
@@ -2798,26 +2787,26 @@ def func(self):
                 self.state = 359
                 self.match(LaTeXParser.R_PAREN)
                 pass
-            elif token in [LaTeXParser.FUNC_INT]:
+            elif token in [33]:
                 self.enterOuterAlt(localctx, 3)
                 self.state = 361
                 self.match(LaTeXParser.FUNC_INT)
                 self.state = 368
                 self._errHandler.sync(self)
                 token = self._input.LA(1)
-                if token in [LaTeXParser.UNDERSCORE]:
+                if token in [71]:
                     self.state = 362
                     self.subexpr()
                     self.state = 363
                     self.supexpr()
                     pass
-                elif token in [LaTeXParser.CARET]:
+                elif token in [72]:
                     self.state = 365
                     self.supexpr()
                     self.state = 366
                     self.subexpr()
                     pass
-                elif token in [LaTeXParser.ADD, LaTeXParser.SUB, LaTeXParser.L_PAREN, LaTeXParser.L_BRACE, LaTeXParser.L_BRACE_LITERAL, LaTeXParser.L_BRACKET, LaTeXParser.BAR, LaTeXParser.L_BAR, LaTeXParser.L_ANGLE, LaTeXParser.FUNC_LIM, LaTeXParser.FUNC_INT, LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD, LaTeXParser.FUNC_EXP, LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH, LaTeXParser.L_FLOOR, LaTeXParser.L_CEIL, LaTeXParser.FUNC_SQRT, LaTeXParser.FUNC_OVERLINE, LaTeXParser.CMD_FRAC, LaTeXParser.CMD_BINOM, LaTeXParser.CMD_DBINOM, LaTeXParser.CMD_TBINOM, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
+                elif token in [14, 15, 18, 20, 22, 24, 26, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 66, 67, 68, 69, 70, 74, 75, 76, 88]:
                     pass
                 else:
                     pass
@@ -2849,14 +2838,14 @@ def func(self):
 
 
                 pass
-            elif token in [LaTeXParser.FUNC_SQRT]:
+            elif token in [61]:
                 self.enterOuterAlt(localctx, 4)
                 self.state = 378
                 self.match(LaTeXParser.FUNC_SQRT)
                 self.state = 383
                 self._errHandler.sync(self)
                 _la = self._input.LA(1)
-                if _la==LaTeXParser.L_BRACKET:
+                if _la==24:
                     self.state = 379
                     self.match(LaTeXParser.L_BRACKET)
                     self.state = 380
@@ -2872,7 +2861,7 @@ def func(self):
                 self.state = 387
                 self.match(LaTeXParser.R_BRACE)
                 pass
-            elif token in [LaTeXParser.FUNC_OVERLINE]:
+            elif token in [62]:
                 self.enterOuterAlt(localctx, 5)
                 self.state = 389
                 self.match(LaTeXParser.FUNC_OVERLINE)
@@ -2883,11 +2872,11 @@ def func(self):
                 self.state = 392
                 self.match(LaTeXParser.R_BRACE)
                 pass
-            elif token in [LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD]:
+            elif token in [34, 35]:
                 self.enterOuterAlt(localctx, 6)
                 self.state = 394
                 _la = self._input.LA(1)
-                if not(_la==LaTeXParser.FUNC_SUM or _la==LaTeXParser.FUNC_PROD):
+                if not(_la==34 or _la==35):
                     self._errHandler.recoverInline(self)
                 else:
                     self._errHandler.reportMatch(self)
@@ -2895,13 +2884,13 @@ def func(self):
                 self.state = 401
                 self._errHandler.sync(self)
                 token = self._input.LA(1)
-                if token in [LaTeXParser.UNDERSCORE]:
+                if token in [71]:
                     self.state = 395
                     self.subeq()
                     self.state = 396
                     self.supexpr()
                     pass
-                elif token in [LaTeXParser.CARET]:
+                elif token in [72]:
                     self.state = 398
                     self.supexpr()
                     self.state = 399
@@ -2913,7 +2902,7 @@ def func(self):
                 self.state = 403
                 self.mp(0)
                 pass
-            elif token in [LaTeXParser.FUNC_LIM]:
+            elif token in [31]:
                 self.enterOuterAlt(localctx, 7)
                 self.state = 405
                 self.match(LaTeXParser.FUNC_LIM)
@@ -2935,9 +2924,10 @@ def func(self):
 
 
     class ArgsContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.ArgsContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def expr(self):
@@ -2989,15 +2979,16 @@ def args(self):
 
 
     class Limit_subContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.Limit_subContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def UNDERSCORE(self):
             return self.getToken(LaTeXParser.UNDERSCORE, 0)
 
-        def L_BRACE(self, i=None):
+        def L_BRACE(self, i:int=None):
             if i is None:
                 return self.getTokens(LaTeXParser.L_BRACE)
             else:
@@ -3010,7 +3001,7 @@ def expr(self):
             return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
 
 
-        def R_BRACE(self, i=None):
+        def R_BRACE(self, i:int=None):
             if i is None:
                 return self.getTokens(LaTeXParser.R_BRACE)
             else:
@@ -3050,7 +3041,7 @@ def limit_sub(self):
             self.match(LaTeXParser.L_BRACE)
             self.state = 420
             _la = self._input.LA(1)
-            if not(_la==LaTeXParser.LETTER or _la==LaTeXParser.SYMBOL):
+            if not(_la==75 or _la==88):
                 self._errHandler.recoverInline(self)
             else:
                 self._errHandler.reportMatch(self)
@@ -3062,14 +3053,14 @@ def limit_sub(self):
             self.state = 427
             self._errHandler.sync(self)
             _la = self._input.LA(1)
-            if _la==LaTeXParser.CARET:
+            if _la==72:
                 self.state = 423
                 self.match(LaTeXParser.CARET)
                 self.state = 424
                 self.match(LaTeXParser.L_BRACE)
                 self.state = 425
                 _la = self._input.LA(1)
-                if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):
+                if not(_la==14 or _la==15):
                     self._errHandler.recoverInline(self)
                 else:
                     self._errHandler.reportMatch(self)
@@ -3090,9 +3081,10 @@ def limit_sub(self):
 
 
     class Func_argContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.Func_argContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def expr(self):
@@ -3144,9 +3136,10 @@ def func_arg(self):
 
 
     class Func_arg_noparensContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.Func_arg_noparensContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def mp_nofunc(self):
@@ -3177,9 +3170,10 @@ def func_arg_noparens(self):
 
 
     class SubexprContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.SubexprContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def UNDERSCORE(self):
@@ -3216,11 +3210,11 @@ def subexpr(self):
             self.state = 446
             self._errHandler.sync(self)
             token = self._input.LA(1)
-            if token in [LaTeXParser.BAR, LaTeXParser.L_BAR, LaTeXParser.L_ANGLE, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
+            if token in [26, 28, 29, 70, 74, 75, 76, 88]:
                 self.state = 441
                 self.atom()
                 pass
-            elif token in [LaTeXParser.L_BRACE]:
+            elif token in [20]:
                 self.state = 442
                 self.match(LaTeXParser.L_BRACE)
                 self.state = 443
@@ -3241,9 +3235,10 @@ def subexpr(self):
 
 
     class SupexprContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.SupexprContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def CARET(self):
@@ -3280,11 +3275,11 @@ def supexpr(self):
             self.state = 454
             self._errHandler.sync(self)
             token = self._input.LA(1)
-            if token in [LaTeXParser.BAR, LaTeXParser.L_BAR, LaTeXParser.L_ANGLE, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
+            if token in [26, 28, 29, 70, 74, 75, 76, 88]:
                 self.state = 449
                 self.atom()
                 pass
-            elif token in [LaTeXParser.L_BRACE]:
+            elif token in [20]:
                 self.state = 450
                 self.match(LaTeXParser.L_BRACE)
                 self.state = 451
@@ -3305,9 +3300,10 @@ def supexpr(self):
 
 
     class SubeqContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.SubeqContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def UNDERSCORE(self):
@@ -3353,9 +3349,10 @@ def subeq(self):
 
 
     class SupeqContext(ParserRuleContext):
+        __slots__ = 'parser'
 
-        def __init__(self, parser, parent=None, invokingState=-1):
-            super(LaTeXParser.SupeqContext, self).__init__(parent, invokingState)
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
             self.parser = parser
 
         def UNDERSCORE(self):
@@ -3401,7 +3398,7 @@ def supeq(self):
 
 
 
-    def sempred(self, localctx, ruleIndex, predIndex):
+    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
         if self._predicates == None:
             self._predicates = dict()
         self._predicates[1] = self.relation_sempred
@@ -3416,32 +3413,32 @@ def sempred(self, localctx, ruleIndex, predIndex):
         else:
             return pred(localctx, predIndex)
 
-    def relation_sempred(self, localctx, predIndex):
+    def relation_sempred(self, localctx:RelationContext, predIndex:int):
             if predIndex == 0:
                 return self.precpred(self._ctx, 2)
 
 
-    def additive_sempred(self, localctx, predIndex):
+    def additive_sempred(self, localctx:AdditiveContext, predIndex:int):
             if predIndex == 1:
                 return self.precpred(self._ctx, 2)
 
 
-    def mp_sempred(self, localctx, predIndex):
+    def mp_sempred(self, localctx:MpContext, predIndex:int):
             if predIndex == 2:
                 return self.precpred(self._ctx, 2)
 
 
-    def mp_nofunc_sempred(self, localctx, predIndex):
+    def mp_nofunc_sempred(self, localctx:Mp_nofuncContext, predIndex:int):
             if predIndex == 3:
                 return self.precpred(self._ctx, 2)
 
 
-    def exp_sempred(self, localctx, predIndex):
+    def exp_sempred(self, localctx:ExpContext, predIndex:int):
             if predIndex == 4:
                 return self.precpred(self._ctx, 2)
 
 
-    def exp_nofunc_sempred(self, localctx, predIndex):
+    def exp_nofunc_sempred(self, localctx:Exp_nofuncContext, predIndex:int):
             if predIndex == 5:
                 return self.precpred(self._ctx, 2)
 
diff --git a/sympy/parsing/latex/_build_latex_antlr.py b/sympy/parsing/latex/_build_latex_antlr.py
index bd780e2661..8562107119 100644
--- a/sympy/parsing/latex/_build_latex_antlr.py
+++ b/sympy/parsing/latex/_build_latex_antlr.py
@@ -52,6 +52,7 @@ def build_parser(output_dir=dir_latex_antlr):
         "antlr4",
         grammar_file,
         "-o", output_dir,
+        "-Dlanguage=Python3",  # Explicitly specify Python3 target
         # for now, not generating these as latex2sympy did not use them
         "-no-visitor",
         "-no-listener",
@@ -78,9 +79,12 @@ def build_parser(output_dir=dir_latex_antlr):
         os.unlink(path)
 
         with open(new_path, "w") as out_file:
-            offset = 2
             out_file.write(header)
-            out_file.writelines(lines[offset:])
+            # Skip the first line (ANTLR comment) but preserve imports
+            for i, line in enumerate(lines):
+                if i == 0:  # Skip "# Generated from LaTeX.g4 by ANTLR ..."
+                    continue
+                out_file.write(line)
 
         debug("\t{}".format(new_path))
 
diff --git a/sympy/parsing/latex/_parse_latex_antlr.py b/sympy/parsing/latex/_parse_latex_antlr.py
index 2e4a45ad20..50fb7eb906 100644
--- a/sympy/parsing/latex/_parse_latex_antlr.py
+++ b/sympy/parsing/latex/_parse_latex_antlr.py
@@ -67,6 +67,23 @@ def parse_latex(sympy):
                           " antlr4-python3-runtime) or"
                           " conda (antlr-python-runtime)")
 
+    if None in [LaTeXLexer, LaTeXParser]:
+        raise ImportError("LaTeX parsing is not available due to an ANTLR version "
+                          "compatibility issue. The generated ANTLR files are from "
+                          "ANTLR version 3, but the installed antlr4 runtime requires "
+                          "version 4. Please regenerate the ANTLR files by running "
+                          "'python setup.py antlr' in the SymPy root directory, or "
+                          "install a compatible version of the antlr4 runtime.")
+
+    # Check if LaTeX ANTLR classes are available
+    if None in [LaTeXLexer, LaTeXParser]:
+        raise ImportError("LaTeX parsing is not available due to an ANTLR version "
+                          "compatibility issue. The generated ANTLR files are from "
+                          "ANTLR version 3, but the installed antlr4 runtime requires "
+                          "version 4. Please regenerate the ANTLR files by running "
+                          "'python setup.py antlr' in the SymPy root directory, or "
+                          "install a compatible version of the antlr4 runtime.")
+
     matherror = MathErrorListener(sympy)
 
     stream = antlr4.InputStream(sympy)
@@ -382,11 +399,35 @@ def convert_frac(frac):
 
     expr_top = convert_expr(frac.upper)
     expr_bot = convert_expr(frac.lower)
-    inverse_denom = sympy.Pow(expr_bot, -1, evaluate=False)
+    
+    # Handle fractions with proper precedence
+    # For nested fractions, we need to ensure proper parenthesization
+    
+    # Check if the denominator is a fraction (Pow with exp=-1) that needs special handling
+    is_fraction_denom = (isinstance(expr_bot, sympy.Pow) and expr_bot.exp == -1)
+    
     if expr_top == 1:
-        return inverse_denom
+        # For simple 1/x cases, use Pow directly to maintain compatibility
+        # But for complex denominators, use Mul for proper grouping
+        is_complex_denom = (isinstance(expr_bot, sympy.Mul) or 
+                           (is_fraction_denom and not expr_bot.base.is_Symbol))
+        
+        if is_complex_denom:
+            # Complex denominator (Mul) or nested fraction (Pow with exp=-1 and complex base)
+            # Use Mul to ensure proper parenthesization
+            return sympy.Mul(1, sympy.Pow(expr_bot, -1, evaluate=False), evaluate=False)
+        else:
+            # Simple denominator - use Pow directly for compatibility
+            return sympy.Pow(expr_bot, -1, evaluate=False)
     else:
-        return sympy.Mul(expr_top, inverse_denom, evaluate=False)
+        # For non-unity numerators, we need to handle fraction denominators specially
+        if is_fraction_denom:
+            # When the denominator is itself a fraction, we need to ensure proper grouping
+            # Use the reciprocal directly to avoid double inversion
+            return sympy.Mul(expr_top, expr_bot.base, evaluate=False)
+        else:
+            # Standard case
+            return sympy.Mul(expr_top, sympy.Pow(expr_bot, -1, evaluate=False), evaluate=False)
 
 def convert_binom(binom):
     expr_n = convert_expr(binom.n)
