diff --git a/lib/matplotlib/cbook.py b/lib/matplotlib/cbook.py
index 2cd1cf9..a4d0676 100644
--- a/lib/matplotlib/cbook.py
+++ b/lib/matplotlib/cbook.py
@@ -840,12 +840,40 @@ class Grouper:
         for group in unique_groups.values():
             yield [x() for x in group]
 
+
     def get_siblings(self, a):
         """Return all of the items joined with *a*, including itself."""
         self.clean()
         siblings = self._mapping.get(weakref.ref(a), [weakref.ref(a)])
         return [x() for x in siblings]
 
+    # Pickle support -----------------------------------------------------
+    def __getstate__(self):
+        """
+        Return a picklable representation of this Grouper.
+
+        The returned state is a list of groups, each group being a list of the
+        live objects that belong to that group.  Weak references are resolved
+        to their underlying objects so that no ``weakref.ref`` instances are
+        pickled (which would otherwise fail).
+        """
+        # Ensure we do not serialise dead weak references.
+        self.clean()
+        # `self` iterates over the disjoint sets, already resolving weakrefs.
+        return [[obj for obj in group] for group in self]
+
+    def __setstate__(self, state):
+        """
+        Restore the Grouper from *state* as produced by ``__getstate__``.
+        """
+        # Reâ€‘initialise an empty Grouper.
+        self.__init__()
+        # Reconstruct the grouping relationships.
+        for group in state:
+            if group:  # Skip any empty groups.
+                self.join(*group)
+
+
 
 class GrouperView:
     """Immutable view over a `.Grouper`."""
