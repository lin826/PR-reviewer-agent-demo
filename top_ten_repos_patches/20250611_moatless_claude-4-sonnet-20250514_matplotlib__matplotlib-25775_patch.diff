--- a/lib/matplotlib/text.py
+++ b/lib/matplotlib/text.py
@@ -187,6 +187,7 @@
             linespacing = 1.2  # Maybe use rcParam later.
         self.set_linespacing(linespacing)
         self.set_rotation_mode(rotation_mode)
+        self.set_antialiased(None)  # defaults to rcParams
 
     def update(self, kwargs):
         # docstring inherited
@@ -736,6 +737,7 @@
             gc = renderer.new_gc()
             gc.set_foreground(self.get_color())
             gc.set_alpha(self.get_alpha())
+            gc.set_antialiased(self.get_antialiased())
             gc.set_url(self._url)
             self._set_gc_clip(gc)
 
@@ -773,6 +775,24 @@
     def get_color(self):
         """Return the color of the text."""
         return self._color
+
+    def get_antialiased(self):
+        """Return whether antialiasing is used for drawing."""
+        return self._antialiased
+
+    def set_antialiased(self, aa):
+        """
+        Set whether to use antialiased rendering.
+
+        Parameters
+        ----------
+        aa : bool or None
+            If None, defaults to :rc:`text.antialiased`.
+        """
+        if aa is None:
+            aa = mpl.rcParams['text.antialiased']
+        self._antialiased = aa
+        self.stale = True
 
     def get_fontproperties(self):
         """Return the `.font_manager.FontProperties`."""

--- a/lib/matplotlib/backends/backend_agg.py
+++ b/lib/matplotlib/backends/backend_agg.py
@@ -188,8 +188,14 @@
 
     def draw_mathtext(self, gc, x, y, s, prop, angle):
         """Draw mathtext using :mod:`matplotlib.mathtext`."""
-        ox, oy, width, height, descent, font_image = \
-            self.mathtext_parser.parse(s, self.dpi, prop)
+        # Temporarily override rcParams to use gc antialiasing for mathtext
+        original_aa = mpl.rcParams['text.antialiased']
+        mpl.rcParams['text.antialiased'] = gc.get_antialiased()
+        try:
+            ox, oy, width, height, descent, font_image = \
+                self.mathtext_parser.parse(s, self.dpi, prop)
+        finally:
+            mpl.rcParams['text.antialiased'] = original_aa
 
         xd = descent * sin(radians(angle))
         yd = descent * cos(radians(angle))
@@ -206,7 +212,7 @@
         # space) in the following call to draw_text_image).
         font.set_text(s, 0, flags=get_hinting_flag())
         font.draw_glyphs_to_bitmap(
-            antialiased=mpl.rcParams['text.antialiased'])
+            antialiased=gc.get_antialiased())
         d = font.get_descent() / 64.0
         # The descent needs to be adjusted for the angle.
         xo, yo = font.get_bitmap_offset()

--- a/lib/matplotlib/backends/backend_cairo.py
+++ b/lib/matplotlib/backends/backend_cairo.py
@@ -205,7 +205,7 @@
             ctx.set_font_size(self.points_to_pixels(prop.get_size_in_points()))
             opts = cairo.FontOptions()
             opts.set_antialias(
-                cairo.ANTIALIAS_DEFAULT if mpl.rcParams["text.antialiased"]
+                cairo.ANTIALIAS_DEFAULT if gc.get_antialiased()
                 else cairo.ANTIALIAS_NONE)
             ctx.set_font_options(opts)
             if angle:
@@ -215,8 +215,14 @@
 
     def _draw_mathtext(self, gc, x, y, s, prop, angle):
         ctx = gc.ctx
-        width, height, descent, glyphs, rects = \
-            self._text2path.mathtext_parser.parse(s, self.dpi, prop)
+        # Temporarily override rcParams to use gc antialiasing for mathtext
+        original_aa = mpl.rcParams['text.antialiased']
+        mpl.rcParams['text.antialiased'] = gc.get_antialiased()
+        try:
+            width, height, descent, glyphs, rects = \
+                self._text2path.mathtext_parser.parse(s, self.dpi, prop)
+        finally:
+            mpl.rcParams['text.antialiased'] = original_aa
 
         ctx.save()
         ctx.translate(x, y)

--- a/lib/matplotlib/backends/backend_pdf.py
+++ b/lib/matplotlib/backends/backend_pdf.py
@@ -2184,8 +2184,14 @@
 
     def draw_mathtext(self, gc, x, y, s, prop, angle):
         # TODO: fix positioning and encoding
-        width, height, descent, glyphs, rects = \
-            self._text2path.mathtext_parser.parse(s, 72, prop)
+        # Temporarily override rcParams to use gc antialiasing for mathtext
+        original_aa = mpl.rcParams['text.antialiased']
+        mpl.rcParams['text.antialiased'] = gc.get_antialiased()
+        try:
+            width, height, descent, glyphs, rects = \
+                self._text2path.mathtext_parser.parse(s, 72, prop)
+        finally:
+            mpl.rcParams['text.antialiased'] = original_aa
 
         if gc.get_url() is not None:
             self.file._annotations[-1][1].append(_get_link_annotation(

--- a/lib/matplotlib/backends/backend_ps.py
+++ b/lib/matplotlib/backends/backend_ps.py
@@ -665,8 +665,14 @@
     @_log_if_debug_on
     def draw_mathtext(self, gc, x, y, s, prop, angle):
         """Draw the math text using matplotlib.mathtext."""
-        width, height, descent, glyphs, rects = \
-            self._text2path.mathtext_parser.parse(s, 72, prop)
+        # Temporarily override rcParams to use gc antialiasing for mathtext
+        original_aa = mpl.rcParams['text.antialiased']
+        mpl.rcParams['text.antialiased'] = gc.get_antialiased()
+        try:
+            width, height, descent, glyphs, rects = \
+                self._text2path.mathtext_parser.parse(s, 72, prop)
+        finally:
+            mpl.rcParams['text.antialiased'] = original_aa
         self.set_color(*gc.get_rgb())
         self._pswriter.write(
             f"gsave\n"
