diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index d17232e4ec..974c2e16ab 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -967,7 +967,35 @@ class RenameIndex(IndexOperation):
 
     def database_backwards(self, app_label, schema_editor, from_state, to_state):
         if self.old_fields:
-            # Backward operation with unnamed index is a no-op.
+            # Handle backward operation for unnamed indexes
+            # We need to rename from the current name (new_name) back to the original auto-generated name
+            from_model = from_state.apps.get_model(app_label, self.model_name)
+            to_model = to_state.apps.get_model(app_label, self.model_name)
+            
+            if not self.allow_migrate_model(schema_editor.connection.alias, from_model):
+                return
+            
+            # Current index uses the new name
+            current_index = models.Index(
+                fields=self.old_fields,
+                name=self.new_name,
+            )
+            
+            # Generate the original auto-generated name using the same method as index_together
+            # index_together uses _create_index_name with suffix="_idx"
+            columns = [to_model._meta.get_field(field).column for field in self.old_fields]
+            original_name = schema_editor._create_index_name(
+                to_model._meta.db_table, columns, suffix="_idx"
+            )
+            
+            # Create target index with original name
+            target_index = models.Index(
+                fields=self.old_fields,
+                name=original_name,
+            )
+            
+            # Rename from current name back to original name
+            schema_editor.rename_index(from_model, current_index, target_index)
             return
 
         self.new_name_lower, self.old_name_lower = (
diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py
index cfd28b1b39..7e8c927d91 100644
--- a/tests/migrations/test_operations.py
+++ b/tests/migrations/test_operations.py
@@ -2984,9 +2984,14 @@ class OperationTests(OperationTestBase):
         with connection.schema_editor() as editor:
             operation.database_forwards(app_label, editor, project_state, new_state)
         self.assertIndexNameExists(table_name, "new_pony_test_idx")
-        # Reverse is a no-op.
-        with connection.schema_editor() as editor, self.assertNumQueries(0):
+        # Reverse operation - should restore the original auto-generated name
+        with connection.schema_editor() as editor:
             operation.database_backwards(app_label, editor, new_state, project_state)
+        # The index should be restored to its original auto-generated name
+        self.assertIndexNameNotExists(table_name, "new_pony_test_idx")
+        # Re-apply renaming.
+        with connection.schema_editor() as editor:
+            operation.database_forwards(app_label, editor, project_state, new_state)
         self.assertIndexNameExists(table_name, "new_pony_test_idx")
         # Deconstruction.
         definition = operation.deconstruct()
