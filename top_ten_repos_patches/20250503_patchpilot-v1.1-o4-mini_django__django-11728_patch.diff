diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py
index 1ce4594501..e6ab7c43a8 100644
--- a/django/contrib/admindocs/utils.py
+++ b/django/contrib/admindocs/utils.py
@@ -164,13 +164,16 @@ def replace_named_groups(pattern):
     group_pattern_and_name = []
     # Loop over the groups and their start and end indices.
     for start, end, group_name in named_group_indices:
+
         # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.
         unmatched_open_brackets, prev_char = 1, None
+        closed_and_recorded = False
         for idx, val in enumerate(pattern[end:]):
             # If brackets are balanced, the end of the string for the current
             # named capture group pattern has been reached.
             if unmatched_open_brackets == 0:
                 group_pattern_and_name.append((pattern[start:end + idx], group_name))
+                closed_and_recorded = True
                 break
 
             # Check for unescaped `(` and `)`. They mark the start and end of a
@@ -180,6 +183,11 @@ def replace_named_groups(pattern):
             elif val == ')' and prev_char != '\\':
                 unmatched_open_brackets -= 1
             prev_char = val
+        # If the loop exited normally (i.e. no break) and the group ended at
+        # the end of the pattern, record it now.
+        if not closed_and_recorded and unmatched_open_brackets == 0:
+            group_pattern_and_name.append((pattern[start:], group_name))
+
 
     # Replace the string for named capture groups with their group names.
     for group_pattern, group_name in group_pattern_and_name:
@@ -234,4 +242,4 @@ def replace_unnamed_groups(pattern):
         final_pattern.append(pattern[prev_end:])
         return ''.join(final_pattern)
     else:
-        return pattern
+        return pattern
diff --git a/django/contrib/admindocs/views.py b/django/contrib/admindocs/views.py
index 0474c38fd4..520ee0dd2a 100644
--- a/django/contrib/admindocs/views.py
+++ b/django/contrib/admindocs/views.py
@@ -411,4 +411,4 @@ def simplify_regex(pattern):
     pattern = pattern.replace('^', '').replace('$', '').replace('?', '')
     if not pattern.startswith('/'):
         pattern = '/' + pattern
-    return pattern
+    return pattern
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 2ff8b2c775..92e22d757c 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -237,11 +237,53 @@ def _route_to_regex(route, is_endpoint=False):
             )
         converters[parameter] = converter
         parts.append('(?P<' + parameter + '>' + converter.regex + ')')
+
     if is_endpoint:
         parts.append('$')
     return ''.join(parts), converters
 
 
+# ----------------------------------------------------------------------
+# Re‑expose historical helper functions so that third‑party code still
+# importing them from django.urls.resolvers continues to work. The real
+# implementations now live in django.contrib.admindocs.utils.
+# ----------------------------------------------------------------------
+def replace_named_groups(pattern):
+    """
+    Wrapper around django.contrib.admindocs.utils.replace_named_groups().
+    """
+    from django.contrib.admindocs.utils import replace_named_groups as _replace_named_groups
+    return _replace_named_groups(pattern)
+
+
+def replace_unnamed_groups(pattern):
+    """
+    Wrapper around django.contrib.admindocs.utils.replace_unnamed_groups().
+    """
+    from django.contrib.admindocs.utils import replace_unnamed_groups as _replace_unnamed_groups
+    return _replace_unnamed_groups(pattern)
+
+
+def simplify_regex(pattern):
+    """
+    Historically available helper that converts a URL‐matching regexp into a
+    human‑readable representation. Delegates to the admindocs helpers and then
+    performs the same post‑processing that admindocs applies.
+    """
+    from django.contrib.admindocs.utils import (
+        replace_named_groups as _replace_named_groups,
+        replace_unnamed_groups as _replace_unnamed_groups,
+    )
+
+    pattern = _replace_named_groups(pattern)
+    pattern = _replace_unnamed_groups(pattern)
+    pattern = pattern.replace('^', '').replace('$', '').replace('?', '')
+    if not pattern.startswith('/'):
+        pattern = '/' + pattern
+    return pattern
+
+
+
 class RoutePattern(CheckURLMixin):
     regex = LocaleRegexDescriptor('_route')
 
@@ -673,4 +715,4 @@ class URLResolver:
                 "Reverse for '%(view)s' not found. '%(view)s' is not "
                 "a valid view function or pattern name." % {'view': lookup_view_s}
             )
-        raise NoReverseMatch(msg)
+        raise NoReverseMatch(msg)
diff --git a/django/utils/regex_helper.py b/django/utils/regex_helper.py
index 8d55a79272..0f25cd8d57 100644
--- a/django/utils/regex_helper.py
+++ b/django/utils/regex_helper.py
@@ -330,4 +330,4 @@ def flatten_result(source):
         piece = ''.join(source[last:])
         for i in range(len(result)):
             result[i] += piece
-    return result, result_args
+    return result, result_args
