diff --git a/django/forms/models.py b/django/forms/models.py
index 5dcf923c12..4460380c99 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -1171,6 +1171,12 @@ class ModelChoiceIteratorValue:
             other = other.value
         return self.value == other
 
+    def __hash__(self):
+        return hash(self.value)
+
+    def __hash__(self):
+        return hash(self.value)
+
 
 class ModelChoiceIterator:
     def __init__(self, field):
diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py
index 2a0c05d803..1fd003eced 100644
--- a/tests/model_forms/test_modelchoicefield.py
+++ b/tests/model_forms/test_modelchoicefield.py
@@ -2,7 +2,7 @@ import datetime
 
 from django import forms
 from django.core.exceptions import ValidationError
-from django.forms.models import ModelChoiceIterator
+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue
 from django.forms.widgets import CheckboxSelectMultiple
 from django.template import Context, Template
 from django.test import TestCase
@@ -373,3 +373,36 @@ class ModelChoiceFieldTests(TestCase):
         )
         with self.assertNumQueries(2):
             template.render(Context({'form': CategoriesForm()}))
+
+    def test_modelchoiceiteratorvalue_hashable(self):
+        """
+        Test that ModelChoiceIteratorValue is hashable and can be used as
+        dictionary keys. Regression test for the issue where
+        ModelChoiceIteratorValue was not hashable in Django 3.1+.
+        """
+        # Test basic hashability
+        value = ModelChoiceIteratorValue(self.c1.pk, self.c1)
+        hash_value = hash(value)
+        self.assertIsInstance(hash_value, int)
+        
+        # Test dictionary key usage
+        d = {value: "test_data"}
+        self.assertEqual(d[value], "test_data")
+        
+        # Test set membership
+        s = {value}
+        self.assertIn(value, s)
+        
+        # Test the specific scenario from the GitHub issue
+        show_fields = {self.c1.pk: ['first_name', 'last_name'], self.c2.pk: ['name']}
+        self.assertTrue(value in show_fields)
+        self.assertEqual(show_fields[value], ['first_name', 'last_name'])
+        
+        # Test hash consistency with equality
+        value2 = ModelChoiceIteratorValue(self.c1.pk, self.c1)
+        self.assertEqual(value, value2)
+        self.assertEqual(hash(value), hash(value2))
+        
+        # Test equality with raw values
+        self.assertEqual(value, self.c1.pk)
+        self.assertEqual(hash(value), hash(self.c1.pk))
