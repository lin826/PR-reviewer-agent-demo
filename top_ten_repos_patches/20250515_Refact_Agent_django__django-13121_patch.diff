diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py
index 2e283a3193..681de79459 100644
--- a/django/db/backends/base/operations.py
+++ b/django/db/backends/base/operations.py
@@ -579,8 +579,40 @@ class BaseDatabaseOperations:
         return []
 
     def convert_durationfield_value(self, value, expression, connection):
-        if value is not None:
+        if value is None:
+            return None
+        
+        # If the value is already a timedelta, just return it
+        if isinstance(value, datetime.timedelta):
+            return value
+            
+        # If the value is an integer, interpret as microseconds
+        if isinstance(value, int):
             return datetime.timedelta(0, 0, value)
+            
+        # Handle string representations returned by SQLite/MySQL
+        if isinstance(value, str):
+            import re
+            # Pattern for "X days, HH:MM:SS[.ffffff]" or "HH:MM:SS[.ffffff]"
+            days_regex = re.compile(r'(?:(-?\d+) day(?:s)?, )?(-?\d+):(-?\d+):(-?\d+)(?:\.(\d+))?')
+            match = days_regex.match(value)
+            if match:
+                days, hours, minutes, seconds, microseconds = match.groups()
+                days = int(days) if days else 0
+                hours = int(hours)
+                minutes = int(minutes)
+                seconds = int(seconds)
+                microseconds = int((microseconds or '0').ljust(6, '0')[:6])
+                return datetime.timedelta(
+                    days=days,
+                    hours=hours,
+                    minutes=minutes,
+                    seconds=seconds,
+                    microseconds=microseconds
+                )
+                
+        # Fallback to the original behavior
+        return datetime.timedelta(0, 0, value)
 
     def check_expression_support(self, expression):
         """
