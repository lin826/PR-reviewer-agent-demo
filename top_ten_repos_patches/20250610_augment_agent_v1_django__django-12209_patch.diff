diff --git a/django/db/models/base.py b/django/db/models/base.py
index e3b14a41a0..4e8407a927 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -396,10 +396,12 @@ class ModelState:
     # If true, uniqueness validation checks will consider this a new, unsaved
     # object. Necessary for correct validation of new instances of objects with
     # explicit (non-auto) PKs. This impacts validation only; it has no effect
     # on the actual save.
     adding = True
+    # Track whether the primary key was explicitly provided during initialization
+    pk_set_explicitly = False
     fields_cache = ModelStateFieldsCacheDescriptor()
 
 
 class Model(metaclass=ModelBase):
 
@@ -412,10 +414,26 @@ class Model(metaclass=ModelBase):
 
         pre_init.send(sender=cls, args=args, kwargs=kwargs)
 
         # Set up the storage for instance state
         self._state = ModelState()
+        
+        # Check if primary key was explicitly provided
+        pk_field = opts.pk
+        if pk_field:
+            # Check if pk was provided in args
+            if len(args) > 0:
+                pk_index = None
+                for i, field in enumerate(opts.concrete_fields):
+                    if field.primary_key:
+                        pk_index = i
+                        break
+                if pk_index is not None and len(args) > pk_index and args[pk_index] is not _DEFERRED:
+                    self._state.pk_set_explicitly = True
+            # Check if pk was provided in kwargs
+            elif pk_field.name in kwargs or pk_field.attname in kwargs or 'pk' in kwargs:
+                self._state.pk_set_explicitly = True
 
         # There is a rather weird disparity here; if kwargs, it's set, then args
         # overrides it. It should be one or the other; don't duplicate the work
         # The reason for the kwargs check is that standard iterator passes in by
         # args, and instantiation for iteration is 33% faster.
@@ -845,16 +863,18 @@ class Model(metaclass=ModelBase):
             setattr(self, meta.pk.attname, pk_val)
         pk_set = pk_val is not None
         if not pk_set and (force_update or update_fields):
             raise ValueError("Cannot force an update in save() with no primary key.")
         updated = False
-        # Skip an UPDATE when adding an instance and primary key has a default.
+        # Skip an UPDATE when adding an instance and primary key has a default,
+        # but only if the primary key wasn't explicitly set.
         if (
             not force_insert and
             self._state.adding and
             self._meta.pk.default and
-            self._meta.pk.default is not NOT_PROVIDED
+            self._meta.pk.default is not NOT_PROVIDED and
+            not self._state.pk_set_explicitly
         ):
             force_insert = True
         # If possible, try an UPDATE. If that doesn't update anything, do an INSERT.
         if pk_set and not force_insert:
             base_qs = cls._base_manager.using(using)
