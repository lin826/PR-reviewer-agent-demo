diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 7c978c47be..366f7e51cd 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -20,10 +20,11 @@
 from __future__ import division, print_function
 
 import warnings
 
 from sympy.core import S, sympify, Expr
+from sympy.core.mul import Mul
 from sympy.core.compatibility import is_sequence
 from sympy.core.containers import Tuple
 from sympy.simplify import nsimplify, simplify
 from sympy.geometry.exceptions import GeometryError
 from sympy.functions.elementary.miscellaneous import sqrt
@@ -211,10 +212,27 @@ def __add__(self, other):
         ========
 
         sympy.geometry.point.Point.translate
 
         """
+        # Handle Mul objects that represent scalar multiplication of points
+        if isinstance(other, Mul):
+            # Check if this is a scalar * Point multiplication
+            scalar_factors = []
+            point_factors = []
+            for arg in other.args:
+                if isinstance(arg, Point):
+                    point_factors.append(arg)
+                else:
+                    scalar_factors.append(arg)
+            
+            # If we have exactly one Point factor, evaluate the multiplication
+            if len(point_factors) == 1 and len(scalar_factors) >= 1:
+                scalar = Mul(*scalar_factors) if len(scalar_factors) > 1 else scalar_factors[0]
+                point = point_factors[0]
+                other = point * scalar  # This will return a Point object
+        
         try:
             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
         except TypeError:
             raise GeometryError("Don't know how to add {} and a Point object".format(other))
 
@@ -276,10 +294,27 @@ def __mul__(self, factor):
         """
         factor = sympify(factor)
         coords = [simplify(x*factor) for x in self.args]
         return Point(coords, evaluate=False)
 
+    def __rmul__(self, factor):
+        """Multiply point's coordinates by a factor (reverse multiplication).
+        
+        This method handles cases like `factor * point` by delegating to
+        the point's `__mul__` method to ensure consistent behavior.
+        """
+        return self.__mul__(factor)
+
+    def as_coeff_Mul(self, rational=False):
+        """Efficiently extract the coefficient of a product.
+        
+        For Point objects, this returns (S.One, self) to indicate that
+        the point itself is the non-coefficient part with coefficient 1.
+        This is needed for compatibility with SymPy's multiplication system.
+        """
+        return S.One, self
+
     def __neg__(self):
         """Negate the point."""
         coords = [-x for x in self.args]
         return Point(coords, evaluate=False)
 
diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py
index 475d1d403f..b294f36737 100644
--- a/sympy/geometry/tests/test_point.py
+++ b/sympy/geometry/tests/test_point.py
@@ -117,10 +117,45 @@ def test_point():
     # Check invalid input for transform
     raises(ValueError, lambda: p3.transform(p3))
     raises(ValueError, lambda: p.transform(Matrix([[1, 0], [0, 1]])))
 
 
+def test_point_multiplication_commutativity():
+    """Test that scalar multiplication of points is commutative in addition.
+    
+    This addresses the issue where `point1 + sympy.sympify(2.0) * point2` 
+    failed while `point1 + point2 * sympy.sympify(2.0)` worked.
+    """
+    from sympy import sympify, Rational, pi, sqrt
+    
+    p1 = Point(0, 0)
+    p2 = Point(1, 1)
+    
+    # Test with different scalar types
+    scalars = [2, 2.0, sympify(2.0), Rational(1, 2), sympify(3), pi, sqrt(2)]
+    
+    for scalar in scalars:
+        # These two expressions should be equivalent
+        result1 = p1 + p2 * scalar
+        result2 = p1 + scalar * p2
+        assert result1 == result2, f"Failed for scalar {scalar} ({type(scalar)})"
+    
+    # Test the original problem case specifically
+    result = p1 + sympify(2.0) * p2
+    expected = Point(2.0, 2.0)
+    assert result == expected
+    
+    # Test with 3D points
+    p3d1 = Point(0, 0, 0)
+    p3d2 = Point(1, 2, 3)
+    scalar = 2.5
+    
+    result1 = p3d1 + p3d2 * scalar
+    result2 = p3d1 + scalar * p3d2
+    assert result1 == result2
+
+
 def test_point3D():
     x = Symbol('x', real=True)
     y = Symbol('y', real=True)
     x1 = Symbol('x1', real=True)
     x2 = Symbol('x2', real=True)
