diff --git a/sympy/algebras/quaternion.py b/sympy/algebras/quaternion.py
index b84e7cb95a..7eae8d73d0 100644
--- a/sympy/algebras/quaternion.py
+++ b/sympy/algebras/quaternion.py
@@ -529,7 +529,7 @@ def to_rotation_matrix(self, v=None):
 
         m10 = 2*s*(q.b*q.c + q.d*q.a)
         m11 = 1 - 2*s*(q.b**2 + q.d**2)
-        m12 = 2*s*(q.c*q.d + q.b*q.a)
+        m12 = 2*s*(q.c*q.d - q.b*q.a)
 
         m20 = 2*s*(q.b*q.d - q.c*q.a)
         m21 = 2*s*(q.c*q.d + q.b*q.a)
diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py
index 420e9976d2..44bf246c89 100644
--- a/sympy/algebras/tests/test_quaternion.py
+++ b/sympy/algebras/tests/test_quaternion.py
@@ -96,11 +96,11 @@ def test_quaternion_conversions():
                                    2 * acos(sqrt(30)/30))
 
     assert q1.to_rotation_matrix() == Matrix([[-S(2)/3, S(2)/15, S(11)/15],
-                                     [S(2)/3, -S(1)/3, S(14)/15],
+                                     [S(2)/3, -S(1)/3, S(2)/3],
                                      [S(1)/3, S(14)/15, S(2)/15]])
 
     assert q1.to_rotation_matrix((1, 1, 1)) == Matrix([[-S(2)/3, S(2)/15, S(11)/15, S(4)/5],
-                                                  [S(2)/3, -S(1)/3, S(14)/15, -S(4)/15],
+                                                  [S(2)/3, -S(1)/3, S(2)/3, S(0)],
                                                   [S(1)/3, S(14)/15, S(2)/15, -S(2)/5],
                                                   [S(0), S(0), S(0), S(1)]])
 
@@ -115,6 +115,18 @@ def test_quaternion_conversions():
     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),
                                    2*acos(cos(theta/2)))
 
+    # Test for the specific issue reported in GitHub
+    # X-axis rotation should have -sin(x) in position [1,2]
+    x = symbols('x')
+    q_x = Quaternion(cos(x/2), sin(x/2), 0, 0)
+    x_rotation = trigsimp(q_x.to_rotation_matrix())
+    expected_x_rotation = Matrix([
+        [1,      0,       0],
+        [0, cos(x), -sin(x)],
+        [0, sin(x),  cos(x)]
+    ])
+    assert x_rotation == expected_x_rotation
+
     assert trigsimp(q2.to_rotation_matrix((1, 1, 1))) == Matrix([
                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],
                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],
