diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 95302a05ca..0b852100c3 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -164,7 +164,45 @@ def structurally_equal(self, other):
     def _blockmul(self, other):
         if (isinstance(other, BlockMatrix) and
                 self.colblocksizes == other.rowblocksizes):
-            return BlockMatrix(self.blocks*other.blocks)
+            # Perform element-wise block multiplication to preserve ZeroMatrix objects
+            from sympy.matrices import Matrix
+            result_blocks = []
+            for i in range(self.blockshape[0]):
+                row = []
+                for j in range(other.blockshape[1]):
+                    # Compute the (i,j) block of the result
+                    block_sum = None
+                    for k in range(self.blockshape[1]):
+                        left_block = self.blocks[i, k]
+                        right_block = other.blocks[k, j]
+                        
+                        # Handle ZeroMatrix cases to preserve block structure
+                        if left_block.is_ZeroMatrix or right_block.is_ZeroMatrix:
+                            # Result is a ZeroMatrix with appropriate dimensions
+                            product = ZeroMatrix(left_block.rows, right_block.cols)
+                        else:
+                            product = left_block * right_block
+                        
+                        if block_sum is None:
+                            block_sum = product
+                        else:
+                            # Handle addition of ZeroMatrix blocks
+                            if block_sum.is_ZeroMatrix:
+                                block_sum = product
+                            elif product.is_ZeroMatrix:
+                                # block_sum stays the same
+                                pass
+                            else:
+                                block_sum = block_sum + product
+                    
+                    # If block_sum is still None, it means all products were zero
+                    if block_sum is None:
+                        block_sum = ZeroMatrix(self.blocks[i, 0].rows, other.blocks[0, j].cols)
+                    
+                    row.append(block_sum)
+                result_blocks.append(row)
+            
+            return BlockMatrix(result_blocks)
 
         return self * other
 
diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py
index 1e1033affc..84b0e76843 100644
--- a/sympy/matrices/expressions/tests/test_blockmatrix.py
+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py
@@ -222,3 +222,47 @@ def test_block_collapse_type():
     assert block_collapse(Transpose(bm1)).__class__ == BlockDiagMatrix
     assert bc_transpose(Transpose(bm1)).__class__ == BlockDiagMatrix
     assert bc_inverse(Inverse(bm1)).__class__ == BlockDiagMatrix
+
+def test_zeromatrix_blockmatrix_multiplication():
+    """Test that ZeroMatrix blocks are preserved during BlockMatrix multiplication.
+    
+    This addresses the issue where ZeroMatrix objects were converted to Zero objects
+    during block multiplication, causing AttributeError when accessing colblocksizes.
+    """
+    from sympy.matrices.expressions.matexpr import ZeroMatrix
+    
+    # Test case from the original issue
+    a = MatrixSymbol("a", 2, 2)
+    z = ZeroMatrix(2, 2)
+    b = BlockMatrix([[a, z], [z, z]])
+    
+    # Test single multiplication
+    result1 = b._blockmul(b)
+    assert isinstance(result1, BlockMatrix)
+    assert isinstance(result1.blocks[0, 1], ZeroMatrix)
+    assert isinstance(result1.blocks[1, 0], ZeroMatrix)
+    assert isinstance(result1.blocks[1, 1], ZeroMatrix)
+    assert result1.blocks[0, 0] == a**2
+    
+    # Test double multiplication - this was failing before the fix
+    result2 = b._blockmul(b)._blockmul(b)
+    assert isinstance(result2, BlockMatrix)
+    assert isinstance(result2.blocks[0, 1], ZeroMatrix)
+    assert isinstance(result2.blocks[1, 0], ZeroMatrix)
+    assert isinstance(result2.blocks[1, 1], ZeroMatrix)
+    assert result2.blocks[0, 0] == a**3
+    
+    # Test with block_collapse
+    result3 = block_collapse(b * b)
+    assert isinstance(result3, BlockMatrix)
+    assert isinstance(result3.blocks[0, 1], ZeroMatrix)
+    
+    result4 = block_collapse(b * b * b)
+    assert isinstance(result4, BlockMatrix)
+    assert isinstance(result4.blocks[0, 1], ZeroMatrix)
+    
+    # Test colblocksizes access - this was causing AttributeError before
+    assert result1.colblocksizes == [2, 2]
+    assert result2.colblocksizes == [2, 2]
+    assert result3.colblocksizes == [2, 2]
+    assert result4.colblocksizes == [2, 2]
