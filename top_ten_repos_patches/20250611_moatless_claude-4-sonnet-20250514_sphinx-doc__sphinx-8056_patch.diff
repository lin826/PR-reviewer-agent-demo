--- a/sphinx/ext/napoleon/docstring.py
+++ b/sphinx/ext/napoleon/docstring.py
@@ -392,15 +392,33 @@
         lines = []
         for _name, _type, _desc in fields:
             _desc = self._strip_empty(_desc)
-            if any(_desc):
-                _desc = self._fix_field_desc(_desc)
-                field = ':%s %s: ' % (field_role, _name)
-                lines.extend(self._format_block(field, _desc))
-            else:
-                lines.append(':%s %s:' % (field_role, _name))
-
-            if _type:
-                lines.append(':%s %s: %s' % (type_role, _name, _type))
+            
+            # Handle multiple parameter names separated by commas
+            # Don't split special patterns like *args, **kwargs or single * parameters
+            def should_split_params(name):
+                if ', ' not in name:
+                    return False
+                parts = [p.strip() for p in name.split(',')]
+                # Don't split if any part starts with * (special argument syntax)
+                if any(part.startswith('*') for part in parts):
+                    return False
+                return True
+            
+            if should_split_params(_name):
+                param_names = [name.strip() for name in _name.split(',')]
+            else:
+                param_names = [_name]
+            
+            for param_name in param_names:
+                if any(_desc):
+                    _desc = self._fix_field_desc(_desc)
+                    field = ':%s %s: ' % (field_role, param_name)
+                    lines.extend(self._format_block(field, _desc))
+                else:
+                    lines.append(':%s %s:' % (field_role, param_name))
+
+                if _type:
+                    lines.append(':%s %s: %s' % (type_role, param_name, _type))
         return lines + ['']
 
     def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:
@@ -436,9 +454,30 @@
                        ) -> List[str]:
         field_type = ':%s:' % field_type.strip()
         padding = ' ' * len(field_type)
-        multi = len(fields) > 1
+        
+        # Expand fields to handle multiple parameter names
+        # Don't split special patterns like *args, **kwargs or single * parameters
+        def should_split_params(name):
+            if ', ' not in name:
+                return False
+            parts = [p.strip() for p in name.split(',')]
+            # Don't split if any part starts with * (special argument syntax)
+            if any(part.startswith('*') for part in parts):
+                return False
+            return True
+        
+        expanded_fields = []
+        for _name, _type, _desc in fields:
+            if should_split_params(_name):
+                param_names = [name.strip() for name in _name.split(',')]
+                for param_name in param_names:
+                    expanded_fields.append((param_name, _type, _desc))
+            else:
+                expanded_fields.append((_name, _type, _desc))
+        
+        multi = len(expanded_fields) > 1
         lines = []  # type: List[str]
-        for _name, _type, _desc in fields:
+        for _name, _type, _desc in expanded_fields:
             field = self._format_field(_name, _type, _desc)
             if multi:
                 if lines:
@@ -1083,7 +1122,13 @@
         func = super()._escape_args_and_kwargs
 
         if ", " in name:
-            return ", ".join(func(param) for param in name.split(", "))
+            # Don't split special patterns like *args, **kwargs
+            parts = [p.strip() for p in name.split(", ")]
+            # Don't split if any part starts with * (special argument syntax)
+            if any(part.startswith('*') for part in parts):
+                return func(name)
+            else:
+                return ", ".join(func(param) for param in parts)
         else:
             return func(name)
 
