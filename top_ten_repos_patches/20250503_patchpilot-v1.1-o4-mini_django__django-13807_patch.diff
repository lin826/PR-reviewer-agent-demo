diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py
index 0fcc607bcf..e6c7a20462 100644
--- a/django/db/backends/base/operations.py
+++ b/django/db/backends/base/operations.py
@@ -690,4 +690,4 @@ class BaseDatabaseOperations:
         return 'INSERT INTO'
 
     def ignore_conflicts_suffix_sql(self, ignore_conflicts=None):
-        return ''
+        return ''
diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index 2eeaf98c0d..f18939f51c 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -325,24 +325,31 @@ class DatabaseWrapper(BaseDatabaseWrapper):
             with self.cursor() as cursor:
                 if table_names is None:
                     violations = cursor.execute('PRAGMA foreign_key_check').fetchall()
+
                 else:
+                    existing = set(self.introspection.table_names(cursor))
+                    table_names = [t for t in table_names if t in existing]
                     violations = chain.from_iterable(
-                        cursor.execute('PRAGMA foreign_key_check(%s)' % table_name).fetchall()
+
+                        cursor.execute('PRAGMA foreign_key_check(%s)' % self.ops.quote_name(table_name)).fetchall()
                         for table_name in table_names
                     )
                 # See https://www.sqlite.org/pragma.html#pragma_foreign_key_check
                 for table_name, rowid, referenced_table_name, foreign_key_index in violations:
                     foreign_key = cursor.execute(
-                        'PRAGMA foreign_key_list(%s)' % table_name
+                        'PRAGMA foreign_key_list(%s)' % self.ops.quote_name(table_name)
                     ).fetchall()[foreign_key_index]
                     column_name, referenced_column_name = foreign_key[3:5]
                     primary_key_column_name = self.introspection.get_primary_key_column(cursor, table_name)
                     primary_key_value, bad_value = cursor.execute(
                         'SELECT %s, %s FROM %s WHERE rowid = %%s' % (
-                            primary_key_column_name, column_name, table_name
+                            self.ops.quote_name(primary_key_column_name),
+                            self.ops.quote_name(column_name),
+                            self.ops.quote_name(table_name)
                         ),
                         (rowid,),
                     ).fetchone()
+
                     raise IntegrityError(
                         "The row in table '%s' with primary key '%s' has an "
                         "invalid foreign key: %s.%s contains a value '%s' that "
@@ -606,4 +613,4 @@ def _sqlite_lpad(text, length, fill_text):
 
 @none_guard
 def _sqlite_rpad(text, length, fill_text):
-    return (text + fill_text * length)[:length]
+    return (text + fill_text * length)[:length]
diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py
index 71ef000c93..8d19e016ac 100644
--- a/django/db/backends/sqlite3/operations.py
+++ b/django/db/backends/sqlite3/operations.py
@@ -361,4 +361,4 @@ class DatabaseOperations(BaseDatabaseOperations):
         return 'django_timestamp_diff(%s, %s)' % (lhs_sql, rhs_sql), params
 
     def insert_statement(self, ignore_conflicts=False):
-        return 'INSERT OR IGNORE INTO' if ignore_conflicts else super().insert_statement(ignore_conflicts)
+        return 'INSERT OR IGNORE INTO' if ignore_conflicts else super().insert_statement(ignore_conflicts)
diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py
index 6a2c887612..441c42d3a0 100644
--- a/django/db/backends/sqlite3/schema.py
+++ b/django/db/backends/sqlite3/schema.py
@@ -431,4 +431,4 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
             self._remake_table(model)
 
     def _collate_sql(self, collation):
-        return ' COLLATE ' + collation
+        return ' COLLATE ' + collation
diff --git a/django/db/backends/utils.py b/django/db/backends/utils.py
index 45c03ba3e9..caf4b66f41 100644
--- a/django/db/backends/utils.py
+++ b/django/db/backends/utils.py
@@ -246,4 +246,4 @@ def strip_quotes(table_name):
     scheme) becomes 'USER"."TABLE'.
     """
     has_quotes = table_name.startswith('"') and table_name.endswith('"')
-    return table_name[1:-1] if has_quotes else table_name
+    return table_name[1:-1] if has_quotes else table_name
