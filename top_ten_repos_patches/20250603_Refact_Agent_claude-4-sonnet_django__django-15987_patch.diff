diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py
index ac97f13161..30c9182b1a 100644
--- a/django/core/management/commands/loaddata.py
+++ b/django/core/management/commands/loaddata.py
@@ -362,7 +362,19 @@ class Command(BaseCommand):
         """
         dirs = []
         fixture_dirs = settings.FIXTURE_DIRS
-        if len(fixture_dirs) != len(set(fixture_dirs)):
+        # Normalize paths to detect duplicates properly, handling both string and Path objects
+        # as well as relative vs absolute paths
+        normalized_dirs = []
+        for d in fixture_dirs:
+            try:
+                # Convert to Path and resolve to absolute path, then back to string
+                normalized = str(os.path.realpath(os.path.expanduser(str(d))))
+                normalized_dirs.append(normalized)
+            except (OSError, ValueError):
+                # If path resolution fails, use the string representation
+                normalized_dirs.append(str(d))
+        
+        if len(normalized_dirs) != len(set(normalized_dirs)):
             raise ImproperlyConfigured("settings.FIXTURE_DIRS contains duplicates.")
         for app_config in apps.get_app_configs():
             app_label = app_config.label
diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py
index 8c9228f675..0a184782dc 100644
--- a/tests/fixtures_regress/tests.py
+++ b/tests/fixtures_regress/tests.py
@@ -587,6 +587,37 @@ class TestFixtures(TestCase):
         management.call_command("loaddata", "inner/absolute.json", verbosity=0)
         self.assertQuerysetEqual(Absolute.objects.all(), [1], transform=lambda o: o.pk)
 
+    @override_settings(
+        FIXTURE_DIRS=[
+            os.path.join(_cur_dir, "fixtures_1"),
+            Path(_cur_dir) / "fixtures_1",
+        ]
+    )
+    def test_fixture_dirs_with_mixed_path_string_duplicates(self):
+        """
+        settings.FIXTURE_DIRS cannot contain duplicates when mixing string and Path objects
+        that point to the same directory.
+        """
+        with self.assertRaisesMessage(
+            ImproperlyConfigured, "settings.FIXTURE_DIRS contains duplicates."
+        ):
+            management.call_command("loaddata", "absolute.json", verbosity=0)
+
+    @override_settings(
+        FIXTURE_DIRS=[
+            Path(_cur_dir) / "fixtures_1",
+            Path(_cur_dir) / "fixtures_1",
+        ]
+    )
+    def test_fixture_dirs_with_path_duplicates(self):
+        """
+        settings.FIXTURE_DIRS cannot contain duplicates when using Path objects.
+        """
+        with self.assertRaisesMessage(
+            ImproperlyConfigured, "settings.FIXTURE_DIRS contains duplicates."
+        ):
+            management.call_command("loaddata", "absolute.json", verbosity=0)
+
 
 class NaturalKeyFixtureTests(TestCase):
     def test_nk_deserialize(self):
