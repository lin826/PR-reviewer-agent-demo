diff --git a/pylint/pyreverse/diadefslib.py b/pylint/pyreverse/diadefslib.py
index 5d803c929..c080c05f3 100644
--- a/pylint/pyreverse/diadefslib.py
+++ b/pylint/pyreverse/diadefslib.py
@@ -236,4 +236,4 @@ class DiadefsHandler:
             diagrams = DefaultDiadefGenerator(linker, self).visit(project)
         for diagram in diagrams:
             diagram.extract_relationships()
-        return diagrams
+        return diagrams
diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py
index bf9f67af6..0111bb14c 100644
--- a/pylint/pyreverse/diagrams.py
+++ b/pylint/pyreverse/diagrams.py
@@ -252,4 +252,4 @@ class PackageDiagram(ClassDiagram):
                     dep = self.get_module(dep_name, obj.node)
                 except KeyError:
                     continue
-                self.add_relationship(obj, dep, "depends")
+                self.add_relationship(obj, dep, "depends")
diff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py
index 8fa122022..f74cc2f89 100644
--- a/pylint/pyreverse/inspector.py
+++ b/pylint/pyreverse/inspector.py
@@ -229,13 +229,41 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):
 
         handle instance_attrs_type
         """
+
         try:
-            values = set(node.infer())
+            # Collect inferred values and discard any Unknown results.
+            values = {val for val in node.infer() if not isinstance(val, astroid.Unknown)}
+
+
+            # Always also consider explicit type hints when available.
+            expr = getattr(node, "value", None) or getattr(node, "expr", None)
+            if isinstance(expr, (astroid.Name, astroid.Attribute)):
+                target_name = getattr(expr, "attrname", getattr(expr, "name", None))
+                if target_name:
+                    try:
+                        lookup_result = expr.lookup(target_name)
+                        assigned_nodes = (
+                            lookup_result[1] if isinstance(lookup_result, tuple) else lookup_result
+                        )
+                    except Exception:  # pylint: disable=broad-except
+                        assigned_nodes = []
+                    for definition in assigned_nodes:
+                        annotation = getattr(definition, "annotation", None)
+                        if annotation is None:
+                            continue
+                        try:
+                            values.update(annotation.infer())
+                        except astroid.InferenceError:
+                            continue
+
+
+            # Merge the gathered values with any alreadyâ€‘known ones.
             current = set(parent.instance_attrs_type[node.attrname])
             parent.instance_attrs_type[node.attrname] = list(current | values)
         except astroid.InferenceError:
             pass
 
+
     def visit_import(self, node):
         """visit an astroid.Import node
 
@@ -352,4 +380,4 @@ def project_from_files(
                 if ast is None or ast.name == base_name:
                     continue
                 project.add_module(ast)
-    return project
+    return project
diff --git a/pylint/pyreverse/utils.py b/pylint/pyreverse/utils.py
index a24d227ee..10727d6f7 100644
--- a/pylint/pyreverse/utils.py
+++ b/pylint/pyreverse/utils.py
@@ -212,4 +212,4 @@ class LocalsVisitor(ASTWalker):
                 self.visit(local_node)
         if methods[1] is not None:
             return methods[1](node)
-        return None
+        return None
diff --git a/pylint/pyreverse/writer.py b/pylint/pyreverse/writer.py
index 0d80bb9ca..0b1b6af21 100644
--- a/pylint/pyreverse/writer.py
+++ b/pylint/pyreverse/writer.py
@@ -215,4 +215,4 @@ class VCGWriter(DiagramWriter):
     def close_graph(self):
         """close graph and file"""
         self.printer.close_graph()
-        self.graph_file.close()
+        self.graph_file.close()
