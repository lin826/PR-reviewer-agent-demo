diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 28374272f4..adf106f7e4 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -516,17 +516,32 @@ class Field(RegisterLookupMixin):
     def __eq__(self, other):
         # Needed for @total_ordering
         if isinstance(other, Field):
-            return self.creation_counter == other.creation_counter
+            return (self.creation_counter == other.creation_counter and
+                    getattr(self, 'model', None) == getattr(other, 'model', None))
         return NotImplemented
 
     def __lt__(self, other):
         # This is needed because bisect does not take a comparison function.
+        # Order by creation_counter first to preserve existing behavior,
+        # then by model to ensure consistent ordering when counters are equal.
         if isinstance(other, Field):
-            return self.creation_counter < other.creation_counter
+            if self.creation_counter != other.creation_counter:
+                return self.creation_counter < other.creation_counter
+            # When creation_counters are equal, order by model
+            self_model = getattr(self, 'model', None)
+            other_model = getattr(other, 'model', None)
+            if self_model is None and other_model is None:
+                return False  # Both are None, consider equal for ordering
+            if self_model is None:
+                return True   # None comes before any model
+            if other_model is None:
+                return False  # Any model comes after None
+            # Compare model names for consistent ordering
+            return (self_model._meta.label_lower < other_model._meta.label_lower)
         return NotImplemented
 
     def __hash__(self):
-        return hash(self.creation_counter)
+        return hash((self.creation_counter, getattr(self, 'model', None)))
 
     def __deepcopy__(self, memodict):
         # We don't have to deepcopy very much here, since most things are not
