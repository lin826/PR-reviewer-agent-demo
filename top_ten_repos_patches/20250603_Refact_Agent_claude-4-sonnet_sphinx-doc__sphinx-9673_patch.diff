diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index af4b47bb0..97fe2d670 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -149,7 +149,7 @@ def augment_descriptions_with_types(
         elif parts[0] == 'type':
             name = ' '.join(parts[1:])
             has_type.add(name)
-        elif parts[0] == 'return':
+        elif parts[0] in ('return', 'returns'):
             has_description.add('return')
         elif parts[0] == 'rtype':
             has_type.add('return')
diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py
index f6436f541..a5ce363d1 100644
--- a/tests/test_ext_autodoc_configs.py
+++ b/tests/test_ext_autodoc_configs.py
@@ -925,6 +925,60 @@ def test_autodoc_typehints_description_for_invalid_node(app):
     restructuredtext.parse(app, text)  # raises no error
 
 
+@pytest.mark.sphinx('text', testroot='ext-autodoc',
+                    confoverrides={'autodoc_typehints': "description",
+                                   'autodoc_typehints_description_target': 'documented',
+                                   'extensions': ['sphinx.ext.autodoc', 'sphinx.ext.napoleon'],
+                                   'napoleon_google_docstring': True,
+                                   'napoleon_numpy_docstring': False})
+def test_napoleon_typehints_description_target_documented(app):
+    """Test that Napoleon's Returns sections work with autodoc_typehints_description_target='documented'."""
+    (app.srcdir / 'index.rst').write_text(
+        '.. autofunction:: target.napoleon_typehints.napoleon_documented_return\n'
+        '\n'
+        '.. autofunction:: target.napoleon_typehints.napoleon_undocumented_return\n'
+        '\n'
+        '.. autofunction:: target.napoleon_typehints.napoleon_no_docstring_sections\n'
+    )
+    app.build()
+    context = (app.outdir / 'index.txt').read_text()
+    
+    # Function with documented return should have return type
+    assert ('target.napoleon_typehints.napoleon_documented_return(param1, param2)\n'
+            '\n'
+            '   Function with Napoleon-style docstring and documented return.\n'
+            '\n'
+            '   Parameters:\n'
+            '      * **param1** (*str*) -- First parameter.\n'
+            '\n'
+            '      * **param2** (*int*) -- Second parameter.\n'
+            '\n'
+            '   Returns:\n'
+            '      The returned value.\n'
+            '\n'
+            '   Return type:\n'
+            '      bool\n' in context)
+    
+    # Function without documented return should NOT have return type (due to target='documented')
+    assert ('target.napoleon_typehints.napoleon_undocumented_return(param1, param2)\n'
+            '\n'
+            '   Function with Napoleon-style docstring but no documented return.\n'
+            '\n'
+            '   Parameters:\n'
+            '      * **param1** (*str*) -- First parameter.\n'
+            '\n'
+            '      * **param2** (*int*) -- Second parameter.\n' in context)
+    
+    # Function with no docstring sections should have no type information
+    assert ('target.napoleon_typehints.napoleon_no_docstring_sections(param1, param2)\n'
+            '\n'
+            '   Function with no Args or Returns sections.\n' in context)
+    
+    # Verify return type only appears once (for the documented function)
+    return_type_count = context.count('Return type:')
+    assert return_type_count == 1
+
+
 @pytest.mark.sphinx('text', testroot='ext-autodoc',
                     confoverrides={'autodoc_typehints': "both"})
 def test_autodoc_typehints_both(app):
