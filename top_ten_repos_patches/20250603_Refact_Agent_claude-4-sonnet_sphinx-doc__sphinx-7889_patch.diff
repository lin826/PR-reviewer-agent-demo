diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py
index 98a3a3a96..1f0310035 100644
--- a/sphinx/ext/autodoc/mock.py
+++ b/sphinx/ext/autodoc/mock.py
@@ -68,12 +68,21 @@ class _MockObject:
         return self.__display_name__
 
 
-def _make_subclass(name: str, module: str, superclass: Any = _MockObject,
+def _make_subclass(name: Any, module: str, superclass: Any = _MockObject,
                    attributes: Any = None) -> Any:
-    attrs = {'__module__': module, '__display_name__': module + '.' + name}
+    # Convert name to string if it's not already a string
+    # This handles TypeVar objects and other non-string types
+    if hasattr(name, '__name__'):
+        # For TypeVar and other objects with __name__ attribute, use that
+        name_str = name.__name__
+    else:
+        # For other objects, convert to string
+        name_str = str(name)
+    
+    attrs = {'__module__': module, '__display_name__': module + '.' + name_str}
     attrs.update(attributes or {})
 
-    return type(name, (superclass,), attrs)
+    return type(name_str, (superclass,), attrs)
 
 
 class _MockModule(ModuleType):
diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py
index 4760493cf..9a1d77038 100644
--- a/tests/test_ext_autodoc_mock.py
+++ b/tests/test_ext_autodoc_mock.py
@@ -11,10 +11,11 @@
 import abc
 import sys
 from importlib import import_module
+from typing import TypeVar
 
 import pytest
 
-from sphinx.ext.autodoc.mock import _MockModule, _MockObject, mock
+from sphinx.ext.autodoc.mock import _MockModule, _MockObject, _make_subclass, mock
 
 
 def test_MockModule():
@@ -117,3 +118,60 @@ def test_mock_decorator():
     assert func.__doc__ == "docstring"
     assert Foo.meth.__doc__ == "docstring"
     assert Bar.__doc__ == "docstring"
+
+
+def test_make_subclass_with_typevar():
+    """Test that _make_subclass handles TypeVar objects correctly."""
+    T = TypeVar('T')
+    U = TypeVar('U', bound=str)
+    
+    # Test with simple TypeVar
+    result = _make_subclass(T, "test_module")
+    assert result.__name__ == 'T'
+    assert result.__module__ == 'test_module'
+    assert result.__display_name__ == 'test_module.T'
+    
+    # Test with bounded TypeVar
+    result = _make_subclass(U, "test_module")
+    assert result.__name__ == 'U'
+    assert result.__module__ == 'test_module'
+    assert result.__display_name__ == 'test_module.U'
+
+
+def test_make_subclass_with_custom_name_attribute():
+    """Test that _make_subclass uses __name__ attribute when available."""
+    class CustomType:
+        __name__ = 'CustomName'
+    
+    custom = CustomType()
+    result = _make_subclass(custom, "test_module")
+    assert result.__name__ == 'CustomName'
+    assert result.__display_name__ == 'test_module.CustomName'
+
+
+def test_make_subclass_fallback_to_str():
+    """Test that _make_subclass falls back to str() for objects without __name__."""
+    result = _make_subclass(42, "test_module")
+    assert result.__name__ == '42'
+    assert result.__display_name__ == 'test_module.42'
+
+
+def test_mock_object_getitem_with_typevar():
+    """Test that MockObject.__getitem__ works with TypeVar."""
+    T = TypeVar('T')
+    mock = _MockObject()
+    
+    # This should not raise TypeError
+    result = mock[T]
+    assert isinstance(result, _MockObject)
+
+
+def test_mock_module_getattr_with_typevar_name():
+    """Test that MockModule.__getattr__ works with TypeVar names."""
+    T = TypeVar('T')
+    mock_module = _MockModule('test_module')
+    
+    # Access attribute with TypeVar name
+    result = getattr(mock_module, T.__name__)
+    assert isinstance(result, _MockObject)
+    assert result.__display_name__ == f'test_module.{T.__name__}'
