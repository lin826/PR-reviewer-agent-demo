diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py
index f957a667b2..720767aa9e 100644
--- a/django/contrib/staticfiles/storage.py
+++ b/django/contrib/staticfiles/storage.py
@@ -261,6 +261,7 @@ class HashedFilesMixin:
 
         paths = {path: paths[path] for path in adjustable_paths}
 
+        substitutions = False
         for i in range(self.max_post_process_passes):
             substitutions = False
             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py
index db655f2453..7385fb57fe 100644
--- a/tests/staticfiles_tests/test_storage.py
+++ b/tests/staticfiles_tests/test_storage.py
@@ -581,6 +581,65 @@ class TestStaticFilePermissions(CollectionTestCase):
                 self.assertEqual(dir_mode, 0o740)
 
 
+class ZeroPassesManifestStaticFilesStorage(storage.ManifestStaticFilesStorage):
+    """Test storage class with max_post_process_passes = 0"""
+    max_post_process_passes = 0
+
+
+@override_settings(
+    STATICFILES_STORAGE='staticfiles_tests.test_storage.ZeroPassesManifestStaticFilesStorage',
+)
+class TestCollectionManifestStorageZeroPasses(CollectionTestCase):
+    """
+    Test that ManifestStaticFilesStorage works correctly with max_post_process_passes = 0.
+    This tests the fix for the UnboundLocalError bug when max_post_process_passes = 0.
+    """
+    
+    def test_max_post_process_passes_zero_no_crash(self):
+        """
+        Test that max_post_process_passes = 0 doesn't cause UnboundLocalError.
+        
+        This is a regression test for the bug where the 'substitutions' variable
+        was referenced before assignment when max_post_process_passes = 0.
+        """
+        # Create a simple CSS file that references another file
+        temp_dir = tempfile.mkdtemp()
+        self.addCleanup(shutil.rmtree, temp_dir)
+        
+        css_content = '.test { background: url("test.png"); }'
+        css_file = os.path.join(temp_dir, 'test.css')
+        with open(css_file, 'w') as f:
+            f.write(css_content)
+        
+        png_file = os.path.join(temp_dir, 'test.png')
+        with open(png_file, 'wb') as f:
+            f.write(b'fake png content')
+        
+        # Test that post_process doesn't crash with max_post_process_passes = 0
+        test_storage = ZeroPassesManifestStaticFilesStorage(location=temp_dir)
+        paths = {
+            'test.css': (test_storage, css_file),
+            'test.png': (test_storage, png_file),
+        }
+        
+        # This should not raise UnboundLocalError
+        try:
+            results = list(test_storage.post_process(paths, dry_run=False))
+            # Should have processed both files
+            self.assertEqual(len(results), 2)
+            
+            # Check that files were processed successfully
+            for name, hashed_name, processed in results:
+                self.assertIsNotNone(hashed_name)
+                self.assertTrue(processed)
+                
+        except UnboundLocalError as e:
+            if "substitutions" in str(e):
+                self.fail("UnboundLocalError for 'substitutions' variable - the bug is not fixed!")
+            else:
+                raise
+
+
 @override_settings(
     STATICFILES_STORAGE='django.contrib.staticfiles.storage.ManifestStaticFilesStorage',
 )
