diff --git a/django/views/generic/base.py b/django/views/generic/base.py
index ea5baca08d..e8b85e32e6 100644
--- a/django/views/generic/base.py
+++ b/django/views/generic/base.py
@@ -9,11 +9,11 @@ from django.http import (
 )
 from django.template.response import TemplateResponse
 from django.urls import reverse
 from django.utils.decorators import classonlymethod
 from django.utils.deprecation import RemovedInDjango40Warning
-from django.utils.functional import SimpleLazyObject
+from django.utils.functional import SimpleLazyObject, empty
 
 logger = logging.getLogger('django.request')
 
 
 class ContextMixin:
@@ -163,24 +163,54 @@ class TemplateView(TemplateResponseMixin, ContextMixin, View):
         context = self.get_context_data(**context_kwargs)
         return self.render_to_response(context)
 
 
 # RemovedInDjango40Warning
+class _DatabaseCompatibleLazyObject(SimpleLazyObject):
+    """
+    A SimpleLazyObject that's compatible with database parameter binding.
+    It implements the __conform__ method to work with database adapters.
+    """
+    def __init__(self, func, key_name):
+        super().__init__(func)
+        # Use __dict__ to avoid triggering __setattr__
+        self.__dict__['_key_name'] = key_name
+    
+    def __conform__(self, protocol):
+        # This method is called by database adapters (like SQLite) to check
+        # if the object can be adapted to a specific protocol.
+        # We resolve the lazy object and return the underlying value.
+        if self._wrapped is empty:
+            self._setup()
+        # Return the underlying value so the database adapter can handle it
+        return self._wrapped
+    
+    def _setup(self):
+        # Show warning when the value is first accessed
+        if self._wrapped is empty:
+            warnings.warn(
+                'TemplateView passing URL kwargs to the context is '
+                'deprecated. Reference %s in your template through '
+                'view.kwargs instead.' % self.__dict__.get('_key_name', 'unknown'),
+                RemovedInDjango40Warning, stacklevel=4,
+            )
+            super()._setup()
+
+
 def _wrap_url_kwargs_with_deprecation_warning(url_kwargs):
     context_kwargs = {}
     for key, value in url_kwargs.items():
         # Bind into function closure.
-        @SimpleLazyObject
         def access_value(key=key, value=value):
             warnings.warn(
                 'TemplateView passing URL kwargs to the context is '
                 'deprecated. Reference %s in your template through '
                 'view.kwargs instead.' % key,
                 RemovedInDjango40Warning, stacklevel=2,
             )
             return value
-        context_kwargs[key] = access_value
+        context_kwargs[key] = _DatabaseCompatibleLazyObject(access_value, key)
     return context_kwargs
 
 
 class RedirectView(View):
     """Provide a redirect on any GET request."""
