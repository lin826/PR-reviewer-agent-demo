diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py
index 800a25c92..c854d299b 100644
--- a/src/_pytest/mark/structures.py
+++ b/src/_pytest/mark/structures.py
@@ -357,9 +357,40 @@ class MarkDecorator:
 
 def get_unpacked_marks(obj: object) -> Iterable[Mark]:
     """Obtain the unpacked marks that are stored on an object."""
-    mark_list = getattr(obj, "pytestmark", [])
-    if not isinstance(mark_list, list):
-        mark_list = [mark_list]
+    
+    # For classes, traverse the MRO to collect markers from all parent classes
+    if hasattr(obj, '__mro__'):
+        all_marks = []
+        seen_marks = set()  # Track seen (name, args, kwargs) to avoid duplicates
+        
+        for cls in obj.__mro__:
+            # Only look at the class's own pytestmark, not inherited
+            if 'pytestmark' in cls.__dict__:
+                marks = cls.__dict__['pytestmark']
+                if not isinstance(marks, list):
+                    marks = [marks]
+                
+                for mark in marks:
+                    # Create a hashable key for deduplication
+                    try:
+                        # Try to make args hashable
+                        hashable_args = tuple(arg if isinstance(arg, (str, int, float, bool, type(None))) 
+                                            else str(arg) for arg in mark.args)
+                        mark_key = (mark.name, hashable_args, tuple(sorted(mark.kwargs.items())))
+                        if mark_key not in seen_marks:
+                            seen_marks.add(mark_key)
+                            all_marks.append(mark)
+                    except (TypeError, ValueError):
+                        # If we can't make it hashable, just add it (no deduplication for complex markers)
+                        all_marks.append(mark)
+        
+        mark_list = all_marks
+    else:
+        # For non-class objects, use the original behavior
+        mark_list = getattr(obj, "pytestmark", [])
+        if not isinstance(mark_list, list):
+            mark_list = [mark_list]
+    
     return normalize_mark_list(mark_list)
 
 
@@ -388,7 +419,11 @@ def store_mark(obj, mark: Mark) -> None:
     assert isinstance(mark, Mark), mark
     # Always reassign name to avoid updating pytestmark in a reference that
     # was only borrowed.
-    obj.pytestmark = [*get_unpacked_marks(obj), mark]
+    # Only get marks directly from this object, not from inheritance chain
+    mark_list = getattr(obj, "pytestmark", [])
+    if not isinstance(mark_list, list):
+        mark_list = [mark_list]
+    obj.pytestmark = [*normalize_mark_list(mark_list), mark]
 
 
 # Typing for builtin pytest marks. This is cheating; it gives builtin marks
