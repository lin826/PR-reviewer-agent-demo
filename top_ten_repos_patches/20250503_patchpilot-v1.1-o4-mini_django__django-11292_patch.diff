diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py
index b8f47fa4a4..a4c06e5864 100644
--- a/django/core/management/__init__.py
+++ b/django/core/management/__init__.py
@@ -164,12 +164,17 @@ class ManagementUtility:
         if commands_only:
             usage = sorted(get_commands())
         else:
+
             usage = [
                 "",
                 "Type '%s help <subcommand>' for help on a specific subcommand." % self.prog_name,
                 "",
+                "Optional flag:",
+                "    --skip-checks  Skip system checks before running a command.",
+                "",
                 "Available subcommands:",
             ]
+
             commands_dict = defaultdict(lambda: [])
             for name, app in get_commands().items():
                 if app == 'django.core':
@@ -378,4 +383,4 @@ class ManagementUtility:
 def execute_from_command_line(argv=None):
     """Run a ManagementUtility."""
     utility = ManagementUtility(argv)
-    utility.execute()
+    utility.execute()
diff --git a/django/core/management/base.py b/django/core/management/base.py
index 0c3a981290..23581a407a 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -282,11 +282,17 @@ class BaseCommand:
             '--no-color', action='store_true',
             help="Don't colorize the command output.",
         )
+
         parser.add_argument(
             '--force-color', action='store_true',
             help='Force colorization of the command output.',
         )
+        parser.add_argument(
+            '--skip-checks', action='store_true',
+            help='Skip system checks before running the command.',
+        )
         self.add_arguments(parser)
+
         return parser
 
     def add_arguments(self, parser):
@@ -357,11 +363,20 @@ class BaseCommand:
         if options.get('stderr'):
             self.stderr = OutputWrapper(options['stderr'])
 
+
         if self.requires_system_checks and not options.get('skip_checks'):
             self.check()
         if self.requires_migrations_checks:
             self.check_migrations()
-        output = self.handle(*args, **options)
+        # Prepare a copy of the options for the ``handle()`` method.
+        # If the --skip-checks flag wasn't provided, its default value
+        # is False. Remove it to preserve backwardâ€‘compatibility with
+        # command implementations that don't expect this keyword.
+        handle_options = options.copy()
+        if handle_options.get('skip_checks') is False:
+            handle_options.pop('skip_checks', None)
+        output = self.handle(*args, **handle_options)
+
         if output:
             if self.output_transaction:
                 connection = connections[options.get('database', DEFAULT_DB_ALIAS)]
@@ -545,4 +560,4 @@ class LabelCommand(BaseCommand):
         Perform the command's actions for ``label``, which will be the
         string as given on the command line.
         """
-        raise NotImplementedError('subclasses of LabelCommand must provide a handle_label() method')
+        raise NotImplementedError('subclasses of LabelCommand must provide a handle_label() method')
