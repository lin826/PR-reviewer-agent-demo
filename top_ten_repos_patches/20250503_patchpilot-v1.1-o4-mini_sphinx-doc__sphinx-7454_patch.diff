diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index cf5467b..d0fa449 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -18,10 +18,37 @@ from docutils.nodes import Element
 
 from sphinx import addnodes
 from sphinx.application import Sphinx
+
 from sphinx.util import inspect, typing
 
+# ---------------------------------------------------------------------------
+# Monkeyâ€‘patch sphinx.util.typing.parse_annotation so that builtin constants
+# such as ``None`` are wrapped in a reference (pending_xref) node and thus
+# rendered as links in both *signature* and *description* modes.
+# ---------------------------------------------------------------------------
+try:
+    from sphinx.util.typing import BUILTIN_CONSTANTS  # type: ignore
+except Exception:  # pragma: no cover
+    BUILTIN_CONSTANTS = {'None', 'Ellipsis', 'NotImplemented'}  # fallback
+
+_original_parse_annotation = typing.parse_annotation  # type: ignore
+
+
+def _patched_parse_annotation(annotation, env=None):  # type: ignore
+    if isinstance(annotation, str) and annotation in BUILTIN_CONSTANTS:
+        pnode = addnodes.pending_xref(
+            '', refdomain='py', reftype='data', reftarget=annotation)
+        pnode.append(nodes.literal(annotation, annotation))
+        return [pnode]
+    return _original_parse_annotation(annotation, env)
+
+
+if getattr(typing, 'parse_annotation', None) is not _patched_parse_annotation:  # type: ignore
+    typing.parse_annotation = _patched_parse_annotation  # type: ignore
+
 
 def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
+
                      options: Dict, args: str, retann: str) -> None:
     """Record type hints to env object."""
     try:
