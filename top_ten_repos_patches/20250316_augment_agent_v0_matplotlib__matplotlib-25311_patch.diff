diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py
index 1dee8a23d9..f764c5f1fa 100644
--- a/lib/matplotlib/offsetbox.py
+++ b/lib/matplotlib/offsetbox.py
@@ -1511,10 +1511,48 @@ class DraggableBase:
             self.canvas.callbacks._connect_picklable(
                 'pick_event', self.on_pick),
             self.canvas.callbacks._connect_picklable(
                 'button_release_event', self.on_release),
         ]
+        
+    def __getstate__(self):
+        """
+        Return the state of the DraggableBase instance for pickling.
+        Excludes unpicklable attributes like the canvas and callback IDs.
+        """
+        state = self.__dict__.copy()
+        # Remove the canvas which is not picklable
+        state.pop('canvas', None)
+        # Reset the callback IDs which won't be valid after unpickling
+        state['cids'] = []
+        # Remove the motion callback ID if it exists
+        if hasattr(self, '_c1'):
+            state.pop('_c1', None)
+        # Reset the got_artist flag since we're not in the middle of dragging
+        state['got_artist'] = False
+        return state
+
+    def __setstate__(self, state):
+        """
+        Restore the state of the DraggableBase instance after unpickling.
+        Reconnects to the canvas if the ref_artist has a figure.
+        """
+        self.__dict__.update(state)
+        # If the ref_artist still has a figure, reconnect to the canvas
+        if hasattr(self.ref_artist, 'figure') and self.ref_artist.figure is not None:
+            self.canvas = self.ref_artist.figure.canvas
+            # Reconnect the event handlers
+            self.cids = [
+                self.canvas.callbacks._connect_picklable(
+                    'pick_event', self.on_pick),
+                self.canvas.callbacks._connect_picklable(
+                    'button_release_event', self.on_release),
+            ]
+        else:
+            # No figure, so no canvas or event handlers
+            self.canvas = None
+            self.cids = []
 
     def on_motion(self, evt):
         if self._check_still_parented() and self.got_artist:
             dx = evt.x - self.mouse_x
             dy = evt.y - self.mouse_y
