diff --git a/sympy/core/exprtools.py b/sympy/core/exprtools.py
index 4e0de9ec18..aceb81f200 100644
--- a/sympy/core/exprtools.py
+++ b/sympy/core/exprtools.py
@@ -1176,9 +1176,15 @@ def do(expr):
         if p.is_Add:
             list_args = [do(a) for a in Add.make_args(p)]
             # get a common negative (if there) which gcd_terms does not remove
-            if all(a.as_coeff_Mul()[0] < 0 for a in list_args):
-                cont = -cont
-                list_args = [-a for a in list_args]
+            # Skip comparison if any coefficient is NaN to avoid "Invalid NaN comparison"
+            try:
+                coeffs = [a.as_coeff_Mul()[0] for a in list_args]
+                if all(c < 0 for c in coeffs if c is not S.NaN):
+                    cont = -cont
+                    list_args = [-a for a in list_args]
+            except TypeError:
+                # Handle case where comparison fails (e.g., NaN comparison)
+                pass
             # watch out for exp(-(x+2)) which gcd_terms will change to exp(-x-2)
             special = {}
             for i, a in enumerate(list_args):
diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py
index 97cde62e26..77931d20dc 100644
--- a/sympy/matrices/matrices.py
+++ b/sympy/matrices/matrices.py
@@ -211,9 +211,28 @@ def entry(i, j):
                     cancel(ret)
                 return ret
 
-            return sign*bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)
-
-        return cancel(bareiss(self))
+            result = sign*bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)
+            # Check if recursive call produced NaN
+            if result is S.NaN:
+                return S.NaN
+            return result
+
+        result = bareiss(self)
+        # Check if Bareiss algorithm produced NaN, fallback to Berkowitz if so
+        if result is S.NaN or (hasattr(result, 'is_nan') and result.is_nan):
+            return self._eval_det_berkowitz()
+        
+        try:
+            cancelled_result = cancel(result)
+            # Double-check the cancelled result for NaN
+            if cancelled_result is S.NaN or (hasattr(cancelled_result, 'is_nan') and cancelled_result.is_nan):
+                return self._eval_det_berkowitz()
+            return cancelled_result
+        except TypeError as e:
+            if "Invalid NaN comparison" in str(e):
+                # Fallback to Berkowitz method if cancel fails due to NaN
+                return self._eval_det_berkowitz()
+            raise
 
     def _eval_det_berkowitz(self):
         """ Use the Berkowitz algorithm to compute the determinant."""
