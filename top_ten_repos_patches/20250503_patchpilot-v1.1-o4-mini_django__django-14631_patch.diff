diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index b5c646b..e996fd0 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -5,8 +5,11 @@ from django.forms.utils import flatatt, pretty_name
 from django.forms.widgets import Textarea, TextInput
 from django.utils.functional import cached_property
 from django.utils.html import conditional_escape, format_html, html_safe
+
 from django.utils.safestring import mark_safe
 from django.utils.translation import gettext_lazy as _
+from django.core.exceptions import ValidationError
+
 
 __all__ = ('BoundField',)
 
@@ -219,6 +222,7 @@ class BoundField:
             data = data.replace(microsecond=0)
         return data
 
+
     def build_widget_attrs(self, attrs, widget=None):
         widget = widget or self.field.widget
         attrs = dict(attrs)  # Copy attrs to avoid modifying the argument.
@@ -228,6 +232,25 @@ class BoundField:
             attrs['disabled'] = True
         return attrs
 
+    def _did_change(self):
+        """
+        Return True if this field's data differs from its initial value.
+        """
+        data_value = self.data
+        if not self.field.show_hidden_initial:
+            initial_value = self.initial
+        else:
+            hidden_widget = self.field.hidden_widget()
+            try:
+                initial_value = self.field.to_python(
+                    self.form._widget_data_value(hidden_widget, self.html_initial_name)
+                )
+            except ValidationError:
+                # Assume changed if hidden-initial validation fails.
+                return True
+        return self.field.has_changed(initial_value, data_value)
+
+
     @property
     def widget_type(self):
         return re.sub(r'widget$|input$', '', self.field.widget.__class__.__name__.lower())
@@ -271,4 +294,4 @@ class BoundWidget:
 
     @property
     def choice_label(self):
-        return self.data['label']
+        return self.data['label']
diff --git a/django/forms/forms.py b/django/forms/forms.py
index 2c0336e..9e42141 100644
--- a/django/forms/forms.py
+++ b/django/forms/forms.py
@@ -387,14 +387,16 @@ class BaseForm:
         self._post_clean()
 
     def _clean_fields(self):
+
         for name, field in self.fields.items():
+            bf = self[name]
             if field.disabled:
-                value = self.get_initial_for_field(field, name)
+                value = bf.initial
             else:
-                value = self._field_data_value(field, self.add_prefix(name))
+                value = bf.data
             try:
                 if isinstance(field, FileField):
-                    initial = self.get_initial_for_field(field, name)
+                    initial = bf.initial
                     value = field.clean(value, initial)
                 else:
                     value = field.clean(value)
@@ -405,6 +407,7 @@ class BaseForm:
             except ValidationError as e:
                 self.add_error(name, e)
 
+
     def _clean_form(self):
         try:
             cleaned_data = self.clean()
@@ -434,29 +437,11 @@ class BaseForm:
         """Return True if data differs from initial."""
         return bool(self.changed_data)
 
+
     @cached_property
     def changed_data(self):
-        data = []
-        for name, field in self.fields.items():
-            data_value = self._field_data_value(field, self.add_prefix(name))
-            if not field.show_hidden_initial:
-                # Use the BoundField's initial as this is the value passed to
-                # the widget.
-                initial_value = self[name].initial
-            else:
-                initial_prefixed_name = self.add_initial_prefix(name)
-                hidden_widget = field.hidden_widget()
-                try:
-                    initial_value = field.to_python(
-                        self._widget_data_value(hidden_widget, initial_prefixed_name)
-                    )
-                except ValidationError:
-                    # Always assume data has changed if validation fails.
-                    data.append(name)
-                    continue
-            if field.has_changed(initial_value, data_value):
-                data.append(name)
-        return data
+        return [bf.name for bf in self if bf._did_change()]
+
 
     @property
     def media(self):
@@ -504,4 +489,4 @@ class Form(BaseForm, metaclass=DeclarativeFieldsMetaclass):
     # self.fields is specified. This class (Form) is the one that does the
     # fancy metaclass stuff purely for the semantic sugar -- it allows one
     # to define a form using declarative syntax.
-    # BaseForm itself has no way of designating self.fields.
+    # BaseForm itself has no way of designating self.fields.
