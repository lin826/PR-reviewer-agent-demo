diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py
index 7b1b714..00fb57c 100644
--- a/django/db/backends/postgresql/operations.py
+++ b/django/db/backends/postgresql/operations.py
@@ -352,16 +352,28 @@ class DatabaseOperations(BaseDatabaseOperations):
     def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fields):
         if on_conflict == OnConflict.IGNORE:
             return "ON CONFLICT DO NOTHING"
+
         if on_conflict == OnConflict.UPDATE:
+            # Translate attribute or Field names to real database column names
+            # to honor custom `db_column` values.
+            def _resolve(col):
+                # Field instance â†’ directly use its declared column name.
+                if hasattr(col, "column"):
+                    return col.column
+                # Match against the fields involved in the INSERT statement.
+                for f in fields:
+                    if col in (f.name, f.attname):
+                        return f.column
+                # Fallback: assume the value is already a column name.
+                return col
+
+            conflict_cols = [self.quote_name(_resolve(c)) for c in unique_fields]
+            update_cols = [self.quote_name(_resolve(c)) for c in update_fields]
             return "ON CONFLICT(%s) DO UPDATE SET %s" % (
-                ", ".join(map(self.quote_name, unique_fields)),
-                ", ".join(
-                    [
-                        f"{field} = EXCLUDED.{field}"
-                        for field in map(self.quote_name, update_fields)
-                    ]
-                ),
+                ", ".join(conflict_cols),
+                ", ".join(f"{col} = EXCLUDED.{col}" for col in update_cols),
             )
+
         return super().on_conflict_suffix_sql(
             fields,
             on_conflict,
