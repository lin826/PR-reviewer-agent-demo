diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 2b59dd301a..8ba85c3115 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -551,6 +551,7 @@ class ResolvedOuterRef(F):
     the inner query has been used as a subquery.
     """
     contains_aggregate = False
+    contains_outer_ref = True
 
     def as_sql(self, *args, **kwargs):
         raise ValueError(
@@ -563,6 +564,8 @@ class ResolvedOuterRef(F):
 
 
 class OuterRef(F):
+    contains_outer_ref = True
+    
     def resolve_expression(self, query=None, allow_joins=True, reuse=None,
                            summarize=False, for_save=False, simple_col=False):
         if isinstance(self.name, self.__class__):
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 35f3c5e1ea..9793b5b153 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1263,7 +1263,14 @@ class Query(BaseExpression):
 
         opts = self.get_meta()
         alias = self.get_initial_alias()
-        allow_many = not branch_negated or not split_subq
+        
+        # Check if value contains OuterRef before deciding on allow_many
+        contains_outer_ref = hasattr(value, 'contains_outer_ref') and value.contains_outer_ref
+        if not contains_outer_ref and isinstance(value, (list, tuple)):
+            contains_outer_ref = any(hasattr(v, 'contains_outer_ref') and v.contains_outer_ref for v in value if v is not None)
+            
+        # If we have OuterRef, ensure it's handled correctly even in negated branches
+        allow_many = (not branch_negated or not split_subq or contains_outer_ref)
 
         try:
             join_info = self.setup_joins(

