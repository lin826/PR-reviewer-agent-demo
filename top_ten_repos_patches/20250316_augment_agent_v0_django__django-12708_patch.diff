diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 61f88401ab..b7bfd9768e 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -405,16 +405,43 @@ class BaseDatabaseSchemaEditor:
         columns = [model._meta.get_field(field).column for field in fields]
         constraint_names = self._constraint_names(
             model, columns, exclude=meta_constraint_names | meta_index_names,
             **constraint_kwargs
         )
+        if len(constraint_names) == 0:
+            # No constraints found for columns and constraint_kwargs, nothing to remove
+            return
         if len(constraint_names) != 1:
-            raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
-                len(constraint_names),
-                model._meta.db_table,
-                ", ".join(columns),
-            ))
+            # There are multiple constraints for the same columns.
+            # This can happen when a unique_together and an index_together
+            # exist for the same fields.
+            # Filter constraints by type to find the one we want to delete.
+            if 'index' in constraint_kwargs and constraint_kwargs['index']:
+                # We're trying to delete an index, not a unique constraint
+                with self.connection.cursor() as cursor:
+                    constraints = self.connection.introspection.get_constraints(cursor, model._meta.db_table)
+                    constraint_names = [
+                        name for name in constraint_names
+                        if constraints[name]['index'] and not constraints[name]['unique']
+                    ]
+            elif 'unique' in constraint_kwargs and constraint_kwargs['unique']:
+                # We're trying to delete a unique constraint
+                with self.connection.cursor() as cursor:
+                    constraints = self.connection.introspection.get_constraints(cursor, model._meta.db_table)
+                    constraint_names = [
+                        name for name in constraint_names
+                        if constraints[name]['unique']
+                    ]
+            
+            # If we still have multiple or no constraints, raise an error
+            if len(constraint_names) != 1:
+                raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
+                    len(constraint_names),
+                    model._meta.db_table,
+                    ", ".join(columns),
+                ))
+        
         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))
 
     def alter_db_table(self, model, old_db_table, new_db_table):
         """Rename the table a model points to."""
         if (old_db_table == new_db_table or
