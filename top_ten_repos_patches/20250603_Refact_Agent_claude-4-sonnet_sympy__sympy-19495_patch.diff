diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py
index 118eda6f77..c8c70929d9 100644
--- a/sympy/sets/conditionset.py
+++ b/sympy/sets/conditionset.py
@@ -243,7 +243,7 @@ def _eval_subs(self, old, new):
         cond = self.condition.subs(old, new)
         base = self.base_set.subs(old, new)
         if cond is S.true:
-            return ConditionSet(new, Contains(new, base), base)
+            return base
         return self.func(self.sym, cond, base)
 
     def dummy_eq(self, other, symbol=None):
diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py
index 0d4527a52c..b77c9ad442 100644
--- a/sympy/sets/tests/test_conditionset.py
+++ b/sympy/sets/tests/test_conditionset.py
@@ -125,7 +125,7 @@ def test_subs_CondSet():
     assert ConditionSet(
         n, n < x, Interval(0, oo)).subs(x, p) == Interval(0, oo)
     assert ConditionSet(
-        n, n < x, Interval(-oo, 0)).subs(x, p) == S.EmptySet
+        n, n < x, Interval(-oo, 0)).subs(x, p) == Interval(-oo, 0)
     assert ConditionSet(f(x), f(x) < 1, {w, z}
         ).subs(f(x), y) == ConditionSet(y, y < 1, {w, z})
 
@@ -139,6 +139,43 @@ def test_subs_CondSet_tebr():
     assert c.subs(x, z) == c
 
 
+def test_subs_CondSet_ImageSet():
+    """Test for issue with ConditionSet.subs() when base_set is ImageSet"""
+    from sympy.sets.sets import imageset
+    from sympy.abc import n
+    from sympy.core.function import Lambda
+    from sympy.functions.elementary.trigonometric import asin
+    from sympy.core.numbers import Rational
+    
+    # Create an ImageSet with a free variable y
+    img_set = imageset(Lambda(n, 2*n*pi + asin(y)), S.Integers)
+    
+    # Create a ConditionSet with the ImageSet as base_set
+    cond_set = ConditionSet(x, Contains(y, Interval(-1, 1)), img_set)
+    
+    # Test substitution that makes condition True
+    result = cond_set.subs(y, Rational(1, 3))
+    expected = imageset(Lambda(n, 2*n*pi + asin(Rational(1, 3))), S.Integers)
+    assert result == expected
+    
+    # Test substitution that makes condition False
+    result_false = cond_set.subs(y, 2)  # 2 is not in [-1, 1]
+    assert result_false == S.EmptySet
+    
+    # Test substitution that doesn't affect the condition evaluation
+    cond_set2 = ConditionSet(x, x > 0, img_set)
+    result2 = cond_set2.subs(y, Rational(1, 3))
+    expected2 = ConditionSet(x, x > 0, imageset(Lambda(n, 2*n*pi + asin(Rational(1, 3))), S.Integers))
+    assert result2 == expected2
+    
+    # Test with FiniteSet base_set for comparison
+    finite_set = FiniteSet(y, -y)
+    cond_set3 = ConditionSet(x, Contains(y, Interval(0, oo)), finite_set)
+    result3 = cond_set3.subs(y, Rational(1, 3))
+    expected3 = FiniteSet(Rational(1, 3), Rational(-1, 3))
+    assert result3 == expected3
+
+
 def test_dummy_eq():
     C = ConditionSet
     I = S.Integers
