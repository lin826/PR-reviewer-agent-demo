--- a/django/utils/translation/trans_real.py
+++ b/django/utils/translation/trans_real.py
@@ -43,7 +43,7 @@
     re.IGNORECASE
 )
 
-language_code_prefix_re = _lazy_re_compile(r'^/(\w+([@-]\w+)?)(/|$)')
+language_code_prefix_re = _lazy_re_compile(r'^/([a-zA-Z]{2,3}(?:[-@][a-zA-Z]{4})?(?:[-@][a-zA-Z0-9]{2,3})?|[a-zA-Z]{2,8}(?:[-@][a-zA-Z0-9]{2,8})?)(/|$)')
 
 
 @receiver(setting_changed)

--- a/final_verification.py
+++ b/final_verification.py
@@ -0,0 +1,94 @@
+#!/usr/bin/env python3
+"""
+Final verification that the BCP 47 language code issue is resolved.
+
+This script demonstrates that the fix works for the original issue reported:
+- i18n_patterns now supports language codes with both script and region
+- URLs like /en-latn-us/ and /en-Latn-US/ now work correctly
+- Regression prevention: /de-simple-page/ is not treated as a language code
+"""
+
+import os
+import django
+from django.conf import settings
+
+# Configure Django with the exact settings from the original issue
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='test-secret-key',
+        USE_I18N=True,
+        LANGUAGE_CODE='en-us',
+        LANGUAGES=[
+            ('en-us', "English"),
+            ('en-latn-us', "Latin English"),
+            ('en-Latn-US', "BCP 47 case format"),
+        ],
+        MIDDLEWARE=[
+            'django.middleware.locale.LocaleMiddleware',
+        ],
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ]
+    )
+
+django.setup()
+
+from django.utils import translation
+
+print("=== Final Verification: BCP 47 Language Code Support ===")
+print()
+print("Original Issue Test Cases:")
+print("These URLs should now extract the correct language codes:")
+print()
+
+# Test cases from the original issue description
+original_cases = [
+    ('/en-us/', 'en-us'),
+    ('/en-latn-us/', 'en-latn-us'),
+    ('/en-Latn-US/', 'en-Latn-US'),
+]
+
+all_passed = True
+
+for path, expected in original_cases:
+    result = translation.get_language_from_path(path)
+    if result == expected:
+        status = "✅ PASS"
+    else:
+        status = f"❌ FAIL (got: {result})"
+        all_passed = False
+    
+    print(f"  {status}: {path} -> {result}")
+
+print()
+print("Regression Test:")
+print("This URL should NOT be treated as a language code:")
+
+# Regression test
+regression_path = '/de-simple-page/'
+result = translation.get_language_from_path(regression_path)
+if result is None:
+    print(f"  ✅ PASS: {regression_path} -> {result} (correctly not treated as language code)")
+else:
+    print(f"  ❌ FAIL: {regression_path} -> {result} (should be None)")
+    all_passed = False
+
+print()
+print("=== Summary ===")
+if all_passed:
+    print("🎉 SUCCESS: All tests passed! The BCP 47 language code issue has been resolved.")
+    print()
+    print("Key improvements:")
+    print("- ✅ URLs with BCP 47 language codes now work: /en-latn-us/, /en-Latn-US/")
+    print("- ✅ Maintains backward compatibility with existing codes: /en-us/")
+    print("- ✅ Prevents false positives that could break URL routing: /de-simple-page/")
+    print("- ✅ Follows RFC 5646 BCP 47 standard for language tags")
+else:
+    print("❌ FAILURE: Some tests failed. The issue may not be fully resolved.")
+
+print()
+print("Technical Details:")
+print("- Modified language_code_prefix_re in django/utils/translation/trans_real.py")
+print("- New regex supports BCP 47 structure: language[-script][-region]")
+print("- Added comprehensive test coverage in tests/i18n/tests.py")
+print("- Maintains compatibility with existing @ syntax (e.g., sr@latin)")
