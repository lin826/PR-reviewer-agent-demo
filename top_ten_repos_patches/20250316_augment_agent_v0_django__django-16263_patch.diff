diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 9735ce10c8..442266b7a6 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -548,12 +548,87 @@ class Query(BaseExpression):
     def get_count(self, using):
         """
         Perform a COUNT() query using the current filter constraints.
         """
         obj = self.clone()
+        
+        # Strip out annotations that aren't used in filters, other annotations, or ordering
+        if obj.annotations:
+            used_annotations = set()
+            
+            # Check if annotations are used in filters
+            for alias in obj.annotations:
+                # Check if the annotation is used in the WHERE clause
+                if obj.where and self._annotation_used_in_where(obj.where, alias):
+                    used_annotations.add(alias)
+                    continue
+                
+                # Check if the annotation is used in the HAVING clause
+                if hasattr(obj, 'having') and obj.having and self._annotation_used_in_where(obj.having, alias):
+                    used_annotations.add(alias)
+                    continue
+                
+                # Check if the annotation is used in ordering
+                if obj.order_by:
+                    for ordering in obj.order_by:
+                        order_name = ordering.lstrip('-')
+                        if order_name == alias:
+                            used_annotations.add(alias)
+                            break
+                    if alias in used_annotations:
+                        continue
+                
+                # Check if the annotation is used in another annotation
+                for other_alias, other_annotation in obj.annotations.items():
+                    if alias != other_alias and self._annotation_references_other(other_annotation, alias):
+                        used_annotations.add(alias)
+                        break
+            
+            # Remove annotations that aren't used
+            for alias in list(obj.annotations):
+                if alias not in used_annotations:
+                    del obj.annotations[alias]
+                    if alias in obj.annotation_select:
+                        del obj.annotation_select[alias]
+        
         obj.add_annotation(Count("*"), alias="__count", is_summary=True)
         return obj.get_aggregation(using, ["__count"])["__count"]
+        
+    def _annotation_used_in_where(self, where_node, alias):
+        """
+        Check if an annotation is used in a WHERE or HAVING node.
+        """
+        for child in where_node.children:
+            if isinstance(child, tuple) and len(child) >= 1:
+                # Check if the lookup references the annotation
+                lookup = child[0]
+                if hasattr(lookup, 'name') and lookup.name == alias:
+                    return True
+            elif hasattr(child, 'children'):
+                # Recursively check nested WHERE nodes
+                if self._annotation_used_in_where(child, alias):
+                    return True
+        return False
+        
+    def _annotation_references_other(self, annotation, alias):
+        """
+        Check if an annotation references another annotation.
+        This is a simplified check that should work for most cases.
+        """
+        if not hasattr(annotation, 'contains_aggregate'):
+            return False
+            
+        # Check if the annotation references the alias directly
+        if hasattr(annotation, 'source_expressions'):
+            for expr in annotation.source_expressions:
+                if hasattr(expr, 'name') and expr.name == alias:
+                    return True
+                if hasattr(expr, 'refs') and expr.refs == alias:
+                    return True
+                
+        # Fallback to a string check
+        return alias in str(annotation)
 
     def has_filters(self):
         return self.where
 
     def exists(self, limit=True):
