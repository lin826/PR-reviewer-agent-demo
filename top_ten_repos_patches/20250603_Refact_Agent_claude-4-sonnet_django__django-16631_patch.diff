diff --git a/django/contrib/auth/__init__.py b/django/contrib/auth/__init__.py
index 155330c596..3cc8d34a2a 100644
--- a/django/contrib/auth/__init__.py
+++ b/django/contrib/auth/__init__.py
@@ -5,7 +5,7 @@ from django.apps import apps as django_apps
 from django.conf import settings
 from django.core.exceptions import ImproperlyConfigured, PermissionDenied
 from django.middleware.csrf import rotate_token
-from django.utils.crypto import constant_time_compare
+from django.utils.crypto import constant_time_compare, salted_hmac
 from django.utils.module_loading import import_string
 from django.views.decorators.debug import sensitive_variables
 
@@ -179,6 +179,41 @@ def get_user_model():
         )
 
 
+def _verify_session_hash_with_fallbacks(session_hash, user):
+    """
+    Verify session hash against current SECRET_KEY and SECRET_KEY_FALLBACKS.
+    
+    This allows sessions to remain valid during SECRET_KEY rotation when the
+    old key is properly configured in SECRET_KEY_FALLBACKS.
+    """
+    key_salt = "django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash"
+    
+    # Try current SECRET_KEY first
+    candidates = [settings.SECRET_KEY]
+    
+    # Then try fallback keys (handle case where setting doesn't exist)
+    try:
+        fallbacks = settings.SECRET_KEY_FALLBACKS
+        if fallbacks:
+            candidates.extend(fallbacks)
+    except AttributeError:
+        # SECRET_KEY_FALLBACKS setting doesn't exist, just use current key
+        pass
+    
+    for secret in candidates:
+        computed_hash = salted_hmac(
+            key_salt,
+            user.password,
+            secret=secret,
+            algorithm="sha256",
+        ).hexdigest()
+        
+        if constant_time_compare(session_hash, computed_hash):
+            return True
+    
+    return False
+
+
 def get_user(request):
     """
     Return the user model instance associated with the given request session.
@@ -199,9 +234,13 @@ def get_user(request):
             # Verify the session
             if hasattr(user, "get_session_auth_hash"):
                 session_hash = request.session.get(HASH_SESSION_KEY)
-                session_hash_verified = session_hash and constant_time_compare(
-                    session_hash, user.get_session_auth_hash()
-                )
+                if session_hash:
+                    # Try current SECRET_KEY first, then fallbacks
+                    session_hash_verified = _verify_session_hash_with_fallbacks(
+                        session_hash, user
+                    )
+                else:
+                    session_hash_verified = False
                 if not session_hash_verified:
                     request.session.flush()
                     user = None
diff --git a/tests/auth_tests/test_basic.py b/tests/auth_tests/test_basic.py
index 4b491e521e..5d0a1294d1 100644
--- a/tests/auth_tests/test_basic.py
+++ b/tests/auth_tests/test_basic.py
@@ -138,3 +138,62 @@ class TestGetUser(TestCase):
         user = get_user(request)
         self.assertIsInstance(user, User)
         self.assertEqual(user.username, created_user.username)
+
+    @override_settings(
+        SECRET_KEY="new-secret-key",
+        SECRET_KEY_FALLBACKS=["original-secret-key"]
+    )
+    def test_get_user_with_secret_key_fallbacks(self):
+        """
+        get_user() should work with SECRET_KEY_FALLBACKS when the session
+        was created with an old secret key that's now in the fallbacks list.
+        """
+        created_user = User.objects.create_user(
+            "testuser", "test@example.com", "testpw"
+        )
+        
+        # Create session with the original secret key
+        with override_settings(SECRET_KEY="original-secret-key", SECRET_KEY_FALLBACKS=[]):
+            self.client.login(username="testuser", password="testpw")
+            request = HttpRequest()
+            request.session = self.client.session
+            
+            # Verify user is logged in with original key
+            user = get_user(request)
+            self.assertIsInstance(user, User)
+            self.assertEqual(user.username, created_user.username)
+        
+        # Now with the new secret key and old key in fallbacks,
+        # the session should still be valid
+        user = get_user(request)
+        self.assertIsInstance(user, User)
+        self.assertEqual(user.username, created_user.username)
+
+    @override_settings(
+        SECRET_KEY="new-secret-key",
+        SECRET_KEY_FALLBACKS=[]
+    )
+    def test_get_user_without_secret_key_fallbacks(self):
+        """
+        get_user() should return AnonymousUser when the session was created
+        with an old secret key that's not in SECRET_KEY_FALLBACKS.
+        """
+        created_user = User.objects.create_user(
+            "testuser", "test@example.com", "testpw"
+        )
+        
+        # Create session with the original secret key
+        with override_settings(SECRET_KEY="original-secret-key", SECRET_KEY_FALLBACKS=[]):
+            self.client.login(username="testuser", password="testpw")
+            request = HttpRequest()
+            request.session = self.client.session
+            
+            # Verify user is logged in with original key
+            user = get_user(request)
+            self.assertIsInstance(user, User)
+            self.assertEqual(user.username, created_user.username)
+        
+        # Now with the new secret key and no fallbacks,
+        # the session should be invalid
+        user = get_user(request)
+        self.assertIsInstance(user, AnonymousUser)
