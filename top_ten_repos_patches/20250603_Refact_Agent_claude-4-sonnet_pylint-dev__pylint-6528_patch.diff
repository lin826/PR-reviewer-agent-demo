diff --git a/Dockerfile b/Dockerfile
index 2667145da..4e198b210 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,7 +1,30 @@
-FROM python:3.10.0-alpine3.15
 
-COPY ./ /tmp/build
-WORKDIR /tmp/build
-RUN python setup.py install && rm -rf /tmp/build
+FROM swebench/sweb.eval.x86_64.pylint-dev_1776_pylint-6528:latest
 
-ENTRYPOINT ["pylint"]
+WORKDIR /install
+# Install docker cli
+# Add Docker's official GPG key:
+RUN apt-get update
+RUN apt-get install -y ca-certificates curl
+RUN install -m 0755 -d /etc/apt/keyrings
+RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
+RUN chmod a+r /etc/apt/keyrings/docker.asc
+
+# Add the repository to Apt sources:
+RUN echo   "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu   $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" |   tee /etc/apt/sources.list.d/docker.list > /dev/null
+RUN apt-get update && apt-get install -y docker-ce-cli
+
+# Install required dependencies for SWE-bench (verification)
+RUN apt-get install -y -V ca-certificates lsb-release wget
+RUN wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
+RUN apt-get update
+RUN apt-get install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
+
+# Install SWE repo
+RUN git clone https://github.com/princeton-nlp/SWE-bench.git /SWE-bench
+WORKDIR /SWE-bench
+RUN apt-get install -y python3-venv
+RUN python3 -m venv .venv
+RUN . .venv/bin/activate      &&     pip install --upgrade pip &&     pip install . 
+
+WORKDIR /testbed
diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py
index b20cd873c..dbdab709f 100644
--- a/pylint/lint/expand_modules.py
+++ b/pylint/lint/expand_modules.py
@@ -46,6 +46,15 @@ def _is_in_ignore_list_re(element: str, ignore_list_re: list[Pattern[str]]) -> b
     return any(file_pattern.match(element) for file_pattern in ignore_list_re)
 
 
+def _is_in_ignore_list_paths_re(element: str, ignore_list_paths_re: list[Pattern[str]]) -> bool:
+    """Determines if the element path is matched in a regex ignore-list.
+    
+    Uses search() instead of match() to find the pattern anywhere in the path.
+    """
+    return any(file_pattern.search(element) for file_pattern in ignore_list_paths_re)
+
+
+
 def expand_modules(
     files_or_modules: Sequence[str],
     ignore_list: list[str],
@@ -64,7 +73,7 @@ def expand_modules(
         if (
             basename in ignore_list
             or _is_in_ignore_list_re(os.path.basename(something), ignore_list_re)
-            or _is_in_ignore_list_re(something, ignore_list_paths_re)
+            or _is_in_ignore_list_paths_re(something, ignore_list_paths_re)
         ):
             continue
         module_path = get_python_path(something)
@@ -130,7 +139,7 @@ def expand_modules(
                     continue
                 if _is_in_ignore_list_re(
                     os.path.basename(subfilepath), ignore_list_re
-                ) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):
+                ) or _is_in_ignore_list_paths_re(subfilepath, ignore_list_paths_re):
                     continue
 
                 modpath = _modpath_from_file(
diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py
index 53345a6b1..0a38f44d1 100644
--- a/pylint/lint/pylinter.py
+++ b/pylint/lint/pylinter.py
@@ -564,30 +564,51 @@ class PyLinter(
             if not msg.may_be_emitted():
                 self._msgs_state[msg.msgid] = False
 
-    @staticmethod
-    def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:
+    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:
         """Discover python modules and packages in sub-directory.
 
         Returns iterator of paths to discovered modules and packages.
         """
+        from pylint.lint.expand_modules import _is_in_ignore_list_re, _is_in_ignore_list_paths_re
+        
+        # Get ignore paths from config, fallback to _ignore_paths if available
+        ignore_paths = getattr(self.config, 'ignore_paths', getattr(self, '_ignore_paths', []))
+        
         for something in files_or_modules:
             if os.path.isdir(something) and not os.path.isfile(
                 os.path.join(something, "__init__.py")
             ):
                 skip_subtrees: list[str] = []
-                for root, _, files in os.walk(something):
+                for root, dirs, files in os.walk(something):
                     if any(root.startswith(s) for s in skip_subtrees):
                         # Skip subtree of already discovered package.
                         continue
+                    
+                    # Apply ignore filters to directories
+                    dirs[:] = [
+                        d for d in dirs
+                        if not (
+                            d in self.config.black_list
+                            or _is_in_ignore_list_re(d, self.config.black_list_re)
+                            or _is_in_ignore_list_paths_re(os.path.join(root, d), ignore_paths)
+                            or _is_in_ignore_list_paths_re(d, ignore_paths)
+                        )
+                    ]
+                    
                     if "__init__.py" in files:
                         skip_subtrees.append(root)
                         yield root
                     else:
-                        yield from (
-                            os.path.join(root, file)
-                            for file in files
-                            if file.endswith(".py")
-                        )
+                        for file in files:
+                            if file.endswith(".py"):
+                                filepath = os.path.join(root, file)
+                                # Apply ignore filters to files
+                                if not (
+                                    file in self.config.black_list
+                                    or _is_in_ignore_list_re(file, self.config.black_list_re)
+                                    or _is_in_ignore_list_paths_re(filepath, ignore_paths)
+                                ):
+                                    yield filepath
             else:
                 yield something
 
@@ -959,7 +980,7 @@ class PyLinter(
                 self.config.extension_pkg_whitelist
             )
         self.stats.reset_message_count()
-        self._ignore_paths = self.linter.config.ignore_paths
+        self._ignore_paths = self.config.ignore_paths
 
     def generate_reports(self) -> int | None:
         """Close the whole package /module, it's time to make reports !
