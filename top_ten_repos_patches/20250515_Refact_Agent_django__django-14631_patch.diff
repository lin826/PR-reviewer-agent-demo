diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 88adadb37d..8dde3e9852 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -219,6 +219,26 @@ class BoundField:
             data = data.replace(microsecond=0)
         return data
 
+    def _did_change(self):
+        """
+        Internal helper: return True if the field's current input differs from
+        its initial value (widget-normalised, locale-aware, etc.).
+        """
+        field = self.field
+        # What value reached the widget?
+        if not field.show_hidden_initial:
+            initial_value = self.initial
+        else:
+            initial_prefixed_name = self.form.add_initial_prefix(self.name)
+            try:
+                initial_value = field.to_python(
+                    self.form._widget_data_value(field.hidden_widget(),
+                                                  initial_prefixed_name)
+                )
+            except ValidationError:
+                return True      # Treat invalid initial as 'changed'.
+        return field.has_changed(initial_value, self.data)
+
     def build_widget_attrs(self, attrs, widget=None):
         widget = widget or self.field.widget
         attrs = dict(attrs)  # Copy attrs to avoid modifying the argument.
diff --git a/django/forms/forms.py b/django/forms/forms.py
index d14037bfe9..313978cb06 100644
--- a/django/forms/forms.py
+++ b/django/forms/forms.py
@@ -387,14 +387,16 @@ class BaseForm:
         self._post_clean()
 
     def _clean_fields(self):
-        for name, field in self.fields.items():
+        for name in self.fields:
+            bf = self[name]                                   # Always work via BoundField.
+            field = bf.field
             if field.disabled:
-                value = self.get_initial_for_field(field, name)
+                value = bf.initial                            # Already widget-normalised.
             else:
-                value = self._field_data_value(field, self.add_prefix(name))
+                value = bf.data
             try:
                 if isinstance(field, FileField):
-                    initial = self.get_initial_for_field(field, name)
+                    initial = bf.initial
                     value = field.clean(value, initial)
                 else:
                     value = field.clean(value)
@@ -436,27 +438,10 @@ class BaseForm:
 
     @cached_property
     def changed_data(self):
-        data = []
-        for name, field in self.fields.items():
-            data_value = self._field_data_value(field, self.add_prefix(name))
-            if not field.show_hidden_initial:
-                # Use the BoundField's initial as this is the value passed to
-                # the widget.
-                initial_value = self[name].initial
-            else:
-                initial_prefixed_name = self.add_initial_prefix(name)
-                hidden_widget = field.hidden_widget()
-                try:
-                    initial_value = field.to_python(
-                        self._widget_data_value(hidden_widget, initial_prefixed_name)
-                    )
-                except ValidationError:
-                    # Always assume data has changed if validation fails.
-                    data.append(name)
-                    continue
-            if field.has_changed(initial_value, data_value):
-                data.append(name)
-        return data
+        # Delegate "did it change?" decision to BoundField for single source of truth.
+        return [name for name, bf in (
+            (n, self[n]) for n in self.fields.keys()
+        ) if bf._did_change()]
 
     @property
     def media(self):
diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py
index e1567f12ce..ad79df287b 100644
--- a/tests/forms_tests/tests/test_forms.py
+++ b/tests/forms_tests/tests/test_forms.py
@@ -2114,13 +2114,15 @@ Password: <input type="password" name="password" required></li>
 
     def test_datetime_clean_initial_callable_disabled(self):
         now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)
+        now_no_ms = now.replace(microsecond=0)
 
         class DateTimeForm(forms.Form):
             dt = DateTimeField(initial=lambda: now, disabled=True)
 
         form = DateTimeForm({})
         self.assertEqual(form.errors, {})
-        self.assertEqual(form.cleaned_data, {'dt': now})
+        # The microseconds are stripped because the default widget doesn't support them
+        self.assertEqual(form.cleaned_data, {'dt': now_no_ms})
 
     def test_datetime_changed_data_callable_with_microseconds(self):
         class DateTimeForm(forms.Form):
