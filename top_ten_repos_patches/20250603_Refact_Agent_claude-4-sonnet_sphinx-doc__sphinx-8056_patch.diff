diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py
index b3daa06f1..48a9e795f 100644
--- a/sphinx/ext/napoleon/docstring.py
+++ b/sphinx/ext/napoleon/docstring.py
@@ -392,15 +392,26 @@ class GoogleDocstring:
         lines = []
         for _name, _type, _desc in fields:
             _desc = self._strip_empty(_desc)
-            if any(_desc):
-                _desc = self._fix_field_desc(_desc)
-                field = ':%s %s: ' % (field_role, _name)
-                lines.extend(self._format_block(field, _desc))
+            
+            # Split comma-separated parameter names, but not for *args, **kwargs patterns
+            # Check for both literal * and escaped \* patterns
+            has_args_kwargs = (('*' in _name and '**' in _name) or 
+                              ('\\*' in _name and '\\*\\*' in _name))
+            if ', ' in _name and not has_args_kwargs:
+                names = [name.strip() for name in _name.split(',')]
             else:
-                lines.append(':%s %s:' % (field_role, _name))
+                names = [_name]
+            
+            for name in names:
+                if any(_desc):
+                    _desc = self._fix_field_desc(_desc)
+                    field = ':%s %s: ' % (field_role, name)
+                    lines.extend(self._format_block(field, _desc))
+                else:
+                    lines.append(':%s %s:' % (field_role, name))
 
-            if _type:
-                lines.append(':%s %s: %s' % (type_role, _name, _type))
+                if _type:
+                    lines.append(':%s %s: %s' % (type_role, name, _type))
         return lines + ['']
 
     def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:
@@ -436,9 +447,23 @@ class GoogleDocstring:
                        ) -> List[str]:
         field_type = ':%s:' % field_type.strip()
         padding = ' ' * len(field_type)
-        multi = len(fields) > 1
-        lines = []  # type: List[str]
+        
+        # Expand fields with comma-separated names, but not for *args, **kwargs patterns
+        expanded_fields = []
         for _name, _type, _desc in fields:
+            # Check for both literal * and escaped \* patterns
+            has_args_kwargs = (('*' in _name and '**' in _name) or 
+                              ('\\*' in _name and '\\*\\*' in _name))
+            if ', ' in _name and not has_args_kwargs:
+                names = [name.strip() for name in _name.split(',')]
+                for name in names:
+                    expanded_fields.append((name, _type, _desc))
+            else:
+                expanded_fields.append((_name, _type, _desc))
+        
+        multi = len(expanded_fields) > 1
+        lines = []  # type: List[str]
+        for _name, _type, _desc in expanded_fields:
             field = self._format_field(_name, _type, _desc)
             if multi:
                 if lines:
diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py
index bf3c878a8..02e436d33 100644
--- a/tests/test_ext_napoleon_docstring.py
+++ b/tests/test_ext_napoleon_docstring.py
@@ -1230,7 +1230,7 @@ class NumpyDocstringTest(BaseDocstringTest):
         """
         Single line summary
 
-        :Parameters: * **arg1** (*str*) -- Extended description of arg1
+        :Parameters: * **arg1** (:class:`str`) -- Extended description of arg1
                      * **\\*args, \\*\\*kwargs** -- Variable length argument list and arbitrary keyword arguments.
         """
     ), (
@@ -1478,6 +1478,63 @@ arg_ : type
 
         self.assertEqual(expected, actual)
 
+    def test_multiple_parameters(self):
+        docstring = """
+Parameters
+----------
+x1, x2 : array_like
+    Input arrays, description of `x1`, `x2`.
+y1, y2, y3 : int, optional
+    Integer parameters.
+"""
+
+        # Test with napoleon_use_param=True
+        config = Config(napoleon_use_param=True)
+        actual = str(NumpyDocstring(docstring, config))
+        expected = """
+:param x1: Input arrays, description of `x1`, `x2`.
+:type x1: :class:`array_like`
+:param x2: Input arrays, description of `x1`, `x2`.
+:type x2: :class:`array_like`
+:param y1: Integer parameters.
+:type y1: :class:`int`, *optional*
+:param y2: Integer parameters.
+:type y2: :class:`int`, *optional*
+:param y3: Integer parameters.
+:type y3: :class:`int`, *optional*
+"""
+        self.assertEqual(expected, actual)
+
+        # Test with napoleon_use_param=False
+        config = Config(napoleon_use_param=False)
+        actual = str(NumpyDocstring(docstring, config))
+        expected = """
+:Parameters: * **x1** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.
+             * **x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.
+             * **y1** (:class:`int`, *optional*) -- Integer parameters.
+             * **y2** (:class:`int`, *optional*) -- Integer parameters.
+             * **y3** (:class:`int`, *optional*) -- Integer parameters.
+"""
+        self.assertEqual(expected, actual)
+
+    def test_multiple_parameters_with_args_kwargs(self):
+        docstring = """
+Parameters
+----------
+arg1 : str
+    Regular argument.
+*args, **kwargs:
+    Variable length argument list and arbitrary keyword arguments.
+"""
+
+        config = Config(napoleon_use_param=False)
+        actual = str(NumpyDocstring(docstring, config))
+        expected = """
+:Parameters: * **arg1** (:class:`str`) -- Regular argument.
+             * **\\*args, \\*\\*kwargs** -- Variable length argument list and arbitrary keyword arguments.
+"""
+        self.assertEqual(expected, actual)
+
     def test_raises_types(self):
         docstrings = [("""
 Example Function
