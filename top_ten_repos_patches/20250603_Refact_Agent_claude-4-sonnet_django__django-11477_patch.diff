diff --git a/django/urls/base.py b/django/urls/base.py
index 0e1c3d909c..dec3901d68 100644
--- a/django/urls/base.py
+++ b/django/urls/base.py
@@ -172,7 +172,9 @@ def translate_url(url, lang_code):
         to_be_reversed = "%s:%s" % (match.namespace, match.url_name) if match.namespace else match.url_name
         with override(lang_code):
             try:
-                url = reverse(to_be_reversed, args=match.args, kwargs=match.kwargs)
+                # Filter out None values from kwargs to handle optional named groups correctly
+                filtered_kwargs = {k: v for k, v in match.kwargs.items() if v is not None}
+                url = reverse(to_be_reversed, args=match.args, kwargs=filtered_kwargs)
             except NoReverseMatch:
                 pass
             else:
diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py
index 6ed2c4ffeb..8d79669999 100644
--- a/tests/i18n/patterns/tests.py
+++ b/tests/i18n/patterns/tests.py
@@ -163,6 +163,69 @@ class URLTranslationTests(URLTestCaseBase):
             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')
             self.assertEqual(translation.get_language(), 'nl')
 
+    def test_translate_url_with_optional_named_groups(self):
+        """
+        Test that translate_url() correctly handles URL patterns with optional
+        named groups that resolve to None values.
+        """
+        # Test URLs that would resolve with None values for optional groups
+        # These should translate correctly without generating 'None' literals
+        # or raising NoReverseMatch exceptions.
+        
+        # This test requires URL patterns with optional named groups.
+        # Since the default test URLs don't include such patterns,
+        # we'll create a minimal test to verify the fix works.
+        from django.urls import re_path, reverse, resolve
+        from django.conf.urls.i18n import i18n_patterns
+        from django.views.generic import TemplateView
+        from django.utils.translation import gettext_lazy as _
+        
+        # Create a test view
+        test_view = TemplateView.as_view(template_name='dummy.html')
+        
+        # Create test URL patterns with optional named groups
+        test_patterns = i18n_patterns(
+            re_path(_(r'^test-optional/(?P<arg1>\d+)/(?:(?P<arg2>\d+)/)?$'), test_view, name='test_optional'),
+        )
+        
+        # Temporarily override the URL patterns
+        from django.urls import clear_url_caches
+        from django.conf import settings
+        original_urlconf = settings.ROOT_URLCONF
+        
+        try:
+            # Create a temporary module with our test patterns
+            import types
+            import sys
+            temp_module = types.ModuleType('temp_test_urls')
+            temp_module.urlpatterns = test_patterns
+            sys.modules['temp_test_urls'] = temp_module
+            
+            # Override the ROOT_URLCONF
+            settings.ROOT_URLCONF = 'temp_test_urls'
+            clear_url_caches()
+            
+            # Test translate_url with optional named groups
+            with translation.override('en'):
+                # URL with only required parameter (arg2 will be None)
+                test_url = '/en/test-optional/123/'
+                translated = translate_url(test_url, 'nl')
+                # Should translate correctly without 'None' in the URL
+                self.assertEqual(translated, '/nl/test-optional/123/')
+                
+                # URL with both parameters
+                test_url_both = '/en/test-optional/123/456/'
+                translated_both = translate_url(test_url_both, 'nl')
+                self.assertEqual(translated_both, '/nl/test-optional/123/456/')
+                
+        finally:
+            # Restore original settings
+            settings.ROOT_URLCONF = original_urlconf
+            clear_url_caches()
+            # Clean up the temporary module
+            if 'temp_test_urls' in sys.modules:
+                del sys.modules['temp_test_urls']
+
 
 class URLNamespaceTests(URLTestCaseBase):
     """
