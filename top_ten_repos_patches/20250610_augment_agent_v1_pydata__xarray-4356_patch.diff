diff --git a/xarray/core/nanops.py b/xarray/core/nanops.py
index 41c8d258..6d2484d7 100644
--- a/xarray/core/nanops.py
+++ b/xarray/core/nanops.py
@@ -20,27 +20,53 @@ def _replace_nan(a, val):
     """
     mask = isnull(a)
     return where_method(val, mask, a), mask
 
 
+def _is_nat_type(result):
+    """
+    Check if result is a datetime or timedelta type that uses NaT.
+    This avoids the problematic comparison with dtypes.NAT_TYPES.
+    """
+    result_dtype = getattr(result, "dtype", None)
+    if result_dtype is None:
+        return False
+    
+    # Check if it's a datetime64 or timedelta64 dtype
+    return (
+        np.issubdtype(result_dtype, np.datetime64) or
+        np.issubdtype(result_dtype, np.timedelta64)
+    )
+
+
 def _maybe_null_out(result, axis, mask, min_count=1):
     """
     xarray version of pandas.core.nanops._maybe_null_out
     """
-    if hasattr(axis, "__len__"):  # if tuple or list
-        raise ValueError(
-            "min_count is not available for reduction with more than one dimensions."
-        )
-
-    if axis is not None and getattr(result, "ndim", False):
-        null_mask = (mask.shape[axis] - mask.sum(axis) - min_count) < 0
-        if null_mask.any():
-            dtype, fill_value = dtypes.maybe_promote(result.dtype)
-            result = result.astype(dtype)
-            result[null_mask] = fill_value
-
-    elif getattr(result, "dtype", None) not in dtypes.NAT_TYPES:
+    if axis is not None:
+        # Handle both single axis (int) and multiple axes (tuple/list)
+        if hasattr(axis, "__len__"):  # tuple or list
+            total_size = np.take(mask.shape, axis).prod()
+        else:  # single integer
+            total_size = mask.shape[axis]
+            
+        null_mask = (total_size - mask.sum(axis) - min_count) < 0
+        
+        # Check if result has dimensions (array) or is scalar
+        if getattr(result, "ndim", False):
+            # Result is an array
+            if null_mask.any():
+                dtype, fill_value = dtypes.maybe_promote(result.dtype)
+                result = result.astype(dtype)
+                result[null_mask] = fill_value
+        else:
+            # Result is a scalar
+            if null_mask:
+                result = np.nan
+
+    elif axis is None and not _is_nat_type(result):
+        # axis is None - reduce over all dimensions
         null_mask = mask.size - mask.sum()
         if null_mask < min_count:
             result = np.nan
 
     return result
