--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1049,24 +1049,70 @@
             # no lines in docstring, no match
             if not doclines:
                 continue
-            # match first line of docstring against signature RE
-            match = py_ext_sig_re.match(doclines[0])
-            if not match:
-                continue
-            exmod, path, base, args, retann = match.groups()
-            # the base name must match ours
-            valid_names = [self.objpath[-1]]  # type: ignore
+            
+            # Check for multiple overloaded signatures at the start of docstring
+            signatures = []
+            signature_lines_count = 0
+            valid_names = []
+            if self.objpath:
+                valid_names.append(self.objpath[-1])  # type: ignore
             if isinstance(self, ClassDocumenter):
                 valid_names.append('__init__')
                 if hasattr(self.object, '__mro__'):
                     valid_names.extend(cls.__name__ for cls in self.object.__mro__)
-            if base not in valid_names:
+            
+            # Find all consecutive signature lines at the beginning
+            for line_idx, line in enumerate(doclines):
+                match = py_ext_sig_re.match(line)
+                if not match:
+                    # No more signature lines
+                    break
+                exmod, path, base, args, retann = match.groups()
+                # the base name must match ours
+                if base not in valid_names:
+                    # Different method name, stop looking
+                    if line_idx == 0:
+                        # First line doesn't match, no signatures found
+                        break
+                    else:
+                        # Found some signatures already, stop here
+                        break
+                # Valid signature found
+                signatures.append((args, retann))
+                signature_lines_count += 1
+            
+            if not signatures:
                 continue
-            # re-prepare docstring to ignore more leading indentation
+                
+            # Process the found signatures
+            if len(signatures) == 1:
+                # Single signature, use existing behavior
+                args, retann = signatures[0]
+                result = args, retann
+            else:
+                # Multiple signatures - combine them
+                # For multiple signatures, we need to format them properly
+                # The format_signature method will wrap args in parentheses and add retann
+                # So we need to return the complete signature strings without extra formatting
+                combined_sigs = []
+                for args, retann in signatures:
+                    sig_line = f"({args}"
+                    if retann:
+                        sig_line += f") -> {retann}"
+                    else:
+                        sig_line += ")"
+                    combined_sigs.append(sig_line)
+                
+                # Join multiple signatures with newlines for display
+                # Return the combined signatures as args, with no separate retann
+                combined_args = "\n".join(combined_sigs)
+                result = combined_args, None
+            
+            # re-prepare docstring to ignore signature lines and more leading indentation
             tab_width = self.directive.state.document.settings.tab_width  # type: ignore
-            self._new_docstrings[i] = prepare_docstring('\n'.join(doclines[1:]),
+            remaining_lines = doclines[signature_lines_count:]
+            self._new_docstrings[i] = prepare_docstring('\n'.join(remaining_lines),
                                                         tabsize=tab_width)
-            result = args, retann
             # don't look any further
             break
         return result
