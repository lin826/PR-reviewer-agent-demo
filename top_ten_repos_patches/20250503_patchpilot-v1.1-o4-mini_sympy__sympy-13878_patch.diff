diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py
index e880705..ca2c6c9 100644
--- a/sympy/stats/crv_types.py
+++ b/sympy/stats/crv_types.py
@@ -2610,9 +2610,152 @@ def UniformSum(name, n):
     .. [2] http://mathworld.wolfram.com/UniformSumDistribution.html
     """
 
+
     return rv(name, UniformSumDistribution, (n, ))
 
 #-------------------------------------------------------------------------------
+# NOTE: The following helper installs closed‑form CDFs for a number of
+#       distributions whose CDFs are difficult to obtain by direct
+#       integration.  It is executed immediately so that every affected
+#       distribution gets an analytic `_cdf` attribute on import.
+def _install_precomputed_cdfs():
+    from sympy import (S, Piecewise, exp, sqrt, asin, lowergamma, uppergamma,
+                       gamma, pi, And, Eq, Interval, Dummy, floor, binomial,
+                       factorial, Sum, betainc)
+    from sympy import beta as beta_fn
+
+    # ------------------------------------------------------------------
+    # Arcsin
+    def _cdf_arcsin(self, x):
+        a, b = self.a, self.b
+        expr = S(2)/pi * asin(sqrt((x - a)/(b - a)))
+        return Piecewise(
+            (0, x < a),
+            (expr, And(x >= a, x <= b)),
+            (1, True)
+        )
+    ArcsinDistribution._cdf = _cdf_arcsin
+    if not hasattr(ArcsinDistribution, 'set'):
+        ArcsinDistribution.set = property(lambda self: Interval(self.a, self.b))
+
+    # ------------------------------------------------------------------
+    # Dagum
+    def _cdf_dagum(self, x):
+        p, a, b = self.p, self.a, self.b
+        expr = (1 + (x/b)**(-a))**(-p)
+        return Piecewise(
+            (0, x <= 0),
+            (expr, True)
+        )
+    DagumDistribution._cdf = _cdf_dagum
+
+    # ------------------------------------------------------------------
+    # Gamma (covers Erlang)
+    def _cdf_gamma(self, x):
+        k, theta = self.k, self.theta
+        expr = lowergamma(k, x/theta) / gamma(k)
+        return Piecewise(
+            (0, x < 0),
+            (expr, True)
+        )
+    GammaDistribution._cdf = _cdf_gamma
+
+    # ------------------------------------------------------------------
+    # Fréchet
+    def _cdf_frechet(self, x):
+        a, s, m = self.a, self.s, self.m
+        expr = exp(-((x - m)/s)**(-a))
+        return Piecewise(
+            (0, x < m),
+            (expr, True)
+        )
+    FrechetDistribution._cdf = _cdf_frechet
+
+    # ------------------------------------------------------------------
+    # Inverse‑Gamma
+    def _cdf_gammainv(self, x):
+        a, b = self.a, self.b
+        expr = uppergamma(a, b/x) / gamma(a)
+        return Piecewise(
+            (0, x <= 0),
+            (expr, True)
+        )
+    GammaInverseDistribution._cdf = _cdf_gammainv
+
+    # ------------------------------------------------------------------
+    # Kumaraswamy
+    def _cdf_kumaraswamy(self, x):
+        a, b = self.a, self.b
+        expr = 1 - (1 - x**a)**b
+        return Piecewise(
+            (0, x < 0),
+            (expr, And(x >= 0, x <= 1)),
+            (1, True)
+        )
+    KumaraswamyDistribution._cdf = _cdf_kumaraswamy
+
+    # ------------------------------------------------------------------
+    # Laplace
+    def _cdf_laplace(self, x):
+        mu, b = self.mu, self.b
+        return Piecewise(
+            (S.Half * exp((x - mu)/b), x < mu),
+            (1 - S.Half * exp(-(x - mu)/b), True)
+        )
+    LaplaceDistribution._cdf = _cdf_laplace
+
+    # ------------------------------------------------------------------
+    # Logistic
+    def _cdf_logistic(self, x):
+        mu, s = self.mu, self.s
+        return 1 / (1 + exp(-(x - mu)/s))
+    LogisticDistribution._cdf = _cdf_logistic
+
+    # ------------------------------------------------------------------
+    # Nakagami
+    def _cdf_nakagami(self, x):
+        mu, omega = self.mu, self.omega
+        expr = lowergamma(mu, mu/omega * x**2) / gamma(mu)
+        return Piecewise(
+            (0, x < 0),
+            (expr, True)
+        )
+    NakagamiDistribution._cdf = _cdf_nakagami
+
+    # ------------------------------------------------------------------
+    # Student‑t
+    def _cdf_studentt(self, x):
+        nu = self.nu
+        z = nu / (x**2 + nu)
+        w = betainc(nu/2, S(1)/2, 0, z) / beta_fn(nu/2, S(1)/2)
+        return Piecewise(
+            (w/2, x < 0),
+            (S.Half, Eq(x, 0)),
+            (1 - w/2, True)
+        )
+    StudentTDistribution._cdf = _cdf_studentt
+
+    # ------------------------------------------------------------------
+    # Uniform Sum (Irwin–Hall)
+    def _cdf_uniformsum(self, x):
+        n = self.n
+        k = Dummy("k")
+        expr = 1/factorial(n) * Sum(
+            (-1)**k * binomial(n, k) * (x - k)**n, (k, 0, floor(x))
+        )
+        return Piecewise(
+            (0, x < 0),
+            (1, x > n),
+            (expr, True)
+        )
+    UniformSumDistribution._cdf = _cdf_uniformsum
+
+
+# Execute the installer so that the CDFs are available immediately.
+_install_precomputed_cdfs()
+
+#-------------------------------------------------------------------------------
+
 # VonMises distribution --------------------------------------------------------
 
 
