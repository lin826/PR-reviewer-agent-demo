diff --git a/sympy/physics/quantum/dagger.py b/sympy/physics/quantum/dagger.py
index 17da3cfd2c..db344d064d 100644
--- a/sympy/physics/quantum/dagger.py
+++ b/sympy/physics/quantum/dagger.py
@@ -1,10 +1,10 @@
 """Hermitian conjugation."""
 
 from __future__ import print_function, division
 
-from sympy.core import Expr
+from sympy.core import Expr, Mul
 from sympy.functions.elementary.complexes import adjoint
 
 __all__ = [
     'Dagger'
 ]
@@ -83,7 +83,28 @@ def __new__(cls, arg):
             obj = arg.conjugate().transpose()
         if obj is not None:
             return obj
         return Expr.__new__(cls, arg)
 
+    def __mul__(self, other):
+        # Import here to avoid circular imports
+        from sympy.physics.quantum.operator import IdentityOperator
+        
+        if isinstance(other, IdentityOperator):
+            return self
+        
+        return Mul(self, other)
+
+# Add the __mul__ method to the adjoint class as well, since Dagger objects
+# are often instances of adjoint, not Dagger
+def _adjoint_mul(self, other):
+    # Import here to avoid circular imports
+    from sympy.physics.quantum.operator import IdentityOperator
+    
+    if isinstance(other, IdentityOperator):
+        return self
+    
+    return Mul(self, other)
+
+adjoint.__mul__ = _adjoint_mul
 adjoint.__name__ = "Dagger"
 adjoint._sympyrepr = lambda a, b: "Dagger(%s)" % b._print(a.args[0])
diff --git a/sympy/physics/quantum/operator.py b/sympy/physics/quantum/operator.py
index 306bfee64f..32f63424c7 100644
--- a/sympy/physics/quantum/operator.py
+++ b/sympy/physics/quantum/operator.py
@@ -304,13 +304,18 @@ def _print_contents_pretty(self, printer, *args):
 
     def _print_contents_latex(self, printer, *args):
         return r'{\mathcal{I}}'
 
     def __mul__(self, other):
+        # Import here to avoid circular imports
+        from sympy.physics.quantum.dagger import Dagger
+        from sympy.functions.elementary.complexes import adjoint
 
         if isinstance(other, Operator):
             return other
+        elif isinstance(other, (Dagger, adjoint)):
+            return other
 
         return Mul(self, other)
 
     def _represent_default_basis(self, **options):
         if not self.N or self.N == oo:
