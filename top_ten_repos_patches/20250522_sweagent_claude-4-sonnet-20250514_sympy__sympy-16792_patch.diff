diff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py
index f0befb2bd7..ab3e65f3af 100644
--- a/sympy/utilities/codegen.py
+++ b/sympy/utilities/codegen.py
@@ -700,14 +700,25 @@ def routine(self, name, expr, argument_sequence=None, global_vars=None):
             array_symbols[array.base.label] = array
         for array in expressions.atoms(MatrixSymbol) | local_expressions.atoms(MatrixSymbol):
             array_symbols[array] = array
+        
+        # Also include array symbols from argument_sequence that might not appear in expressions
+        if argument_sequence is not None:
+            for arg in argument_sequence:
+                if isinstance(arg, MatrixSymbol):
+                    array_symbols[arg] = arg
+                elif isinstance(arg, IndexedBase):
+                    array_symbols[arg.label] = arg
 
         for symbol in sorted(symbols, key=str):
             if symbol in array_symbols:
-                dims = []
                 array = array_symbols[symbol]
-                for dim in array.shape:
-                    dims.append((S.Zero, dim - 1))
-                metadata = {'dimensions': dims}
+                if hasattr(array, 'shape') and array.shape is not None:
+                    dims = []
+                    for dim in array.shape:
+                        dims.append((S.Zero, dim - 1))
+                    metadata = {'dimensions': dims}
+                else:
+                    metadata = {}
             else:
                 metadata = {}
 
@@ -739,7 +750,19 @@ def routine(self, name, expr, argument_sequence=None, global_vars=None):
                 try:
                     new_args.append(name_arg_dict[symbol])
                 except KeyError:
-                    new_args.append(InputArgument(symbol))
+                    # Check if this symbol is a MatrixSymbol or IndexedBase that needs dimensions
+                    if symbol in array_symbols:
+                        array = array_symbols[symbol]
+                        if hasattr(array, 'shape') and array.shape is not None:
+                            dims = []
+                            for dim in array.shape:
+                                dims.append((S.Zero, dim - 1))
+                            metadata = {'dimensions': dims}
+                        else:
+                            metadata = {}
+                    else:
+                        metadata = {}
+                    new_args.append(InputArgument(symbol, **metadata))
             arg_list = new_args
 
         return Routine(name, arg_list, return_val, local_vars, global_vars)
