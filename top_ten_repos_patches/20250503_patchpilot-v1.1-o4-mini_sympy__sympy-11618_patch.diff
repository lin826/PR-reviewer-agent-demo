diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 7c58cbf..256e507 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -266,8 +266,19 @@ class Point(GeometryEntity):
         sqrt(x**2 + y**2)
 
         """
-        return sqrt(sum([(a - b)**2 for a, b in zip(
-            self.args, p.args if isinstance(p, Point) else p)]))
+
+        # Ensure the other argument is a geometry Point instance
+        p = Point(p) if not isinstance(p, Point) else p
+        # Determine the maximal dimension of the two points
+        self_coords = list(self.args)
+        p_coords = list(p.args)
+        dim = max(len(self_coords), len(p_coords))
+        # Pad each coordinate list with zeros so their lengths match
+        self_coords += [S.Zero] * (dim - len(self_coords))
+        p_coords += [S.Zero] * (dim - len(p_coords))
+        # Compute the Euclidean distance across all dimensions
+        return sqrt(sum((a - b)**2 for a, b in zip(self_coords, p_coords)))
+
 
     def taxicab_distance(self, p):
         """The Taxicab Distance from self to point p.
@@ -299,8 +310,19 @@ class Point(GeometryEntity):
         7
 
         """
-        p = Point(p)
-        return sum(abs(a - b) for a, b in zip(self.args, p.args))
+
+        # Ensure the other argument is a geometry Point instance
+        p = Point(p) if not isinstance(p, Point) else p
+        # Determine the maximal dimension of the two points
+        self_coords = list(self.args)
+        p_coords = list(p.args)
+        dim = max(len(self_coords), len(p_coords))
+        # Pad each coordinate list with zeros so their lengths match
+        self_coords += [S.Zero] * (dim - len(self_coords))
+        p_coords += [S.Zero] * (dim - len(p_coords))
+        # Compute the Taxicab distance across all dimensions
+        return sum(abs(a - b) for a, b in zip(self_coords, p_coords))
+
 
     def midpoint(self, p):
         """The midpoint between self and point p.
