diff --git a/setup.py b/setup.py
index a0c8ac102..2ef89ef1a 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index 000e2e8d3..e75c30da5 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -1128,6 +1128,7 @@ class PythonDomain(Domain):
         """Find a Python object for "name", perhaps using the given module
         and/or classname.  Returns a list of (name, object entry) tuples.
         """
+
         # skip parens
         if name[-2:] == '()':
             name = name[:-2]
@@ -1157,25 +1158,71 @@ class PythonDomain(Domain):
                     else:
                         # "fuzzy" searching mode
                         searchname = '.' + name
-                        matches = [(oname, self.objects[oname]) for oname in self.objects
-                                   if oname.endswith(searchname) and
-                                   self.objects[oname].objtype in objtypes]
+                        candidates = [(oname, self.objects[oname]) for oname in self.objects
+                                     if oname.endswith(searchname) and
+                                     self.objects[oname].objtype in objtypes]
+                        
+                        # Prioritize matches based on context
+                        if candidates:
+                            # If we have a current module and/or class context, prefer matches within that context
+                            context_matches = []
+                            module_matches = []
+                            
+                            for oname, obj in candidates:
+                                # Check if this match is within the current class context
+                                if modname and classname:
+                                    expected_prefix = modname + '.' + classname + '.'
+                                    if oname.startswith(expected_prefix):
+                                        context_matches.append((oname, obj))
+                                        continue
+                                
+                                # Check if this match is within the current module context
+                                if modname:
+                                    expected_prefix = modname + '.'
+                                    if oname.startswith(expected_prefix):
+                                        module_matches.append((oname, obj))
+                                        continue
+                            
+                            # Use the most specific matches available
+                            if context_matches:
+                                matches = context_matches
+                            elif module_matches:
+                                matches = module_matches
+                            else:
+                                # Only fall back to all candidates if no context-specific matches found
+                                matches = candidates
         else:
             # NOTE: searching for exact match, object type is not considered
-            if name in self.objects:
-                newname = name
-            elif type == 'mod':
-                # only exact matches allowed for modules
-                return []
+            # Try more specific matches first to avoid incorrect cross-references
+            if modname and classname and \
+                    modname + '.' + classname + '.' + name in self.objects:
+                newname = modname + '.' + classname + '.' + name
             elif classname and classname + '.' + name in self.objects:
                 newname = classname + '.' + name
             elif modname and modname + '.' + name in self.objects:
                 newname = modname + '.' + name
-            elif modname and classname and \
-                    modname + '.' + classname + '.' + name in self.objects:
-                newname = modname + '.' + classname + '.' + name
+            elif type == 'mod':
+                # only exact matches allowed for modules
+                return []
+            elif name in self.objects:
+                newname = name
+            else:
+                # If we have a module context but no class context, and we're looking for an attribute,
+                # search for any attribute with that name within the module
+                if modname and type == 'attr':
+                    module_prefix = modname + '.'
+                    candidates = [oname for oname in self.objects.keys() 
+                                 if oname.startswith(module_prefix) and oname.endswith('.' + name)
+                                 and self.objects[oname].objtype == 'attribute']
+                    if candidates:
+                        # If there's only one candidate, use it
+                        if len(candidates) == 1:
+                            newname = candidates[0]
+                        # If there are multiple candidates, we could potentially pick the "best" one
+                        # but for now, let's not match to avoid ambiguity
         if newname is not None:
             matches.append((newname, self.objects[newname]))
+
         return matches
 
     def resolve_xref(self, env: BuildEnvironment, fromdocname: str, builder: Builder,
diff --git a/tox.ini b/tox.ini
index bdf4c2ad3..b12166264 100644
--- a/tox.ini
+++ b/tox.ini
@@ -26,7 +26,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
