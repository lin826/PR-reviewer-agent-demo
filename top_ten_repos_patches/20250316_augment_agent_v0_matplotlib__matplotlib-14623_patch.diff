diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py
index da2dea6f57..4c6db91492 100644
--- a/lib/matplotlib/axes/_base.py
+++ b/lib/matplotlib/axes/_base.py
@@ -3262,12 +3262,21 @@ class _AxesBase(martist.Artist):
                 right = old_right
         if left == right:
             cbook._warn_external(
                 f"Attempting to set identical left == right == {left} results "
                 f"in singular transformations; automatically expanding.")
+        
+        # Store whether the axis was originally inverted
+        inverted = left > right
+        
         left, right = self.xaxis.get_major_locator().nonsingular(left, right)
         left, right = self.xaxis.limit_range_for_scale(left, right)
+        
+        # If the axis was originally inverted, but the limits have been
+        # swapped by nonsingular or limit_range_for_scale, swap them back
+        if inverted and left < right:
+            left, right = right, left
 
         self.viewLim.intervalx = (left, right)
         if auto is not None:
             self._autoscaleXon = bool(auto)
 
@@ -3642,12 +3651,21 @@ class _AxesBase(martist.Artist):
         if bottom == top:
             cbook._warn_external(
                 f"Attempting to set identical bottom == top == {bottom} "
                 f"results in singular transformations; automatically "
                 f"expanding.")
+        
+        # Store whether the axis was originally inverted
+        inverted = bottom > top
+        
         bottom, top = self.yaxis.get_major_locator().nonsingular(bottom, top)
         bottom, top = self.yaxis.limit_range_for_scale(bottom, top)
+        
+        # If the axis was originally inverted, but the limits have been
+        # swapped by nonsingular or limit_range_for_scale, swap them back
+        if inverted and bottom < top:
+            bottom, top = top, bottom
 
         self.viewLim.intervaly = (bottom, top)
         if auto is not None:
             self._autoscaleYon = bool(auto)
 
