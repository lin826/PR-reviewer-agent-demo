diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 09785e8586..c741b4aea9 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -450,8 +450,13 @@ class BaseDatabaseSchemaEditor:
 
         # Make M2M tables
         for field in model._meta.local_many_to_many:
-            if field.remote_field.through._meta.auto_created:
-                self.create_model(field.remote_field.through)
+            through = field.remote_field.through
+            # `through` may still be an unresolved string at this point if the
+            # intermediate model lives in another app whose migrations haven't
+            # been applied yet. Skip it gracefully until it turns into an
+            # actual model class.
+            if getattr(through, "_meta", None) is not None and through._meta.auto_created:
+                self.create_model(through)
 
     def delete_model(self, model):
         """Delete a model from the database."""
@@ -630,7 +635,11 @@ class BaseDatabaseSchemaEditor:
         involve adding a table instead (for M2M fields).
         """
         # Special-case implicit M2M tables
-        if field.many_to_many and field.remote_field.through._meta.auto_created:
+        if (
+            field.many_to_many
+            and getattr(field.remote_field.through, "_meta", None) is not None
+            and field.remote_field.through._meta.auto_created
+        ):
             return self.create_model(field.remote_field.through)
         # Get the column's definition
         definition, params = self.column_sql(model, field, include_default=True)
@@ -704,7 +713,11 @@ class BaseDatabaseSchemaEditor:
         but for M2Ms may involve deleting a table.
         """
         # Special-case implicit M2M tables
-        if field.many_to_many and field.remote_field.through._meta.auto_created:
+        if (
+            field.many_to_many
+            and getattr(field.remote_field.through, "_meta", None) is not None
+            and field.remote_field.through._meta.auto_created
+        ):
             return self.delete_model(field.remote_field.through)
         # It might not actually have a column behind it
         if field.db_parameters(connection=self.connection)["type"] is None:
