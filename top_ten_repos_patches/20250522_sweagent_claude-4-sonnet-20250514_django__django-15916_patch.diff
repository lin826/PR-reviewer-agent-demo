diff --git a/django/forms/models.py b/django/forms/models.py
index 192d9fad94..fb201f78c7 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -253,6 +253,7 @@ class ModelFormOptions:
         self.help_texts = getattr(options, "help_texts", None)
         self.error_messages = getattr(options, "error_messages", None)
         self.field_classes = getattr(options, "field_classes", None)
+        self.formfield_callback = getattr(options, "formfield_callback", None)
 
 
 class ModelFormMetaclass(DeclarativeFieldsMetaclass):
@@ -263,7 +264,15 @@ class ModelFormMetaclass(DeclarativeFieldsMetaclass):
                 base_formfield_callback = b.Meta.formfield_callback
                 break
 
-        formfield_callback = attrs.pop("formfield_callback", base_formfield_callback)
+        # Check if formfield_callback is defined in the current class's Meta
+        current_meta_callback = None
+        if "Meta" in attrs:
+            meta_class = attrs["Meta"]
+            if hasattr(meta_class, "formfield_callback"):
+                current_meta_callback = meta_class.formfield_callback
+        
+        # Precedence order: class attribute > current Meta > base Meta
+        formfield_callback = attrs.pop("formfield_callback", current_meta_callback or base_formfield_callback)
 
         new_class = super().__new__(mcs, name, bases, attrs)
 
@@ -630,6 +639,11 @@ def modelform_factory(
     # creating needs to inherit from the parent's inner meta.
     bases = (form.Meta,) if hasattr(form, "Meta") else ()
     Meta = type("Meta", bases, attrs)
+    
+    # If no explicit formfield_callback was provided, check if the base form has one
+    if formfield_callback is None and hasattr(form, "Meta") and hasattr(form.Meta, "formfield_callback"):
+        formfield_callback = form.Meta.formfield_callback
+    
     if formfield_callback:
         Meta.formfield_callback = staticmethod(formfield_callback)
     # Give this new form class a reasonable name.
