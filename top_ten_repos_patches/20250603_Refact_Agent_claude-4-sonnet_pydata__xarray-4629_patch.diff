diff --git a/xarray/core/merge.py b/xarray/core/merge.py
index ca4e29b6..dff00804 100644
--- a/xarray/core/merge.py
+++ b/xarray/core/merge.py
@@ -501,7 +501,7 @@ def merge_attrs(variable_attrs, combine_attrs):
     if combine_attrs == "drop":
         return {}
     elif combine_attrs == "override":
-        return variable_attrs[0]
+        return dict(variable_attrs[0])
     elif combine_attrs == "no_conflicts":
         result = dict(variable_attrs[0])
         for attrs in variable_attrs[1:]:
diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py
index 0994ed9a..2e32edb8 100644
--- a/xarray/tests/test_merge.py
+++ b/xarray/tests/test_merge.py
@@ -326,3 +326,39 @@ class TestMergeMethod:
         da = xr.DataArray(data=1, name="b")
 
         assert_identical(ds.merge(da), xr.merge([ds, da]))
+
+    def test_merge_attrs_override_independence(self):
+        """Test that combine_attrs='override' creates independent attrs copies.
+        
+        This test ensures that modifying the merged dataset's attrs does not
+        affect the original dataset's attrs (regression test for issue).
+        """
+        # Create datasets with different attrs
+        ds1 = xr.Dataset(attrs={'a': 'original_value', 'b': 1})
+        ds2 = xr.Dataset(attrs={'a': 'different_value', 'c': 2})
+        
+        # Store original attrs for comparison
+        original_ds1_attrs = dict(ds1.attrs)
+        original_ds2_attrs = dict(ds2.attrs)
+        
+        # Merge with combine_attrs='override' (should take attrs from first dataset)
+        merged = xr.merge([ds1, ds2], combine_attrs='override')
+        
+        # Verify merged dataset has attrs from first dataset
+        assert merged.attrs == {'a': 'original_value', 'b': 1}
+        
+        # Verify that merged attrs are independent objects
+        assert merged.attrs is not ds1.attrs
+        assert merged.attrs is not ds2.attrs
+        
+        # Modify merged dataset's attrs
+        merged.attrs['a'] = 'modified_value'
+        merged.attrs['new_key'] = 'new_value'
+        
+        # Verify original datasets' attrs are unchanged
+        assert ds1.attrs == original_ds1_attrs
+        assert ds2.attrs == original_ds2_attrs
+        
+        # Verify merged attrs were actually modified
+        assert merged.attrs['a'] == 'modified_value'
+        assert merged.attrs['new_key'] == 'new_value'
