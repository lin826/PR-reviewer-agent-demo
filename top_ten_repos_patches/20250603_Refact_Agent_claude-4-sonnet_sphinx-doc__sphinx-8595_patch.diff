diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index d85d79617..c9f90acca 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1074,7 +1074,7 @@ class ModuleDocumenter(Documenter):
     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:
         members = self.get_module_members()
         if want_all:
-            if not self.__all__:
+            if self.__all__ is None:
                 # for implicit module members, check __module__ to avoid
                 # documenting imported objects
                 return True, list(members.values())
diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py
index 39897eb7d..c667d50ec 100644
--- a/tests/test_ext_autodoc.py
+++ b/tests/test_ext_autodoc.py
@@ -738,6 +738,23 @@ def test_autodoc_ignore_module_all(app):
     ]
 
 
+@pytest.mark.sphinx('html', testroot='ext-autodoc')
+def test_autodoc_empty_all(app):
+    # Test that empty __all__ = [] results in no documented members
+    options = {"members": None}
+    actual = do_autodoc(app, 'module', 'target.empty_all', options)
+    
+    # Filter out the module directive and empty lines
+    content_lines = [line for line in actual if line.strip() and not line.startswith('.. py:module::')]
+    
+    # Should only contain the module directive, no function/class directives
+    function_lines = [line for line in content_lines if '.. py:function::' in line]
+    class_lines = [line for line in content_lines if '.. py:class::' in line]
+    
+    assert function_lines == [], f"Expected no functions, but found: {function_lines}"
+    assert class_lines == [], f"Expected no classes, but found: {class_lines}"
+
+
 @pytest.mark.sphinx('html', testroot='ext-autodoc')
 def test_autodoc_noindex(app):
     options = {"noindex": True}
