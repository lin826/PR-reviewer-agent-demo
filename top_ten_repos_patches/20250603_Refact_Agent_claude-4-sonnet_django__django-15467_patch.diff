diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 64be087bf1..bf56ab6f0c 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -269,7 +269,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
                         "class": get_ul_class(self.radio_fields[db_field.name]),
                     }
                 )
-                kwargs["empty_label"] = _("None") if db_field.blank else None
+                kwargs.setdefault("empty_label", _("None") if db_field.blank else None)
 
         if "queryset" not in kwargs:
             queryset = self.get_field_queryset(db, db_field, request)
diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py
index ede1a09212..05b1f68a68 100644
--- a/tests/modeladmin/tests.py
+++ b/tests/modeladmin/tests.py
@@ -804,6 +804,63 @@ class ModelAdminTests(TestCase):
             "<ModelAdmin: model=Band site=AdminSite(name='admin')>",
         )
 
+    def test_custom_empty_label_preserved_for_radio_fields(self):
+        """
+        Test that a custom empty_label set in formfield_for_foreignkey 
+        is preserved when the field is in radio_fields and blank=True.
+        """
+        class CustomEmptyLabelAdmin(ModelAdmin):
+            radio_fields = {'opening_band': VERTICAL}
+            
+            def formfield_for_foreignkey(self, db_field, request, **kwargs):
+                if db_field.name == 'opening_band':
+                    kwargs['empty_label'] = "Select Opening Band"
+                return super().formfield_for_foreignkey(db_field, request, **kwargs)
+        
+        admin_instance = CustomEmptyLabelAdmin(Concert, self.site)
+        
+        # Get the form field for the opening_band field (which has blank=True)
+        opening_band_field = Concert._meta.get_field('opening_band')
+        formfield = admin_instance.formfield_for_foreignkey(opening_band_field, request)
+        
+        self.assertEqual(formfield.empty_label, "Select Opening Band")
+
+    def test_default_empty_label_for_radio_fields(self):
+        """
+        Test that the default empty_label "None" is used when no custom 
+        empty_label is provided for a blank=True field in radio_fields.
+        """
+        class DefaultEmptyLabelAdmin(ModelAdmin):
+            radio_fields = {'opening_band': VERTICAL}
+        
+        admin_instance = DefaultEmptyLabelAdmin(Concert, self.site)
+        
+        # Get the form field for the opening_band field (which has blank=True)
+        opening_band_field = Concert._meta.get_field('opening_band')
+        formfield = admin_instance.formfield_for_foreignkey(opening_band_field, request)
+        
+        self.assertEqual(formfield.empty_label, "None")
+
+    def test_custom_none_empty_label_preserved_for_radio_fields(self):
+        """
+        Test that explicitly setting empty_label to None is preserved.
+        """
+        class CustomNoneEmptyLabelAdmin(ModelAdmin):
+            radio_fields = {'opening_band': VERTICAL}
+            
+            def formfield_for_foreignkey(self, db_field, request, **kwargs):
+                if db_field.name == 'opening_band':
+                    kwargs['empty_label'] = None
+                return super().formfield_for_foreignkey(db_field, request, **kwargs)
+        
+        admin_instance = CustomNoneEmptyLabelAdmin(Concert, self.site)
+        
+        # Get the form field for the opening_band field (which has blank=True)
+        opening_band_field = Concert._meta.get_field('opening_band')
+        formfield = admin_instance.formfield_for_foreignkey(opening_band_field, request)
+        
+        self.assertIsNone(formfield.empty_label)
+
 
 class ModelAdminPermissionTests(SimpleTestCase):
     class MockUser:
