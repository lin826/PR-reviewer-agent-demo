diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index 9875a9f4b..1c74e545e 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -82,6 +82,13 @@ class ModuleEntry(NamedTuple):
 
 def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xref:
     """Convert a type string to a cross reference node."""
+    # Check for literal values that shouldn't be treated as class references
+    # Handle literals like True, False, None, numbers, and quoted strings
+    if text in ('True', 'False', 'None') or text.isdigit() or \
+       (text.startswith(("'", '"')) and text.endswith(("'", '"'))):
+        # Create a text node instead of a reference for literal values
+        return nodes.Text(text)
+            
     if text == 'None':
         reftype = 'obj'
     else:
@@ -1388,6 +1395,24 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment,
             s = s.split('.', 1)[1]
 
         return s in typing.__all__  # type: ignore
+        
+    # Check for literals in typing annotations
+    def is_literal_value(node_target: str) -> bool:
+        """Check if the reference target is likely a literal value in typing.Literal[]."""
+        # Look for common literal values
+        if node_target in ('True', 'False', 'None') or node_target.isdigit():
+            return True
+            
+        # Check for values like 'maybe' that might appear in typing.Literal
+        # by examining parent nodes to see if we're inside a Literal context
+        parent = node.parent
+        while parent is not None:
+            astext = parent.astext()
+            if 'Literal' in astext:
+                return True
+            parent = parent.parent
+            
+        return False
 
     if node.get('refdomain') != 'py':
         return None
@@ -1401,6 +1426,9 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment,
         elif istyping(reftarget):
             # typing class
             return contnode
+        elif is_literal_value(reftarget):
+            # Likely a literal value in a typing.Literal context
+            return contnode
 
     return None
 

