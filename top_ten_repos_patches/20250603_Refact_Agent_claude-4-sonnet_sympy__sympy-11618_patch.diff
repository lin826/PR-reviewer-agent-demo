diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 593048464b..2314d83563 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -21,6 +21,7 @@
 from sympy.core.numbers import Float
 from sympy.core.evaluate import global_evaluate
 from sympy.core.add import Add
+from itertools import zip_longest
 
 from .entity import GeometryEntity
 
@@ -266,8 +267,8 @@ def distance(self, p):
         sqrt(x**2 + y**2)
 
         """
-        return sqrt(sum([(a - b)**2 for a, b in zip(
-            self.args, p.args if isinstance(p, Point) else p)]))
+        return sqrt(sum([(a - b)**2 for a, b in zip_longest(
+            self.args, p.args if isinstance(p, Point) else p, fillvalue=0)]))
 
     def taxicab_distance(self, p):
         """The Taxicab Distance from self to point p.
@@ -300,7 +301,7 @@ def taxicab_distance(self, p):
 
         """
         p = Point(p)
-        return sum(abs(a - b) for a, b in zip(self.args, p.args))
+        return sum(abs(a - b) for a, b in zip_longest(self.args, p.args, fillvalue=0))
 
     def midpoint(self, p):
         """The midpoint between self and point p.
diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py
index c7b2d30f16..c5f5a941cb 100644
--- a/sympy/geometry/tests/test_point.py
+++ b/sympy/geometry/tests/test_point.py
@@ -260,3 +260,45 @@ def test_concyclic_doctest_bug():
     p3, p4 = Point(0, 1), Point(-1, 2)
     assert Point.is_concyclic(p1, p2, p3)
     assert not Point.is_concyclic(p1, p2, p3, p4)
+
+
+def test_mixed_dimension_distance():
+    """Test distance calculations between points of different dimensions."""
+    
+    # Test the original reported issue
+    p1 = Point(2, 0)
+    p2 = Point(1, 0, 2)
+    
+    # Should be sqrt((2-1)^2 + (0-0)^2 + (0-2)^2) = sqrt(1 + 0 + 4) = sqrt(5)
+    assert p1.distance(p2) == sqrt(5)
+    assert p2.distance(p1) == sqrt(5)
+    
+    # Test taxicab distance: |2-1| + |0-0| + |0-2| = 1 + 0 + 2 = 3
+    assert p1.taxicab_distance(p2) == 3
+    assert p2.taxicab_distance(p1) == 3
+    
+    # Test 2D to 3D with zero z-coordinate
+    p3 = Point(0, 0)
+    p4 = Point(3, 4, 0)
+    assert p3.distance(p4) == 5
+    assert p3.taxicab_distance(p4) == 7
+    
+    # Test 3D to 2D with non-zero z-coordinate
+    p5 = Point(0, 0, 5)
+    p6 = Point(0, 0)
+    assert p5.distance(p6) == 5
+    assert p5.taxicab_distance(p6) == 5
+    
+    # Test 1D to 3D
+    p7 = Point(5)
+    p8 = Point(0, 0, 0)
+    assert p7.distance(p8) == 5
+    assert p7.taxicab_distance(p8) == 5
+    
+    # Test general case
+    p9 = Point(1, 2, 3)
+    p10 = Point(4, 6)
+    # Distance: sqrt((4-1)^2 + (6-2)^2 + (0-3)^2) = sqrt(9 + 16 + 9) = sqrt(34)
+    assert p9.distance(p10) == sqrt(34)
+    # Taxicab: |4-1| + |6-2| + |0-3| = 3 + 4 + 3 = 10
+    assert p9.taxicab_distance(p10) == 10
