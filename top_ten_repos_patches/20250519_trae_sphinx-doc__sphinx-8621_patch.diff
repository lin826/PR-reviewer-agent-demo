diff --git a/sphinx/builders/html/transforms.py b/sphinx/builders/html/transforms.py
index c91da57e9..60fb3c1be 100644
--- a/sphinx/builders/html/transforms.py
+++ b/sphinx/builders/html/transforms.py
@@ -42,21 +42,49 @@ class KeyboardTransform(SphinxPostTransform):
     def run(self, **kwargs: Any) -> None:
         matcher = NodeMatcher(nodes.literal, classes=["kbd"])
         for node in self.document.traverse(matcher):  # type: nodes.literal
-            parts = self.pattern.split(node[-1].astext())
+            content = node[-1].astext()
+            
+            # Special case: if content is a single character that would be a separator,
+            # don't split it - treat it as a literal key
+            if content in ('-', '+', '^'):
+                continue
+                
+            # Process the text to handle complex key combinations
+            # First split by whitespace to get key combinations
+            parts = self.pattern.split(content)
             if len(parts) == 1:
                 continue
 
             node.pop()
-            while parts:
-                key = parts.pop(0)
-                node += nodes.literal('', key, classes=["kbd"])
-
-                try:
-                    # key separator (ex. -, +, ^)
-                    sep = parts.pop(0)
+            i = 0
+            while i < len(parts):
+                # Get current part
+                key = parts[i]
+                i += 1
+                
+                # Only add a kbd node if the key part is non-empty
+                if key:
+                    node += nodes.literal('', key, classes=["kbd"])
+
+                # Check if we have a separator next
+                if i < len(parts):
+                    sep = parts[i]
+                    i += 1
+                    
+                    # Add separator
                     node += nodes.Text(sep)
-                except IndexError:
-                    pass
+                    
+                    # If the next item is empty (happens when two separators are adjacent)
+                    # and the next item is followed by another separator,
+                    # then the empty item + this separator is actually a key
+                    if i < len(parts) and not parts[i] and i+1 < len(parts):
+                        # Skip the empty part
+                        i += 1
+                        # Get the separator that should be treated as a key
+                        sep_as_key = parts[i]
+                        i += 1
+                        # Add it as a key, not as a separator
+                        node += nodes.literal('', sep_as_key, classes=["kbd"])
 
 
 def setup(app: Sphinx) -> Dict[str, Any]:

