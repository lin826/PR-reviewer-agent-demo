diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py
index fff7da80ae..1db39349b9 100644
--- a/sympy/stats/crv_types.py
+++ b/sympy/stats/crv_types.py
@@ -47,7 +47,7 @@
 
 from sympy import (log, sqrt, pi, S, Dummy, Interval, sympify, gamma,
                    Piecewise, And, Eq, binomial, factorial, Sum, floor, Abs,
-                   Lambda, Basic, lowergamma, erf, erfc, I)
+                   Lambda, Basic, lowergamma, erf, erfc, I, asin)
 from sympy import beta as beta_fn
 from sympy import cos, exp, besseli
 from sympy.stats.crv import (SingleContinuousPSpace, SingleContinuousDistribution,
@@ -153,6 +153,14 @@ class ArcsinDistribution(SingleContinuousDistribution):
     def pdf(self, x):
         return 1/(pi*sqrt((x - self.a)*(self.b - x)))
 
+    def _cdf(self, x):
+        a, b = self.a, self.b
+        return Piecewise(
+            (S.Zero, x < a),
+            ((2/pi)*asin(sqrt((x - a)/(b - a))), x <= b),
+            (S.One, True)
+        )
+
 def Arcsin(name, a=0, b=1):
     r"""
     Create a Continuous Random Variable with an arcsin distribution.
@@ -670,6 +678,13 @@ def pdf(self, x):
         p, a, b = self.p, self.a, self.b
         return a*p/x*((x/b)**(a*p)/(((x/b)**a + 1)**(p + 1)))
 
+    def _cdf(self, x):
+        p, a, b = self.p, self.a, self.b
+        return Piecewise(
+            (S.Zero, x <= 0),
+            (S.One - (S.One + (x/b)**a)**(-p), True)
+        )
+
 
 def Dagum(name, p, a, b):
     r"""
@@ -1041,6 +1056,13 @@ def __new__(cls, a, s=1, m=0):
     def pdf(self, x):
         a, s, m = self.a, self.s, self.m
         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))
+        
+    def _cdf(self, x):
+        a, s, m = self.a, self.s, self.m
+        return Piecewise(
+            (S.Zero, x <= m),
+            (exp(-((x - m)/s)**(-a)), True)
+        )
 
 def Frechet(name, a, s=1, m=0):
     r"""
@@ -1111,6 +1133,13 @@ def pdf(self, x):
     def sample(self):
         return random.gammavariate(self.k, self.theta)
 
+    def _cdf(self, x):
+        k, theta = self.k, self.theta
+        return Piecewise(
+            (S.Zero, x < 0),
+            (lowergamma(k, x/theta)/gamma(k), True)
+        )
+
 
 def Gamma(name, k, theta):
     r"""
@@ -1199,6 +1228,14 @@ def check(a, b):
     def pdf(self, x):
         a, b = self.a, self.b
         return b**a/gamma(a) * x**(-a-1) * exp(-b/x)
+        
+    def _cdf(self, x):
+        a, b = self.a, self.b
+        from sympy import uppergamma
+        return Piecewise(
+            (S.Zero, x <= 0),
+            (uppergamma(a, b/x)/gamma(a), True)
+        )
 
 def GammaInverse(name, a, b):
     r"""
@@ -1381,6 +1418,14 @@ def check(a, b):
         _value_check(a > 0, "a must be positive")
         _value_check(b > 0, "b must be positive")
 
+    def _cdf(self, x):
+        a, b = self.a, self.b
+        return Piecewise(
+            (S.Zero, x < 0),
+            (S.One - (S.One - x**a)**b, x <= 1),
+            (S.One, True)
+        )
+
     def pdf(self, x):
         a, b = self.a, self.b
         return a * b * x**(a-1) * (1-x**a)**(b-1)
@@ -1445,6 +1490,13 @@ def pdf(self, x):
         mu, b = self.mu, self.b
         return 1/(2*b)*exp(-Abs(x - mu)/b)
 
+    def _cdf(self, x):
+        mu, b = self.mu, self.b
+        return Piecewise(
+            (S.Half*exp((x - mu)/b), x < mu),
+            (S.One - S.Half*exp(-(x - mu)/b), True)
+        )
+
 
 def Laplace(name, mu, b):
     r"""
@@ -1500,6 +1552,10 @@ class LogisticDistribution(SingleContinuousDistribution):
     def pdf(self, x):
         mu, s = self.mu, self.s
         return exp(-(x - mu)/s)/(s*(1 + exp(-(x - mu)/s))**2)
+        
+    def _cdf(self, x):
+        mu, s = self.mu, self.s
+        return S.One/(S.One + exp(-(x - mu)/s))
 
 
 def Logistic(name, mu, s):
@@ -1711,6 +1767,12 @@ def pdf(self, x):
         mu, omega = self.mu, self.omega
         return 2*mu**mu/(gamma(mu)*omega**mu)*x**(2*mu - 1)*exp(-mu/omega*x**2)
 
+    def _cdf(self, x):
+        mu, omega = self.mu, self.omega
+        return Piecewise(
+            (S.Zero, x <= 0),
+            (lowergamma(mu, (mu/omega)*x**2)/gamma(mu), True)
+        )
 
 def Nakagami(name, mu, omega):
     r"""
@@ -2226,6 +2288,15 @@ class StudentTDistribution(SingleContinuousDistribution):
     def pdf(self, x):
         nu = self.nu
         return 1/(sqrt(nu)*beta_fn(S(1)/2, nu/2))*(1 + x**2/nu)**(-(nu + 1)/2)
+        
+    def _cdf(self, x):
+        nu = self.nu
+        from sympy import hyper
+        return Piecewise(
+            (S.Half + x*gamma((nu+1)/2)/(sqrt(nu*pi)*gamma(nu/2)) *
+             hyper([S.Half, (nu+1)/2], [S(3)/2], -x**2/nu), x >= 0),
+            (S.One - self._cdf(-x), True)
+        )
 
 
 def StudentT(name, nu):
@@ -2551,8 +2622,17 @@ def set(self):
     def pdf(self, x):
         n = self.n
         k = Dummy("k")
-        return 1/factorial(
-            n - 1)*Sum((-1)**k*binomial(n, k)*(x - k)**(n - 1), (k, 0, floor(x)))
+        return 1/factorial(n - 1)*Sum((-1)**k*binomial(n, k)*(x - k)**(n - 1), (k, 0, floor(x)))
+        
+    def _cdf(self, x):
+        n = self.n
+        k = floor(x)
+        i = Dummy("i")
+        return Piecewise(
+            (S.Zero, x < 0),
+            (Sum((-1)**i * binomial(n, i) * (x - i)**n, (i, 0, k)) / factorial(n), x <= n),
+            (S.One, True)
+        )
 
 
 

