diff --git a/astropy/table/table.py b/astropy/table/table.py
index 5afe2127a3..c613bc5eff 100644
--- a/astropy/table/table.py
+++ b/astropy/table/table.py
@@ -1243,6 +1243,11 @@ class Table:
         # mixin class
         if (not isinstance(data, Column) and not data_is_mixin
                 and isinstance(data, np.ndarray) and len(data.dtype) > 1):
+            warnings.warn("Structured arrays are automatically converted to NdarrayMixin, "
+                         "which may not always be desirable. To avoid this warning, "
+                         "explicitly wrap the array with Column(). In astropy 5.2, "
+                         "structured arrays will be added as Column by default.",
+                         FutureWarning, stacklevel=4)
             data = data.view(NdarrayMixin)
             data_is_mixin = True
 
diff --git a/astropy/table/tests/test_mixin.py b/astropy/table/tests/test_mixin.py
index 2fdcd20d8f..7f282ce19f 100644
--- a/astropy/table/tests/test_mixin.py
+++ b/astropy/table/tests/test_mixin.py
@@ -4,6 +4,7 @@
 
 import copy
 import pickle
+import warnings
 from io import StringIO
 
 import pytest
@@ -712,10 +713,14 @@ def test_ndarray_mixin():
     d = np.arange(8, dtype='i8').reshape(4, 2).view(NdarrayMixin)
 
     # Add one during initialization and the next as a new column.
-    t = Table([a], names=['a'])
-    t['b'] = b
-    t['c'] = c
-    t['d'] = d
+    # These should issue FutureWarnings
+    with pytest.warns(FutureWarning, match=r"Structured arrays are automatically converted.*Column\(\).*5\.2"):
+        t = Table([a], names=['a'])
+    with pytest.warns(FutureWarning, match=r"Structured arrays are automatically converted.*Column\(\).*5\.2"):
+        t['b'] = b
+    with pytest.warns(FutureWarning, match=r"Structured arrays are automatically converted.*Column\(\).*5\.2"):
+        t['c'] = c
+    t['d'] = d  # This is already an NdarrayMixin, so no warning
 
     assert isinstance(t['a'], NdarrayMixin)
 
@@ -759,6 +764,42 @@ def test_ndarray_mixin():
         "     (4, 'd')    (40, 'dd')   (400., 'rdd')   6 .. 7"]
 
 
+def test_structured_array_future_warning():
+    """
+    Test that a FutureWarning is issued when adding structured arrays to Table
+    and that the warning can be avoided by wrapping in Column().
+    """
+    # Create a structured array
+    structured_array = np.array([(1, 'a'), (2, 'b')], dtype=[('x', 'i4'), ('y', 'U1')])
+    
+    # Test that warning is issued for direct assignment
+    with pytest.warns(FutureWarning, match=r"Structured arrays are automatically converted.*Column\(\).*5\.2"):
+        t = Table()
+        t['col'] = structured_array
+        assert isinstance(t['col'], NdarrayMixin)
+    
+    # Test that warning is issued for table initialization
+    with pytest.warns(FutureWarning, match=r"Structured arrays are automatically converted.*Column\(\).*5\.2"):
+        t2 = Table([structured_array], names=['col'])
+        assert isinstance(t2['col'], NdarrayMixin)
+    
+    # Test that no warning is issued when using Column wrapper
+    with warnings.catch_warnings():
+        warnings.simplefilter("error")  # Turn warnings into errors
+        t3 = Table()
+        t3['col'] = Column(structured_array)
+        assert isinstance(t3['col'], Column)
+        assert not isinstance(t3['col'], NdarrayMixin)
+    
+    # Test that no warning is issued for regular arrays
+    regular_array = np.array([1, 2, 3])
+    with warnings.catch_warnings():
+        warnings.simplefilter("error")  # Turn warnings into errors
+        t4 = Table()
+        t4['col'] = regular_array
+        assert isinstance(t4['col'], Column)
+
+
 def test_possible_string_format_functions():
     """
     The QuantityInfo info class for Quantity implements a
