diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py
index 1dc0337c3..53f2c774b 100644
--- a/sphinx/builders/linkcheck.py
+++ b/sphinx/builders/linkcheck.py
@@ -20,7 +20,7 @@ from urllib.parse import unquote, urlparse
 
 from docutils import nodes
 from docutils.nodes import Node
-from requests.exceptions import HTTPError
+from requests.exceptions import HTTPError, TooManyRedirects
 
 from sphinx.application import Sphinx
 from sphinx.builders import Builder
@@ -172,21 +172,27 @@ class CheckExternalLinksBuilder(Builder):
                                                  config=self.app.config, auth=auth_info,
                                                  **kwargs)
                         response.raise_for_status()
-                    except HTTPError:
+                    except (HTTPError, TooManyRedirects) as err:
                         # retry with GET request if that fails, some servers
                         # don't like HEAD requests.
                         response = requests.get(req_url, stream=True, config=self.app.config,
                                                 auth=auth_info, **kwargs)
                         response.raise_for_status()
+            # ------------------------ result handling ------------------------
+            # HTTPError carries a Response; TooManyRedirects usually does not.
             except HTTPError as err:
-                if err.response.status_code == 401:
+                if err.response is not None and err.response.status_code == 401:
                     # We'll take "Unauthorized" as working.
                     return 'working', ' - unauthorized', 0
-                elif err.response.status_code == 503:
+                elif err.response is not None and err.response.status_code == 503:
                     # We'll take "Service Unavailable" as ignored.
                     return 'ignored', str(err), 0
                 else:
                     return 'broken', str(err), 0
+            except TooManyRedirects as err:
+                # Redirect-loop: mark as broken (after GET-fallback already
+                # attempted) â€“ no response object is available here.
+                return 'broken', str(err), 0
             except Exception as err:
                 return 'broken', str(err), 0
             if response.url.rstrip('/') == req_url.rstrip('/'):
