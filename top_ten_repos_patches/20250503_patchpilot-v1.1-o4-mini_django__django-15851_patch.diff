diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index 55aff39..ea0cbcd 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -30,11 +30,14 @@ class DatabaseClient(BaseDatabaseClient):
             args += ["-U", user]
         if host:
             args += ["-h", host]
+
         if port:
             args += ["-p", str(port)]
+        args.extend(parameters)
+
         if dbname:
             args += [dbname]
-        args.extend(parameters)
+
 
         env = {}
         if passwd:
@@ -61,4 +64,4 @@ class DatabaseClient(BaseDatabaseClient):
             super().runshell(parameters)
         finally:
             # Restore the original SIGINT handler.
-            signal.signal(signal.SIGINT, sigint_handler)
+            signal.signal(signal.SIGINT, sigint_handler)
diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py
index d629a04..ae8b39f 100644
--- a/tests/dbshell/test_postgresql.py
+++ b/tests/dbshell/test_postgresql.py
@@ -153,8 +153,10 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
 
     def test_parameters(self):
         self.assertEqual(
+
             self.settings_to_cmd_args_env({"NAME": "dbname"}, ["--help"]),
-            (["psql", "dbname", "--help"], None),
+            (["psql", "--help", "dbname"], None),
+
         )
 
     @skipUnless(connection.vendor == "postgresql", "Requires a PostgreSQL connection")
@@ -183,4 +185,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
         args[0:1] = [sys.executable, str(fake_client)]
         with self.assertRaises(subprocess.CalledProcessError) as ctx:
             subprocess.run(args, check=True, env=env)
-        self.assertNotIn("somepassword", str(ctx.exception))
+        self.assertNotIn("somepassword", str(ctx.exception))
