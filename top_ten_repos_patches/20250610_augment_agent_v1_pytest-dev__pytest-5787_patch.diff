diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py
index 4682d5b6e..772c1c71b 100644
--- a/src/_pytest/reports.py
+++ b/src/_pytest/reports.py
@@ -2,10 +2,11 @@ from pprint import pprint
 from typing import Optional
 
 import py
 
 from _pytest._code.code import ExceptionInfo
+from _pytest._code.code import ExceptionChainRepr
 from _pytest._code.code import ReprEntry
 from _pytest._code.code import ReprEntryNative
 from _pytest._code.code import ReprExceptionInfo
 from _pytest._code.code import ReprFileLocation
 from _pytest._code.code import ReprFuncArgs
@@ -160,31 +161,90 @@ class BaseReport:
 
         Experimental method.
         """
 
         def disassembled_report(rep):
-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()
-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()
-
-            new_entries = []
-            for entry in reprtraceback["reprentries"]:
-                entry_data = {
-                    "type": type(entry).__name__,
-                    "data": entry.__dict__.copy(),
+            # Handle ExceptionChainRepr (chained exceptions)
+            if isinstance(rep.longrepr, ExceptionChainRepr):
+                # Check if this is a real chain (more than 1 exception) or just a single exception
+                if len(rep.longrepr.chain) > 1:
+                    # Multiple exceptions - serialize as chain
+                    chain_data = []
+                    for reprtraceback, reprcrash, descr in rep.longrepr.chain:
+                        # Serialize each traceback in the chain
+                        tb_data = reprtraceback.__dict__.copy()
+                        crash_data = reprcrash.__dict__.copy() if reprcrash else None
+                        
+                        new_entries = []
+                        for entry in tb_data["reprentries"]:
+                            entry_data = {
+                                "type": type(entry).__name__,
+                                "data": entry.__dict__.copy(),
+                            }
+                            for key, value in entry_data["data"].items():
+                                if hasattr(value, "__dict__"):
+                                    entry_data["data"][key] = value.__dict__.copy()
+                            new_entries.append(entry_data)
+                        
+                        tb_data["reprentries"] = new_entries
+                        
+                        chain_data.append({
+                            "reprtraceback": tb_data,
+                            "reprcrash": crash_data,
+                            "descr": descr,
+                        })
+                    
+                    return {
+                        "chain": chain_data,
+                        "sections": rep.longrepr.sections,
+                    }
+                else:
+                    # Single exception - serialize using old format for backward compatibility
+                    reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()
+                    reprcrash = rep.longrepr.reprcrash.__dict__.copy()
+
+                    new_entries = []
+                    for entry in reprtraceback["reprentries"]:
+                        entry_data = {
+                            "type": type(entry).__name__,
+                            "data": entry.__dict__.copy(),
+                        }
+                        for key, value in entry_data["data"].items():
+                            if hasattr(value, "__dict__"):
+                                entry_data["data"][key] = value.__dict__.copy()
+                        new_entries.append(entry_data)
+
+                    reprtraceback["reprentries"] = new_entries
+
+                    return {
+                        "reprcrash": reprcrash,
+                        "reprtraceback": reprtraceback,
+                        "sections": rep.longrepr.sections,
+                    }
+            else:
+                # Handle single exception (ReprExceptionInfo) - old format
+                reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()
+                reprcrash = rep.longrepr.reprcrash.__dict__.copy()
+
+                new_entries = []
+                for entry in reprtraceback["reprentries"]:
+                    entry_data = {
+                        "type": type(entry).__name__,
+                        "data": entry.__dict__.copy(),
+                    }
+                    for key, value in entry_data["data"].items():
+                        if hasattr(value, "__dict__"):
+                            entry_data["data"][key] = value.__dict__.copy()
+                    new_entries.append(entry_data)
+
+                reprtraceback["reprentries"] = new_entries
+
+                return {
+                    "reprcrash": reprcrash,
+                    "reprtraceback": reprtraceback,
+                    "sections": rep.longrepr.sections,
                 }
-                for key, value in entry_data["data"].items():
-                    if hasattr(value, "__dict__"):
-                        entry_data["data"][key] = value.__dict__.copy()
-                new_entries.append(entry_data)
-
-            reprtraceback["reprentries"] = new_entries
-
-            return {
-                "reprcrash": reprcrash,
-                "reprtraceback": reprtraceback,
-                "sections": rep.longrepr.sections,
-            }
 
         d = self.__dict__.copy()
         if hasattr(self.longrepr, "toterminal"):
             if hasattr(self.longrepr, "reprtraceback") and hasattr(
                 self.longrepr, "reprcrash"
@@ -210,15 +270,65 @@ class BaseReport:
         class. It's the callers responsibility to know which class to pass here.
 
         Experimental method.
         """
         if reportdict["longrepr"]:
-            if (
+            # Handle ExceptionChainRepr (chained exceptions)
+            if "chain" in reportdict["longrepr"]:
+                chain_data = []
+                for chain_entry in reportdict["longrepr"]["chain"]:
+                    reprtraceback = chain_entry["reprtraceback"]
+                    reprcrash = chain_entry["reprcrash"]
+                    descr = chain_entry["descr"]
+                    
+                    # Deserialize traceback entries
+                    unserialized_entries = []
+                    for entry_data in reprtraceback["reprentries"]:
+                        data = entry_data["data"]
+                        entry_type = entry_data["type"]
+                        if entry_type == "ReprEntry":
+                            reprfuncargs = None
+                            reprfileloc = None
+                            reprlocals = None
+                            if data["reprfuncargs"]:
+                                reprfuncargs = ReprFuncArgs(**data["reprfuncargs"])
+                            if data["reprfileloc"]:
+                                reprfileloc = ReprFileLocation(**data["reprfileloc"])
+                            if data["reprlocals"]:
+                                reprlocals = ReprLocals(data["reprlocals"]["lines"])
+
+                            reprentry = ReprEntry(
+                                lines=data["lines"],
+                                reprfuncargs=reprfuncargs,
+                                reprlocals=reprlocals,
+                                filelocrepr=reprfileloc,
+                                style=data["style"],
+                            )
+                        elif entry_type == "ReprEntryNative":
+                            reprentry = ReprEntryNative(data["lines"])
+                        else:
+                            _report_unserialization_failure(entry_type, cls, reportdict)
+                        unserialized_entries.append(reprentry)
+                    reprtraceback["reprentries"] = unserialized_entries
+                    
+                    # Create the traceback and crash objects
+                    tb_obj = ReprTraceback(**reprtraceback)
+                    crash_obj = ReprFileLocation(**reprcrash) if reprcrash else None
+                    
+                    chain_data.append((tb_obj, crash_obj, descr))
+                
+                # Create ExceptionChainRepr
+                exception_chain = ExceptionChainRepr(chain_data)
+                for section in reportdict["longrepr"]["sections"]:
+                    exception_chain.addsection(*section)
+                reportdict["longrepr"] = exception_chain
+                
+            elif (
                 "reprcrash" in reportdict["longrepr"]
                 and "reprtraceback" in reportdict["longrepr"]
             ):
-
+                # Handle single exception (ReprExceptionInfo)
                 reprtraceback = reportdict["longrepr"]["reprtraceback"]
                 reprcrash = reportdict["longrepr"]["reprcrash"]
 
                 unserialized_entries = []
                 reprentry = None
diff --git a/testing/test_reports.py b/testing/test_reports.py
index b8b1a5406..4165563fb 100644
--- a/testing/test_reports.py
+++ b/testing/test_reports.py
@@ -309,5 +309,81 @@ class TestHooks:
         data["_report_type"] = "Unknown"
         with pytest.raises(AssertionError):
             _ = pytestconfig.hook.pytest_report_from_serializable(
                 config=pytestconfig, data=data
             )
+
+    def test_chained_exception_serialization(self, testdir):
+        """Test that chained exceptions are properly serialized and deserialized."""
+        testdir.makepyfile(
+            """
+            def test_chained_exception_with_from():
+                try:
+                    try:
+                        raise ValueError(11)
+                    except Exception as e1:
+                        raise ValueError(12) from e1
+                except Exception as e2:
+                    raise ValueError(13) from e2
+
+            def test_chained_exception_without_from():
+                try:
+                    try:
+                        raise ValueError(21)
+                    except Exception:
+                        raise ValueError(22)
+                except Exception:
+                    raise ValueError(23)
+        """
+        )
+        reprec = testdir.inline_run()
+        reports = reprec.getreports("pytest_runtest_logreport")
+        
+        # Find the failed test reports
+        failed_reports = [r for r in reports if r.outcome == "failed" and r.when == "call"]
+        assert len(failed_reports) == 2
+        
+        for report in failed_reports:
+            # Check that the original report has chained exceptions
+            from _pytest._code.code import ExceptionChainRepr
+            assert isinstance(report.longrepr, ExceptionChainRepr)
+            assert len(report.longrepr.chain) == 3  # Should have 3 exceptions in chain
+            
+            # Test serialization
+            serialized = report._to_json()
+            assert "chain" in serialized["longrepr"]
+            assert len(serialized["longrepr"]["chain"]) == 3
+            
+            # Test deserialization
+            deserialized_report = TestReport._from_json(serialized)
+            assert isinstance(deserialized_report.longrepr, ExceptionChainRepr)
+            assert len(deserialized_report.longrepr.chain) == 3
+            
+            # Test that the output is the same
+            import io
+            import py
+            
+            original_output = io.StringIO()
+            tw1 = py.io.TerminalWriter(file=original_output)
+            report.longrepr.toterminal(tw1)
+            
+            deserialized_output = io.StringIO()
+            tw2 = py.io.TerminalWriter(file=deserialized_output)
+            deserialized_report.longrepr.toterminal(tw2)
+            
+            assert original_output.getvalue() == deserialized_output.getvalue()
+            
+            # Verify that all exceptions in the chain are present in the output
+            output = original_output.getvalue()
+            # Check if this is the "with from" test by looking at the nodeid
+            if "with_from" in report.nodeid:
+                # For the "with from" test
+                assert "ValueError: 11" in output
+                assert "ValueError: 12" in output  
+                assert "ValueError: 13" in output
+                assert "direct cause" in output
+            else:
+                # For the "without from" test
+                assert "ValueError: 21" in output
+                assert "ValueError: 22" in output
+                assert "ValueError: 23" in output
+                assert "During handling" in output
