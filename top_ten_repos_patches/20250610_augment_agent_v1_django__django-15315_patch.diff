diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 88c9ca9f28..fcea1597ef 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -540,15 +540,11 @@ class Field(RegisterLookupMixin):
                     (other.model._meta.app_label, other.model._meta.model_name)
                 )
         return NotImplemented
 
     def __hash__(self):
-        return hash((
-            self.creation_counter,
-            self.model._meta.app_label if hasattr(self, 'model') else None,
-            self.model._meta.model_name if hasattr(self, 'model') else None,
-        ))
+        return hash(self.creation_counter)
 
     def __deepcopy__(self, memodict):
         # We don't have to deepcopy very much here, since most things are not
         # intended to be altered after initial creation.
         obj = copy.copy(self)
diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py
index 5208b40dc9..b3930da8b1 100644
--- a/tests/model_fields/tests.py
+++ b/tests/model_fields/tests.py
@@ -126,13 +126,21 @@ class BasicFieldTests(SimpleTestCase):
 
         self.assertLess(abstract_model_field, inherit1_model_field)
         self.assertLess(abstract_model_field, inherit2_model_field)
         self.assertLess(inherit1_model_field, inherit2_model_field)
 
-        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))
-        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))
-        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))
+        # Fields from abstract models may have the same hash (hash collisions are acceptable)
+        # but they should still be distinguishable in dictionaries due to equality checks
+        field_dict = {
+            abstract_model_field: 'abstract',
+            inherit1_model_field: 'inherit1', 
+            inherit2_model_field: 'inherit2',
+        }
+        self.assertEqual(len(field_dict), 3)
+        self.assertEqual(field_dict[abstract_model_field], 'abstract')
+        self.assertEqual(field_dict[inherit1_model_field], 'inherit1')
+        self.assertEqual(field_dict[inherit2_model_field], 'inherit2')
 
 
 class ChoicesTests(SimpleTestCase):
 
     @classmethod
