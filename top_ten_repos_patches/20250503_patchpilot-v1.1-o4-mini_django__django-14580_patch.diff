diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index 2848adce7d..20e31dcf65 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -1325,4 +1325,4 @@ class MigrationAutodetector:
         match = re.match(r'^\d+', name)
         if match:
             return int(match[0])
-        return None
+        return None
diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py
index a8a189f7d9..0ae169bf5b 100644
--- a/django/db/migrations/executor.py
+++ b/django/db/migrations/executor.py
@@ -369,4 +369,4 @@ class MigrationExecutor:
                     return False, project_state
         # If we get this far and we found at least one CreateModel or AddField migration,
         # the migration is considered implicitly applied.
-        return (found_create_model_migration or found_add_field_migration), after_state
+        return (found_create_model_migration or found_add_field_migration), after_state
diff --git a/django/db/migrations/migration.py b/django/db/migrations/migration.py
index 5ee0ae5191..557e76527f 100644
--- a/django/db/migrations/migration.py
+++ b/django/db/migrations/migration.py
@@ -215,4 +215,4 @@ class SwappableTuple(tuple):
 
 def swappable_dependency(value):
     """Turn a setting value into a dependency."""
-    return SwappableTuple((value.split(".", 1)[0], "__first__"), value)
+    return SwappableTuple((value.split(".", 1)[0], "__first__"), value)
diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py
index af9093c4e8..abbb697974 100644
--- a/django/db/migrations/state.py
+++ b/django/db/migrations/state.py
@@ -819,4 +819,4 @@ class ModelState:
             (self.options == other.options) and
             (self.bases == other.bases) and
             (self.managers == other.managers)
-        )
+        )
diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py
index 4918261fb0..45dd2af306 100644
--- a/django/db/migrations/writer.py
+++ b/django/db/migrations/writer.py
@@ -1,4 +1,3 @@
-
 import os
 import re
 from importlib import import_module
@@ -162,13 +161,26 @@ class MigrationWriter:
                 imports.remove(line)
                 self.needs_manual_porting = True
 
-        # django.db.migrations is always used, but models import may not be.
-        # If models import exists, merge it with migrations import.
-        if "from django.db import models" in imports:
-            imports.discard("from django.db import models")
-            imports.add("from django.db import migrations, models")
-        else:
-            imports.add("from django.db import migrations")
+
+        # django.db.migrations is always used. Detect if an explicit import
+        # for 'models' is required. This is the case when either the serializer
+        # has already added a standalone models import or any rendered
+        # operation contains an unqualified reference to `models.` (excluding
+        # references like `app.models.*`).
+
+        needs_models_import = (
+            "from django.db import models" in imports or
+            re.search(r'(?<!\.)models\.', items["operations"]) is not None
+        )
+        # Remove a previously merged migrations+models import, if present.
+        imports.discard("from django.db import migrations, models")
+        # Always ensure the migrations import is present.
+        imports.add("from django.db import migrations")
+        # Add a standalone models import if required.
+        if needs_models_import:
+            imports.add("from django.db import models")
+
+
 
         # Sort imports by the package / module to be imported (the part after
         # "from" in "from ... import ..." or after "import" in "import ...").
@@ -297,4 +309,4 @@ class Migration(migrations.Migration):
     operations = [
 %(operations)s\
     ]
-"""
+"""
