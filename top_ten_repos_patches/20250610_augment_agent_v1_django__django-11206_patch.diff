diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py
index 88b35fc435..9dfa62145a 100644
--- a/django/utils/numberformat.py
+++ b/django/utils/numberformat.py
@@ -29,10 +29,24 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',
     if isinstance(number, Decimal):
         # Format values with more than 200 digits (an arbitrary cutoff) using
         # scientific notation to avoid high memory usage in {:f}'.format().
         _, digits, exponent = number.as_tuple()
         if abs(exponent) + len(digits) > 200:
+            # When decimal_pos is specified and we have a very small number,
+            # check if it's a simple case like 1e-300 (single digit) that would round to zero
+            if decimal_pos is not None and exponent < 0 and len(digits) == 1:
+                # For very small single-digit numbers, check if they round to zero
+                # A number rounds to zero if abs(number) < 0.5 * 10^(-decimal_pos)
+                threshold = Decimal(10) ** (-decimal_pos - 1) * 5  # 0.5 * 10^(-decimal_pos)
+                if abs(number) < threshold:
+                    # Return zero-padded string directly
+                    sign = '-' if number < 0 else ''
+                    if decimal_pos > 0:
+                        return sign + '0' + decimal_sep + '0' * decimal_pos
+                    else:
+                        return sign + '0'
+            # Use exponential notation for large numbers or complex small numbers
             number = '{:e}'.format(number)
             coefficient, exponent = number.split('e')
             # Format the coefficient.
             coefficient = format(
                 coefficient, decimal_sep, decimal_pos, grouping,
