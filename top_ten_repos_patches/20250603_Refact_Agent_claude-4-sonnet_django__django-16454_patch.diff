diff --git a/django/core/management/base.py b/django/core/management/base.py
index abc6f79a15..0e236a5e1e 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -71,6 +71,29 @@ class CommandParser(ArgumentParser):
         else:
             raise CommandError("Error: %s" % message)
 
+    def add_subparsers(self, **kwargs):
+        """
+        Override add_subparsers to ensure subparsers inherit the parent's
+        called_from_command_line and missing_args_message attributes.
+        """
+        # Get the subparser action from the parent class
+        subparsers_action = super().add_subparsers(**kwargs)
+        
+        # Store the original add_parser method
+        original_add_parser = subparsers_action.add_parser
+        
+        # Create a wrapper that passes our special attributes to subparsers
+        def add_parser_with_inheritance(*args, **parser_kwargs):
+            # Inject our special attributes if not already specified
+            parser_kwargs.setdefault('called_from_command_line', self.called_from_command_line)
+            parser_kwargs.setdefault('missing_args_message', self.missing_args_message)
+            return original_add_parser(*args, **parser_kwargs)
+        
+        # Replace the add_parser method with our wrapper
+        subparsers_action.add_parser = add_parser_with_inheritance
+        
+        return subparsers_action
+
 
 def handle_default_options(options):
     """
diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py
index e40632385c..c17575addc 100644
--- a/tests/user_commands/tests.py
+++ b/tests/user_commands/tests.py
@@ -418,6 +418,29 @@ class CommandTests(SimpleTestCase):
         self.assertEqual(parser.epilog, epilog)
         self.assertEqual(parser.formatter_class, ArgumentDefaultsHelpFormatter)
 
+    def test_subparser_error_formatting_command_line(self):
+        """
+        Test that subparsers show proper usage messages when called from command line.
+        """
+        from user_commands.management.commands.subparser_error_formatting import Command
+        from io import StringIO
+        
+        # Test missing subcommand argument when called from command line
+        command = Command(stderr=StringIO())
+        with self.assertRaises(SystemExit) as cm:
+            command.run_from_argv(["manage.py", "subparser_error_formatting", "create"])
+        # Should exit with code 2 (argparse error), not raise CommandError
+        self.assertEqual(cm.exception.code, 2)
+
+    def test_subparser_error_formatting_programmatic(self):
+        """
+        Test that subparsers raise CommandError when called programmatically.
+        """
+        # Test missing subcommand argument when called programmatically
+        msg = "Error: the following arguments are required: name"
+        with self.assertRaisesMessage(CommandError, msg):
+            management.call_command("subparser_error_formatting", "create")
+
     def test_outputwrapper_flush(self):
         out = StringIO()
         with mock.patch.object(out, "flush") as mocked_flush:
