diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py
index 52711d1324..71d5d6c34b 100644
--- a/sympy/parsing/sympy_parser.py
+++ b/sympy/parsing/sympy_parser.py
@@ -1110,6 +1110,14 @@ class EvaluateFalseTransformer(ast.NodeTransformer):
         ast.BitAnd: 'And',
         ast.BitXor: 'Not',
     }
+    compare_operators = {
+        ast.Lt: 'Lt',
+        ast.LtE: 'Le',
+        ast.Gt: 'Gt',
+        ast.GtE: 'Ge',
+        ast.Eq: 'Eq',
+        ast.NotEq: 'Ne',
+    }
     functions = (
         'Abs', 'im', 're', 'sign', 'arg', 'conjugate',
         'acos', 'acot', 'acsc', 'asec', 'asin', 'atan',
@@ -1191,6 +1199,29 @@ def visit_Call(self, node):
         if isinstance(node.func, ast.Name) and node.func.id in self.functions:
             new_node.keywords.append(ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load())))
         return new_node
+        
+    def visit_Compare(self, node):
+        # Handle comparison operations (e.g., <, >, <=, >=, ==, !=)
+        # In Python's AST, a comparison like "a < b < c" is represented as a single Compare node
+        # with multiple operators and comparators. For simplicity, we'll only handle the case
+        # with a single operator (e.g., "a < b").
+        if len(node.ops) == 1 and node.ops[0].__class__ in self.compare_operators:
+            op_class = node.ops[0].__class__
+            sympy_class = self.compare_operators[op_class]
+            left = self.visit(node.left)
+            right = self.visit(node.comparators[0])
+            
+            new_node = ast.Call(
+                func=ast.Name(id=sympy_class, ctx=ast.Load()),
+                args=[left, right],
+                keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],
+                starargs=None,
+                kwargs=None
+            )
+            return new_node
+        else:
+            # For more complex comparisons or unsupported operators, fall back to the default behavior
+            return self.generic_visit(node)
 
 
 _transformation = {  # items can be added but never re-ordered
