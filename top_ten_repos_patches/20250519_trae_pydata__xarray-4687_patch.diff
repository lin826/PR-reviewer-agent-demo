diff --git a/xarray/core/computation.py b/xarray/core/computation.py
index 9fe93c88..4b76ca5c 100644
--- a/xarray/core/computation.py
+++ b/xarray/core/computation.py
@@ -1727,7 +1727,7 @@ def dot(*arrays, dims=None, **kwargs):
     return result.transpose(*all_dims, missing_dims="ignore")
 
 
-def where(cond, x, y):
+def where(cond, x, y, keep_attrs=True):
     """Return elements from `x` or `y` depending on `cond`.
 
     Performs xarray-like broadcasting across input arguments.
@@ -1743,6 +1743,9 @@ def where(cond, x, y):
         values to choose from where `cond` is True
     y : scalar, array, Variable, DataArray or Dataset
         values to choose from where `cond` is False
+    keep_attrs : bool, optional
+        Whether to preserve attributes from either `x` or `y` argument in the output
+        DataArray or Dataset. Default is True.
 
     Returns
     -------
@@ -1809,7 +1812,11 @@ def where(cond, x, y):
         equivalent methods
     """
     # alignment for three arguments is complicated, so don't support it yet
-    return apply_ufunc(
+    from .dataarray import DataArray
+    from .dataset import Dataset
+    
+    # This is a wrapper function that preserves attributes from x or y
+    result = apply_ufunc(
         duck_array_ops.where,
         cond,
         x,
@@ -1818,6 +1825,21 @@ def where(cond, x, y):
         dataset_join="exact",
         dask="allowed",
     )
+    
+    if keep_attrs:
+        # Try to get attrs from x or y, whichever has them
+        if hasattr(x, 'attrs') and x.attrs:
+            result_attrs = dict(x.attrs)
+        elif hasattr(y, 'attrs') and y.attrs:
+            result_attrs = dict(y.attrs)
+        else:
+            return result
+            
+        # Assign the attrs to the result
+        if isinstance(result, (DataArray, Dataset)):
+            result.attrs.update(result_attrs)
+            
+    return result
 
 
 def polyval(coord, coeffs, degree_dim="degree"):

