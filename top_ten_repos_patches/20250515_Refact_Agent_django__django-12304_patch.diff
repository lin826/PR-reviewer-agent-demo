diff --git a/django/db/models/enums.py b/django/db/models/enums.py
index f48143ddaf..2c3e9021e5 100644
--- a/django/db/models/enums.py
+++ b/django/db/models/enums.py
@@ -31,6 +31,20 @@ class ChoicesMeta(enum.EnumMeta):
         # that is passed in as "self" as the value to use when looking up the
         # label in the choices.
         cls.label = property(lambda self: cls._value2label_map_.get(self.value))
+        # ------------------------------------------------------------------
+        # Prevent Django's template engine from auto-invoking the *class*
+        # object (Enum members themselves are not callable).  The engine looks
+        # for an attribute called `do_not_call_in_templates` **on the class
+        # itself** and, if present/True, skips the automatic `()` call in
+        # Variable._resolve_lookup().
+        #
+        # The attribute must be injected by the metaclass â€“ *not* written as a
+        # lowercase symbol in the body of `Choices`, because every lower-case
+        # symbol would be treated as an extra Enum member, making the class an
+        # "already-defined" enumeration and breaking all subclasses
+        # (EnumMeta forbids extending enumerations that already have members).
+        # ------------------------------------------------------------------
+        cls.do_not_call_in_templates = True
         return enum.unique(cls)
 
     def __contains__(cls, member):
@@ -60,7 +74,7 @@ class ChoicesMeta(enum.EnumMeta):
 
 class Choices(enum.Enum, metaclass=ChoicesMeta):
     """Class for creating enumerated choices."""
-
+    
     def __str__(self):
         """
         Use value when cast to str, so that Choices set as model instance
