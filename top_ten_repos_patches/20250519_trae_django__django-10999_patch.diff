diff --git a/django/utils/dateparse.py b/django/utils/dateparse.py
index 8d08b7d1d3..5dc5bdf7a5 100644
--- a/django/utils/dateparse.py
+++ b/django/utils/dateparse.py
@@ -29,9 +29,11 @@ datetime_re = re.compile(
 standard_duration_re = re.compile(
     r'^'
     r'(?:(?P<days>-?\d+) (days?, )?)?'
-    r'((?:(?P<hours>-?\d+):)(?=\d+:\d+))?'
-    r'(?:(?P<minutes>-?\d+):)?'
-    r'(?P<seconds>-?\d+)'
+    r'('
+        r'(?:(?P<hours>-?\d+)::(?P<seconds_hours_only>-?\d+))|'  # Format: hours::seconds
+        r'(?:(?P<hours_alone>-?\d+):(?!\d+:)(?P<seconds_no_minutes>-?\d+)?)|'  # Format: hours: or hours:seconds
+        r'(?:(?P<hours_normal>-?\d+):(?P<minutes>-?\d+):(?P<seconds>-?\d+))'  # Format: hours:minutes:seconds
+    r')'
     r'(?:\.(?P<microseconds>\d{1,6})\d{0,6})?'
     r'$'
 )
@@ -138,9 +140,32 @@ def parse_duration(value):
         kw = match.groupdict()
         days = datetime.timedelta(float(kw.pop('days', 0) or 0))
         sign = -1 if kw.pop('sign', '+') == '-' else 1
+        
+        # Normalize the hours components from different regex patterns
+        if kw.get('hours_normal') is not None:
+            kw['hours'] = kw.pop('hours_normal')
+        elif kw.get('hours_alone') is not None:
+            kw['hours'] = kw.pop('hours_alone')
+        
+        # Handle seconds from different regex patterns
+        if kw.get('seconds_no_minutes') is not None:
+            kw['seconds'] = kw.pop('seconds_no_minutes')
+        elif kw.get('seconds_hours_only') is not None:
+            kw['seconds'] = kw.pop('seconds_hours_only')
+            
+        # Handle empty seconds in 'hours:' format
+        if kw.get('seconds') is None and kw.get('minutes') is None:
+            kw['seconds'] = '0'
+            
         if kw.get('microseconds'):
             kw['microseconds'] = kw['microseconds'].ljust(6, '0')
         if kw.get('seconds') and kw.get('microseconds') and kw['seconds'].startswith('-'):
             kw['microseconds'] = '-' + kw['microseconds']
+        
+        # Remove any unused keys from the regex patterns
+        for key in list(kw.keys()):
+            if key in ['hours_normal', 'hours_alone', 'seconds_no_minutes', 'seconds_hours_only']:
+                kw.pop(key, None)
+                
         kw = {k: float(v) for k, v in kw.items() if v is not None}
         return days + sign * datetime.timedelta(**kw)

