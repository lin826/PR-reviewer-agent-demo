diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index 842b73e95c..f4bc74b7cd 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -1155,11 +1155,11 @@ class SelectDateWidget(Widget):
         if y is not None and m is not None and d is not None:
             input_format = get_format("DATE_INPUT_FORMATS")[0]
             input_format = formats.sanitize_strftime_format(input_format)
             try:
                 date_value = datetime.date(int(y), int(m), int(d))
-            except ValueError:
+            except (ValueError, OverflowError):
                 # Return pseudo-ISO dates with zeros for any unselected values,
                 # e.g. '2017-0-23'.
                 return "%s-%s-%s" % (y or 0, m or 0, d or 0)
             return date_value.strftime(input_format)
         return data.get(name)
diff --git a/tests/forms_tests/widget_tests/test_selectdatewidget.py b/tests/forms_tests/widget_tests/test_selectdatewidget.py
index cfcd037987..a045fd78a0 100644
--- a/tests/forms_tests/widget_tests/test_selectdatewidget.py
+++ b/tests/forms_tests/widget_tests/test_selectdatewidget.py
@@ -619,10 +619,35 @@ class SelectDateWidgetTest(WidgetTest):
                         data["field_%s" % field_name] = value
                 self.assertEqual(
                     self.widget.value_from_datadict(data, {}, "field"), expected
                 )
 
+    def test_value_from_datadict_overflow_error(self):
+        """
+        Test that OverflowError is handled gracefully when very large integers
+        are provided for date components.
+        """
+        # Test with very large positive year that causes OverflowError
+        data = {"field_year": "1234567821345678", "field_month": "1", "field_day": "1"}
+        result = self.widget.value_from_datadict(data, {}, "field")
+        self.assertEqual(result, "1234567821345678-1-1")
+        
+        # Test with very large negative year that causes OverflowError
+        data = {"field_year": "-1234567821345678", "field_month": "1", "field_day": "1"}
+        result = self.widget.value_from_datadict(data, {}, "field")
+        self.assertEqual(result, "-1234567821345678-1-1")
+        
+        # Test with large month value
+        data = {"field_year": "2023", "field_month": "1234567821345678", "field_day": "1"}
+        result = self.widget.value_from_datadict(data, {}, "field")
+        self.assertEqual(result, "2023-1234567821345678-1")
+        
+        # Test with large day value
+        data = {"field_year": "2023", "field_month": "1", "field_day": "1234567821345678"}
+        result = self.widget.value_from_datadict(data, {}, "field")
+        self.assertEqual(result, "2023-1-1234567821345678")
+
     def test_value_omitted_from_data(self):
         self.assertIs(self.widget.value_omitted_from_data({}, {}, "field"), True)
         self.assertIs(
             self.widget.value_omitted_from_data({"field_month": "12"}, {}, "field"),
             False,
