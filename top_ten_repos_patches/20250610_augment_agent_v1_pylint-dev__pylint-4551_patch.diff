diff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py
index 8fa122022..d10782034 100644
--- a/pylint/pyreverse/inspector.py
+++ b/pylint/pyreverse/inspector.py
@@ -229,12 +229,46 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):
 
         handle instance_attrs_type
         """
         try:
             values = set(node.infer())
+            annotation_values = set()
+            
+            # Check if the assignment comes from a parameter with type annotation
+            if (hasattr(node, 'parent') and 
+                isinstance(node.parent, astroid.Assign) and
+                isinstance(node.parent.value, astroid.Name)):
+                
+                assign_node = node.parent
+                value_name = assign_node.value.name
+                frame = assign_node.value.frame()
+                
+                # Check if this is a function with type annotations
+                if (isinstance(frame, astroid.FunctionDef) and 
+                    hasattr(frame, 'args') and 
+                    hasattr(frame.args, 'annotations')):
+                    
+                    # Find the parameter with matching name
+                    for i, arg in enumerate(frame.args.args):
+                        if arg.name == value_name and i < len(frame.args.annotations):
+                            annotation = frame.args.annotations[i]
+                            if annotation:
+                                # Get the annotation type
+                                annotation_values = set(annotation.infer())
+                                break
+            
+            # If we have type annotation, prioritize it over inferred values
+            if annotation_values:
+                # Filter out NoneType from inferred values if we have a type annotation
+                # This handles cases like "a: str = None" where we want to show "str" not "NoneType, str"
+                filtered_values = {v for v in values if not (hasattr(v, 'name') and v.name == 'NoneType')}
+                final_values = annotation_values | filtered_values
+            else:
+                final_values = values
+            
             current = set(parent.instance_attrs_type[node.attrname])
-            parent.instance_attrs_type[node.attrname] = list(current | values)
+            parent.instance_attrs_type[node.attrname] = list(current | final_values)
         except astroid.InferenceError:
             pass
 
     def visit_import(self, node):
         """visit an astroid.Import node
