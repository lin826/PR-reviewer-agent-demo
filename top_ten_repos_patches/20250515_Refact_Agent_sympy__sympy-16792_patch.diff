diff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py
index f0befb2bd7..abad24460d 100644
--- a/sympy/utilities/codegen.py
+++ b/sympy/utilities/codegen.py
@@ -701,16 +701,25 @@ def routine(self, name, expr, argument_sequence=None, global_vars=None):
         for array in expressions.atoms(MatrixSymbol) | local_expressions.atoms(MatrixSymbol):
             array_symbols[array] = array
 
-        for symbol in sorted(symbols, key=str):
+        def _get_symbol_metadata(symbol):
+            """Helper function to get metadata for a symbol, including dimensions for MatrixSymbols"""
             if symbol in array_symbols:
                 dims = []
                 array = array_symbols[symbol]
                 for dim in array.shape:
                     dims.append((S.Zero, dim - 1))
-                metadata = {'dimensions': dims}
+                return {'dimensions': dims}
+            elif isinstance(symbol, MatrixSymbol):
+                # Handle MatrixSymbols that don't appear in the expression
+                dims = []
+                for dim in symbol.shape:
+                    dims.append((S.Zero, dim - 1))
+                return {'dimensions': dims}
             else:
-                metadata = {}
+                return {}
 
+        for symbol in sorted(symbols, key=str):
+            metadata = _get_symbol_metadata(symbol)
             arg_list.append(InputArgument(symbol, **metadata))
 
         output_args.sort(key=lambda x: str(x.name))
@@ -739,7 +748,8 @@ def routine(self, name, expr, argument_sequence=None, global_vars=None):
                 try:
                     new_args.append(name_arg_dict[symbol])
                 except KeyError:
-                    new_args.append(InputArgument(symbol))
+                    metadata = _get_symbol_metadata(symbol)
+                    new_args.append(InputArgument(symbol, **metadata))
             arg_list = new_args
 
         return Routine(name, arg_list, return_val, local_vars, global_vars)
@@ -1402,7 +1412,8 @@ def routine(self, name, expr, argument_sequence, global_vars):
                 try:
                     new_args.append(name_arg_dict[symbol])
                 except KeyError:
-                    new_args.append(InputArgument(symbol))
+                    metadata = _get_symbol_metadata(symbol)
+                    new_args.append(InputArgument(symbol, **metadata))
             arg_list = new_args
 
         return Routine(name, arg_list, return_vals, local_vars, global_vars)
@@ -1610,7 +1621,8 @@ def routine(self, name, expr, argument_sequence, global_vars):
                 try:
                     new_args.append(name_arg_dict[symbol])
                 except KeyError:
-                    new_args.append(InputArgument(symbol))
+                    metadata = _get_symbol_metadata(symbol)
+                    new_args.append(InputArgument(symbol, **metadata))
             arg_list = new_args
 
         return Routine(name, arg_list, return_vals, local_vars, global_vars)
@@ -1841,7 +1853,8 @@ def routine(self, name, expr, argument_sequence, global_vars):
                 try:
                     new_args.append(name_arg_dict[symbol])
                 except KeyError:
-                    new_args.append(InputArgument(symbol))
+                    metadata = _get_symbol_metadata(symbol)
+                    new_args.append(InputArgument(symbol, **metadata))
             arg_list = new_args
 
         return Routine(name, arg_list, return_vals, local_vars, global_vars)
