diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py
index afd36d79e0..94538e9e72 100644
--- a/django/utils/dateformat.py
+++ b/django/utils/dateformat.py
@@ -325,8 +325,8 @@ class DateFormat(TimeFormat):
         return self.data.isocalendar()[1]
 
     def y(self):
-        "Year, 2 digits; e.g. '99'"
-        return str(self.data.year)[2:]
+        "Year, 2 digits with leading zeros; e.g. '99', '03'"
+        return '%02d' % (self.data.year % 100)
 
     def Y(self):
         "Year, 4 digits; e.g. '1999'"
diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py
index d050ac4352..2c115ab5d4 100644
--- a/tests/utils_tests/test_dateformat.py
+++ b/tests/utils_tests/test_dateformat.py
@@ -115,6 +115,14 @@ class DateFormatTests(SimpleTestCase):
     def test_futuredates(self):
         the_future = datetime(2100, 10, 25, 0, 00)
         self.assertEqual(dateformat.format(the_future, r'Y'), '2100')
+        
+    def test_two_digit_years_pre_1000(self):
+        """Test that years < 1000 are correctly formatted with leading zeros."""
+        self.assertEqual(dateformat.format(datetime(3, 1, 1), 'y'), '03')
+        self.assertEqual(dateformat.format(datetime(23, 1, 1), 'y'), '23')
+        self.assertEqual(dateformat.format(datetime(123, 1, 1), 'y'), '23')
+        self.assertEqual(dateformat.format(datetime(100, 1, 1), 'y'), '00')
+        self.assertEqual(dateformat.format(datetime(101, 1, 1), 'y'), '01')
 
     def test_day_of_year_leap(self):
         self.assertEqual(dateformat.format(datetime(2000, 12, 31), 'z'), '366')
