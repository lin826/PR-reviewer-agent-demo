diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py
index e78d679..77ee41c 100644
--- a/sympy/sets/sets.py
+++ b/sympy/sets/sets.py
@@ -216,8 +216,33 @@ class Set(Basic):
         elif isinstance(other, EmptySet):
             return S.EmptySet
 
+
         elif isinstance(other, FiniteSet):
-            return FiniteSet(*[el for el in other if self.contains(el) != True])
+            # Build lists of elements definitely outside `self` and those
+            # whose membership is undecidable.
+            sure_outside = []
+            unknown = []
+            for el in other:
+                c = self.contains(el)
+                if c is S.false or c is False:
+                    sure_outside.append(el)
+                elif c is S.true or c is True:
+                    # Element is definitely inside `self`; exclude it.
+                    continue
+                else:
+                    unknown.append(el)
+
+            # Nothing remains.
+            if not sure_outside and not unknown:
+                return S.EmptySet
+
+            # All remaining elements are definitely outside.
+            if not unknown:
+                return FiniteSet(*sure_outside)
+
+            # Some elements have unknown membership; keep the complement symbolic.
+            return Complement(FiniteSet(*(sure_outside + unknown)), self, evaluate=False)
+
 
     def symmetric_difference(self, other):
         """
