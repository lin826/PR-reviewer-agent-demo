diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py
index 38158db956..c196876dce 100644
--- a/lib/matplotlib/cm.py
+++ b/lib/matplotlib/cm.py
@@ -143,11 +143,13 @@ class ColormapRegistry(Mapping):
 
             # Warn that we are updating an already existing colormap
             _api.warn_external(f"Overwriting the cmap {name!r} "
                                "that was already in the registry.")
 
-        self._cmaps[name] = cmap.copy()
+        copied_cmap = cmap.copy()
+        copied_cmap.name = name  # Update the name of the copy to match the registered name
+        self._cmaps[name] = copied_cmap
 
     def unregister(self, name):
         """
         Remove a colormap from the registry.
 
diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py
index 2e841699cd..2054f9625d 100644
--- a/lib/matplotlib/tests/test_colors.py
+++ b/lib/matplotlib/tests/test_colors.py
@@ -78,11 +78,18 @@ def test_register_cmap():
     with pytest.warns(
             mpl.MatplotlibDeprecationWarning,
             match=r"matplotlib\.colormaps\.register\(name\)"
     ):
         cm.register_cmap(target, new_cm)
-    assert mpl.colormaps[target] == new_cm
+    # The registered colormap should be a copy with the target name
+    registered_cm = mpl.colormaps[target]
+    assert registered_cm.name == target
+    # The original colormap should not be modified
+    assert new_cm.name == "viridis"
+    # The colormaps should be functionally equivalent
+    test_vals = np.linspace(0, 1, 10)
+    assert np.allclose(registered_cm(test_vals), new_cm(test_vals))
 
     with pytest.raises(ValueError,
                        match="Arguments must include a name or a Colormap"):
         with pytest.warns(
             mpl.MatplotlibDeprecationWarning,
@@ -145,11 +152,14 @@ def test_double_register_builtin_cmap():
             mpl.colormaps[name], name=name, force=True
         )
     with pytest.raises(ValueError, match='A colormap named "viridis"'):
         with pytest.warns(mpl.MatplotlibDeprecationWarning):
             cm.register_cmap(name, mpl.colormaps[name])
-    with pytest.warns(UserWarning):
+    with pytest.warns(
+            (UserWarning, mpl.MatplotlibDeprecationWarning),
+            match=r"(Overwriting the cmap|The register_cmap function was deprecated)"
+    ):
         # TODO is warning more than once!
         cm.register_cmap(name, mpl.colormaps[name], override_builtin=True)
 
 
 def test_unregister_builtin_cmap():
