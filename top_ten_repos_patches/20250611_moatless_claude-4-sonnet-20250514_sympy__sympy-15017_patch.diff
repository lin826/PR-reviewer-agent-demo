--- a/sympy/tensor/array/ndim_array.py
+++ b/sympy/tensor/array/ndim_array.py
@@ -66,6 +66,8 @@
     def _parse_index(self, index):
 
         if isinstance(index, (SYMPY_INTS, Integer)):
+            if self._rank == 0:
+                raise ValueError("cannot use integer indexing on rank-0 arrays")
             if index >= self._loop_size:
                 raise ValueError("index out of range")
             return index

--- a/sympy/tensor/array/dense_ndim_array.py
+++ b/sympy/tensor/array/dense_ndim_array.py
@@ -149,7 +149,7 @@
         self._shape = shape
         self._array = list(flat_list)
         self._rank = len(shape)
-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0
+        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 1
         return self
 
     def __setitem__(self, index, value):
@@ -174,7 +174,7 @@
         self._shape = shape
         self._array = list(flat_list)
         self._rank = len(shape)
-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0
+        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 1
         return self
 
     def __setitem__(self, index, value):

--- a/sympy/tensor/array/sparse_ndim_array.py
+++ b/sympy/tensor/array/sparse_ndim_array.py
@@ -130,7 +130,7 @@
 
         shape, flat_list = cls._handle_ndarray_creation_inputs(iterable, shape, **kwargs)
         shape = Tuple(*map(_sympify, shape))
-        loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0
+        loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 1
 
         # Sparse array:
         if isinstance(flat_list, (dict, Dict)):
@@ -167,7 +167,7 @@
         self = object.__new__(cls)
         self._shape = shape
         self._rank = len(shape)
-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0
+        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 1
 
         # Sparse array:
         if isinstance(flat_list, (dict, Dict)):
