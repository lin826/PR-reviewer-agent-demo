diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py
index afd36d79e0..deb91e4979 100644
--- a/django/utils/dateformat.py
+++ b/django/utils/dateformat.py
@@ -326,7 +326,7 @@ class DateFormat(TimeFormat):
 
     def y(self):
         "Year, 2 digits; e.g. '99'"
-        return str(self.data.year)[2:]
+        return "%02d" % (self.data.year % 100)
 
     def Y(self):
         "Year, 4 digits; e.g. '1999'"
diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py
index d050ac4352..e505919e9e 100644
--- a/tests/utils_tests/test_dateformat.py
+++ b/tests/utils_tests/test_dateformat.py
@@ -165,3 +165,41 @@ class DateFormatTests(SimpleTestCase):
                 dateformat.format(dt, 'r'),
                 'Sun, 08 Jul 1979 22:00:00 +0100',
             )
+
+    def test_y_format_with_years_less_than_1000(self):
+        """
+        Test that the 'y' format character correctly handles years < 1000.
+        This is a regression test for the issue where years < 1000 would
+        return incorrect or empty strings.
+        """
+        test_cases = [
+            # (year, expected_y_format)
+            (1, '01'),      # Single digit year
+            (9, '09'),      # Single digit year
+            (10, '10'),     # Two digit year
+            (99, '99'),     # Two digit year
+            (100, '00'),    # Three digit year (century boundary)
+            (123, '23'),    # Three digit year
+            (999, '99'),    # Three digit year
+            (1000, '00'),   # Four digit year (millennium boundary)
+            (1979, '79'),   # Four digit year (existing test case)
+            (2000, '00'),   # Four digit year (century boundary)
+            (2023, '23'),   # Modern year
+        ]
+        
+        for year, expected in test_cases:
+            with self.subTest(year=year):
+                dt = datetime(year, 4, 5, 6, 7)
+                result = dateformat.format(dt, 'y')
+                self.assertEqual(
+                    result, expected,
+                    f"Year {year}: expected '{expected}', got '{result}'"
+                )
+                
+                # Also verify it matches Python's strftime behavior
+                python_result = dt.strftime('%y')
+                self.assertEqual(
+                    result, python_result,
+                    f"Year {year}: Django result '{result}' doesn't match "
+                    f"Python strftime result '{python_result}'"
+                )
