--- a/xarray/core/common.py
+++ b/xarray/core/common.py
@@ -2023,14 +2023,33 @@
 
     chunks: dict[Any, tuple[int, ...]] = {}
     for v in variables:
-        if hasattr(v.data, "chunks"):
-            for dim, c in v.chunksizes.items():
-                if dim in chunks and c != chunks[dim]:
-                    raise ValueError(
-                        f"Object has inconsistent chunks along dimension {dim}. "
-                        "This can be fixed by calling unify_chunks()."
-                    )
-                chunks[dim] = c
+        # First try to get chunk info from encoding (for Zarr arrays) to avoid loading
+        var_chunks = {}
+        if v.encoding and "preferred_chunks" in v.encoding and "chunks" in v.encoding:
+            # For Zarr arrays, calculate chunk sizes from uniform chunks and shape
+            zarr_chunks = v.encoding["chunks"]
+            shape = v.shape
+            for i, (dim, chunk_size) in enumerate(zip(v.dims, zarr_chunks)):
+                if i < len(shape):
+                    # Calculate how many chunks along this dimension
+                    dim_size = shape[i]
+                    full_chunks = dim_size // chunk_size
+                    remainder = dim_size % chunk_size
+                    if remainder > 0:
+                        chunk_tuple = (chunk_size,) * full_chunks + (remainder,)
+                    else:
+                        chunk_tuple = (chunk_size,) * full_chunks
+                    var_chunks[dim] = chunk_tuple
+        elif hasattr(v.data, "chunks"):
+            var_chunks = v.chunksizes
+        
+        for dim, c in var_chunks.items():
+            if dim in chunks and c != chunks[dim]:
+                raise ValueError(
+                    f"Object has inconsistent chunks along dimension {dim}. "
+                    "This can be fixed by calling unify_chunks()."
+                )
+            chunks[dim] = c
     return Frozen(chunks)
 
 
