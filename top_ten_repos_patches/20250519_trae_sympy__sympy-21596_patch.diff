diff --git a/sympy/sets/handlers/intersection.py b/sympy/sets/handlers/intersection.py
index c54dc8f72a..dd8d8e5229 100644
--- a/sympy/sets/handlers/intersection.py
+++ b/sympy/sets/handlers/intersection.py
@@ -304,21 +304,26 @@ def intersection_sets(self, other): # noqa:F811
             return None
         else:
             # univarite imaginary part in same variable
-            x, xis = zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols])
-            if x and all(i == n for i in x):
-                base_set -= FiniteSet(xis)
-            else:
-                base_set -= ConditionSet(n, Eq(im, 0), S.Integers)
+            solutions = [solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols]
+            if solutions:
+                x, xis = zip(*solutions)
+                if x and all(i == n for i in x):
+                    # Only keep the values where imaginary part is zero
+                    # Create individual elements, not a tuple
+                    base_set = FiniteSet(*xis)
+                else:
+                    # Only keep values satisfying the condition that imaginary part is zero
+                    base_set = ConditionSet(n, Eq(im, 0), base_set)
         # exclude values that make denominators 0
         for i in denoms(f):
             if i.has(n):
-                sol = list(zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols]))
-                if sol != []:
+                sol = list(zip(*[solve_linear(i, 0) for i in Mul.make_args(i) if n in i.free_symbols]))
+                if sol and len(sol) == 2:
                     x, xis = sol
                     if x and all(i == n for i in x):
                         base_set -= FiniteSet(xis)
-                else:
-                    base_set -= ConditionSet(n, Eq(i, 0), S.Integers)
+                elif sol:  # More complex case, create a condition
+                    base_set -= ConditionSet(n, Eq(i, 0), base_set)
         return imageset(lam, base_set)
 
     elif isinstance(other, Interval):

