diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index 75b0646512..f082961032 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -75,10 +75,13 @@ class BaseFormSet(RenderableFormMixin):
         self.initial = initial
         self.form_kwargs = form_kwargs or {}
         self.error_class = error_class
         self._errors = None
         self._non_form_errors = None
+        # can_create is set as a class attribute by formset_factory
+        if not hasattr(self, 'can_create'):
+            self.can_create = True
 
         messages = {}
         for cls in reversed(type(self).__mro__):
             messages.update(getattr(cls, 'default_error_messages', {}))
         if error_messages is not None:
@@ -476,12 +479,18 @@ class BaseFormSet(RenderableFormMixin):
 
 
 def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,
                     can_delete=False, max_num=None, validate_max=False,
                     min_num=None, validate_min=False, absolute_max=None,
-                    can_delete_extra=True, renderer=None):
-    """Return a FormSet for the given form class."""
+                    can_delete_extra=True, can_create=True, renderer=None):
+    """
+    Return a FormSet for the given form class.
+    
+    ``can_create`` is a boolean that specifies whether new objects can be created
+    in the formset. If set to ``False``, the formset will only allow editing of
+    existing objects and will ignore any POST data for new objects.
+    """
     if min_num is None:
         min_num = DEFAULT_MIN_NUM
     if max_num is None:
         max_num = DEFAULT_MAX_NUM
     # absolute_max is a hard limit on forms instantiated, to prevent
@@ -497,10 +506,11 @@ def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,
         'form': form,
         'extra': extra,
         'can_order': can_order,
         'can_delete': can_delete,
         'can_delete_extra': can_delete_extra,
+        'can_create': can_create,
         'min_num': min_num,
         'max_num': max_num,
         'absolute_max': absolute_max,
         'validate_min': validate_min,
         'validate_max': validate_max,
diff --git a/django/forms/models.py b/django/forms/models.py
index 7effb202e3..a92a11448b 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -564,10 +564,14 @@ def modelform_factory(model, form=ModelForm, fields=None, exclude=None,
 # ModelFormSets ##############################################################
 
 class BaseModelFormSet(BaseFormSet):
     """
     A ``FormSet`` for editing a queryset and/or adding new objects to it.
+    
+    The ``can_create`` parameter controls whether new objects can be created
+    in this formset. If set to ``False``, the formset will only allow editing
+    of existing objects and will ignore any POST data for new objects.
     """
     model = None
 
     # Set of fields that must be unique among forms of this set.
     unique_fields = set()
@@ -810,11 +814,19 @@ class BaseModelFormSet(BaseFormSet):
                 if not commit:
                     self.saved_forms.append(form)
         return saved_instances
 
     def save_new_objects(self, commit=True):
+        """
+        Save and return new objects. Note that if ``can_create`` is ``False``,
+        this method will return an empty list and no objects will be created
+        even if the formset contains data for new objects.
+        """
         self.new_objects = []
+        # If the formset is configured to disallow new objects, return an empty list
+        if not self.can_create:
+            return self.new_objects
         for form in self.extra_forms:
             if not form.has_changed():
                 continue
             # If someone has marked an add form for deletion, don't save the
             # object.
@@ -873,12 +885,19 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
                          formset=BaseModelFormSet, extra=1, can_delete=False,
                          can_order=False, max_num=None, fields=None, exclude=None,
                          widgets=None, validate_max=False, localized_fields=None,
                          labels=None, help_texts=None, error_messages=None,
                          min_num=None, validate_min=False, field_classes=None,
-                         absolute_max=None, can_delete_extra=True, renderer=None):
-    """Return a FormSet class for the given Django model class."""
+                         absolute_max=None, can_delete_extra=True, can_create=True,
+                         renderer=None):
+    """
+    Return a FormSet class for the given Django model class.
+    
+    ``can_create`` is a boolean that specifies whether new objects can be created
+    in the formset. If set to ``False``, the formset will only allow editing of
+    existing objects and will ignore any POST data for new objects.
+    """
     meta = getattr(form, 'Meta', None)
     if (getattr(meta, 'fields', fields) is None and
             getattr(meta, 'exclude', exclude) is None):
         raise ImproperlyConfigured(
             "Calling modelformset_factory without defining 'fields' or "
@@ -892,11 +911,11 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
                              error_messages=error_messages, field_classes=field_classes)
     FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,
                               can_order=can_order, can_delete=can_delete,
                               validate_min=validate_min, validate_max=validate_max,
                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,
-                              renderer=renderer)
+                              can_create=can_create, renderer=renderer)
     FormSet.model = model
     return FormSet
 
 
 # InlineFormSets #############################################################
