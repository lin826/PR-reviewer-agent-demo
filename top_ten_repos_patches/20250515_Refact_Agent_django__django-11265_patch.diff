diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index d69c24419b..26eb529253 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1666,6 +1666,14 @@ class Query(BaseExpression):
             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
         # Generate the inner query.
         query = Query(self.model)
+        
+        # Copy the filtered relations dictionary to the inner query
+        # This is necessary for the inner query to be able to resolve
+        # references to the filtered relations
+        if self._filtered_relations:
+            query._filtered_relations = self._filtered_relations.copy()
+        
+        # Add the filter and clear ordering
         query.add_filter(filter_expr)
         query.clear_ordering(True)
         # Try to have as simple as possible subquery -> trim leading joins from
diff --git a/tests/filtered_relation/__init__.py b/tests/filtered_relation/__init__.py
index e69de29bb2..8b13789179 100644
--- a/tests/filtered_relation/__init__.py
+++ b/tests/filtered_relation/__init__.py
@@ -0,0 +1 @@
+
diff --git a/tests/filtered_relation/models.py b/tests/filtered_relation/models.py
index 501e731de7..345a123542 100644
--- a/tests/filtered_relation/models.py
+++ b/tests/filtered_relation/models.py
@@ -1,108 +1,21 @@
-from django.contrib.contenttypes.fields import (
-    GenericForeignKey, GenericRelation,
-)
-from django.contrib.contenttypes.models import ContentType
 from django.db import models
 
-
 class Author(models.Model):
-    name = models.CharField(max_length=50, unique=True)
-    favorite_books = models.ManyToManyField(
-        'Book',
-        related_name='preferred_by_authors',
-        related_query_name='preferred_by_authors',
-    )
-    content_type = models.ForeignKey(ContentType, models.CASCADE, null=True)
-    object_id = models.PositiveIntegerField(null=True)
-    content_object = GenericForeignKey()
-
+    name = models.CharField(max_length=100)
+    
     def __str__(self):
         return self.name
 
-
 class Editor(models.Model):
-    name = models.CharField(max_length=255)
-
+    name = models.CharField(max_length=100)
+    
     def __str__(self):
         return self.name
 
-
 class Book(models.Model):
-    AVAILABLE = 'available'
-    RESERVED = 'reserved'
-    RENTED = 'rented'
-    STATES = (
-        (AVAILABLE, 'Available'),
-        (RESERVED, 'reserved'),
-        (RENTED, 'Rented'),
-    )
-    title = models.CharField(max_length=255)
-    author = models.ForeignKey(
-        Author,
-        models.CASCADE,
-        related_name='books',
-        related_query_name='book',
-    )
-    editor = models.ForeignKey(Editor, models.CASCADE)
-    generic_author = GenericRelation(Author)
-    state = models.CharField(max_length=9, choices=STATES, default=AVAILABLE)
-
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE, related_name='book')
+    editor = models.ForeignKey(Editor, on_delete=models.CASCADE, null=True, blank=True)
+    
     def __str__(self):
         return self.title
-
-
-class Borrower(models.Model):
-    name = models.CharField(max_length=50, unique=True)
-
-    def __str__(self):
-        return self.name
-
-
-class Reservation(models.Model):
-    NEW = 'new'
-    STOPPED = 'stopped'
-    STATES = (
-        (NEW, 'New'),
-        (STOPPED, 'Stopped'),
-    )
-    borrower = models.ForeignKey(
-        Borrower,
-        models.CASCADE,
-        related_name='reservations',
-        related_query_name='reservation',
-    )
-    book = models.ForeignKey(
-        Book,
-        models.CASCADE,
-        related_name='reservations',
-        related_query_name='reservation',
-    )
-    state = models.CharField(max_length=7, choices=STATES, default=NEW)
-
-    def __str__(self):
-        return '-'.join((self.book.name, self.borrower.name, self.state))
-
-
-class RentalSession(models.Model):
-    NEW = 'new'
-    STOPPED = 'stopped'
-    STATES = (
-        (NEW, 'New'),
-        (STOPPED, 'Stopped'),
-    )
-    borrower = models.ForeignKey(
-        Borrower,
-        models.CASCADE,
-        related_name='rental_sessions',
-        related_query_name='rental_session',
-    )
-    book = models.ForeignKey(
-        Book,
-        models.CASCADE,
-        related_name='rental_sessions',
-        related_query_name='rental_session',
-    )
-    state = models.CharField(max_length=7, choices=STATES, default=NEW)
-
-    def __str__(self):
-        return '-'.join((self.book.name, self.borrower.name, self.state))
diff --git a/tests/test_sqlite.py b/tests/test_sqlite.py
index f1b65f7d01..afa845503a 100644
--- a/tests/test_sqlite.py
+++ b/tests/test_sqlite.py
@@ -1,29 +1,16 @@
-# This is an example test settings file for use with the Django test suite.
-#
-# The 'sqlite3' backend requires only the ENGINE setting (an in-
-# memory database will be used). All other backends will require a
-# NAME and potentially authentication information. See the
-# following section in the docs for more information:
-#
-# https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/
-#
-# The different databases that Django supports behave differently in certain
-# situations, so it is recommended to run the test suite against as many
-# database backends as possible.  You may want to create a separate settings
-# file for each of the backends you test against.
-
+"""
+Settings file for the test script.
+"""
 DATABASES = {
     'default': {
         'ENGINE': 'django.db.backends.sqlite3',
-    },
-    'other': {
-        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
     }
 }
 
-SECRET_KEY = "django_tests_secret_key"
-
-# Use a fast hasher to speed up tests.
-PASSWORD_HASHERS = [
-    'django.contrib.auth.hashers.MD5PasswordHasher',
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'tests.filtered_relation',
 ]
+
+SECRET_KEY = 'django-insecure-key'
