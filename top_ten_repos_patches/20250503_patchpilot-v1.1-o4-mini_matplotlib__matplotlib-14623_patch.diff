diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py
index da2dea6f57..3079800c11 100644
--- a/lib/matplotlib/axes/_base.py
+++ b/lib/matplotlib/axes/_base.py
@@ -4476,4 +4476,4 @@ class _AxesBase(martist.Artist):
 
     def get_shared_y_axes(self):
         """Return a reference to the shared axes Grouper object for y axes."""
-        return self._shared_y_axes
+        return self._shared_y_axes
diff --git a/lib/matplotlib/scale.py b/lib/matplotlib/scale.py
index b482a664b7..bf0245b226 100644
--- a/lib/matplotlib/scale.py
+++ b/lib/matplotlib/scale.py
@@ -774,4 +774,4 @@ def _get_scale_docs():
 docstring.interpd.update(
     scale=' | '.join([repr(x) for x in get_scale_names()]),
     scale_docs=_get_scale_docs().rstrip(),
-    )
+    )
diff --git a/lib/matplotlib/ticker.py b/lib/matplotlib/ticker.py
index 209a3f92ce..8ee24eb8ca 100644
--- a/lib/matplotlib/ticker.py
+++ b/lib/matplotlib/ticker.py
@@ -2375,29 +2375,44 @@ class LogLocator(Locator):
 
         return vmin, vmax
 
+
     def nonsingular(self, vmin, vmax):
         if not np.isfinite(vmin) or not np.isfinite(vmax):
+            # If either bound is not finite we cannot infer orientation;
+            # fall back to the default range.
             return 1, 10  # initial range, no data plotted yet
 
-        if vmin > vmax:
+        # Detect whether the user specified the limits in descending order
+        # (i.e., requested an inverted axis).  Operate on an ascending range
+        # internally and restore the original orientation at the end.
+        inverted = vmin > vmax
+        if inverted:
             vmin, vmax = vmax, vmin
+
         if vmax <= 0:
             cbook._warn_external(
                 "Data has no positive values, and therefore cannot be "
                 "log-scaled.")
             return 1, 10
 
-        minpos = self.axis.get_minpos()
+
+        minpos = self.axis.get_minpos() if self.axis is not None else 1e-300
         if not np.isfinite(minpos):
+
             minpos = 1e-300  # This should never take effect.
         if vmin <= 0:
             vmin = minpos
         if vmin == vmax:
             vmin = _decade_less(vmin, self._base)
             vmax = _decade_greater(vmax, self._base)
+
+        # Restore the original orientation if it was inverted.
+        if inverted:
+            vmin, vmax = vmax, vmin
         return vmin, vmax
 
 
+
 class SymmetricalLogLocator(Locator):
     """
     Determine the tick locations for symmetric log axes
@@ -2789,4 +2804,4 @@ class OldAutoLocator(Locator):
                 ticksize = base / 5.0
             locator = MultipleLocator(ticksize)
 
-        return locator
+        return locator
