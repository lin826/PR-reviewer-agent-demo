diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py
index c9e77a901f..8963dc04ba 100644
--- a/sympy/polys/polytools.py
+++ b/sympy/polys/polytools.py
@@ -5872,10 +5872,34 @@ def sqf_part(f, *gens, **args):
         return result.as_expr()
     else:
         return result
 
 
+def _combine_sqf_factors(factors):
+    """Combine factors with the same multiplicity for square-free factorization."""
+    from collections import defaultdict
+    
+    # Group factors by multiplicity
+    multiplicity_groups = defaultdict(list)
+    for factor, mult in factors:
+        multiplicity_groups[mult].append(factor)
+    
+    # Combine factors within each multiplicity group
+    combined_factors = []
+    for mult, factor_list in multiplicity_groups.items():
+        if len(factor_list) == 1:
+            combined_factors.append((factor_list[0], mult))
+        else:
+            # Multiply all factors in this group
+            combined_factor = factor_list[0]
+            for factor in factor_list[1:]:
+                combined_factor = combined_factor * factor
+            combined_factors.append((combined_factor, mult))
+    
+    return combined_factors
+
+
 def _sorted_factors(factors, method):
     """Sort a list of ``(expr, exp)`` pairs. """
     if method == 'sqf':
         def key(obj):
             poly, exp = obj
@@ -5993,10 +6017,15 @@ def _generic_factor_list(expr, gens, args, method):
             for i, (f, k) in enumerate(factors):
                 if not f.is_Poly:
                     f, _ = _poly_from_expr(f, _opt)
                     factors[i] = (f, k)
 
+        # For square-free factorization, combine factors with the same multiplicity
+        if method == 'sqf':
+            fp = _combine_sqf_factors(fp)
+            fq = _combine_sqf_factors(fq)
+
         fp = _sorted_factors(fp, method)
         fq = _sorted_factors(fq, method)
 
         if not opt.polys:
             fp = [(f.as_expr(), k) for f, k in fp]
