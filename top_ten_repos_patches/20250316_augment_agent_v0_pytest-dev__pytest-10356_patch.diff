diff --git a/AUTHORS b/AUTHORS
index ca2872f32..b0e8efbe9 100644
--- a/AUTHORS
+++ b/AUTHORS
@@ -1,10 +1,11 @@
 Holger Krekel, holger at merlinux eu
 merlinux GmbH, Germany, office at merlinux eu
 
 Contributors include::
 
+AI Assistant
 Aaron Coleman
 Abdeali JK
 Abdelrahman Elbehery
 Abhijeet Kasurde
 Adam Johnson
diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py
index 800a25c92..7ef098048 100644
--- a/src/_pytest/mark/structures.py
+++ b/src/_pytest/mark/structures.py
@@ -355,13 +355,31 @@ class MarkDecorator:
         return self.with_args(*args, **kwargs)
 
 
 def get_unpacked_marks(obj: object) -> Iterable[Mark]:
     """Obtain the unpacked marks that are stored on an object."""
-    mark_list = getattr(obj, "pytestmark", [])
-    if not isinstance(mark_list, list):
-        mark_list = [mark_list]
+    mark_list = []
+    seen = set()  # To track seen marks and avoid duplicates
+    
+    # If the object is a class, collect markers from all classes in the MRO
+    if isinstance(obj, type):
+        for cls in obj.__mro__:
+            cls_marks = getattr(cls, "pytestmark", [])
+            if not isinstance(cls_marks, list):
+                cls_marks = [cls_marks]
+            for mark in cls_marks:
+                # Use id() to track unique mark objects
+                if id(mark) not in seen:
+                    seen.add(id(mark))
+                    mark_list.append(mark)
+    else:
+        # For non-class objects, just get the pytestmark attribute
+        obj_marks = getattr(obj, "pytestmark", [])
+        if not isinstance(obj_marks, list):
+            obj_marks = [obj_marks]
+        mark_list.extend(obj_marks)
+    
     return normalize_mark_list(mark_list)
 
 
 def normalize_mark_list(
     mark_list: Iterable[Union[Mark, MarkDecorator]]
