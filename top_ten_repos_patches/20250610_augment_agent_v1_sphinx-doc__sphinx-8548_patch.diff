diff --git b/sphinx/ext/autodoc/__init__.py a/sphinx/ext/autodoc/__init__.py
index 1f8dc2416..ddfd2b365 100644
--- b/sphinx/ext/autodoc/__init__.py
+++ a/sphinx/ext/autodoc/__init__.py
@@ -605,11 +605,10 @@ class Documenter:
                     docstrings = [list(attr_docs[key])]
 
                     for i, line in enumerate(self.process_doc(docstrings)):
                         self.add_line(line, sourcename, i)
 
-
         # add content from docstrings
         if not no_docstring:
             docstrings = self.get_doc()
             if not docstrings:
                 # append at least a dummy docstring, so that the event
@@ -669,17 +668,12 @@ class Documenter:
         """
         def is_filtered_inherited_member(name: str) -> bool:
             if inspect.isclass(self.object):
                 for cls in self.object.__mro__:
                     if cls.__name__ == self.options.inherited_members and cls != self.object:
-                        # Check if the member is actually defined in this specific class
-                        if (name in cls.__dict__ or name in self.get_attr(cls, '__annotations__', {})):
-                            # given member is a member of specified *super class*
-                            return True
-                        else:
-                            # member is not actually defined in this class, continue checking
-                            continue
+                        # given member is a member of specified *super class*
+                        return True
                     elif name in cls.__dict__:
                         return False
                     elif name in self.get_attr(cls, '__annotations__', {}):
                         return False
 
diff --git b/sphinx/ext/autodoc/importer.py a/sphinx/ext/autodoc/importer.py
index 592eadf15..d6e73d36a 100644
--- b/sphinx/ext/autodoc/importer.py
+++ a/sphinx/ext/autodoc/importer.py
@@ -312,32 +312,10 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,
         namespace = '.'.join(objpath)
         for (ns, name), docstring in analyzer.attr_docs.items():
             if namespace == ns and name not in members:
                 members[name] = ClassAttribute(subject, name, INSTANCEATTR,
                                                '\n'.join(docstring))
-        
-        # also check parent classes for inherited instance attributes
-        try:
-            for cls in getmro(subject):
-                if cls == subject:
-                    continue  # already checked above
-                try:
-                    cls_module = safe_getattr(cls, '__module__')
-                    cls_qualname = safe_getattr(cls, '__qualname__')
-                    if cls_module and cls_qualname:
-                        parent_analyzer = ModuleAnalyzer.for_module(cls_module)
-                        parent_analyzer.analyze()
-                        for (ns, name), docstring in parent_analyzer.attr_docs.items():
-                            if ns == cls_qualname and name not in members:
-                                members[name] = ClassAttribute(cls, name, INSTANCEATTR,
-                                                               '\n'.join(docstring))
-                except (AttributeError, Exception):
-                    # ignore errors when analyzing parent classes
-                    continue
-        except (AttributeError, TypeError):
-            # ignore errors when getting MRO
-            pass
 
     return members
 
 
 from sphinx.ext.autodoc.mock import (MockFinder, MockLoader, _MockModule, _MockObject,  # NOQA
