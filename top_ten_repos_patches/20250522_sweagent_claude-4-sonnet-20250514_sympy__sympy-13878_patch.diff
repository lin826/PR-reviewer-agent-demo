diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py
index fff7da80ae..a90a5874b3 100644
--- a/sympy/stats/crv_types.py
+++ b/sympy/stats/crv_types.py
@@ -47,9 +47,9 @@
 
 from sympy import (log, sqrt, pi, S, Dummy, Interval, sympify, gamma,
                    Piecewise, And, Eq, binomial, factorial, Sum, floor, Abs,
-                   Lambda, Basic, lowergamma, erf, erfc, I)
+                   Lambda, Basic, lowergamma, erf, erfc, I, uppergamma, atan, asin)
 from sympy import beta as beta_fn
-from sympy import cos, exp, besseli
+from sympy import cos, exp, besseli, hyper
 from sympy.stats.crv import (SingleContinuousPSpace, SingleContinuousDistribution,
         ContinuousDistributionHandmade)
 from sympy.stats.rv import _value_check
@@ -150,9 +150,21 @@ def rv(symbol, cls, args):
 class ArcsinDistribution(SingleContinuousDistribution):
     _argnames = ('a', 'b')
 
+    @property
+    def set(self):
+        return Interval(self.a, self.b)
+
     def pdf(self, x):
         return 1/(pi*sqrt((x - self.a)*(self.b - x)))
 
+    def _cdf(self, x):
+        a, b = self.a, self.b
+        return Piecewise(
+            (S.Zero, x < a),
+            (S(2)/pi * asin(sqrt((x - a)/(b - a))), And(a <= x, x <= b)),
+            (S.One, x > b)
+        )
+
 def Arcsin(name, a=0, b=1):
     r"""
     Create a Continuous Random Variable with an arcsin distribution.
@@ -666,10 +678,21 @@ def ChiSquared(name, k):
 class DagumDistribution(SingleContinuousDistribution):
     _argnames = ('p', 'a', 'b')
 
+    @property
+    def set(self):
+        return Interval(0, oo)
+
     def pdf(self, x):
         p, a, b = self.p, self.a, self.b
         return a*p/x*((x/b)**(a*p)/(((x/b)**a + 1)**(p + 1)))
 
+    def _cdf(self, x):
+        p, a, b = self.p, self.a, self.b
+        return Piecewise(
+            (S.Zero, x <= 0),
+            (S.One - (S.One + (x/b)**a)**(-p), x > 0)
+        )
+
 
 def Dagum(name, p, a, b):
     r"""
@@ -1042,6 +1065,13 @@ def pdf(self, x):
         a, s, m = self.a, self.s, self.m
         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))
 
+    def _cdf(self, x):
+        a, s, m = self.a, self.s, self.m
+        return Piecewise(
+            (S.Zero, x <= m),
+            (exp(-((x-m)/s)**(-a)), x > m)
+        )
+
 def Frechet(name, a, s=1, m=0):
     r"""
     Create a continuous random variable with a Frechet distribution.
@@ -1111,6 +1141,13 @@ def pdf(self, x):
     def sample(self):
         return random.gammavariate(self.k, self.theta)
 
+    def _cdf(self, x):
+        k, theta = self.k, self.theta
+        return Piecewise(
+            (S.Zero, x <= 0),
+            (lowergamma(k, x/theta) / gamma(k), x > 0)
+        )
+
 
 def Gamma(name, k, theta):
     r"""
@@ -1200,6 +1237,13 @@ def pdf(self, x):
         a, b = self.a, self.b
         return b**a/gamma(a) * x**(-a-1) * exp(-b/x)
 
+    def _cdf(self, x):
+        a, b = self.a, self.b
+        return Piecewise(
+            (S.Zero, x <= 0),
+            (uppergamma(a, b/x) / gamma(a), x > 0)
+        )
+
 def GammaInverse(name, a, b):
     r"""
     Create a continuous random variable with an inverse Gamma distribution.
@@ -1374,7 +1418,7 @@ def Gompertz(name, b, eta):
 class KumaraswamyDistribution(SingleContinuousDistribution):
     _argnames = ('a', 'b')
 
-    set = Interval(0, oo)
+    set = Interval(0, 1)
 
     @staticmethod
     def check(a, b):
@@ -1385,6 +1429,14 @@ def pdf(self, x):
         a, b = self.a, self.b
         return a * b * x**(a-1) * (1-x**a)**(b-1)
 
+    def _cdf(self, x):
+        a, b = self.a, self.b
+        return Piecewise(
+            (S.Zero, x <= 0),
+            (S.One - (S.One - x**a)**b, And(x > 0, x < 1)),
+            (S.One, x >= 1)
+        )
+
 def Kumaraswamy(name, a, b):
     r"""
     Create a Continuous Random Variable with a Kumaraswamy distribution.
@@ -1445,6 +1497,13 @@ def pdf(self, x):
         mu, b = self.mu, self.b
         return 1/(2*b)*exp(-Abs(x - mu)/b)
 
+    def _cdf(self, x):
+        mu, b = self.mu, self.b
+        return Piecewise(
+            (S.Half * exp((x - mu)/b), x < mu),
+            (S.One - S.Half * exp(-(x - mu)/b), x >= mu)
+        )
+
 
 def Laplace(name, mu, b):
     r"""
@@ -1501,6 +1560,10 @@ def pdf(self, x):
         mu, s = self.mu, self.s
         return exp(-(x - mu)/s)/(s*(1 + exp(-(x - mu)/s))**2)
 
+    def _cdf(self, x):
+        mu, s = self.mu, self.s
+        return S.One / (S.One + exp(-(x - mu)/s))
+
 
 def Logistic(name, mu, s):
     r"""
@@ -1711,6 +1774,13 @@ def pdf(self, x):
         mu, omega = self.mu, self.omega
         return 2*mu**mu/(gamma(mu)*omega**mu)*x**(2*mu - 1)*exp(-mu/omega*x**2)
 
+    def _cdf(self, x):
+        mu, omega = self.mu, self.omega
+        return Piecewise(
+            (S.Zero, x <= 0),
+            (lowergamma(mu, mu*x**2/omega) / gamma(mu), x > 0)
+        )
+
 
 def Nakagami(name, mu, omega):
     r"""
@@ -2227,6 +2297,13 @@ def pdf(self, x):
         nu = self.nu
         return 1/(sqrt(nu)*beta_fn(S(1)/2, nu/2))*(1 + x**2/nu)**(-(nu + 1)/2)
 
+    def _cdf(self, x):
+        nu = self.nu
+        return Piecewise(
+            (S.Half + x*gamma((nu + 1)/2)/(sqrt(pi*nu)*gamma(nu/2)) * 
+             hyper([S.Half, (nu + 1)/2], [S(3)/2], -x**2/nu), True)
+        )
+
 
 def StudentT(name, nu):
     r"""
@@ -2554,6 +2631,38 @@ def pdf(self, x):
         return 1/factorial(
             n - 1)*Sum((-1)**k*binomial(n, k)*(x - k)**(n - 1), (k, 0, floor(x)))
 
+    def _cdf(self, x):
+        n = self.n
+        # For the Irwin-Hall distribution, we use the direct sum formula
+        # but evaluate it more efficiently
+        from sympy import Add
+        
+        def irwin_hall_cdf_sum(x_val, n_val):
+            """Compute the Irwin-Hall CDF sum directly"""
+            if x_val <= 0:
+                return S.Zero
+            if x_val >= n_val:
+                return S.One
+                
+            # Compute sum directly for efficiency
+            result = S.Zero
+            max_k = min(int(floor(x_val)), n_val)
+            for k_val in range(max_k + 1):
+                if x_val - k_val > 0:
+                    term = (-1)**k_val * binomial(n_val, k_val) * (x_val - k_val)**n_val
+                    result += term
+            return result / factorial(n_val)
+        
+        # For symbolic x, we still need the piecewise form
+        k = Dummy("k")
+        sum_expr = Sum((-1)**k*binomial(n, k)*(x - k)**n, (k, 0, floor(x)))
+        
+        return Piecewise(
+            (S.Zero, x <= 0),
+            (sum_expr/factorial(n), And(x > 0, x < n)),
+            (S.One, x >= n)
+        )
+
 
 
 def UniformSum(name, n):
