diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index f8e4be999..0881880e1 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1045,30 +1045,67 @@ class DocstringSignatureMixin:
         docstrings = self.get_doc()
         self._new_docstrings = docstrings[:]
         result = None
+        
+        # Collect signatures from all matching lines
         for i, doclines in enumerate(docstrings):
             # no lines in docstring, no match
             if not doclines:
                 continue
-            # match first line of docstring against signature RE
-            match = py_ext_sig_re.match(doclines[0])
-            if not match:
-                continue
-            exmod, path, base, args, retann = match.groups()
-            # the base name must match ours
-            valid_names = [self.objpath[-1]]  # type: ignore
-            if isinstance(self, ClassDocumenter):
-                valid_names.append('__init__')
-                if hasattr(self.object, '__mro__'):
-                    valid_names.extend(cls.__name__ for cls in self.object.__mro__)
-            if base not in valid_names:
-                continue
-            # re-prepare docstring to ignore more leading indentation
-            tab_width = self.directive.state.document.settings.tab_width  # type: ignore
-            self._new_docstrings[i] = prepare_docstring('\n'.join(doclines[1:]),
-                                                        tabsize=tab_width)
-            result = args, retann
-            # don't look any further
-            break
+                
+            # Check for signatures anywhere in the docstring
+            # Track which lines are signatures
+            signature_indices = []
+            valid_signatures = []
+            
+            for j, line in enumerate(doclines):
+                line_stripped = line.strip()
+                if not line_stripped:
+                    continue
+                
+                # Try to match as a signature
+                match = py_ext_sig_re.match(line_stripped)
+                if not match:
+                    continue
+                
+                exmod, path, base, args, retann = match.groups()
+                # the base name must match ours
+                valid_names = [self.objpath[-1]]  # type: ignore
+                if isinstance(self, ClassDocumenter):
+                    valid_names.append('__init__')
+                    if hasattr(self.object, '__mro__'):
+                        valid_names.extend(cls.__name__ for cls in self.object.__mro__)
+                
+                if base not in valid_names:
+                    continue
+                
+                # Valid signature found
+                valid_signatures.append((args, retann))
+                signature_indices.append(j)
+            
+            # If we found signatures, process them and update docstring
+            if valid_signatures:
+                # re-prepare docstring to ignore the signature lines
+                tab_width = self.directive.state.document.settings.tab_width  # type: ignore
+                
+                # Remove signature lines and prepare the remaining docstring
+                remaining_lines = [line for j, line in enumerate(doclines) 
+                                if j not in signature_indices]
+                if not remaining_lines:
+                    remaining_lines = ['']
+                    
+                self._new_docstrings[i] = prepare_docstring('\n'.join(remaining_lines),
+                                                          tabsize=tab_width)
+                
+                # Store all signatures for later use
+                self._all_signatures = valid_signatures
+                
+                # For backward compatibility, return the first signature
+                if valid_signatures:
+                    result = valid_signatures[0]
+                
+                # Stop processing after finding signatures in the first block
+                break
+                
         return result
 
     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:
@@ -1088,6 +1125,29 @@ class DocstringSignatureMixin:
             result = self._find_signature()
             if result is not None:
                 self.args, self.retann = result
+                
+            # Check for multiple signatures
+            all_signatures = getattr(self, '_all_signatures', None)
+            if all_signatures and len(all_signatures) > 1:
+                # Format all signatures
+                formatted_signatures = []
+                
+                # Format each signature
+                for args, retann in all_signatures:
+                    # Use parent class's format_signature mechanism for each signature
+                    # by temporarily setting args and retann
+                    original_args, original_retann = self.args, self.retann
+                    self.args, self.retann = args, retann
+                    formatted = super().format_signature(**kwargs)  # type: ignore
+                    formatted_signatures.append(formatted)
+                    # Restore original values
+                    self.args, self.retann = original_args, original_retann
+                
+                # Join all signatures with a newline
+                if formatted_signatures:
+                    return '\n'.join(formatted_signatures)
+        
+        # Default behavior for single signature or no signatures
         return super().format_signature(**kwargs)  # type: ignore
 
 

