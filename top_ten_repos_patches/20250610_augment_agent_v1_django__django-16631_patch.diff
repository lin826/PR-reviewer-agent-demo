diff --git a/django/contrib/auth/__init__.py b/django/contrib/auth/__init__.py
index 155330c596..d92f812c8e 100644
--- a/django/contrib/auth/__init__.py
+++ b/django/contrib/auth/__init__.py
@@ -3,11 +3,11 @@ import re
 
 from django.apps import apps as django_apps
 from django.conf import settings
 from django.core.exceptions import ImproperlyConfigured, PermissionDenied
 from django.middleware.csrf import rotate_token
-from django.utils.crypto import constant_time_compare
+from django.utils.crypto import constant_time_compare, salted_hmac
 from django.utils.module_loading import import_string
 from django.views.decorators.debug import sensitive_variables
 
 from .signals import user_logged_in, user_logged_out, user_login_failed
 
@@ -15,10 +15,24 @@ SESSION_KEY = "_auth_user_id"
 BACKEND_SESSION_KEY = "_auth_user_backend"
 HASH_SESSION_KEY = "_auth_user_hash"
 REDIRECT_FIELD_NAME = "next"
 
 
+def _get_session_auth_hash(user, secret):
+    """
+    Return an HMAC of the user's password field using the specified secret.
+    This is used to verify session auth hashes against fallback keys.
+    """
+    key_salt = "django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash"
+    return salted_hmac(
+        key_salt,
+        user.password,
+        secret=secret,
+        algorithm="sha256",
+    ).hexdigest()
+
+
 def load_backend(path):
     return import_string(path)()
 
 
 def _get_backends(return_tuples=False):
@@ -197,14 +211,23 @@ def get_user(request):
             backend = load_backend(backend_path)
             user = backend.get_user(user_id)
             # Verify the session
             if hasattr(user, "get_session_auth_hash"):
                 session_hash = request.session.get(HASH_SESSION_KEY)
-                session_hash_verified = session_hash and constant_time_compare(
-                    session_hash, user.get_session_auth_hash()
-                )
-                if not session_hash_verified:
+                if session_hash:
+                    # Check against current SECRET_KEY and all fallback keys
+                    session_hash_verified = False
+                    for secret in [settings.SECRET_KEY, *settings.SECRET_KEY_FALLBACKS]:
+                        if constant_time_compare(session_hash, _get_session_auth_hash(user, secret)):
+                            session_hash_verified = True
+                            break
+                    
+                    if not session_hash_verified:
+                        request.session.flush()
+                        user = None
+                else:
+                    # No session hash stored, flush the session
                     request.session.flush()
                     user = None
 
     return user or AnonymousUser()
 
