diff --git a/src/_pytest/main.py b/src/_pytest/main.py
index d8a208a1a..762b953cd 100644
--- a/src/_pytest/main.py
+++ b/src/_pytest/main.py
@@ -676,7 +676,11 @@ class Session(nodes.FSCollector):
 
                 seen_dirs: Set[py.path.local] = set()
                 for direntry in visit(str(argpath), self._recurse):
-                    if not direntry.is_file():
+                    try:
+                        if not direntry.is_file():
+                            continue
+                    except OSError:
+                        # Skip entries that can't be accessed (e.g., circular symlinks)
                         continue
 
                     path = py.path.local(direntry.path)
diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py
index f0bdb1481..24bb4d507 100644
--- a/src/_pytest/pathlib.py
+++ b/src/_pytest/pathlib.py
@@ -558,8 +558,12 @@ def visit(
     entries = sorted(os.scandir(path), key=lambda entry: entry.name)
     yield from entries
     for entry in entries:
-        if entry.is_dir(follow_symlinks=False) and recurse(entry):
-            yield from visit(entry.path, recurse)
+        try:
+            if entry.is_dir() and recurse(entry):
+                yield from visit(entry.path, recurse)
+        except OSError:
+            # Skip entries that can't be accessed (e.g., circular symlinks)
+            continue
 
 
 def absolutepath(path: Union[Path, str]) -> Path:
diff --git a/src/_pytest/python.py b/src/_pytest/python.py
index 35797cc07..db61e6038 100644
--- a/src/_pytest/python.py
+++ b/src/_pytest/python.py
@@ -708,25 +708,29 @@ class Package(Module):
         for direntry in visit(str(this_path), recurse=self._recurse):
             path = py.path.local(direntry.path)
 
-            # We will visit our own __init__.py file, in which case we skip it.
-            if direntry.is_file():
-                if direntry.name == "__init__.py" and path.dirpath() == this_path:
+            try:
+                # We will visit our own __init__.py file, in which case we skip it.
+                if direntry.is_file():
+                    if direntry.name == "__init__.py" and path.dirpath() == this_path:
+                        continue
+
+                parts_ = parts(direntry.path)
+                if any(
+                    str(pkg_prefix) in parts_ and pkg_prefix.join("__init__.py") != path
+                    for pkg_prefix in pkg_prefixes
+                ):
                     continue
 
-            parts_ = parts(direntry.path)
-            if any(
-                str(pkg_prefix) in parts_ and pkg_prefix.join("__init__.py") != path
-                for pkg_prefix in pkg_prefixes
-            ):
-                continue
-
-            if direntry.is_file():
-                yield from self._collectfile(path)
-            elif not direntry.is_dir():
-                # Broken symlink or invalid/missing file.
+                if direntry.is_file():
+                    yield from self._collectfile(path)
+                elif not direntry.is_dir():
+                    # Broken symlink or invalid/missing file.
+                    continue
+                elif path.join("__init__.py").check(file=1):
+                    pkg_prefixes.add(path)
+            except OSError:
+                # Skip entries that can't be accessed (e.g., circular symlinks)
                 continue
-            elif path.join("__init__.py").check(file=1):
-                pkg_prefixes.add(path)
 
 
 def _call_with_optional_argument(func, arg) -> None:
