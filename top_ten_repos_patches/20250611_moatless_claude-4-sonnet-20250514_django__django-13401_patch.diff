--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -516,17 +516,28 @@
     def __eq__(self, other):
         # Needed for @total_ordering
         if isinstance(other, Field):
-            return self.creation_counter == other.creation_counter
+            return (self.creation_counter == other.creation_counter and
+                    self.model == other.model)
         return NotImplemented
 
     def __lt__(self, other):
         # This is needed because bisect does not take a comparison function.
+        # Order by creation_counter first, then by model to maintain existing ordering
+        # for cases not affected by the equality collision.
         if isinstance(other, Field):
-            return self.creation_counter < other.creation_counter
+            if self.creation_counter != other.creation_counter:
+                return self.creation_counter < other.creation_counter
+            # If creation_counters are equal, compare by model
+            if self.model != other.model:
+                # Use model names for consistent ordering
+                self_model_name = self.model._meta.label if self.model else ''
+                other_model_name = other.model._meta.label if other.model else ''
+                return self_model_name < other_model_name
+            return False  # They are equal
         return NotImplemented
 
     def __hash__(self):
-        return hash(self.creation_counter)
+        return hash((self.creation_counter, self.model))
 
     def __deepcopy__(self, memodict):
         # We don't have to deepcopy very much here, since most things are not
