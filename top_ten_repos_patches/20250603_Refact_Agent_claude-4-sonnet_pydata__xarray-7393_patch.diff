diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py
index ba937183..50bedf7b 100644
--- a/xarray/core/indexing.py
+++ b/xarray/core/indexing.py
@@ -1532,7 +1532,9 @@ class PandasMultiIndexingAdapter(PandasIndexingAdapter):
 
     def __array__(self, dtype: DTypeLike = None) -> np.ndarray:
         if self.level is not None:
-            return self.array.get_level_values(self.level).values
+            if dtype is None:
+                dtype = self.dtype
+            return np.asarray(self.array.get_level_values(self.level).values, dtype=dtype)
         else:
             return super().__array__(dtype)
 
diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py
index 6ab4c40c..db6922cf 100644
--- a/xarray/tests/test_dataset.py
+++ b/xarray/tests/test_dataset.py
@@ -3708,6 +3708,33 @@ class TestDataset:
         x = y.to_unstacked_dataset("features")
         assert_identical(D, x)
 
+    @pytest.mark.parametrize(
+        "dtype",
+        [
+            "i1", "i2", "i4", "i8",  # signed integers
+            "u1", "u2", "u4", "u8",  # unsigned integers  
+            "f2", "f4", "f8",        # floats
+        ]
+    )
+    def test_stack_preserves_coordinate_dtype(self, dtype) -> None:
+        """Test that stack operation preserves coordinate dtypes for various numeric types."""
+        # Create dataset with specific dtype coordinate
+        ds = Dataset(coords={'a': np.array([0, 1, 2], dtype=dtype)})
+        original_dtype = ds['a'].values.dtype
+        
+        # Stack the coordinate
+        stacked_ds = ds.stack(b=('a',))
+        stacked_dtype = stacked_ds['a'].values.dtype
+        
+        # Check if dtypes are equal
+        assert original_dtype == stacked_dtype, f"Expected {original_dtype}, got {stacked_dtype}"
+
+    def test_stack_preserves_int32_dtype_github_issue(self) -> None:
+        """Test the exact case from the GitHub issue."""
+        ds = Dataset(coords={'a': np.array([0], dtype='i4')})
+        result = ds['a'].values.dtype == ds.stack(b=('a',))['a'].values.dtype
+        assert result is True
+
     def test_update(self) -> None:
         data = create_test_data(seed=0)
         expected = data.copy()
