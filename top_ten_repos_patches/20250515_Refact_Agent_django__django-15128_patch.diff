diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index aaf35ee37c..077af4467f 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -842,10 +842,40 @@ class Query(BaseExpression):
 
     def change_aliases(self, change_map):
         """
-        Change the aliases in change_map (which maps old-alias -> new-alias),
-        relabelling any references to them in select columns and the where
-        clause.
-        """
+        Change aliases according to change_map (old_alias -> new_alias).
+
+        Historically, change_map was required to have disjoint sets of
+        keys and values. Query.combine() violated this invariant for
+        chained renames such as {'T4': 'T5', 'T5': 'T6'}, which raised an
+        AssertionError here. To be tolerant, flatten any chains so that
+        every key points to its final alias, making the mapping safe.
+        Example: {'T4': 'T5', 'T5': 'T6'} -> {'T4': 'T6', 'T5': 'T6'}
+        Circular renames (A->B, B->A) are unsupported and trigger an
+        explicit assertion.
+        """
+        # First, collapse chained renames.
+        if set(change_map) & set(change_map.values()):
+            flattened = {}
+
+            def final_target(alias):
+                """Follow alias chain until it ends, detecting cycles."""
+                seen = {alias}
+                target = change_map[alias]
+                while target in change_map:
+                    if target in seen:
+                        raise AssertionError(
+                            "Circular alias renaming detected while processing "
+                            f"change_map: {change_map}"
+                        )
+                    seen.add(target)
+                    target = change_map[target]
+                return target
+
+            for src in change_map:
+                flattened[src] = final_target(src)
+            change_map = flattened
+
+        # The invariant now holds.
         assert set(change_map).isdisjoint(change_map.values())
 
         # 1. Update references in "select" (normal columns plus aliases),
