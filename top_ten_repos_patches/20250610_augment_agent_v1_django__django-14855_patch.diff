diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py
index dd154f72ee..98d65b36fa 100644
--- a/django/contrib/admin/helpers.py
+++ b/django/contrib/admin/helpers.py
@@ -207,11 +207,15 @@ class AdminReadonlyField:
         url_name = 'admin:%s_%s_change' % (
             remote_field.model._meta.app_label,
             remote_field.model._meta.model_name,
         )
         try:
-            url = reverse(url_name, args=[quote(remote_obj.pk)])
+            # Use current_app to ensure the URL is generated for the correct admin site
+            current_app = None
+            if self.model_admin and hasattr(self.model_admin, 'admin_site'):
+                current_app = self.model_admin.admin_site.name
+            url = reverse(url_name, args=[quote(remote_obj.pk)], current_app=current_app)
             return format_html('<a href="{}">{}</a>', url, remote_obj)
         except NoReverseMatch:
             return str(remote_obj)
 
     def contents(self):
diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 1e5fab917e..0c7c2eaadd 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -298,11 +298,11 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
         elif hasattr(obj, 'get_absolute_url'):
             # use the ContentType lookup if view_on_site is True
             return reverse('admin:view_on_site', kwargs={
                 'content_type_id': get_content_type_for_model(obj).pk,
                 'object_id': obj.pk
-            })
+            }, current_app=self.admin_site.name)
 
     def get_empty_value_display(self):
         """
         Return the empty_value_display set on ModelAdmin or AdminSite.
         """
