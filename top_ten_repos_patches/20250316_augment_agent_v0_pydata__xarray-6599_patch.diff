diff --git a/xarray/core/computation.py b/xarray/core/computation.py
index 823cbe02..521c5490 100644
--- a/xarray/core/computation.py
+++ b/xarray/core/computation.py
@@ -1890,10 +1890,11 @@ def polyval(
     See Also
     --------
     xarray.DataArray.polyfit
     numpy.polynomial.polynomial.polyval
     """
+    from .dataarray import DataArray
 
     if degree_dim not in coeffs._indexes:
         raise ValueError(
             f"Dimension `{degree_dim}` should be a coordinate variable with labels."
         )
@@ -1903,46 +1904,83 @@ def polyval(
         )
     max_deg = coeffs[degree_dim].max().item()
     coeffs = coeffs.reindex(
         {degree_dim: np.arange(max_deg + 1)}, fill_value=0, copy=False
     )
-    coord = _ensure_numeric(coord)  # type: ignore # https://github.com/python/mypy/issues/1533 ?
+    
+    # Special handling for DataArrays with timedelta64 coordinates
+    if isinstance(coord, DataArray) and coord.name in coord.dims and coord.coords[coord.name].dtype.kind == 'm':
+        # For timedelta64 coordinates, we need to use the index values (0, 1, 2, ...)
+        # instead of the actual timedelta values to get the same results as in 2022.3.0
+        
+        # Create a new DataArray with index values (0, 1, 2, ...) as data
+        index_values = np.arange(len(coord))
+        index_coord = DataArray(
+            index_values,
+            coords={coord.name: coord.coords[coord.name]},
+            dims=coord.dims,
+            name=coord.name
+        )
+        
+        # Use the index coordinate for polynomial evaluation
+        coord_numeric = index_coord
+    else:
+        # For other types, use the standard _ensure_numeric function
+        coord_numeric = _ensure_numeric(coord)  # type: ignore # https://github.com/python/mypy/issues/1533 ?
 
     # using Horner's method
     # https://en.wikipedia.org/wiki/Horner%27s_method
-    res = coeffs.isel({degree_dim: max_deg}, drop=True) + zeros_like(coord)
+    res = coeffs.isel({degree_dim: max_deg}, drop=True) + zeros_like(coord_numeric)
     for deg in range(max_deg - 1, -1, -1):
-        res *= coord
+        res *= coord_numeric
         res += coeffs.isel({degree_dim: deg}, drop=True)
 
+    # Ensure the dimensions are in the correct order (coord dimension first, then others)
+    if isinstance(coord, DataArray) and coord.name in coord.dims:
+        # Get all dimensions in the result
+        all_dims = list(res.dims)
+        # If the coord's name is in the dimensions, move it to the first position
+        if coord.name in all_dims:
+            all_dims.remove(coord.name)
+            all_dims.insert(0, coord.name)
+            res = res.transpose(*all_dims)
+
     return res
 
 
 def _ensure_numeric(data: T_Xarray) -> T_Xarray:
-    """Converts all datetime64 variables to float64
+    """Converts all datetime64 and timedelta64 variables to float64
 
     Parameters
     ----------
     data : DataArray or Dataset
-        Variables with possible datetime dtypes.
+        Variables with possible datetime or timedelta dtypes.
 
     Returns
     -------
     DataArray or Dataset
-        Variables with datetime64 dtypes converted to float64.
+        Variables with datetime64 or timedelta64 dtypes converted to float64.
     """
     from .dataset import Dataset
 
     def to_floatable(x: DataArray) -> DataArray:
-        if x.dtype.kind in "mM":
+        if x.dtype.kind == "M":  # datetime64
             return x.copy(
                 data=datetime_to_numeric(
                     x.data,
                     offset=np.datetime64("1970-01-01"),
                     datetime_unit="ns",
                 ),
             )
+        elif x.dtype.kind == "m":  # timedelta64
+            return x.copy(
+                data=datetime_to_numeric(
+                    x.data,
+                    offset=np.timedelta64(0, "ns"),
+                    datetime_unit="ns",
+                ),
+            )
         return x
 
     if isinstance(data, Dataset):
         return data.map(to_floatable)
     else:
