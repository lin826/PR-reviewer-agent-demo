diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index 30616c0172..1e923deb73 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -569,10 +569,28 @@ class MigrationAutodetector:
                     primary_key_rel._meta.app_label,
                     primary_key_rel._meta.object_name,
                     None,
                     True
                 ))
+            
+            # Check for field conflicts with base classes that are being removed
+            # This handles the case where a field is moved from a base class to a subclass
+            for field_name, field in model_state.fields.items():
+                if field_name not in related_fields:  # Only check non-related fields
+                    # Check each base class to see if it had this field and it's being removed
+                    for base in model_state.bases:
+                        if isinstance(base, str) and "." in base:
+                            base_app_label, base_name = base.split(".", 1)
+                            base_model_key = (base_app_label, base_name.lower())
+                            # Check if the base class had this field in the old state
+                            if base_model_key in self.from_state.models:
+                                old_base_field_key = (base_app_label, base_name.lower(), field_name)
+                                # If the field existed in the base class and is being removed
+                                if old_base_field_key in (self.old_field_keys - self.new_field_keys):
+                                    # Add dependency on the RemoveField operation
+                                    dependencies.append((base_app_label, base_name.lower(), field_name, False))
+            
             # Generate creation operation
             self.add_operation(
                 app_label,
                 operations.CreateModel(
                     name=model_state.name,
