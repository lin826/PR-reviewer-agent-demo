diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index caa03665ea..521c5e408a 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -804,6 +804,15 @@ class Field(RegisterLookupMixin):
         """Perform preliminary non-db specific value checks and conversions."""
         if isinstance(value, Promise):
             value = value._proxy____cast()
+        # Handle SimpleLazyObject by forcing evaluation
+        from django.utils.functional import SimpleLazyObject, empty
+        if isinstance(value, SimpleLazyObject):
+            # Force evaluation by accessing the wrapped object
+            # This triggers _setup() and populates _wrapped
+            if value._wrapped is empty:
+                # Force evaluation by accessing any attribute
+                str(value)
+            value = value._wrapped
         return value
 
     def get_db_prep_value(self, value, connection, prepared=False):
diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index d32c891284..0d2195bf15 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -71,7 +71,18 @@ class Lookup:
         if hasattr(self.rhs, 'resolve_expression'):
             return self.rhs
         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
-            return self.lhs.output_field.get_prep_value(self.rhs)
+            # Handle SimpleLazyObject by forcing evaluation before prep
+            from django.utils.functional import SimpleLazyObject, empty
+            rhs = self.rhs
+            if isinstance(rhs, SimpleLazyObject):
+                # Force evaluation by accessing the wrapped object
+                if rhs._wrapped is empty:
+                    str(rhs)  # Force evaluation
+                rhs = rhs._wrapped
+            # Handle model instances by extracting their primary key for lookups
+            if hasattr(rhs, '_meta') and hasattr(rhs, 'pk'):
+                rhs = rhs.pk
+            return self.lhs.output_field.get_prep_value(rhs)
         return self.rhs
 
     def get_db_prep_lookup(self, value, connection):
