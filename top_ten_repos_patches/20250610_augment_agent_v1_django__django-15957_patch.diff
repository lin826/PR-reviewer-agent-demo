diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index b192df4fbf..ba1fe4da53 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -143,11 +143,29 @@ class ForwardManyToOneDescriptor:
                 "%s__in"
                 % related_field.name: {instance_attr(inst)[0] for inst in instances}
             }
         else:
             query = {"%s__in" % self.field.related_query_name(): instances}
-        queryset = queryset.filter(**query)
+        
+        # Handle sliced querysets by temporarily removing the slice,
+        # applying the filter, then reapplying the slice
+        if queryset.query.is_sliced:
+            # Store the slice bounds
+            low_mark = queryset.query.low_mark
+            high_mark = queryset.query.high_mark
+            
+            # Create a clone and clear the slice
+            queryset = queryset._chain()
+            queryset.query.clear_limits()
+            
+            # Apply the filter
+            queryset = queryset.filter(**query)
+            
+            # Reapply the slice
+            queryset.query.set_limits(low_mark, high_mark)
+        else:
+            queryset = queryset.filter(**query)
 
         # Since we're going to assign directly in the cache,
         # we must manage the reverse relation cache manually.
         if not remote_field.multiple:
             for rel_obj in queryset:
@@ -402,11 +420,29 @@ class ReverseOneToOneDescriptor:
 
         rel_obj_attr = self.related.field.get_local_related_value
         instance_attr = self.related.field.get_foreign_related_value
         instances_dict = {instance_attr(inst): inst for inst in instances}
         query = {"%s__in" % self.related.field.name: instances}
-        queryset = queryset.filter(**query)
+        
+        # Handle sliced querysets by temporarily removing the slice,
+        # applying the filter, then reapplying the slice
+        if queryset.query.is_sliced:
+            # Store the slice bounds
+            low_mark = queryset.query.low_mark
+            high_mark = queryset.query.high_mark
+            
+            # Create a clone and clear the slice
+            queryset = queryset._chain()
+            queryset.query.clear_limits()
+            
+            # Apply the filter
+            queryset = queryset.filter(**query)
+            
+            # Reapply the slice
+            queryset.query.set_limits(low_mark, high_mark)
+        else:
+            queryset = queryset.filter(**query)
 
         # Since we're going to assign directly in the cache,
         # we must manage the reverse relation cache manually.
         for rel_obj in queryset:
             instance = instances_dict[rel_obj_attr(rel_obj)]
@@ -717,11 +753,29 @@ def create_reverse_many_to_one_manager(superclass, rel):
 
             rel_obj_attr = self.field.get_local_related_value
             instance_attr = self.field.get_foreign_related_value
             instances_dict = {instance_attr(inst): inst for inst in instances}
             query = {"%s__in" % self.field.name: instances}
-            queryset = queryset.filter(**query)
+            
+            # Handle sliced querysets by temporarily removing the slice,
+            # applying the filter, then reapplying the slice
+            if queryset.query.is_sliced:
+                # Store the slice bounds
+                low_mark = queryset.query.low_mark
+                high_mark = queryset.query.high_mark
+                
+                # Create a clone and clear the slice
+                queryset = queryset._chain()
+                queryset.query.clear_limits()
+                
+                # Apply the filter
+                queryset = queryset.filter(**query)
+                
+                # Reapply the slice
+                queryset.query.set_limits(low_mark, high_mark)
+            else:
+                queryset = queryset.filter(**query)
 
             # Since we just bypassed this class' get_queryset(), we must manage
             # the reverse relation manually.
             for rel_obj in queryset:
                 if not self.field.is_cached(rel_obj):
@@ -1050,11 +1104,29 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
 
             queryset._add_hints(instance=instances[0])
             queryset = queryset.using(queryset._db or self._db)
 
             query = {"%s__in" % self.query_field_name: instances}
-            queryset = queryset._next_is_sticky().filter(**query)
+            
+            # Handle sliced querysets by temporarily removing the slice,
+            # applying the filter, then reapplying the slice
+            if queryset.query.is_sliced:
+                # Store the slice bounds
+                low_mark = queryset.query.low_mark
+                high_mark = queryset.query.high_mark
+                
+                # Create a clone and clear the slice
+                queryset = queryset._chain()
+                queryset.query.clear_limits()
+                
+                # Apply the filter
+                queryset = queryset._next_is_sticky().filter(**query)
+                
+                # Reapply the slice
+                queryset.query.set_limits(low_mark, high_mark)
+            else:
+                queryset = queryset._next_is_sticky().filter(**query)
 
             # M2M: need to annotate the query in order to get the primary model
             # that the secondary model was actually related to. We know that
             # there will already be a join on the join table, so we can just add
             # the select.
