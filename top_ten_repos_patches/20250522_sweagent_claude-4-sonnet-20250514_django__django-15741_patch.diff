diff --git a/django/utils/formats.py b/django/utils/formats.py
index 3f38322d84..fa90231205 100644
--- a/django/utils/formats.py
+++ b/django/utils/formats.py
@@ -106,6 +106,9 @@ def get_format(format_type, lang=None, use_l10n=None):
     If use_l10n is provided and is not None, it forces the value to
     be localized (or not), overriding the value of settings.USE_L10N.
     """
+    # Convert format_type to string to handle lazy strings
+    format_type_str = str(format_type)
+    
     if use_l10n is None:
         try:
             use_l10n = settings._USE_L10N_INTERNAL
@@ -125,13 +128,13 @@ def get_format(format_type, lang=None, use_l10n=None):
     val = None
     if use_l10n:
         for module in get_format_modules(lang):
-            val = getattr(module, format_type, None)
+            val = getattr(module, format_type_str, None)
             if val is not None:
                 break
     if val is None:
         if format_type not in FORMAT_SETTINGS:
             return format_type
-        val = getattr(settings, format_type)
+        val = getattr(settings, format_type_str)
     elif format_type in ISO_INPUT_FORMATS:
         # If a list of input formats from one of the format_modules was
         # retrieved, make sure the ISO_INPUT_FORMATS are in this list.
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..48a3f55548
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,93 @@
+#!/usr/bin/env python
+"""
+Script to reproduce the error with lazy strings in get_format.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        LANGUAGE_CODE='en-us',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from datetime import datetime
+from django.utils.translation import gettext_lazy as _
+from django.utils import formats
+from django.template.defaultfilters import date
+
+def test_lazy_format():
+    """Test that demonstrates the issue with lazy strings in get_format."""
+    print("Testing lazy string format...")
+    
+    # Create a lazy string like what would be used in templates
+    lazy_format = _('Y-m-d')
+    print(f"Lazy format: {lazy_format}")
+    print(f"Type of lazy format: {type(lazy_format)}")
+    
+    # Create a test date
+    test_date = datetime(2023, 12, 25)
+    print(f"Test date: {test_date}")
+    
+    try:
+        # This should fail with the current implementation
+        result = date(test_date, lazy_format)
+        print(f"Success! Result: {result}")
+    except Exception as e:
+        print(f"Error: {type(e).__name__}: {e}")
+        return False
+    
+    return True
+
+def test_regular_format():
+    """Test that regular strings work fine."""
+    print("\nTesting regular string format...")
+    
+    # Create a regular string
+    regular_format = 'Y-m-d'
+    print(f"Regular format: {regular_format}")
+    print(f"Type of regular format: {type(regular_format)}")
+    
+    # Create a test date
+    test_date = datetime(2023, 12, 25)
+    print(f"Test date: {test_date}")
+    
+    try:
+        result = date(test_date, regular_format)
+        print(f"Success! Result: {result}")
+        return True
+    except Exception as e:
+        print(f"Error: {type(e).__name__}: {e}")
+        return False
+
+if __name__ == "__main__":
+    print("Reproducing the lazy string format error...")
+    
+    # Test regular format first to make sure basic functionality works
+    regular_works = test_regular_format()
+    
+    # Test lazy format to reproduce the error
+    lazy_works = test_lazy_format()
+    
+    print(f"\nResults:")
+    print(f"Regular format works: {regular_works}")
+    print(f"Lazy format works: {lazy_works}")
+    
+    if not lazy_works:
+        print("\nError reproduced successfully!")
+        sys.exit(1)
+    else:
+        print("\nNo error found - issue may be fixed!")
+        sys.exit(0)
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..75896be725
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,175 @@
+#!/usr/bin/env python
+"""
+Comprehensive test for the lazy string fix in get_format.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        LANGUAGE_CODE='en-us',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from datetime import datetime
+from django.utils.translation import gettext_lazy as _
+from django.utils import formats
+from django.template.defaultfilters import date, time
+
+def test_date_filter_with_lazy_format():
+    """Test the date filter with lazy format strings."""
+    print("Testing date filter with lazy format strings...")
+    
+    test_date = datetime(2023, 12, 25, 14, 30, 45)
+    
+    # Test various lazy format strings
+    test_cases = [
+        (_('Y-m-d'), '2023-12-25'),
+        (_('d/m/Y'), '25/12/2023'),
+        (_('F j, Y'), 'December 25, 2023'),
+        (_('Y-m-d H:i:s'), '2023-12-25 14:30:45'),
+    ]
+    
+    all_passed = True
+    for lazy_format, expected in test_cases:
+        try:
+            result = date(test_date, lazy_format)
+            print(f"  Format: {lazy_format} -> Result: {result}")
+            if result != expected:
+                print(f"    ERROR: Expected {expected}, got {result}")
+                all_passed = False
+        except Exception as e:
+            print(f"  Format: {lazy_format} -> ERROR: {type(e).__name__}: {e}")
+            all_passed = False
+    
+    return all_passed
+
+def test_time_filter_with_lazy_format():
+    """Test the time filter with lazy format strings."""
+    print("\nTesting time filter with lazy format strings...")
+    
+    test_time = datetime(2023, 12, 25, 14, 30, 45)
+    
+    # Test various lazy format strings
+    test_cases = [
+        (_('H:i'), '14:30'),
+        (_('H:i:s'), '14:30:45'),
+        (_('g:i A'), '2:30 PM'),
+    ]
+    
+    all_passed = True
+    for lazy_format, expected in test_cases:
+        try:
+            result = time(test_time, lazy_format)
+            print(f"  Format: {lazy_format} -> Result: {result}")
+            if result != expected:
+                print(f"    ERROR: Expected {expected}, got {result}")
+                all_passed = False
+        except Exception as e:
+            print(f"  Format: {lazy_format} -> ERROR: {type(e).__name__}: {e}")
+            all_passed = False
+    
+    return all_passed
+
+def test_get_format_directly():
+    """Test get_format function directly with lazy strings."""
+    print("\nTesting get_format function directly...")
+    
+    # Test with known format settings
+    test_cases = [
+        _('DATE_FORMAT'),
+        _('TIME_FORMAT'),
+        _('DATETIME_FORMAT'),
+    ]
+    
+    all_passed = True
+    for lazy_format in test_cases:
+        try:
+            result = formats.get_format(lazy_format)
+            print(f"  Format: {lazy_format} -> Result: {result}")
+        except Exception as e:
+            print(f"  Format: {lazy_format} -> ERROR: {type(e).__name__}: {e}")
+            all_passed = False
+    
+    return all_passed
+
+def test_get_format_with_custom_format():
+    """Test get_format with custom format strings (not in FORMAT_SETTINGS)."""
+    print("\nTesting get_format with custom format strings...")
+    
+    # Test with custom format strings that are not in FORMAT_SETTINGS
+    test_cases = [
+        _('Y-m-d'),
+        _('H:i:s'),
+        _('custom-format'),
+    ]
+    
+    all_passed = True
+    for lazy_format in test_cases:
+        try:
+            result = formats.get_format(lazy_format)
+            print(f"  Format: {lazy_format} -> Result: {result}")
+            # For custom formats, get_format should return the format itself
+            if str(result) != str(lazy_format):
+                print(f"    ERROR: Expected {lazy_format}, got {result}")
+                all_passed = False
+        except Exception as e:
+            print(f"  Format: {lazy_format} -> ERROR: {type(e).__name__}: {e}")
+            all_passed = False
+    
+    return all_passed
+
+def test_caching_behavior():
+    """Test that caching works correctly with lazy strings."""
+    print("\nTesting caching behavior...")
+    
+    lazy_format = _('Y-m-d')
+    
+    # Call get_format twice to test caching
+    try:
+        result1 = formats.get_format(lazy_format)
+        result2 = formats.get_format(lazy_format)
+        
+        print(f"  First call: {result1}")
+        print(f"  Second call: {result2}")
+        
+        if result1 == result2:
+            print("  Caching works correctly!")
+            return True
+        else:
+            print("  ERROR: Caching not working correctly")
+            return False
+    except Exception as e:
+        print(f"  ERROR: {type(e).__name__}: {e}")
+        return False
+
+if __name__ == "__main__":
+    print("Running comprehensive tests for lazy string support in get_format...")
+    
+    tests = [
+        test_date_filter_with_lazy_format,
+        test_time_filter_with_lazy_format,
+        test_get_format_directly,
+        test_get_format_with_custom_format,
+        test_caching_behavior,
+    ]
+    
+    all_passed = True
+    for test in tests:
+        if not test():
+            all_passed = False
+    
+    print(f"\nOverall result: {'PASS' if all_passed else 'FAIL'}")
+    sys.exit(0 if all_passed else 1)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..745cfc2512
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,147 @@
+#!/usr/bin/env python
+"""
+Test edge cases for the lazy string fix in get_format.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        LANGUAGE_CODE='en-us',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django.utils import formats
+from django.utils.translation import gettext_lazy as _
+from django.utils.functional import lazy
+
+def test_empty_lazy_string():
+    """Test get_format with an empty lazy string."""
+    print("Testing empty lazy string...")
+    
+    empty_lazy = _('')  # Empty string
+    
+    try:
+        result = formats.get_format(empty_lazy)
+        print(f"  Result: {result}")
+        # Empty string should be returned as-is since it's not in FORMAT_SETTINGS
+        if result == empty_lazy:
+            print("  ✓ Empty lazy string handled correctly")
+            return True
+        else:
+            print(f"  ✗ Expected {empty_lazy}, got {result}")
+            return False
+    except Exception as e:
+        print(f"  ✗ Error: {type(e).__name__}: {e}")
+        return False
+
+def test_none_format_type():
+    """Test get_format with None as format_type."""
+    print("\nTesting None format_type...")
+    
+    try:
+        result = formats.get_format(None)
+        print(f"  Result: {result}")
+        # None should be returned as-is since it's not in FORMAT_SETTINGS
+        if result is None:
+            print("  ✓ None handled correctly")
+            return True
+        else:
+            print(f"  ✗ Expected None, got {result}")
+            return False
+    except Exception as e:
+        print(f"  ✗ Error: {type(e).__name__}: {e}")
+        return False
+
+def test_lazy_non_string():
+    """Test get_format with a lazy object that doesn't evaluate to a string."""
+    print("\nTesting lazy non-string...")
+    
+    # Create a lazy function that returns an integer
+    lazy_int = lazy(lambda: 123, int)()
+    
+    try:
+        result = formats.get_format(lazy_int)
+        print(f"  Result: {result}")
+        # Should be returned as-is since it's not in FORMAT_SETTINGS
+        if result == lazy_int:
+            print("  ✓ Lazy non-string handled correctly")
+            return True
+        else:
+            print(f"  ✗ Expected {lazy_int}, got {result}")
+            return False
+    except Exception as e:
+        print(f"  ✗ Error: {type(e).__name__}: {e}")
+        return False
+
+def test_unicode_lazy_string():
+    """Test get_format with a lazy string containing unicode characters."""
+    print("\nTesting unicode lazy string...")
+    
+    unicode_lazy = _('ñoño-format')  # String with unicode characters
+    
+    try:
+        result = formats.get_format(unicode_lazy)
+        print(f"  Result: {result}")
+        # Should return the unicode string as-is
+        if str(result) == str(unicode_lazy):
+            print("  ✓ Unicode lazy string handled correctly")
+            return True
+        else:
+            print(f"  ✗ Expected {unicode_lazy}, got {result}")
+            return False
+    except Exception as e:
+        print(f"  ✗ Error: {type(e).__name__}: {e}")
+        return False
+
+def test_valid_format_setting_lazy():
+    """Test get_format with a lazy string that matches a valid FORMAT_SETTING."""
+    print("\nTesting valid format setting as lazy string...")
+    
+    lazy_format = _('DATE_FORMAT')
+    
+    try:
+        result = formats.get_format(lazy_format)
+        print(f"  Result: {result}")
+        # Should return the actual DATE_FORMAT value from settings
+        expected = formats.get_format('DATE_FORMAT')
+        if result == expected:
+            print("  ✓ Valid format setting lazy string handled correctly")
+            return True
+        else:
+            print(f"  ✗ Expected {expected}, got {result}")
+            return False
+    except Exception as e:
+        print(f"  ✗ Error: {type(e).__name__}: {e}")
+        return False
+
+if __name__ == "__main__":
+    print("Testing edge cases for lazy string support in get_format...")
+    
+    tests = [
+        test_empty_lazy_string,
+        test_none_format_type,
+        test_lazy_non_string,
+        test_unicode_lazy_string,
+        test_valid_format_setting_lazy,
+    ]
+    
+    all_passed = True
+    for test in tests:
+        if not test():
+            all_passed = False
+    
+    print(f"\nOverall result: {'PASS' if all_passed else 'FAIL'}")
+    sys.exit(0 if all_passed else 1)
\ No newline at end of file
diff --git a/test_final_comprehensive.py b/test_final_comprehensive.py
new file mode 100644
index 0000000000..2ab22605b9
--- /dev/null
+++ b/test_final_comprehensive.py
@@ -0,0 +1,231 @@
+#!/usr/bin/env python
+"""
+Final comprehensive test to ensure the fix works in all scenarios.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        LANGUAGE_CODE='en-us',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                'DIRS': [],
+                'APP_DIRS': True,
+                'OPTIONS': {
+                    'context_processors': [
+                        'django.template.context_processors.debug',
+                        'django.template.context_processors.request',
+                        'django.contrib.auth.context_processors.auth',
+                        'django.contrib.messages.context_processors.messages',
+                        'django.template.context_processors.i18n',
+                    ],
+                },
+            },
+        ],
+    )
+
+django.setup()
+
+from datetime import datetime
+from django.template import Template, Context
+from django.template.defaultfilters import date, time
+from django.utils.translation import gettext_lazy as _
+from django.utils import formats
+from django.utils.safestring import mark_safe
+
+def test_original_pr_scenario():
+    """Test the exact scenario from the PR: some_date|date:_('Y-m-d')"""
+    print("1. Testing original PR scenario...")
+    
+    template = Template("{{ some_date|date:lazy_format }}")
+    context = Context({
+        'some_date': datetime(2023, 12, 25),
+        'lazy_format': _('Y-m-d'),
+    })
+    
+    try:
+        result = template.render(context)
+        expected = "2023-12-25"
+        assert result == expected, f"Expected {expected}, got {result}"
+        print("   ✓ PASS")
+        return True
+    except Exception as e:
+        print(f"   ✗ FAIL: {e}")
+        return False
+
+def test_date_filter_direct():
+    """Test date filter directly with lazy format"""
+    print("2. Testing date filter directly...")
+    
+    test_date = datetime(2023, 12, 25, 14, 30)
+    lazy_format = _('Y-m-d H:i')
+    
+    try:
+        result = date(test_date, lazy_format)
+        expected = "2023-12-25 14:30"
+        assert result == expected, f"Expected {expected}, got {result}"
+        print("   ✓ PASS")
+        return True
+    except Exception as e:
+        print(f"   ✗ FAIL: {e}")
+        return False
+
+def test_time_filter_with_lazy():
+    """Test time filter with lazy format"""
+    print("3. Testing time filter with lazy format...")
+    
+    test_time = datetime(2023, 12, 25, 14, 30, 45)
+    lazy_format = _('H:i:s')
+    
+    try:
+        result = time(test_time, lazy_format)
+        expected = "14:30:45"
+        assert result == expected, f"Expected {expected}, got {result}"
+        print("   ✓ PASS")
+        return True
+    except Exception as e:
+        print(f"   ✗ FAIL: {e}")
+        return False
+
+def test_get_format_with_lazy_setting():
+    """Test get_format with lazy format setting name"""
+    print("4. Testing get_format with lazy setting name...")
+    
+    lazy_setting = _('DATE_FORMAT')
+    
+    try:
+        result = formats.get_format(lazy_setting)
+        expected = formats.get_format('DATE_FORMAT')
+        assert result == expected, f"Expected {expected}, got {result}"
+        print("   ✓ PASS")
+        return True
+    except Exception as e:
+        print(f"   ✗ FAIL: {e}")
+        return False
+
+def test_get_format_with_lazy_custom():
+    """Test get_format with lazy custom format"""
+    print("5. Testing get_format with lazy custom format...")
+    
+    lazy_custom = _('custom-Y-m-d')
+    
+    try:
+        result = formats.get_format(lazy_custom)
+        # Should return the lazy object as-is since it's not a setting
+        assert str(result) == str(lazy_custom), f"Expected {lazy_custom}, got {result}"
+        print("   ✓ PASS")
+        return True
+    except Exception as e:
+        print(f"   ✗ FAIL: {e}")
+        return False
+
+def test_mark_safe_with_lazy():
+    """Test that mark_safe + lazy strings work with date filter"""
+    print("6. Testing mark_safe with lazy strings...")
+    
+    test_date = datetime(2023, 12, 25)
+    safe_lazy_format = mark_safe(_('Y-m-d'))
+    
+    try:
+        result = date(test_date, safe_lazy_format)
+        expected = "2023-12-25"
+        assert result == expected, f"Expected {expected}, got {result}"
+        print("   ✓ PASS")
+        return True
+    except Exception as e:
+        print(f"   ✗ FAIL: {e}")
+        return False
+
+def test_caching_with_lazy():
+    """Test that caching works correctly with lazy strings"""
+    print("7. Testing caching with lazy strings...")
+    
+    lazy_format = _('Y-m-d')
+    
+    try:
+        # Clear cache first
+        formats.reset_format_cache()
+        
+        # Call twice to test caching
+        result1 = formats.get_format(lazy_format)
+        result2 = formats.get_format(lazy_format)
+        
+        assert result1 == result2, f"Caching failed: {result1} != {result2}"
+        print("   ✓ PASS")
+        return True
+    except Exception as e:
+        print(f"   ✗ FAIL: {e}")
+        return False
+
+def test_multiple_lazy_formats():
+    """Test multiple different lazy formats"""
+    print("8. Testing multiple lazy formats...")
+    
+    test_date = datetime(2023, 12, 25, 14, 30, 45)
+    
+    test_cases = [
+        (_('Y-m-d'), '2023-12-25'),
+        (_('d/m/Y'), '25/12/2023'),
+        (_('F j, Y'), 'December 25, 2023'),
+        (_('H:i'), '14:30'),
+        (_('g:i A'), '2:30 PM'),
+    ]
+    
+    try:
+        for lazy_format, expected in test_cases:
+            if 'H' in str(lazy_format) or 'g' in str(lazy_format):
+                result = time(test_date, lazy_format)
+            else:
+                result = date(test_date, lazy_format)
+            assert result == expected, f"Format {lazy_format}: expected {expected}, got {result}"
+        
+        print("   ✓ PASS")
+        return True
+    except Exception as e:
+        print(f"   ✗ FAIL: {e}")
+        return False
+
+if __name__ == "__main__":
+    print("Running final comprehensive test suite...")
+    print("=" * 50)
+    
+    tests = [
+        test_original_pr_scenario,
+        test_date_filter_direct,
+        test_time_filter_with_lazy,
+        test_get_format_with_lazy_setting,
+        test_get_format_with_lazy_custom,
+        test_mark_safe_with_lazy,
+        test_caching_with_lazy,
+        test_multiple_lazy_formats,
+    ]
+    
+    passed = 0
+    total = len(tests)
+    
+    for test in tests:
+        if test():
+            passed += 1
+    
+    print("=" * 50)
+    print(f"Results: {passed}/{total} tests passed")
+    
+    if passed == total:
+        print("🎉 ALL TESTS PASSED! The fix is working correctly.")
+        sys.exit(0)
+    else:
+        print("❌ Some tests failed!")
+        sys.exit(1)
\ No newline at end of file
diff --git a/test_lazy_dict.py b/test_lazy_dict.py
new file mode 100644
index 0000000000..56e3488b7b
--- /dev/null
+++ b/test_lazy_dict.py
@@ -0,0 +1,66 @@
+#!/usr/bin/env python
+"""
+Test if dictionary operations work with lazy strings.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        LANGUAGE_CODE='en-us',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+from django.utils.translation import gettext_lazy as _
+
+def test_dict_operations():
+    """Test dictionary operations with lazy strings."""
+    
+    # Create a test dictionary
+    test_dict = {
+        'DATE_INPUT_FORMATS': ['%Y-%m-%d'],
+        'TIME_INPUT_FORMATS': ['%H:%M:%S'],
+    }
+    
+    # Create lazy strings
+    lazy_key1 = _('DATE_INPUT_FORMATS')
+    lazy_key2 = _('NONEXISTENT_KEY')
+    
+    print(f"Test dict: {test_dict}")
+    print(f"Lazy key 1: {lazy_key1} (type: {type(lazy_key1)})")
+    print(f"Lazy key 2: {lazy_key2} (type: {type(lazy_key2)})")
+    
+    # Test 'in' operator
+    try:
+        result1 = lazy_key1 in test_dict
+        print(f"lazy_key1 in test_dict: {result1}")
+    except Exception as e:
+        print(f"Error with 'in' operator: {e}")
+    
+    # Test get() method
+    try:
+        result2 = test_dict.get(lazy_key1, [])
+        print(f"test_dict.get(lazy_key1, []): {result2}")
+    except Exception as e:
+        print(f"Error with get() method: {e}")
+    
+    try:
+        result3 = test_dict.get(lazy_key2, [])
+        print(f"test_dict.get(lazy_key2, []): {result3}")
+    except Exception as e:
+        print(f"Error with get() method for nonexistent key: {e}")
+
+if __name__ == "__main__":
+    test_dict_operations()
\ No newline at end of file
diff --git a/test_pr_scenario.py b/test_pr_scenario.py
new file mode 100644
index 0000000000..2c5b82be61
--- /dev/null
+++ b/test_pr_scenario.py
@@ -0,0 +1,114 @@
+#!/usr/bin/env python
+"""
+Test the exact scenario mentioned in the PR description:
+some_date|date:_('Y-m-d')
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        USE_I18N=True,
+        USE_L10N=True,
+        LANGUAGE_CODE='en-us',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test-secret-key',
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                'DIRS': [],
+                'APP_DIRS': True,
+                'OPTIONS': {
+                    'context_processors': [
+                        'django.template.context_processors.debug',
+                        'django.template.context_processors.request',
+                        'django.contrib.auth.context_processors.auth',
+                        'django.contrib.messages.context_processors.messages',
+                        'django.template.context_processors.i18n',
+                    ],
+                },
+            },
+        ],
+    )
+
+django.setup()
+
+from datetime import datetime
+from django.template import Template, Context
+from django.utils.translation import gettext_lazy as _
+
+def test_template_with_lazy_format():
+    """Test the exact scenario from the PR: some_date|date:_('Y-m-d')"""
+    print("Testing template with lazy format string...")
+    
+    # Create a template that uses a lazy string for date formatting
+    template_string = "{{ some_date|date:lazy_format }}"
+    template = Template(template_string)
+    
+    # Create context with a date and a lazy format string
+    context = Context({
+        'some_date': datetime(2023, 12, 25, 14, 30, 45),
+        'lazy_format': _('Y-m-d'),
+    })
+    
+    try:
+        result = template.render(context)
+        print(f"Template rendered successfully: '{result}'")
+        
+        # Verify the result is correct
+        expected = "2023-12-25"
+        if result == expected:
+            print(f"✓ Result matches expected: {expected}")
+            return True
+        else:
+            print(f"✗ Result '{result}' does not match expected '{expected}'")
+            return False
+    except Exception as e:
+        print(f"✗ Template rendering failed: {type(e).__name__}: {e}")
+        return False
+
+def test_template_with_literal_lazy_format():
+    """Test template with literal lazy format in the template itself"""
+    print("\nTesting template with literal lazy format...")
+    
+    # This would be more complex to test as it requires template compilation
+    # with internationalization, but we can test the underlying functionality
+    from django.template.defaultfilters import date
+    
+    test_date = datetime(2023, 12, 25, 14, 30, 45)
+    lazy_format = _('Y-m-d')
+    
+    try:
+        result = date(test_date, lazy_format)
+        print(f"Date filter with lazy format: '{result}'")
+        
+        expected = "2023-12-25"
+        if result == expected:
+            print(f"✓ Result matches expected: {expected}")
+            return True
+        else:
+            print(f"✗ Result '{result}' does not match expected '{expected}'")
+            return False
+    except Exception as e:
+        print(f"✗ Date filter failed: {type(e).__name__}: {e}")
+        return False
+
+if __name__ == "__main__":
+    print("Testing the exact PR scenario: some_date|date:_('Y-m-d')")
+    
+    test1_passed = test_template_with_lazy_format()
+    test2_passed = test_template_with_literal_lazy_format()
+    
+    if test1_passed and test2_passed:
+        print("\n✓ All tests passed! The PR issue has been fixed.")
+        sys.exit(0)
+    else:
+        print("\n✗ Some tests failed!")
+        sys.exit(1)
\ No newline at end of file
