diff --git b/sphinx/domains/python.py a/sphinx/domains/python.py
index 244b2bb9c..893bb0a22 100644
--- b/sphinx/domains/python.py
+++ a/sphinx/domains/python.py
@@ -70,11 +70,11 @@ pairindextypes = {
 
 def _parse_annotation(annotation: str) -> List[Node]:
     """Parse type annotation."""
     def make_xref(text: str) -> addnodes.pending_xref:
         return pending_xref('', nodes.Text(text),
-                            refdomain='py', reftype='obj', reftarget=text)
+                            refdomain='py', reftype='class', reftarget=text)
 
     def unparse(node: ast.AST) -> List[Node]:
         if isinstance(node, ast.Attribute):
             return [nodes.Text("%s.%s" % (unparse(node.value)[0], node.attr))]
         elif isinstance(node, ast.Expr):
@@ -1309,13 +1309,12 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment,
 
         return s in typing.__all__  # type: ignore
 
     if node.get('refdomain') != 'py':
         return None
-    elif node.get('reftype') == 'obj' and node.get('reftarget') == 'None':
-        # Allow None to be resolved by intersphinx (it's in py:data, not py:class)
-        return None
+    elif node.get('reftype') in ('class', 'obj') and node.get('reftarget') == 'None':
+        return contnode
     elif node.get('reftype') in ('class', 'exc'):
         reftarget = node.get('reftarget')
         if inspect.isclass(getattr(builtins, reftarget, None)):
             # built-in class
             return contnode
