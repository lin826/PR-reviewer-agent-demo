diff --git a/sympy/parsing/latex/__init__.py b/sympy/parsing/latex/__init__.py
index f98e53e70f..21689ecdd0 100644
--- a/sympy/parsing/latex/__init__.py
+++ b/sympy/parsing/latex/__init__.py
@@ -32,4 +32,4 @@ def parse_latex(s):
         import_kwargs={'fromlist': ['X']})
 
     if _latex is not None:
-        return _latex.parse_latex(s)
+        return _latex.parse_latex(s)
diff --git a/sympy/parsing/latex/_parse_latex_antlr.py b/sympy/parsing/latex/_parse_latex_antlr.py
index 2e4a45ad20..b44107819c 100644
--- a/sympy/parsing/latex/_parse_latex_antlr.py
+++ b/sympy/parsing/latex/_parse_latex_antlr.py
@@ -383,9 +383,19 @@ def convert_frac(frac):
     expr_top = convert_expr(frac.upper)
     expr_bot = convert_expr(frac.lower)
     inverse_denom = sympy.Pow(expr_bot, -1, evaluate=False)
+
+
     if expr_top == 1:
-        return inverse_denom
+        # Only add an explicit '1' when the denominator is a Pow.
+        # This prevents unwanted structural changes for simple 1/x
+        # while still protecting cases like 1/(c**2) against exponentâ€‘merging.
+        if isinstance(expr_bot, sympy.Pow):
+            return sympy.Mul(sympy.Integer(1), inverse_denom, evaluate=False)
+        else:
+            return inverse_denom
+
     else:
+
         return sympy.Mul(expr_top, inverse_denom, evaluate=False)
 
 def convert_binom(binom):
@@ -591,4 +601,4 @@ def get_differential_var_str(text):
     text = text[idx:]
     if text[0] == "\\":
         text = text[1:]
-    return text
+    return text
diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index eb663eec7f..c25a959bdf 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -3081,4 +3081,4 @@ def multiline_latex(lhs, rhs, terms_per_line=1, environment="align*", use_dots=F
                         l.doprint(term), term_end)
         term_count += 1
     result += end_term
-    return result
+    return result
