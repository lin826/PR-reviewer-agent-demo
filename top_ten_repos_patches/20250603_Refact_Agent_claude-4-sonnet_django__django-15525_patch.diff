diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py
index ac97f13161..11fbf4f2ea 100644
--- a/django/core/management/commands/loaddata.py
+++ b/django/core/management/commands/loaddata.py
@@ -205,21 +205,48 @@ class Command(BaseCommand):
         if router.allow_migrate_model(self.using, obj.object.__class__):
             saved = True
             self.models.add(obj.object.__class__)
-            try:
-                obj.save(using=self.using)
-            # psycopg2 raises ValueError if data contains NUL chars.
-            except (DatabaseError, IntegrityError, ValueError) as e:
-                e.args = (
-                    "Could not load %(object_label)s(pk=%(pk)s): %(error_msg)s"
-                    % {
-                        "object_label": obj.object._meta.label,
-                        "pk": obj.object.pk,
-                        "error_msg": e,
-                    },
+            if obj.deferred_fields:
+                # Check if any deferred fields are required (non-nullable)
+                has_required_deferred_fields = any(
+                    not field.null for field in obj.deferred_fields.keys()
+                    if hasattr(field, 'null')
                 )
-                raise
-        if obj.deferred_fields:
-            self.objs_with_deferred_fields.append(obj)
+                
+                if has_required_deferred_fields:
+                    # If the object has required deferred fields, don't save it now.
+                    # It will be saved later after all fixtures are loaded.
+                    self.objs_with_deferred_fields.append(obj)
+                else:
+                    # If all deferred fields are nullable, save the object now
+                    # and resolve the deferred fields later.
+                    try:
+                        obj.save(using=self.using)
+                    # psycopg2 raises ValueError if data contains NUL chars.
+                    except (DatabaseError, IntegrityError, ValueError) as e:
+                        e.args = (
+                            "Could not load %(object_label)s(pk=%(pk)s): %(error_msg)s"
+                            % {
+                                "object_label": obj.object._meta.label,
+                                "pk": obj.object.pk,
+                                "error_msg": e,
+                            },
+                        )
+                        raise
+                    self.objs_with_deferred_fields.append(obj)
+            else:
+                try:
+                    obj.save(using=self.using)
+                # psycopg2 raises ValueError if data contains NUL chars.
+                except (DatabaseError, IntegrityError, ValueError) as e:
+                    e.args = (
+                        "Could not load %(object_label)s(pk=%(pk)s): %(error_msg)s"
+                        % {
+                            "object_label": obj.object._meta.label,
+                            "pk": obj.object.pk,
+                            "error_msg": e,
+                        },
+                    )
+                    raise
         return saved
 
     def load_label(self, fixture_label):
diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py
index da85cb4b92..8f51d0d6d4 100644
--- a/django/core/serializers/base.py
+++ b/django/core/serializers/base.py
@@ -319,7 +319,7 @@ class DeserializedObject:
                         e, label, self.object.pk, field_value
                     )
                 setattr(self.object, field.attname, value)
-        self.save()
+        self.save(using=using)
 
 
 def build_instance(Model, data, db):
@@ -336,13 +336,21 @@ def build_instance(Model, data, db):
         and hasattr(default_manager, "get_by_natural_key")
         and hasattr(Model, "natural_key")
     ):
-        natural_key = Model(**data).natural_key()
         try:
-            data[Model._meta.pk.attname] = Model._meta.pk.to_python(
-                default_manager.db_manager(db).get_by_natural_key(*natural_key).pk
-            )
-        except Model.DoesNotExist:
+            natural_key = Model(**data).natural_key()
+        except Exception:
+            # If natural_key() fails (e.g., due to missing foreign key fields
+            # that were deferred), skip the natural key lookup and proceed
+            # with creating the instance. The deferred fields will be resolved
+            # later in the deserialization process.
             pass
+        else:
+            try:
+                data[Model._meta.pk.attname] = Model._meta.pk.to_python(
+                    default_manager.db_manager(db).get_by_natural_key(*natural_key).pk
+                )
+            except Model.DoesNotExist:
+                pass
     return Model(**data)
 
 
