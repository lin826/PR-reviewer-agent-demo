diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index 3daf84c108..ce0609af12 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -192,8 +192,37 @@ def _collect_factor_and_dimension(self, expr):
         elif isinstance(expr, Function):
             fds = [self._collect_factor_and_dimension(
                 arg) for arg in expr.args]
-            return (expr.func(*(f[0] for f in fds)),
-                    *(d[1] for d in fds))
+            
+            # Check if all arguments are dimensionless
+            all_dimensionless = all(
+                self.get_dimension_system().is_dimensionless(d[1]) 
+                for d in fds
+            )
+            
+            factor_part = expr.func(*(f[0] for f in fds))
+            
+            if all_dimensionless:
+                # For transcendental functions, if all arguments are dimensionless,
+                # the result should be dimensionless (Dimension(1))
+                from sympy.functions.elementary.exponential import exp, log
+                from sympy.functions.elementary.trigonometric import sin, cos, tan, cot, sec, csc
+                from sympy.functions.elementary.trigonometric import asin, acos, atan, acot, asec, acsc
+                from sympy.functions.elementary.hyperbolic import sinh, cosh, tanh, coth, sech, csch
+                from sympy.functions.elementary.hyperbolic import asinh, acosh, atanh, acoth, asech, acsch
+                
+                transcendental_functions = (exp, log, sin, cos, tan, cot, sec, csc,
+                                          asin, acos, atan, acot, asec, acsc,
+                                          sinh, cosh, tanh, coth, sech, csch,
+                                          asinh, acosh, atanh, acoth, asech, acsch)
+                
+                if isinstance(expr, transcendental_functions):
+                    return factor_part, Dimension(1)
+                else:
+                    # For other functions (like sqrt, Abs), preserve original logic
+                    return (factor_part, *(d[1] for d in fds))
+            else:
+                # For non-dimensionless arguments, use the original logic
+                return (factor_part, *(d[1] for d in fds))
         elif isinstance(expr, Dimension):
             return S.One, expr
         else:
