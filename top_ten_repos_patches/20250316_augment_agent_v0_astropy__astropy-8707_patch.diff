diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 8c1ac5d738..4803710a81 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -3,11 +3,11 @@
 import re
 import warnings
 
 import numpy as np
 
-from .util import _str_to_num, _is_int, translate, _words_group
+from .util import _str_to_num, _is_int, translate, _words_group, decode_ascii
 from .verify import _Verify, _ErrList, VerifyError, VerifyWarning
 
 from . import conf
 from astropy.utils.exceptions import AstropyUserWarning
 
@@ -207,10 +207,20 @@ class Card(_Verify):
     def __len__(self):
         return 3
 
     def __getitem__(self, index):
         return (self.keyword, self.value, self.comment)[index]
+        
+    def __eq__(self, other):
+        """
+        Two cards are equal if their keyword, value, and comment match.
+        """
+        if not isinstance(other, Card):
+            return NotImplemented
+        return (self.keyword == other.keyword and
+                self.value == other.value and
+                self.comment == other.comment)
 
     @property
     def keyword(self):
         """Returns the keyword name parsed from the card image."""
         if self._keyword is not None:
@@ -545,15 +555,19 @@ class Card(_Verify):
                 not self.comment)
 
     @classmethod
     def fromstring(cls, image):
         """
-        Construct a `Card` object from a (raw) string. It will pad the string
+        Construct a `Card` object from a (raw) string or bytes. It will pad the string
         if it is not the length of a card image (80 columns).  If the card
         image is longer than 80 columns, assume it contains ``CONTINUE``
         card(s).
         """
+        
+        # Convert bytes to string if necessary
+        if isinstance(image, bytes):
+            image = decode_ascii(image)
 
         card = cls()
         card._image = _pad(image)
         card._verified = False
         return card
diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py
index ad07e6d52d..6481a64f7d 100644
--- a/astropy/io/fits/header.py
+++ b/astropy/io/fits/header.py
@@ -332,12 +332,12 @@ class Header:
         Creates an HDU header from a byte string containing the entire header
         data.
 
         Parameters
         ----------
-        data : str
-           String containing the entire header.
+        data : str or bytes
+           String or bytes containing the entire header.
 
         sep : str, optional
             The string separating cards from each other, such as a newline.  By
             default there is no card separator (as is the case in a raw FITS
             file).
@@ -345,10 +345,14 @@ class Header:
         Returns
         -------
         header
             A new `Header` instance.
         """
+        
+        # Convert bytes to string if necessary
+        if isinstance(data, bytes):
+            data = decode_ascii(data)
 
         cards = []
 
         # If the card separator contains characters that may validly appear in
         # a card, the only way to unambiguously distinguish between cards is to
