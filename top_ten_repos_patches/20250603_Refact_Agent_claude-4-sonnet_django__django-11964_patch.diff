diff --git a/django/db/models/enums.py b/django/db/models/enums.py
index bbe362a6ab..05897976f0 100644
--- a/django/db/models/enums.py
+++ b/django/db/models/enums.py
@@ -65,11 +65,16 @@ class Choices(enum.Enum, metaclass=ChoicesMeta):
 
 class IntegerChoices(int, Choices):
     """Class for creating enumerated integer choices."""
-    pass
+    
+    def __str__(self):
+        return str(self.value)
 
 
 class TextChoices(str, Choices):
     """Class for creating enumerated string choices."""
 
+    def __str__(self):
+        return str(self.value)
+
     def _generate_next_value_(name, start, count, last_values):
         return name
diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py
index 6b4bd6e7fd..0d9b5a384f 100644
--- a/tests/model_enums/tests.py
+++ b/tests/model_enums/tests.py
@@ -80,6 +80,21 @@ class ChoicesTests(SimpleTestCase):
         self.assertIn(1, Suit)
         self.assertNotIn(0, Suit)
 
+    def test_integerchoices_str_returns_value(self):
+        """Test that str() of IntegerChoices returns the string representation of the enum value."""
+        self.assertEqual(str(Suit.DIAMOND), '1')
+        self.assertEqual(str(Suit.SPADE), '2')
+        self.assertEqual(str(Vehicle.CAR), '1')
+        self.assertEqual(str(Vehicle.TRUCK), '2')
+        
+        # Test with zero value
+        class ZeroChoice(models.IntegerChoices):
+            ZERO = 0, 'Zero'
+            ONE = 1, 'One'
+        
+        self.assertEqual(str(ZeroChoice.ZERO), '0')
+        self.assertEqual(str(ZeroChoice.ONE), '1')
+
     def test_textchoices(self):
         self.assertEqual(YearInSchool.choices, [
             ('FR', 'Freshman'), ('SO', 'Sophomore'), ('JR', 'Junior'), ('SR', 'Senior'), ('GR', 'Graduate'),
@@ -121,6 +136,21 @@ class ChoicesTests(SimpleTestCase):
         self.assertIn('FR', YearInSchool)
         self.assertNotIn('XX', YearInSchool)
 
+    def test_textchoices_str_returns_value(self):
+        """Test that str() of TextChoices returns the enum value, not the enum name."""
+        self.assertEqual(str(YearInSchool.FRESHMAN), 'FR')
+        self.assertEqual(str(YearInSchool.SOPHOMORE), 'SO')
+        self.assertEqual(str(Gender.MALE), 'M')
+        self.assertEqual(str(Gender.FEMALE), 'F')
+        
+        # Test with empty string value
+        class BlankStr(models.TextChoices):
+            EMPTY = '', '(Empty)'
+            ONE = 'ONE', 'One'
+        
+        self.assertEqual(str(BlankStr.EMPTY), '')
+        self.assertEqual(str(BlankStr.ONE), 'ONE')
+
     def test_textchoices_blank_value(self):
         class BlankStr(models.TextChoices):
             EMPTY = '', '(Empty)'
