diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py
index 9dd10d219e..4856ca77ea 100644
--- a/sympy/physics/quantum/tensorproduct.py
+++ b/sympy/physics/quantum/tensorproduct.py
@@ -256,6 +256,11 @@ def _eval_expand_tensorproduct(self, **hints):
             return Add(*add_args)
         else:
             return self
+            
+    def _eval_power(self, exp):
+        """Distribute powers across TensorProduct arguments."""
+        new_args = [arg ** exp for arg in self.args]
+        return TensorProduct(*new_args)
 
     def _eval_trace(self, **kwargs):
         indices = kwargs.get('indices', None)
@@ -382,7 +387,13 @@ def tensor_product_simp(e, **hints):
     if isinstance(e, Add):
         return Add(*[tensor_product_simp(arg) for arg in e.args])
     elif isinstance(e, Pow):
-        return tensor_product_simp(e.base) ** e.exp
+        base = tensor_product_simp(e.base)
+        # Special handling for powers of TensorProduct
+        if isinstance(base, TensorProduct):
+            # Distribute the power to each element in the tensor
+            new_args = [arg ** e.exp for arg in base.args]
+            return TensorProduct(*new_args)
+        return base ** e.exp
     elif isinstance(e, Mul):
         return tensor_product_simp_Mul(e)
     elif isinstance(e, Commutator):
diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py
index 9f65844c85..12abee7bf6 100644
--- a/sympy/physics/quantum/tests/test_tensorproduct.py
+++ b/sympy/physics/quantum/tests/test_tensorproduct.py
@@ -47,6 +47,26 @@ def test_tensor_product_commutator():
 
 def test_tensor_product_simp():
     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)
+    
+    
+def test_tensor_product_power():
+    # Test basic power simplification
+    assert tensor_product_simp(TP(A, B)**2) == TP(A**2, B**2)
+    
+    # Test with identity elements
+    assert tensor_product_simp(TP(1, 1)**2) == TP(1, 1)
+    
+    # Test with Pauli matrices
+    from sympy.physics.paulialgebra import Pauli
+    assert tensor_product_simp(TP(1, Pauli(3))**2) == TP(1, 1)
+    assert tensor_product_simp(TP(1, Pauli(3))**3) == TP(1, Pauli(3))
+    
+    # Test with symbolic exponents
+    n = symbols('n')
+    assert tensor_product_simp(TP(A, B)**n) == TP(A**n, B**n)
+    
+    # Test with negative exponents
+    assert tensor_product_simp(TP(A, B)**(-1)) == TP(A**(-1), B**(-1))
 
 
 def test_issue_5923():
