diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py
index 800a25c92..170963b90 100644
--- a/src/_pytest/mark/structures.py
+++ b/src/_pytest/mark/structures.py
@@ -357,9 +357,40 @@ class MarkDecorator:
 
 def get_unpacked_marks(obj: object) -> Iterable[Mark]:
     """Obtain the unpacked marks that are stored on an object."""
-    mark_list = getattr(obj, "pytestmark", [])
-    if not isinstance(mark_list, list):
-        mark_list = [mark_list]
+    if isinstance(obj, type):
+        # For classes, collect marks from all base classes in the MRO
+        mark_list = []
+        seen = set()  # Track seen marks to avoid duplicates
+        
+        # Start with the object's own marks
+        own_marks = getattr(obj, "pytestmark", [])
+        if not isinstance(own_marks, list):
+            own_marks = [own_marks]
+        
+        # Add own marks first
+        for mark in own_marks:
+            mark_id = id(mark)
+            if mark_id not in seen:
+                seen.add(mark_id)
+                mark_list.append(mark)
+        
+        # Then add marks from base classes
+        for cls in obj.__mro__[1:]:  # Skip the class itself (already processed)
+            base_marks = getattr(cls, "pytestmark", [])
+            if not isinstance(base_marks, list):
+                base_marks = [base_marks]
+            
+            for mark in base_marks:
+                mark_id = id(mark)
+                if mark_id not in seen:
+                    seen.add(mark_id)
+                    mark_list.append(mark)
+    else:
+        # For non-class objects, use the original behavior
+        mark_list = getattr(obj, "pytestmark", [])
+        if not isinstance(mark_list, list):
+            mark_list = [mark_list]
+    
     return normalize_mark_list(mark_list)
 
 
