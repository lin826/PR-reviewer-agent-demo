--- a/sphinx/pycode/ast.py
+++ b/sphinx/pycode/ast.py
@@ -166,16 +166,25 @@
         return "{" + ", ".join(self.visit(e) for e in node.elts) + "}"
 
     def visit_Subscript(self, node: ast.Subscript) -> str:
-        return "%s[%s]" % (self.visit(node.value), self.visit(node.slice))
+        def visit_slice(slice_node):
+            # Special handling for tuple slices - don't add parentheses
+            if isinstance(slice_node, ast.Tuple):
+                return ", ".join(self.visit(e) for e in slice_node.elts)
+            else:
+                return self.visit(slice_node)
+        
+        return "%s[%s]" % (self.visit(node.value), visit_slice(node.slice))
 
     def visit_UnaryOp(self, node: ast.UnaryOp) -> str:
         return "%s %s" % (self.visit(node.op), self.visit(node.operand))
 
     def visit_Tuple(self, node: ast.Tuple) -> str:
-        if node.elts:
-            return ", ".join(self.visit(e) for e in node.elts)
+        if len(node.elts) == 0:
+            return "()"
+        elif len(node.elts) == 1:
+            return "(" + self.visit(node.elts[0]) + ",)"
         else:
-            return "()"
+            return "(" + ", ".join(self.visit(e) for e in node.elts) + ")"
 
     if sys.version_info >= (3, 6):
         def visit_Constant(self, node: ast.Constant) -> str:
