diff --git a/django/contrib/auth/checks.py b/django/contrib/auth/checks.py
index 65fc266f7e..1019e5884d 100644
--- a/django/contrib/auth/checks.py
+++ b/django/contrib/auth/checks.py
@@ -2,14 +2,30 @@ from itertools import chain
 from types import MethodType
 
 from django.apps import apps
 from django.conf import settings
 from django.core import checks
+from django.db.models import UniqueConstraint
 
 from .management import _get_builtin_permissions
 
 
+def _is_field_unique_via_constraint(model_class, field_name):
+    """
+    Check if a field is guaranteed to be unique via an unconditional 
+    single-field UniqueConstraint.
+    """
+    for constraint in model_class._meta.constraints:
+        if isinstance(constraint, UniqueConstraint):
+            # Only consider unconditional constraints (no condition)
+            if constraint.condition is None:
+                # Check if this is a single-field constraint for our field
+                if constraint.fields == (field_name,):
+                    return True
+    return False
+
+
 def check_user_model(app_configs=None, **kwargs):
     if app_configs is None:
         cls = apps.get_model(settings.AUTH_USER_MODEL)
     else:
         app_label, model_name = settings.AUTH_USER_MODEL.split('.')
@@ -50,11 +66,13 @@ def check_user_model(app_configs=None, **kwargs):
                 id='auth.E002',
             )
         )
 
     # Check that the username field is unique
-    if not cls._meta.get_field(cls.USERNAME_FIELD).unique:
+    username_field = cls._meta.get_field(cls.USERNAME_FIELD)
+    is_unique = username_field.unique or _is_field_unique_via_constraint(cls, cls.USERNAME_FIELD)
+    if not is_unique:
         if (settings.AUTHENTICATION_BACKENDS ==
                 ['django.contrib.auth.backends.ModelBackend']):
             errors.append(
                 checks.Error(
                     "'%s.%s' must be unique because it is named as the 'USERNAME_FIELD'." % (
