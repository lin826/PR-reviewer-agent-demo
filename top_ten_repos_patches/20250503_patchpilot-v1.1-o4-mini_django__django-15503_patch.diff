diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py
index 823090b9d1..29d8ce8ea2 100644
--- a/django/db/backends/mysql/operations.py
+++ b/django/db/backends/mysql/operations.py
@@ -465,4 +465,4 @@ class DatabaseOperations(BaseDatabaseOperations):
             on_conflict,
             update_fields,
             unique_fields,
-        )
+        )
diff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py
index ddad567a24..a0c645595b 100644
--- a/django/db/backends/oracle/operations.py
+++ b/django/db/backends/oracle/operations.py
@@ -707,4 +707,4 @@ END;
             )
         if isinstance(expression, RawSQL) and expression.conditional:
             return True
-        return False
+        return False
diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py
index 7c7cfce1ba..d5dff6f0e7 100644
--- a/django/db/backends/sqlite3/operations.py
+++ b/django/db/backends/sqlite3/operations.py
@@ -433,4 +433,4 @@ class DatabaseOperations(BaseDatabaseOperations):
             on_conflict,
             update_fields,
             unique_fields,
-        )
+        )
diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index fdca700c9d..fa6dd1fedd 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -193,13 +193,21 @@ class HasKeyLookup(PostgresOperatorLookup):
                 *_, rhs_key_transforms = key.preprocess_lhs(compiler, connection)
             else:
                 rhs_key_transforms = [key]
+
             rhs_params.append(
                 "%s%s"
                 % (
                     lhs_json_path,
-                    compile_json_path(rhs_key_transforms, include_root=False),
+
+                    compile_json_path(
+                        rhs_key_transforms,
+                        include_root=False,
+                        key_lookup=not isinstance(key, KeyTransform),
+                    ),
+
                 )
             )
+
         # Add condition for each key.
         if self.logical_operator:
             sql = "(%s)" % self.logical_operator.join([sql] * len(rhs_params))
@@ -297,9 +305,52 @@ JSONField.register_lookup(ContainedBy)
 JSONField.register_lookup(HasKey)
 JSONField.register_lookup(HasKeys)
 JSONField.register_lookup(HasAnyKeys)
+
 JSONField.register_lookup(JSONExact)
 JSONField.register_lookup(JSONIContains)
 
+# ---------------------------------------------------------------------
+# Enhanced JSON path compiler with key_lookup support
+# ---------------------------------------------------------------------
+def _compile_json_path(key_transforms, include_root=True, key_lookup=False):
+    """
+    Build a JSON path expression from the given components.
+
+    When ``key_lookup`` is True, every component is treated as an object
+    member instead of an array index.  Components that are purely numeric
+    or that contain characters which make them invalid as bare identifiers
+    are quoted, e.g. $."1111".
+    """
+    json_path = "$" if include_root else ""
+    for key in key_transforms:
+        key_str = str(key).replace('"', '\\"')
+        if key_lookup:
+            # Always use the member accessor. Quote if the component is either
+            # purely digits or not a valid identifier.
+            if key_str.isidentifier() and not key_str.isdigit():
+                json_path += f".{key_str}"
+            else:
+                json_path += f'."{key_str}"'
+        else:
+
+            # Preserve existing behaviour for digit-only segments (array indices).
+            if key_str.isdigit():
+                json_path += f"[{key_str}]"
+            else:
+                # Quote invalid identifiers to ensure proper member access and
+                # to prevent malformed JSON paths.
+                if key_str.isidentifier():
+                    json_path += f".{key_str}"
+                else:
+                    json_path += f'."{key_str}"'
+
+    return json_path
+
+
+# Make the new implementation the default one used throughout the module.
+compile_json_path = _compile_json_path
+
+
 
 class KeyTransform(Transform):
     postgres_operator = "->"
@@ -566,4 +617,4 @@ class KeyTransformFactory:
         self.key_name = key_name
 
     def __call__(self, *args, **kwargs):
-        return KeyTransform(self.key_name, *args, **kwargs)
+        return KeyTransform(self.key_name, *args, **kwargs)
