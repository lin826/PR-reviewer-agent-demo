diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 7d226955d5..de1566f75a 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -88,14 +88,41 @@ class DeconstructableSerializer(BaseSerializer):
             strings.append("%s=%s" % (kw, arg_string))
         return "%s(%s)" % (name, ", ".join(strings)), imports
 
     @staticmethod
     def _serialize_path(path):
-        module, name = path.rsplit(".", 1)
+        # Handle single component paths (no dots)
+        if '.' not in path:
+            # Fallback to original behavior - this will likely fail but maintains compatibility
+            return path, set()
+        
+        # Find the actual module boundary by trying to import progressively
+        import importlib
+        
+        parts = path.split('.')
+        module_path = None
+        
+        # Try importing each prefix to find where the module ends
+        for i in range(len(parts)):
+            potential_module = '.'.join(parts[:i+1])
+            try:
+                importlib.import_module(potential_module)
+                module_path = potential_module
+            except ImportError:
+                # Stop at the first import failure
+                break
+        
+        if module_path is None:
+            # Fallback to original behavior if we can't find a valid module
+            module, name = path.rsplit(".", 1)
+        else:
+            module = module_path
+            name = path  # Always use the full path for the name
+        
         if module == "django.db.models":
             imports = {"from django.db import models"}
-            name = "models.%s" % name
+            name = "models.%s" % name.split('.')[-1] if '.' in name else "models.%s" % name
         else:
             imports = {"import %s" % module}
             name = path
         return name, imports
 
