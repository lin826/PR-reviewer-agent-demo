diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py
index 71a23bd..9ce1472 100644
--- a/sphinx/domains/cpp.py
+++ b/sphinx/domains/cpp.py
@@ -4662,20 +4662,44 @@ class DefinitionParser(BaseParser):
                       integer_literal_re, octal_literal_re]:
             pos = self.pos
             if self.match(regex):
+
                 while self.current_char in 'uUlLfF':
                     self.pos += 1
+                # swallow optional user-defined literal suffix for numeric literals
+                suffix_start = self.pos
+                if not self.eof and (self.current_char.isalpha() or self.current_char == '_'):
+                    self.pos += 1
+                    while not self.eof and (self.current_char.isalnum() or self.current_char == '_'):
+                        self.pos += 1
                 return ASTNumberLiteral(self.definition[pos:self.pos])
 
+        # string-literal
+        string_start = self.pos
         string = self._parse_string()
         if string is not None:
+            # swallow optional user-defined literal suffix for string literals
+            suffix_start = self.pos
+            if not self.eof and (self.current_char.isalpha() or self.current_char == '_'):
+                self.pos += 1
+                while not self.eof and (self.current_char.isalnum() or self.current_char == '_'):
+                    self.pos += 1
+                # extend captured string to include suffix
+                string = self.definition[string_start:self.pos]
             return ASTStringLiteral(string)
 
         # character-literal
         if self.match(char_literal_re):
             prefix = self.last_match.group(1)  # may be None when no prefix
             data = self.last_match.group(2)
+            # swallow optional user-defined literal suffix for character literals
+            suffix_start = self.pos
+            if not self.eof and (self.current_char.isalpha() or self.current_char == '_'):
+                self.pos += 1
+                while not self.eof and (self.current_char.isalnum() or self.current_char == '_'):
+                    self.pos += 1
             try:
                 return ASTCharLiteral(prefix, data)
+
             except UnicodeDecodeError as e:
                 self.fail("Can not handle character literal. Internal error was: %s" % e)
             except UnsupportedMultiCharacterCharLiteral:
