diff --git a/src/_pytest/main.py b/src/_pytest/main.py
index d8a208a1a..57bc87052 100644
--- a/src/_pytest/main.py
+++ b/src/_pytest/main.py
@@ -676,7 +676,11 @@ class Session(nodes.FSCollector):
 
                 seen_dirs: Set[py.path.local] = set()
                 for direntry in visit(str(argpath), self._recurse):
-                    if not direntry.is_file():
+                    try:
+                        if not direntry.is_file():
+                            continue
+                    except OSError:
+                        # Handle circular symlinks or broken symlinks gracefully
                         continue
 
                     path = py.path.local(direntry.path)
diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py
index f0bdb1481..5659af15e 100644
--- a/src/_pytest/pathlib.py
+++ b/src/_pytest/pathlib.py
@@ -558,8 +558,13 @@ def visit(
     entries = sorted(os.scandir(path), key=lambda entry: entry.name)
     yield from entries
     for entry in entries:
-        if entry.is_dir(follow_symlinks=False) and recurse(entry):
-            yield from visit(entry.path, recurse)
+        try:
+            if entry.is_dir(follow_symlinks=True) and recurse(entry):
+                yield from visit(entry.path, recurse)
+        except OSError:
+            # Handle circular symlinks or broken symlinks gracefully
+            # by skipping them instead of crashing
+            continue
 
 
 def absolutepath(path: Union[Path, str]) -> Path:
diff --git a/src/_pytest/python.py b/src/_pytest/python.py
index 35797cc07..ebb704460 100644
--- a/src/_pytest/python.py
+++ b/src/_pytest/python.py
@@ -709,7 +709,13 @@ class Package(Module):
             path = py.path.local(direntry.path)
 
             # We will visit our own __init__.py file, in which case we skip it.
-            if direntry.is_file():
+            try:
+                is_file = direntry.is_file()
+            except OSError:
+                # Handle circular symlinks or broken symlinks gracefully
+                continue
+                
+            if is_file:
                 if direntry.name == "__init__.py" and path.dirpath() == this_path:
                     continue
 
@@ -720,13 +726,20 @@ class Package(Module):
             ):
                 continue
 
-            if direntry.is_file():
+            if is_file:
                 yield from self._collectfile(path)
-            elif not direntry.is_dir():
-                # Broken symlink or invalid/missing file.
-                continue
-            elif path.join("__init__.py").check(file=1):
-                pkg_prefixes.add(path)
+            else:
+                try:
+                    is_dir = direntry.is_dir()
+                except OSError:
+                    # Handle circular symlinks or broken symlinks gracefully
+                    continue
+                    
+                if not is_dir:
+                    # Broken symlink or invalid/missing file.
+                    continue
+                elif path.join("__init__.py").check(file=1):
+                    pkg_prefixes.add(path)
 
 
 def _call_with_optional_argument(func, arg) -> None:
