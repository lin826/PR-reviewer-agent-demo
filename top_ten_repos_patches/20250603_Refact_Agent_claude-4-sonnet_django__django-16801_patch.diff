diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py
index 7f8eb128e1..c79ebfdadc 100644
--- a/django/db/models/fields/files.py
+++ b/django/db/models/fields/files.py
@@ -441,7 +441,8 @@ class ImageField(FileField):
         # after their corresponding image field don't stay cleared by
         # Model.__init__, see bug #11196.
         # Only run post-initialization dimension update on non-abstract models
-        if not cls._meta.abstract:
+        # and only when width_field or height_field are defined.
+        if not cls._meta.abstract and (self.width_field or self.height_field):
             signals.post_init.connect(self.update_dimension_fields, sender=cls)
 
     def update_dimension_fields(self, instance, force=False, *args, **kwargs):
diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py
index 6ef46ef200..14ef135a1b 100644
--- a/tests/model_fields/test_imagefield.py
+++ b/tests/model_fields/test_imagefield.py
@@ -1,10 +1,14 @@
 import os
 import shutil
+import tempfile
 from unittest import skipIf
 
 from django.core.exceptions import ImproperlyConfigured
 from django.core.files import File
 from django.core.files.images import ImageFile
+from django.core.files.storage import FileSystemStorage
+from django.db import models
+from django.db.models import signals
 from django.test import TestCase
 from django.test.testcases import SerializeMixin
 
@@ -461,3 +465,127 @@ class TwoImageFieldTests(ImageFieldTestMixin, TestCase):
         # Dimensions were recalculated, and hence file should have opened.
         self.assertIs(p.mugshot.was_opened, True)
         self.assertIs(p.headshot.was_opened, True)
+
+
+@skipIf(Image is None, "Pillow is required to test ImageField")
+class ImageFieldSignalOptimizationTest(TestCase):
+    """Test that ImageField only connects post_init signal handlers when needed."""
+    
+    def setUp(self):
+        # Create a temporary storage directory
+        self.temp_storage_dir = tempfile.mkdtemp()
+        self.temp_storage = FileSystemStorage(self.temp_storage_dir)
+    
+    def test_no_signal_handler_without_dimension_fields(self):
+        """
+        Test that ImageField does not connect post_init signal handler
+        when width_field and height_field are not specified.
+        """
+        # Count initial signal handlers
+        initial_count = len(signals.post_init.receivers)
+        
+        # Define model WITHOUT dimension fields
+        class TestModelNoDims(models.Model):
+            name = models.CharField(max_length=50)
+            image = models.ImageField(storage=self.temp_storage, upload_to="test")
+            
+            class Meta:
+                app_label = 'test_app'
+        
+        # Should not add any signal handlers
+        after_count = len(signals.post_init.receivers)
+        self.assertEqual(after_count, initial_count,
+                        "ImageField without dimension fields should not add signal handlers")
+    
+    def test_signal_handler_with_dimension_fields(self):
+        """
+        Test that ImageField connects post_init signal handler
+        when width_field or height_field are specified.
+        """
+        # Count initial signal handlers
+        initial_count = len(signals.post_init.receivers)
+        
+        # Define model WITH width_field only
+        class TestModelWithWidth(models.Model):
+            name = models.CharField(max_length=50)
+            image = models.ImageField(
+                storage=self.temp_storage, 
+                upload_to="test",
+                width_field="image_width"
+            )
+            image_width = models.PositiveSmallIntegerField(null=True, blank=True)
+            
+            class Meta:
+                app_label = 'test_app'
+        
+        # Should add exactly one signal handler
+        after_width_count = len(signals.post_init.receivers)
+        self.assertEqual(after_width_count, initial_count + 1,
+                        "ImageField with width_field should add one signal handler")
+        
+        # Define model WITH height_field only
+        class TestModelWithHeight(models.Model):
+            name = models.CharField(max_length=50)
+            image = models.ImageField(
+                storage=self.temp_storage, 
+                upload_to="test",
+                height_field="image_height"
+            )
+            image_height = models.PositiveSmallIntegerField(null=True, blank=True)
+            
+            class Meta:
+                app_label = 'test_app'
+        
+        # Should add exactly one more signal handler
+        after_height_count = len(signals.post_init.receivers)
+        self.assertEqual(after_height_count, after_width_count + 1,
+                        "ImageField with height_field should add one signal handler")
+        
+        # Define model WITH both width_field and height_field
+        class TestModelWithBoth(models.Model):
+            name = models.CharField(max_length=50)
+            image = models.ImageField(
+                storage=self.temp_storage, 
+                upload_to="test",
+                width_field="image_width",
+                height_field="image_height"
+            )
+            image_width = models.PositiveSmallIntegerField(null=True, blank=True)
+            image_height = models.PositiveSmallIntegerField(null=True, blank=True)
+            
+            class Meta:
+                app_label = 'test_app'
+        
+        # Should add exactly one more signal handler
+        after_both_count = len(signals.post_init.receivers)
+        self.assertEqual(after_both_count, after_height_count + 1,
+                        "ImageField with both dimension fields should add one signal handler")
+    
+    def test_abstract_model_no_signal_handler(self):
+        """
+        Test that abstract models do not connect signal handlers
+        even when dimension fields are specified.
+        """
+        # Count initial signal handlers
+        initial_count = len(signals.post_init.receivers)
+        
+        # Define abstract model WITH dimension fields
+        class AbstractTestModel(models.Model):
+            name = models.CharField(max_length=50)
+            image = models.ImageField(
+                storage=self.temp_storage, 
+                upload_to="test",
+                width_field="image_width",
+                height_field="image_height"
+            )
+            image_width = models.PositiveSmallIntegerField(null=True, blank=True)
+            image_height = models.PositiveSmallIntegerField(null=True, blank=True)
+            
+            class Meta:
+                abstract = True
+                app_label = 'test_app'
+        
+        # Should not add any signal handlers for abstract models
+        after_count = len(signals.post_init.receivers)
+        self.assertEqual(after_count, initial_count,
+                        "Abstract models should not add signal handlers")
