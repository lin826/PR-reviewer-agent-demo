diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index b9eb33329f..9a6614a809 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -56,6 +56,7 @@ class ReadOnlyPasswordHashField(forms.Field):
 
     def __init__(self, *args, **kwargs):
         kwargs.setdefault("required", False)
+        kwargs.setdefault("disabled", True)
         super().__init__(*args, **kwargs)
 
     def bound_data(self, data, initial):
diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py
index 88b4b32667..48dd410cda 100644
--- a/tests/auth_tests/test_forms.py
+++ b/tests/auth_tests/test_forms.py
@@ -778,6 +778,37 @@ class UserChangeFormTest(TestDataMixin, TestCase):
         form = UserChangeForm()
         self.assertEqual(form.fields['username'].widget.attrs.get('autocapitalize'), 'none')
 
+    def test_password_field_disabled_by_default(self):
+        """UserChangeForm password field should be disabled by default."""
+        form = UserChangeForm()
+        self.assertTrue(form.fields['password'].disabled)
+
+    def test_disabled_password_field_ignores_tampered_data(self):
+        """Disabled password field should ignore tampered data and return initial value."""
+        user = User.objects.get(username='testclient')
+        original_password = user.password
+        
+        # Create form with tampered password data
+        form_data = {
+            'username': 'testclient',
+            'password': 'tampered_password_value',
+            'email': 'test@example.com',
+            'first_name': 'Test',
+            'last_name': 'User',
+            'is_active': True,
+            'is_staff': False,
+            'is_superuser': False,
+            'date_joined': user.date_joined,
+            'last_login': user.last_login,
+        }
+        
+        form = UserChangeForm(data=form_data, instance=user)
+        self.assertTrue(form.is_valid())
+        
+        # The password should be the original value, not the tampered value
+        self.assertEqual(form.cleaned_data['password'], original_password)
+        self.assertNotEqual(form.cleaned_data['password'], 'tampered_password_value')
+
 
 @override_settings(TEMPLATES=AUTH_TEMPLATES)
 class PasswordResetFormTest(TestDataMixin, TestCase):
@@ -1024,6 +1055,22 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):
         field = ReadOnlyPasswordHashField()
         self.assertFalse(field.has_changed('aaa', 'bbb'))
 
+    def test_disabled_by_default(self):
+        """ReadOnlyPasswordHashField should be disabled by default."""
+        field = ReadOnlyPasswordHashField()
+        self.assertTrue(field.disabled)
+
+    def test_can_be_explicitly_enabled(self):
+        """ReadOnlyPasswordHashField can be explicitly enabled."""
+        field = ReadOnlyPasswordHashField(disabled=False)
+        self.assertFalse(field.disabled)
+
+    def test_disabled_field_bound_data_returns_initial(self):
+        """Disabled ReadOnlyPasswordHashField should return initial value from bound_data."""
+        field = ReadOnlyPasswordHashField()  # disabled by default
+        result = field.bound_data('submitted_data', 'initial_value')
+        self.assertEqual(result, 'initial_value')
+
 
 class AdminPasswordChangeFormTest(TestDataMixin, TestCase):
 
