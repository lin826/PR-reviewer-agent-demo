diff --git a/pylint/config/__init__.py b/pylint/config/__init__.py
index 5dbda321c..1f5ec4dec 100644
--- a/pylint/config/__init__.py
+++ b/pylint/config/__init__.py
@@ -4,6 +4,7 @@
 
 from __future__ import annotations
 
-__all__ = ["find_default_config_files"]
+__all__ = ["find_default_config_files", "split_regex_csv"]
 
+from pylint.config._regex_utils import split_regex_csv
 from pylint.config.find_default_config_files import find_default_config_files
diff --git a/pylint/config/argument.py b/pylint/config/argument.py
index 30a5fd175..9251e2123 100644
--- a/pylint/config/argument.py
+++ b/pylint/config/argument.py
@@ -112,17 +112,29 @@ def _regex_transformer(value: str) -> Pattern[str]:
 
 
 def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:
-    """Transforms a comma separated list of regular expressions."""
+    """Transforms a comma separated list of regular expressions.
+    
+    This function is aware of regex syntax and will not split on commas
+    that are part of the regex pattern, such as those in quantifiers {1,3}.
+    """
+    from pylint.config._regex_utils import split_regex_csv
+    
     patterns: list[Pattern[str]] = []
-    for pattern in _csv_transformer(value):
+    for pattern in split_regex_csv(value):
         patterns.append(_regex_transformer(pattern))
     return patterns
 
 
 def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:
-    """Transforms a comma separated list of regular expressions paths."""
+    """Transforms a comma separated list of regular expressions paths.
+    
+    This function is aware of regex syntax and will not split on commas
+    that are part of the regex pattern.
+    """
+    from pylint.config._regex_utils import split_regex_csv
+    
     patterns: list[Pattern[str]] = []
-    for pattern in _csv_transformer(value):
+    for pattern in split_regex_csv(value):
         patterns.append(
             re.compile(
                 str(pathlib.PureWindowsPath(pattern)).replace("\\", "\\\\")
diff --git a/tests/config/test_config.py b/tests/config/test_config.py
index 83c8b072e..d2c9aa2c5 100644
--- a/tests/config/test_config.py
+++ b/tests/config/test_config.py
@@ -132,19 +132,19 @@ def test_regex_error(capsys: CaptureFixture) -> None:
 
 
 def test_csv_regex_error(capsys: CaptureFixture) -> None:
-    """Check that we correctly error when an option is passed and one
-    of its comma-separated regular expressions values is an invalid regular expression.
+    """Check that we correctly handle regex patterns with commas.
+    
+    This test used to verify that regexes with commas would cause an error,
+    but now we properly handle such patterns.
     """
-    with pytest.raises(SystemExit):
-        Run(
-            [str(EMPTY_MODULE), r"--bad-names-rgx=(foo{1,3})"],
-            exit=False,
-        )
-    output = capsys.readouterr()
-    assert (
-        r"Error in provided regular expression: (foo{1 beginning at index 0: missing ), unterminated subpattern"
-        in output.err
+    # This should now work without raising an exception
+    runner = Run(
+        [str(EMPTY_MODULE), r"--bad-names-rgx=(foo{1,3})"],
+        exit=False,
     )
+    # Verify that the regex was properly parsed
+    assert len(runner.linter.config.bad_names_rgxs) == 1
+    assert runner.linter.config.bad_names_rgxs[0].pattern == "(foo{1,3})"
 
 
 def test_short_verbose(capsys: CaptureFixture) -> None:
