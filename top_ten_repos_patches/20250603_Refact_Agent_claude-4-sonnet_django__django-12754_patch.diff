diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index 30616c0172..262f49a9fd 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -571,6 +571,26 @@ class MigrationAutodetector:
                     None,
                     True
                 ))
+            # Check for field name conflicts with parent classes that are being removed
+            # This handles the case where a field is moved from a parent to a child class
+            for field_name, field in model_state.fields.items():
+                if field_name not in related_fields:
+                    # Check if any parent class in the old state has this field being removed
+                    for base in model_state.bases:
+                        if isinstance(base, str) and "." in base:
+                            base_app_label, base_name = base.split(".", 1)
+                            # Check if this base model exists in the old state and has the field
+                            old_base_key = (base_app_label, base_name.lower())
+                            if old_base_key in self.from_state.models:
+                                old_base_model = self.from_state.models[old_base_key]
+                                if field_name in old_base_model.fields:
+                                    # Check if this field is being removed from the base model
+                                    new_base_key = (base_app_label, base_name.lower())
+                                    if (new_base_key in self.to_state.models and 
+                                        field_name not in self.to_state.models[new_base_key].fields):
+                                        # Add dependency on the removal of this field from the base class
+                                        dependencies.append((base_app_label, base_name.lower(), field_name, False))
+
             # Generate creation operation
             self.add_operation(
                 app_label,
