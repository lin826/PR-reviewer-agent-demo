diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py
index d65e01d5e2..769b7f4d5c 100644
--- a/django/contrib/admin/filters.py
+++ b/django/contrib/admin/filters.py
@@ -194,10 +194,26 @@ class RelatedFieldListFilter(FieldListFilter):
         return [self.lookup_kwarg, self.lookup_kwarg_isnull]
 
     def field_choices(self, field, request, model_admin):
-        ordering = ()
+        """
+        Determine the ordering to use for the related field's choices.
+
+        Priority:
+            1. `ordering` defined on the related model's ModelAdmin
+               (returned by ModelAdmin.get_ordering()).
+            2. If no related admin (or it returns None/()), use the model's
+               Meta.ordering.
+        """
         related_admin = model_admin.admin_site._registry.get(field.remote_field.model)
         if related_admin is not None:
             ordering = related_admin.get_ordering(request)
+            if ordering is not None:
+                return field.get_choices(include_blank=False, ordering=ordering)
+        
+        # If we get here, either there's no related admin, or the related admin
+        # didn't define an ordering. In either case, we want to use the model's
+        # Meta.ordering.
+        related_model = field.remote_field.model
+        ordering = related_model._meta.ordering or ()
         return field.get_choices(include_blank=False, ordering=ordering)
 
     def choices(self, changelist):
@@ -419,4 +435,24 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)
 class RelatedOnlyFieldListFilter(RelatedFieldListFilter):
     def field_choices(self, field, request, model_admin):
         pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)
-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})
+        # Re-use the same ordering rules as in RelatedFieldListFilter
+        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)
+        if related_admin is not None:
+            ordering = related_admin.get_ordering(request)
+            if ordering is not None:
+                return field.get_choices(
+                    include_blank=False,
+                    limit_choices_to={'pk__in': pk_qs},
+                    ordering=ordering,
+                )
+        
+        # If we get here, either there's no related admin, or the related admin
+        # didn't define an ordering. In either case, we want to use the model's
+        # Meta.ordering.
+        related_model = field.remote_field.model
+        ordering = related_model._meta.ordering or ()
+        return field.get_choices(
+            include_blank=False,
+            limit_choices_to={'pk__in': pk_qs},
+            ordering=ordering,
+        )
