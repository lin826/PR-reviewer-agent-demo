diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py
index f82c20c2f1..9fd77b5d41 100644
--- a/django/contrib/admin/checks.py
+++ b/django/contrib/admin/checks.py
@@ -720,33 +720,33 @@ class ModelAdminChecks(BaseModelAdminChecks):
             return []
         elif hasattr(obj, item):
             return []
-        elif hasattr(obj.model, item):
+        else:
             try:
                 field = obj.model._meta.get_field(item)
             except FieldDoesNotExist:
-                return []
-            else:
-                if isinstance(field, models.ManyToManyField):
+                try:
+                    field = getattr(obj.model, item)
+                except AttributeError:
                     return [
                         checks.Error(
-                            "The value of '%s' must not be a ManyToManyField." % label,
+                            "The value of '%s' refers to '%s', which is not a callable, "
+                            "an attribute of '%s', or an attribute or method on '%s.%s'." % (
+                                label, item, obj.__class__.__name__,
+                                obj.model._meta.app_label, obj.model._meta.object_name,
+                            ),
                             obj=obj.__class__,
-                            id='admin.E109',
+                            id='admin.E108',
                         )
                     ]
-                return []
-        else:
-            return [
-                checks.Error(
-                    "The value of '%s' refers to '%s', which is not a callable, "
-                    "an attribute of '%s', or an attribute or method on '%s.%s'." % (
-                        label, item, obj.__class__.__name__,
-                        obj.model._meta.app_label, obj.model._meta.object_name,
-                    ),
-                    obj=obj.__class__,
-                    id='admin.E108',
-                )
-            ]
+            if isinstance(field, models.ManyToManyField):
+                return [
+                    checks.Error(
+                        "The value of '%s' must not be a ManyToManyField." % label,
+                        obj=obj.__class__,
+                        id='admin.E109',
+                    )
+                ]
+            return []
 
     def _check_list_display_links(self, obj):
         """ Check that list_display_links is a unique subset of list_display.
diff --git a/tests/modeladmin/models.py b/tests/modeladmin/models.py
index c0d3c772c9..53cc46308b 100644
--- a/tests/modeladmin/models.py
+++ b/tests/modeladmin/models.py
@@ -2,6 +2,35 @@ from django.contrib.auth.models import User
 from django.db import models
 
 
+class DescriptorField(models.IntegerField):
+    """
+    A field that uses a descriptor which raises AttributeError when accessed
+    on the model class (not instance). This simulates the behavior of fields
+    like PositionField from django-positions.
+    """
+    def contribute_to_class(self, cls, name, **kwargs):
+        super().contribute_to_class(cls, name, **kwargs)
+        setattr(cls, name, DescriptorFieldDescriptor(self))
+
+
+class DescriptorFieldDescriptor:
+    """
+    A descriptor that raises AttributeError when accessed on the model class.
+    """
+    def __init__(self, field):
+        self.field = field
+    
+    def __get__(self, instance, owner):
+        if instance is None:
+            # When accessed on the model class (not instance), 
+            # this simulates the behavior that causes hasattr to return False
+            raise AttributeError("DescriptorField can only be accessed on instances")
+        return getattr(instance, self.field.attname, self.field.get_default())
+    
+    def __set__(self, instance, value):
+        setattr(instance, self.field.attname, value)
+
+
 class Band(models.Model):
     name = models.CharField(max_length=100)
     bio = models.TextField()
@@ -45,6 +74,8 @@ class ValidationTestModel(models.Model):
     best_friend = models.OneToOneField(User, models.CASCADE, related_name='best_friend')
     # This field is intentionally 2 characters long (#16080).
     no = models.IntegerField(verbose_name="Number", blank=True, null=True)
+    # Field that uses a descriptor which causes hasattr to return False
+    descriptor_field = DescriptorField(default=0)
 
     def decade_published_in(self):
         return self.pub_date.strftime('%Y')[:3] + "0's"
diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py
index a1b7001f68..60551ac033 100644
--- a/tests/modeladmin/test_checks.py
+++ b/tests/modeladmin/test_checks.py
@@ -509,6 +509,25 @@ class ListDisplayTests(CheckTestCase):
 
         self.assertIsValid(TestModelAdmin, ValidationTestModel)
 
+    def test_descriptor_field_valid(self):
+        """
+        Test that fields using descriptors that raise AttributeError when
+        accessed on the model class (like PositionField from django-positions)
+        are correctly validated via _meta.get_field().
+        """
+        class TestModelAdmin(ModelAdmin):
+            list_display = ('name', 'descriptor_field')
+
+        # Verify that hasattr returns False for the descriptor field
+        self.assertFalse(hasattr(ValidationTestModel, 'descriptor_field'))
+        
+        # But _meta.get_field should work
+        field = ValidationTestModel._meta.get_field('descriptor_field')
+        self.assertIsNotNone(field)
+        
+        # The admin should not raise E108 for this field
+        self.assertIsValid(TestModelAdmin, ValidationTestModel)
+
 
 class ListDisplayLinksCheckTests(CheckTestCase):
 
