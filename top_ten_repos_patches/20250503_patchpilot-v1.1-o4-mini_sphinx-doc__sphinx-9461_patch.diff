diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 00b90de..d5546d6 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -2704,8 +2704,12 @@ class NewTypeAttributeDocumenter(AttributeDocumenter):
     priority = MethodDocumenter.priority + 1
 
     @classmethod
+
     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
                             ) -> bool:
+        if inspect.isclassproperty(member):
+            return True
+
         return not isinstance(parent, ModuleDocumenter) and inspect.isNewType(member)
 
 
diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py
index 9e39b23..4c91d82 100644
--- a/sphinx/util/inspect.py
+++ b/sphinx/util/inspect.py
@@ -271,10 +271,27 @@ def isstaticmethod(obj: Any, cls: Any = None, name: str = None) -> bool:
                 else:
                     return False
 
+
+    return False
+
+
+def isclassproperty(obj: Any) -> bool:
+    """Check if the object is a 'class property' wrapped by @classmethod or @staticmethod."""
+    # A class property results from applying @classmethod or @staticmethod to a
+    # function that is itself decorated with @property.  In this situation, the
+    # descriptor instance is a ``classmethod`` or ``staticmethod`` whose
+    # ``__func__`` attribute refers to the original ``property`` object.
+    try:
+        if isinstance(obj, (classmethod, staticmethod)) and isinstance(obj.__func__, property):
+            return True
+    except AttributeError:
+        # Object lacks ``__func__`` or another attribute error occurred.
+        pass
     return False
 
 
 def isdescriptor(x: Any) -> bool:
+
     """Check if the object is some kind of descriptor."""
     for item in '__get__', '__set__', '__delete__':
         if hasattr(safe_getattr(x, item, None), '__call__'):
