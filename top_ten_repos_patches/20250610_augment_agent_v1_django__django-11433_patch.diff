diff --git a/django/forms/models.py b/django/forms/models.py
index 5edbbd376f..6251e4eb6a 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -46,11 +46,11 @@ def construct_instance(form, instance, fields=None, exclude=None):
             continue
         if exclude and f.name in exclude:
             continue
         # Leave defaults for fields that aren't in POST data, except for
         # checkbox inputs because they don't appear in POST data if not checked.
-        if (f.has_default() and
+        if (f.has_default() and f.name in form.fields and
                 form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name))):
             continue
         # Defer saving file-type fields until after the other fields, so a
         # callable upload_to can use the values from other fields.
         if isinstance(f, models.FileField):
@@ -391,11 +391,18 @@ class BaseModelForm(BaseForm):
         for name, field in self.fields.items():
             if isinstance(field, InlineForeignKeyField):
                 exclude.append(name)
 
         try:
-            self.instance = construct_instance(self, self.instance, opts.fields, opts.exclude)
+            # Include all fields from cleaned_data, not just those in opts.fields
+            fields_to_process = None
+            if opts.fields is not None:
+                # Combine opts.fields with any additional fields in cleaned_data
+                fields_to_process = set(opts.fields)
+                fields_to_process.update(self.cleaned_data.keys())
+                fields_to_process = list(fields_to_process)
+            self.instance = construct_instance(self, self.instance, fields_to_process, opts.exclude)
         except ValidationError as e:
             self._update_errors(e)
 
         try:
             self.instance.full_clean(exclude=exclude, validate_unique=False)
