diff --git a/django/db/models/query.py b/django/db/models/query.py
index 1544beb613..67f4d394b7 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -934,6 +934,8 @@ class QuerySet:
         clone.query.combined_queries = (self.query,) + tuple(qs.query for qs in other_qs)
         clone.query.combinator = combinator
         clone.query.combinator_all = all
+        # Store a flag indicating that this query is a combined query
+        clone.query._combinator_query = True
         return clone
 
     def union(self, *other_qs, all=False):
@@ -1070,6 +1072,14 @@ class QuerySet:
         obj = self._chain()
         obj.query.clear_ordering(force_empty=False)
         obj.query.add_ordering(*field_names)
+        
+        # If this is a combined query and we're applying an empty or new ordering,
+        # we need to clear the original select list to avoid position mismatches
+        if hasattr(obj.query, '_combinator_query') and obj.query._combinator_query and hasattr(obj.query, 'combinator'):
+            # This is a combined query with a subsequent ordering - we need
+            # to make sure the columns in ORDER BY match the SELECT list
+            obj.query._order_by_reset = True
+            
         return obj
 
     def distinct(self, *field_names):
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index a791908caf..9965703b59 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -352,11 +352,29 @@ class SQLCompiler:
                         src = src.source
                     elif col_alias:
                         continue
+                    
+                    # If we have a reset ordering on a combined query, we need to be
+                    # more lenient with column matching to avoid position mismatches
+                    if hasattr(self.query, '_order_by_reset') and self.query._order_by_reset:
+                        try:
+                            if hasattr(src, 'name') and hasattr(sel_expr, 'name') and src.name == sel_expr.name:
+                                resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])
+                                break
+                        except (AttributeError, TypeError):
+                            pass
+                    
                     if src == sel_expr:
                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])
                         break
                 else:
-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')
+                    # When reordering a combined query, we need to use positional references
+                    # if an exact match can't be found
+                    if hasattr(self.query, '_order_by_reset') and self.query._order_by_reset:
+                        # For empty ordering or new ordering on combined query, use positional reference
+                        # to match the first column
+                        resolved.set_source_expressions([RawSQL('1', ())])
+                    else:
+                        raise DatabaseError('ORDER BY term does not match any column in the result set.')
             sql, params = self.compile(resolved)
             # Don't add the same column twice, but the order direction is
             # not taken into account so we strip it. When this entire method

