--- a/django/contrib/auth/__init__.py
+++ b/django/contrib/auth/__init__.py
@@ -5,7 +5,7 @@
 from django.conf import settings
 from django.core.exceptions import ImproperlyConfigured, PermissionDenied
 from django.middleware.csrf import rotate_token
-from django.utils.crypto import constant_time_compare
+from django.utils.crypto import constant_time_compare, salted_hmac
 from django.utils.module_loading import import_string
 from django.views.decorators.debug import sensitive_variables
 
@@ -179,6 +179,19 @@
         )
 
 
+def _get_session_auth_hash(user, secret):
+    """
+    Return an HMAC of the user's password field using the given secret.
+    """
+    key_salt = "django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash"
+    return salted_hmac(
+        key_salt,
+        user.password,
+        secret=secret,
+        algorithm="sha256",
+    ).hexdigest()
+
+
 def get_user(request):
     """
     Return the user model instance associated with the given request session.
@@ -199,9 +212,14 @@
             # Verify the session
             if hasattr(user, "get_session_auth_hash"):
                 session_hash = request.session.get(HASH_SESSION_KEY)
-                session_hash_verified = session_hash and constant_time_compare(
-                    session_hash, user.get_session_auth_hash()
-                )
+                session_hash_verified = False
+                if session_hash:
+                    # Try current secret key first, then fallback keys
+                    for secret in [settings.SECRET_KEY, *settings.SECRET_KEY_FALLBACKS]:
+                        computed_hash = _get_session_auth_hash(user, secret)
+                        if constant_time_compare(session_hash, computed_hash):
+                            session_hash_verified = True
+                            break
                 if not session_hash_verified:
                     request.session.flush()
                     user = None
