diff --git a/xarray/core/variable.py b/xarray/core/variable.py
index 45553eb9..9c709c3f 100644
--- a/xarray/core/variable.py
+++ b/xarray/core/variable.py
@@ -218,7 +218,13 @@ def as_compatible_data(data, fastpath=False):
         data = np.timedelta64(getattr(data, "value", data), "ns")
 
     # we don't want nested self-described arrays
-    data = getattr(data, "values", data)
+    # Only extract .values from known array-like objects (pandas, xarray)
+    # to avoid coercing arbitrary objects that happen to have a .values attribute
+    if isinstance(data, (pd.Series, pd.DataFrame)):
+        data = data.values
+    elif hasattr(data, 'values') and hasattr(data, 'dims') and hasattr(data, 'name'):
+        # This is likely an xarray DataArray or similar
+        data = data.values
 
     if isinstance(data, np.ma.MaskedArray):
         mask = np.ma.getmaskarray(data)
diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py
index e1ae3e1f..7de5520a 100644
--- a/xarray/tests/test_variable.py
+++ b/xarray/tests/test_variable.py
@@ -294,6 +294,40 @@ class VariableSubclassobjects:
         actual = self.cls("x", data)
         assert actual.dtype == data.dtype
 
+    def test_object_with_values_preserved(self):
+        """Test that objects with .values attribute are preserved, not coerced."""
+        from xarray import DataArray
+        
+        class HasValues:
+            def __init__(self, values):
+                self.values = values
+            
+            def __repr__(self):
+                return f"<HasValues(values={self.values})>"
+            
+            def __eq__(self, other):
+                return isinstance(other, HasValues) and self.values == other.values
+        
+        # Test that objects with .values are preserved
+        obj = HasValues(42)
+        da = DataArray([None], dims=['x'])
+        da.loc[{'x': 0}] = obj
+        
+        assert da.values[0] is obj
+        assert isinstance(da.values[0], HasValues)
+        assert da.values[0].values == 42
+        
+        # Test that pandas objects still have .values extracted
+        series = pd.Series([1, 2, 3])
+        result = as_compatible_data(series)
+        assert isinstance(result, np.ndarray)
+        np.testing.assert_array_equal(result, [1, 2, 3])
+        
+        df = pd.DataFrame({'a': [1, 2], 'b': [3, 4]})
+        result = as_compatible_data(df)
+        assert isinstance(result, np.ndarray)
+        np.testing.assert_array_equal(result, [[1, 3], [2, 4]])
+
     def test_datetime64_valid_range(self):
         data = np.datetime64("1250-01-01", "us")
         pderror = pd.errors.OutOfBoundsDatetime
