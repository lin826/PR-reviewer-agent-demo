diff --git a/django/contrib/messages/storage/cookie.py b/django/contrib/messages/storage/cookie.py
index 78256ca3b2..67108eb9f0 100644
--- a/django/contrib/messages/storage/cookie.py
+++ b/django/contrib/messages/storage/cookie.py
@@ -92,7 +92,13 @@ class CookieStorage(BaseStorage):
                 samesite=settings.SESSION_COOKIE_SAMESITE,
             )
         else:
-            response.delete_cookie(self.cookie_name, domain=settings.SESSION_COOKIE_DOMAIN)
+            # Only pass samesite if it's not the default 'Lax' or if it's 'None'
+            # which requires the secure flag to be set in modern browsers
+            kwargs = {'domain': settings.SESSION_COOKIE_DOMAIN}
+            if settings.SESSION_COOKIE_SAMESITE and settings.SESSION_COOKIE_SAMESITE.lower() != 'lax':
+                kwargs['samesite'] = settings.SESSION_COOKIE_SAMESITE
+                
+            response.delete_cookie(self.cookie_name, **kwargs)
 
     def _store(self, messages, response, remove_oldest=True, *args, **kwargs):
         """
diff --git a/django/contrib/sessions/middleware.py b/django/contrib/sessions/middleware.py
index 63013eef7a..33dfbe32a7 100644
--- a/django/contrib/sessions/middleware.py
+++ b/django/contrib/sessions/middleware.py
@@ -38,11 +38,16 @@ class SessionMiddleware(MiddlewareMixin):
         # First check if we need to delete this cookie.
         # The session should be deleted only if the session is entirely empty.
         if settings.SESSION_COOKIE_NAME in request.COOKIES and empty:
-            response.delete_cookie(
-                settings.SESSION_COOKIE_NAME,
-                path=settings.SESSION_COOKIE_PATH,
-                domain=settings.SESSION_COOKIE_DOMAIN,
-            )
+            # Only pass samesite if it's not the default 'Lax' or if it's 'None'
+            # which requires the secure flag to be set in modern browsers
+            kwargs = {
+                'path': settings.SESSION_COOKIE_PATH,
+                'domain': settings.SESSION_COOKIE_DOMAIN,
+            }
+            if settings.SESSION_COOKIE_SAMESITE and settings.SESSION_COOKIE_SAMESITE.lower() != 'lax':
+                kwargs['samesite'] = settings.SESSION_COOKIE_SAMESITE
+                
+            response.delete_cookie(settings.SESSION_COOKIE_NAME, **kwargs)
             patch_vary_headers(response, ('Cookie',))
         else:
             if accessed:
diff --git a/django/http/response.py b/django/http/response.py
index e00bcacefb..8bba6ce046 100644
--- a/django/http/response.py
+++ b/django/http/response.py
@@ -210,14 +210,27 @@ class HttpResponseBase:
         value = signing.get_cookie_signer(salt=key + salt).sign(value)
         return self.set_cookie(key, value, **kwargs)
 
-    def delete_cookie(self, key, path='/', domain=None):
+    def delete_cookie(self, key, path='/', domain=None, samesite=None, secure=None, httponly=None):
         # Most browsers ignore the Set-Cookie header if the cookie name starts
         # with __Host- or __Secure- and the cookie doesn't use the secure flag.
-        secure = key.startswith(('__Secure-', '__Host-'))
-        self.set_cookie(
-            key, max_age=0, path=path, domain=domain, secure=secure,
-            expires='Thu, 01 Jan 1970 00:00:00 GMT',
-        )
+        if secure is None:
+            secure = key.startswith(('__Secure-', '__Host-'))
+        
+        kwargs = {
+            'max_age': 0,
+            'path': path,
+            'domain': domain,
+            'secure': secure,
+            'expires': 'Thu, 01 Jan 1970 00:00:00 GMT',
+        }
+        
+        # Only include samesite and httponly if they're explicitly provided
+        if samesite is not None:
+            kwargs['samesite'] = samesite
+        if httponly is not None:
+            kwargs['httponly'] = httponly
+            
+        self.set_cookie(key, **kwargs)
 
     # Common methods used by subclasses
 
diff --git a/tests/responses/test_cookie.py b/tests/responses/test_cookie.py
index a52443eefe..2d3a6fc38e 100644
--- a/tests/responses/test_cookie.py
+++ b/tests/responses/test_cookie.py
@@ -118,3 +118,13 @@ class DeleteCookieTests(SimpleTestCase):
                 cookie_name = '__%s-c' % prefix
                 response.delete_cookie(cookie_name)
                 self.assertIs(response.cookies[cookie_name]['secure'], True)
+                
+    def test_samesite_preserved(self):
+        """
+        delete_cookie() preserves the samesite attribute when deleting cookies.
+        """
+        response = HttpResponse()
+        response.set_cookie('test', 'test', samesite='None', secure=True)
+        response.delete_cookie('test', samesite='None', secure=True)
+        self.assertEqual(response.cookies['test']['samesite'], 'None')
+        self.assertIs(response.cookies['test']['secure'], True)
