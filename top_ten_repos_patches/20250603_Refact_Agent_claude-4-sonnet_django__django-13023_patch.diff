diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 0fd69059ee..28374272f4 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1501,7 +1501,7 @@ class DecimalField(Field):
             return self.context.create_decimal_from_float(value)
         try:
             return decimal.Decimal(value)
-        except decimal.InvalidOperation:
+        except (decimal.InvalidOperation, TypeError, ValueError):
             raise exceptions.ValidationError(
                 self.error_messages['invalid'],
                 code='invalid',
diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py
index e284005aa0..8cae6b0e31 100644
--- a/tests/model_fields/test_decimalfield.py
+++ b/tests/model_fields/test_decimalfield.py
@@ -25,6 +25,33 @@ class DecimalFieldTests(TestCase):
         with self.assertRaisesMessage(ValidationError, msg):
             f.to_python('abc')
 
+    def test_to_python_with_invalid_types(self):
+        """
+        Test that to_python() raises ValidationError (not TypeError or ValueError)
+        for invalid types like dict, list, set, tuple.
+        """
+        f = models.DecimalField(max_digits=4, decimal_places=2)
+        
+        # Test dict - should raise ValidationError, not TypeError
+        with self.assertRaises(ValidationError) as cm:
+            f.to_python({'invalid': 'value'})
+        self.assertEqual(cm.exception.code, 'invalid')
+        
+        # Test list - should raise ValidationError, not ValueError
+        with self.assertRaises(ValidationError) as cm:
+            f.to_python([1, 2, 3])
+        self.assertEqual(cm.exception.code, 'invalid')
+        
+        # Test set - should raise ValidationError, not TypeError
+        with self.assertRaises(ValidationError) as cm:
+            f.to_python({1, 2, 3})
+        self.assertEqual(cm.exception.code, 'invalid')
+        
+        # Test tuple - should raise ValidationError, not ValueError
+        with self.assertRaises(ValidationError) as cm:
+            f.to_python((1, 2, 3))
+        self.assertEqual(cm.exception.code, 'invalid')
+
     def test_default(self):
         f = models.DecimalField(default=Decimal('0.00'))
         self.assertEqual(f.get_default(), Decimal('0.00'))
