diff --git a/django/apps/registry.py b/django/apps/registry.py
index 408964a146..e713525d8d 100644
--- a/django/apps/registry.py
+++ b/django/apps/registry.py
@@ -154,6 +154,12 @@ class Apps:
         try:
             return self.app_configs[app_label]
         except KeyError:
+            # Case-insensitive lookup for app_label
+            for label, app_config in self.app_configs.items():
+                if label.lower() == app_label.lower():
+                    return app_config
+            
+            # If we get here, no match was found
             message = "No installed app with label '%s'." % app_label
             for app_config in self.get_app_configs():
                 if app_config.name == app_label:
@@ -267,8 +273,15 @@ class Apps:
         It's safe to call this method at import time, even while the registry
         is being populated.
         """
+        # First try the exact case
         model = self.all_models[app_label].get(model_name.lower())
         if model is None:
+            # Try case-insensitive lookup for the app_label
+            for label, models in self.all_models.items():
+                if label.lower() == app_label.lower():
+                    model = models.get(model_name.lower())
+                    if model is not None:
+                        return model
             raise LookupError(
                 "Model '%s.%s' not registered." % (app_label, model_name))
         return model
diff --git a/django/db/migrations/operations/utils.py b/django/db/migrations/operations/utils.py
index 6e2bacd549..8b234a0db1 100644
--- a/django/db/migrations/operations/utils.py
+++ b/django/db/migrations/operations/utils.py
@@ -19,7 +19,9 @@ def resolve_relation(model, app_label=None, model_name=None):
                 )
             return app_label, model_name
         if '.' in model:
-            return tuple(model.lower().split('.', 1))
+            app_label, model_name = model.split('.', 1)
+            # Don't lowercase the app_label to maintain case sensitivity
+            return app_label, model_name.lower()
         if app_label is None:
             raise TypeError(
                 'app_label must be provided to resolve unscoped model '
diff --git a/django/db/models/utils.py b/django/db/models/utils.py
index 989667dc8c..634f1a68c8 100644
--- a/django/db/models/utils.py
+++ b/django/db/models/utils.py
@@ -9,6 +9,7 @@ def make_model_tuple(model):
             model_tuple = model
         elif isinstance(model, str):
             app_label, model_name = model.split(".")
+            # Don't lowercase the app_label to preserve case
             model_tuple = app_label, model_name.lower()
         else:
             model_tuple = model._meta.app_label, model._meta.model_name

