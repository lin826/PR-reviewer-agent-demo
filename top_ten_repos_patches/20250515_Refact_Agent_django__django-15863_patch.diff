diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 7a5b28d159..7dbae71ffb 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -150,14 +150,22 @@ def floatformat(text, arg=-1):
         elif last_char == "u":
             use_l10n = False
             arg = arg[:-1] or -1
-    try:
-        input_val = repr(text)
-        d = Decimal(input_val)
-    except InvalidOperation:
+    # Special-case Decimal inputs so we never lose precision
+    if isinstance(text, Decimal):
+        d = text
+        input_val = str(text)
+    else:
         try:
-            d = Decimal(str(float(text)))
-        except (ValueError, InvalidOperation, TypeError):
-            return ""
+            input_val = repr(text)
+            d = Decimal(input_val)
+        except InvalidOperation:
+            try:
+                # fall back to float for things like custom __float__ or non-Decimal
+                fv = float(text)
+                input_val = str(fv)
+                d = Decimal(input_val)
+            except (ValueError, InvalidOperation, TypeError):
+                return ""
     try:
         p = int(arg)
     except ValueError:
diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py
index 8dc69b2437..438cd1d4f2 100644
--- a/tests/template_tests/filter_tests/test_floatformat.py
+++ b/tests/template_tests/filter_tests/test_floatformat.py
@@ -56,6 +56,15 @@ class FunctionTests(SimpleTestCase):
         self.assertEqual(floatformat(0.12345, 2), "0.12")
         self.assertEqual(floatformat(Decimal("555.555"), 2), "555.56")
         self.assertEqual(floatformat(Decimal("09.000")), "9")
+        # High-precision Decimal: we should retain all digits, not fall back to float.
+        self.assertEqual(
+            floatformat(Decimal("42.12345678901234567890"), 20),
+            "42.12345678901234567890",
+        )
+        self.assertEqual(
+            floatformat(Decimal("42.12345678901234567890"), -20),
+            "42.12345678901234567890",
+        )
         self.assertEqual(floatformat("foo"), "")
         self.assertEqual(floatformat(13.1031, "bar"), "13.1031")
         self.assertEqual(floatformat(18.125, 2), "18.13")
