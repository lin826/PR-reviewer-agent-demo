diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py
index 15f0d66e2..9bf0cd0b6 100644
--- a/sphinx/util/inspect.py
+++ b/sphinx/util/inspect.py
@@ -520,19 +520,34 @@ def signature_from_str(signature: str) -> inspect.Signature:
     args = definition.args
     params = []
 
+    # Combine positional-only and regular args to properly map defaults
+    all_args = []
+    if hasattr(args, "posonlyargs"):
+        all_args.extend(args.posonlyargs)  # type: ignore
+    all_args.extend(args.args)
+    
+    # Create a mapping of parameter names to their default values
+    defaults_list = [ast_unparse(d) for d in args.defaults]
+    num_defaults = len(defaults_list)
+    total_params = len(all_args)
+    
+    default_map = {}
+    if num_defaults > 0:
+        for i, default_val in enumerate(defaults_list):
+            param_index = total_params - num_defaults + i
+            param_name = all_args[param_index].arg
+            default_map[param_name] = default_val
+
     if hasattr(args, "posonlyargs"):
         for arg in args.posonlyargs:  # type: ignore
             annotation = ast_unparse(arg.annotation) or Parameter.empty
+            default = default_map.get(arg.arg, Parameter.empty)
             params.append(Parameter(arg.arg, Parameter.POSITIONAL_ONLY,
-                                    annotation=annotation))
-
-    for i, arg in enumerate(args.args):
-        if len(args.args) - i <= len(args.defaults):
-            default = ast_unparse(args.defaults[-len(args.args) + i])
-        else:
-            default = Parameter.empty
+                                    default=default, annotation=annotation))
 
+    for arg in args.args:
         annotation = ast_unparse(arg.annotation) or Parameter.empty
+        default = default_map.get(arg.arg, Parameter.empty)
         params.append(Parameter(arg.arg, Parameter.POSITIONAL_OR_KEYWORD,
                                 default=default, annotation=annotation))
 
diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py
index f16feb698..98c637435 100644
--- a/tests/test_util_inspect.py
+++ b/tests/test_util_inspect.py
@@ -341,6 +341,28 @@ def test_signature_from_str_positionaly_only_args():
     assert sig.parameters['b'].kind == Parameter.POSITIONAL_OR_KEYWORD
 
 
+@pytest.mark.skipif(sys.version_info < (3, 8),
+                    reason='python-3.8 or above is required')
+def test_signature_from_str_positionaly_only_args_with_defaults():
+    # Test positional-only args with defaults
+    sig = inspect.signature_from_str('(a, b=0, /)')
+    assert list(sig.parameters.keys()) == ['a', 'b']
+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY
+    assert sig.parameters['a'].default == Parameter.empty
+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY
+    assert sig.parameters['b'].default == '0'
+    
+    # Test mixed positional-only and regular args with defaults
+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')
+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']
+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY
+    assert sig.parameters['a'].default == Parameter.empty
+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY
+    assert sig.parameters['b'].default == '0'
+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD
+    assert sig.parameters['c'].default == '1'
+
+
 def test_signature_from_str_invalid():
     with pytest.raises(SyntaxError):
         inspect.signature_from_str('')
