diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py
index db3f45f..a46ad41 100644
--- a/lib/matplotlib/contour.py
+++ b/lib/matplotlib/contour.py
@@ -984,9 +984,49 @@ class ContourSet(ContourLabeler, mcoll.Collection):
         elif (not isinstance(self._transform, mtransforms.Transform)
               and hasattr(self._transform, '_as_mpl_transform')):
             self._transform = self._transform._as_mpl_transform(self.axes)
+
         return self._transform
 
+    def set_paths(self, paths):
+        """
+        Replace the underlying paths of this ContourSet.
+
+        Parameters
+        ----------
+        paths : Sequence[matplotlib.path.Path]
+            The new paths that define the geometry of the contour.  Each
+            element will be converted to a `~matplotlib.path.Path` if it is
+            not already one.
+        """
+        # Ensure we store a list of Path instances.
+        self._paths = [p if isinstance(p, Path) else Path(p) for p in paths]
+
+        # Recompute cached minima and maxima from the new vertices.
+        if self._paths and any(len(p.vertices) for p in self._paths):
+            pts = np.concatenate([p.vertices for p in self._paths], axis=0)
+            self._mins = pts.min(axis=0)
+            self._maxs = pts.max(axis=0)
+        else:
+            # Degenerate case: no vertices available.
+            self._mins = np.array([np.nan, np.nan])
+            self._maxs = np.array([np.nan, np.nan])
+
+        # Update sticky edges and axes limits.
+        self.sticky_edges.x[:] = [self._mins[0], self._maxs[0]]
+        self.sticky_edges.y[:] = [self._mins[1], self._maxs[1]]
+        if self.axes is not None:
+            self.axes.update_datalim([self._mins, self._maxs])
+            self.axes.autoscale_view(tight=True)
+
+        # Drop cached split collections to force regeneration on next access.
+        if hasattr(self, "_old_style_split_collections"):
+            delattr(self, "_old_style_split_collections")
+
+        # Mark the artist as stale so the figure gets redrawn.
+        self.stale = True
+
     def __getstate__(self):
+
         state = self.__dict__.copy()
         # the C object _contour_generator cannot currently be pickled. This
         # isn't a big issue as it is not actually used once the contour has
