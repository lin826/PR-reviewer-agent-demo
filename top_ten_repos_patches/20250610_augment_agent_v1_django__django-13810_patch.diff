diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py
index 8e8c3da06a..a968402653 100644
--- a/django/core/handlers/base.py
+++ b/django/core/handlers/base.py
@@ -47,18 +47,24 @@ class BaseHandler:
                 )
             elif not handler_is_async and middleware_can_sync:
                 middleware_is_async = False
             else:
                 middleware_is_async = middleware_can_async
+            # Save original handler state in case middleware raises MiddlewareNotUsed
+            original_handler = handler
+            original_handler_is_async = handler_is_async
             try:
                 # Adapt handler, if needed.
                 handler = self.adapt_method_mode(
                     middleware_is_async, handler, handler_is_async,
                     debug=settings.DEBUG, name='middleware %s' % middleware_path,
                 )
                 mw_instance = middleware(handler)
             except MiddlewareNotUsed as exc:
+                # Restore original handler state
+                handler = original_handler
+                handler_is_async = original_handler_is_async
                 if settings.DEBUG:
                     if str(exc):
                         logger.debug('MiddlewareNotUsed(%r): %s', middleware_path, exc)
                     else:
                         logger.debug('MiddlewareNotUsed: %r', middleware_path)
diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py
index 8b019ba524..5dc05ebdc9 100644
--- a/tests/middleware_exceptions/tests.py
+++ b/tests/middleware_exceptions/tests.py
@@ -1,7 +1,10 @@
+import asyncio
+
 from django.conf import settings
 from django.core.exceptions import MiddlewareNotUsed
+from django.core.handlers.base import BaseHandler
 from django.http import HttpResponse
 from django.test import RequestFactory, SimpleTestCase, override_settings
 
 from . import middleware as mw
 
@@ -337,5 +340,66 @@ class AsyncMiddlewareTests(SimpleTestCase):
         'middleware_exceptions.middleware.AsyncProcessViewMiddleware',
     ])
     async def test_process_view_return_response(self):
         response = await self.async_client.get('/middleware_exceptions/view/')
         self.assertEqual(response.content, b'Processed view normal_view')
+
+
+class MiddlewareNotUsedASGIMiddleware:
+    """A middleware that raises MiddlewareNotUsed and has async_capable = False"""
+    sync_capable = True
+    async_capable = False
+    
+    def __init__(self, get_response):
+        raise MiddlewareNotUsed("This middleware is not used in async context")
+
+
+@override_settings(
+    DEBUG=True,
+    ROOT_URLCONF='middleware_exceptions.urls',
+    MIDDLEWARE=[
+        'middleware_exceptions.tests.MiddlewareNotUsedASGIMiddleware',
+        'django.middleware.common.CommonMiddleware',
+    ],
+)
+class MiddlewareNotUsedASGITests(SimpleTestCase):
+    """
+    Test that MiddlewareNotUsed doesn't leave undesired side effects 
+    when loading middleware in ASGI context.
+    
+    Regression test for: https://code.djangoproject.com/ticket/32177
+    """
+    
+    def test_middleware_not_used_preserves_async_chain(self):
+        """
+        Test that when a middleware raises MiddlewareNotUsed in ASGI context,
+        the middleware chain remains properly async.
+        
+        Before the fix, the handler would be adapted (wrapped with async_to_sync)
+        but when MiddlewareNotUsed was raised, the adapted handler would be left
+        in place, "poisoning" the middleware chain.
+        """
+        handler = BaseHandler()
+        handler.load_middleware(is_async=True)
+        
+        # The middleware chain should be async because:
+        # 1. We're in ASGI mode (is_async=True)
+        # 2. MiddlewareNotUsedASGIMiddleware raises MiddlewareNotUsed, so it's skipped
+        # 3. CommonMiddleware is async-capable, so the chain should be async
+        self.assertTrue(
+            asyncio.iscoroutinefunction(handler._middleware_chain),
+            "Middleware chain should be async in ASGI context even when "
+            "some middleware raises MiddlewareNotUsed"
+        )
+    
+    def test_middleware_not_used_sync_mode_unaffected(self):
+        """
+        Test that the fix doesn't affect sync mode.
+        """
+        handler = BaseHandler()
+        handler.load_middleware(is_async=False)
+        
+        # In sync mode, the middleware chain should not be async
+        self.assertFalse(
+            asyncio.iscoroutinefunction(handler._middleware_chain),
+            "Middleware chain should not be async in sync context"
+        )
