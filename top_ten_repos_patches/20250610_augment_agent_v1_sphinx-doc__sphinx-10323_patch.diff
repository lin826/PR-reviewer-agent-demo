diff --git b/sphinx/directives/code.py a/sphinx/directives/code.py
index 3d31fbcda..dc44ed314 100644
--- b/sphinx/directives/code.py
+++ a/sphinx/directives/code.py
@@ -222,13 +222,13 @@ class LiteralIncludeReader:
         else:
             filters = [self.pyobject_filter,
                        self.start_filter,
                        self.end_filter,
                        self.lines_filter,
-                       self.dedent_filter,
                        self.prepend_filter,
-                       self.append_filter]
+                       self.append_filter,
+                       self.dedent_filter]
             lines = self.read_file(self.filename, location=location)
             for func in filters:
                 lines = func(lines, location=location)
 
         return ''.join(lines), len(lines)
@@ -341,38 +341,21 @@ class LiteralIncludeReader:
         return lines
 
     def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:
         prepend = self.options.get('prepend')
         if prepend:
-            # Detect the minimum indentation of existing lines
-            min_indent = self._get_min_indent(lines)
-            indented_prepend = ' ' * min_indent + prepend
-            lines.insert(0, indented_prepend + '\n')
+            lines.insert(0, prepend + '\n')
 
         return lines
 
     def append_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:
         append = self.options.get('append')
         if append:
-            # Detect the minimum indentation of existing lines
-            min_indent = self._get_min_indent(lines)
-            indented_append = ' ' * min_indent + append
-            lines.append(indented_append + '\n')
+            lines.append(append + '\n')
 
         return lines
 
-    def _get_min_indent(self, lines: List[str]) -> int:
-        """Get the minimum indentation level of non-empty lines."""
-        min_indent = float('inf')
-        for line in lines:
-            stripped = line.lstrip()
-            if stripped:  # Skip empty lines
-                indent = len(line) - len(stripped)
-                min_indent = min(min_indent, indent)
-        
-        return int(min_indent) if min_indent != float('inf') else 0
-
     def dedent_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:
         if 'dedent' in self.options:
             return dedent_lines(lines, self.options.get('dedent'), location=location)
         else:
             return lines
diff --git b/tests/test_directive_code.py a/tests/test_directive_code.py
index 3bf551054..98a9aa899 100644
--- b/tests/test_directive_code.py
+++ a/tests/test_directive_code.py
@@ -421,11 +421,11 @@ def test_literal_include_linenos(app, status, warning):
     # :lineno-start:
     assert ('<span class="linenos">200</span><span class="c1">'
             '# Literally included file using Python highlighting</span>' in html)
 
     # :lines: 5-9
-    assert ('<span class="linenos">5</span><span class="k">class</span><span class="w"> </span>'
+    assert ('<span class="linenos">5</span><span class="k">class</span> '
             '<span class="nc">Foo</span><span class="p">:</span>' in html)
 
 
 @pytest.mark.sphinx('latex', testroot='directive-code')
 def test_literalinclude_file_whole_of_emptyline(app, status, warning):
@@ -557,11 +557,11 @@ def test_code_block_highlighted(app, status, warning):
 def test_linenothreshold(app, status, warning):
     app.builder.build(['linenothreshold'])
     html = (app.outdir / 'linenothreshold.html').read_text()
 
     # code-block using linenothreshold
-    assert ('<span class="linenos">1</span><span class="k">class</span><span class="w"> </span>'
+    assert ('<span class="linenos">1</span><span class="k">class</span> '
             '<span class="nc">Foo</span><span class="p">:</span>' in html)
 
     # code-block not using linenothreshold (no line numbers)
     assert '<span></span><span class="c1"># comment</span>' in html
 
