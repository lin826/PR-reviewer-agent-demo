diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py
index 55874bf2..49ab09b6 100644
--- a/seaborn/_core/scales.py
+++ b/seaborn/_core/scales.py
@@ -378,7 +378,16 @@ class ContinuousBase(Scale):
             axis.set_view_interval(vmin, vmax)
             locs = axis.major.locator()
             locs = locs[(vmin <= locs) & (locs <= vmax)]
-            labels = axis.major.formatter.format_ticks(locs)
+            # Fix for ScalarFormatter offset issue - format_ticks doesn't include offset
+            formatter = axis.major.formatter
+            labels = formatter.format_ticks(locs)
+            
+            # Check if formatter has offset after format_ticks call
+            if hasattr(formatter, 'get_offset'):
+                offset = formatter.get_offset()
+                if offset and offset.strip():
+                    # Offset exists, use format_data instead for complete values
+                    labels = [formatter.format_data(loc) for loc in locs]
             new._legend = list(locs), list(labels)
 
         return new
diff --git a/seaborn/utils.py b/seaborn/utils.py
index 2407853c..31ddad2c 100644
--- a/seaborn/utils.py
+++ b/seaborn/utils.py
@@ -706,6 +706,15 @@ def locator_to_legend_entries(locator, limits, dtype):
     # formatted_levels = formatter.format_ticks(raw_levels)
     formatter.set_locs(raw_levels)
     formatted_levels = [formatter(x) for x in raw_levels]
+    
+    # Fix for ScalarFormatter offset issue - check if offset exists and use format_data
+    if hasattr(formatter, 'get_offset'):
+        # Call format_ticks to populate offset, then check for it
+        temp_labels = formatter.format_ticks(raw_levels)
+        offset = formatter.get_offset()
+        if offset and offset.strip():
+            # Offset exists, use format_data for complete values including offset
+            formatted_levels = [formatter.format_data(level) for level in raw_levels]
 
     return raw_levels, formatted_levels
 
