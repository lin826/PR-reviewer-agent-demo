--- a/sklearn/utils/_set_output.py
+++ b/sklearn/utils/_set_output.py
@@ -59,6 +59,26 @@
             data_to_wrap.index = index
         return data_to_wrap
 
+    # Handle pandas Series with potential index mismatch
+    if isinstance(data_to_wrap, pd.Series):
+        # Check if the provided index is compatible with the Series
+        if index is not None and len(index) != len(data_to_wrap):
+            # Use the Series's own index if lengths don't match
+            index = data_to_wrap.index
+        
+        # For Series, we need to handle column names specially
+        # Using to_frame() ensures the Series is properly converted to a DataFrame
+        if columns is not None and len(columns) == 1:
+            df = data_to_wrap.to_frame(columns[0])
+        else:
+            df = data_to_wrap.to_frame()
+        
+        # If we have a specific index to use and it matches the length, use it
+        if index is not None and len(index) == len(df):
+            df.index = index
+        
+        return df
+    
     return pd.DataFrame(data_to_wrap, index=index, columns=columns)
 
 
@@ -127,9 +147,33 @@
         return data_to_wrap
 
     # dense_config == "pandas"
+    original_index = getattr(original_input, "index", None)
+    
+    # Check if the original index is compatible with the output data shape
+    if original_index is not None:
+        # Get the number of rows in the output data
+        if hasattr(data_to_wrap, "shape"):
+            n_rows_out = data_to_wrap.shape[0]
+        elif hasattr(data_to_wrap, "__len__"):
+            n_rows_out = len(data_to_wrap)
+        else:
+            n_rows_out = None
+            
+        # Only use original index if lengths match
+        if n_rows_out is not None and len(original_index) != n_rows_out:
+            # Lengths don't match, use the existing index from data_to_wrap if it's a DataFrame,
+            # otherwise let pandas create a default index
+            pd = check_pandas_support("Setting output container to 'pandas'")
+            if isinstance(data_to_wrap, pd.DataFrame):
+                original_index = data_to_wrap.index
+            elif isinstance(data_to_wrap, pd.Series):
+                original_index = data_to_wrap.index
+            else:
+                original_index = None
+    
     return _wrap_in_pandas_container(
         data_to_wrap=data_to_wrap,
-        index=getattr(original_input, "index", None),
+        index=original_index,
         columns=estimator.get_feature_names_out,
     )
 
