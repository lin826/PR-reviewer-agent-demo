diff --git a/sympy/core/mod.py b/sympy/core/mod.py
index eae25630cc..94a74bd319 100644
--- a/sympy/core/mod.py
+++ b/sympy/core/mod.py
@@ -123,6 +123,27 @@ def doit(p, q):
             for arg in p.args:
                 both_l[isinstance(arg, cls)].append(arg)
 
+            # Check if we have a simple case of coefficient*variable where coefficient can be reduced
+            if len(non_mod_l) == 2 and len(mod_l) == 0:
+                # Check if one is an integer coefficient and the other is a symbol
+                coeff, var = None, None
+                for arg in non_mod_l:
+                    if arg.is_Integer:
+                        coeff = arg
+                    else:
+                        var = arg
+                
+                if coeff is not None and var is not None and q.is_Integer and coeff >= q:
+                    # Apply coefficient reduction: Mod(coeff*var, q) -> Mod((coeff%q)*var, q)
+                    reduced_coeff = coeff % q
+                    if reduced_coeff == 0:
+                        return S.Zero
+                    elif reduced_coeff == 1:
+                        return cls(var, q)
+                    else:
+                        # Only recurse if we actually reduced the coefficient
+                        return cls(reduced_coeff * var, q, evaluate=False)
+
             if mod_l and all(inner.args[1] == q for inner in mod_l):
                 # finding distributive term
                 non_mod_l = [cls(x, q) for x in non_mod_l]
diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py
index 04d3b1ab9f..05e2d1979b 100644
--- a/sympy/core/tests/test_arit.py
+++ b/sympy/core/tests/test_arit.py
@@ -1624,6 +1624,7 @@ def test_Mod():
     i = Symbol('i', integer=True)
     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)
     assert Mod(4*i, 4) == 0
+    assert Mod(3*i, 2) == Mod(i, 2)
 
     # issue 8677
     n = Symbol('n', integer=True, positive=True)
