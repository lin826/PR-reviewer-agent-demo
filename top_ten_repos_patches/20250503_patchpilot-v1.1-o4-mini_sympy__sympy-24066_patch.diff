diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index 4413d8e..227016b 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -189,11 +189,31 @@ class UnitSystem(_QuantityMapper):
                 factor /= ifactor**count
                 dim /= idim**count
             return factor, dim
+
         elif isinstance(expr, Function):
-            fds = [self._collect_factor_and_dimension(
-                arg) for arg in expr.args]
-            return (expr.func(*(f[0] for f in fds)),
-                    *(d[1] for d in fds))
+            # Recursively gather (factor, dimension) for every argument
+            arg_fds = [self._collect_factor_and_dimension(arg) for arg in expr.args]
+            factors = [fd[0] for fd in arg_fds]
+            dims = [fd[1] for fd in arg_fds]
+
+            # Build the resulting scale factor
+            result_factor = expr.func(*factors)
+
+            # Determine the resulting dimension
+            dim_sys = self.get_dimension_system()
+            if all(dim_sys.is_dimensionless(d) for d in dims):
+                result_dim = Dimension(1)
+            else:
+                first_dim = dims[0]
+                for d in dims[1:]:
+                    if not dim_sys.equivalent_dims(first_dim, d):
+                        raise ValueError(
+                            'Dimension of "{}" is {}, but it should be {}'.format(
+                                expr, d, first_dim))
+                result_dim = first_dim
+
+            return result_factor, result_dim
+
         elif isinstance(expr, Dimension):
             return S.One, expr
         else:
