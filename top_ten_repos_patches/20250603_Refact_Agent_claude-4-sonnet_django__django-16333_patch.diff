diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index d73d1c8495..4c9a4f5556 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -141,6 +141,7 @@ class UserCreationForm(forms.ModelForm):
         user.set_password(self.cleaned_data["password1"])
         if commit:
             user.save()
+            self.save_m2m()
         return user
 
 
diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py
index 78078316e8..f23058ab43 100644
--- a/tests/auth_tests/test_forms.py
+++ b/tests/auth_tests/test_forms.py
@@ -334,6 +334,88 @@ class UserCreationFormTest(TestDataMixin, TestCase):
                     form.fields[field_name].widget.attrs["autocomplete"], autocomplete
                 )
 
+    def test_save_m2m_commit_true(self):
+        """
+        Test that UserCreationForm saves ManyToMany field data when commit=True.
+        """
+        from django.contrib.auth.models import Group
+
+        class UserCreationFormWithGroups(UserCreationForm):
+            class Meta(UserCreationForm.Meta):
+                fields = ("username", "groups")
+
+        # Create test groups
+        group1 = Group.objects.create(name="Test Group 1")
+        group2 = Group.objects.create(name="Test Group 2")
+
+        try:
+            data = {
+                "username": "testuser",
+                "password1": "testpassword123",
+                "password2": "testpassword123",
+                "groups": [group1.id, group2.id],
+            }
+            form = UserCreationFormWithGroups(data)
+            self.assertTrue(form.is_valid())
+
+            # Save with commit=True
+            user = form.save(commit=True)
+            self.assertEqual(user.groups.count(), 2)
+            self.assertIn(group1, user.groups.all())
+            self.assertIn(group2, user.groups.all())
+
+            # Clean up
+            user.delete()
+        finally:
+            group1.delete()
+            group2.delete()
+
+    def test_save_m2m_commit_false(self):
+        """
+        Test that UserCreationForm provides save_m2m method when commit=False.
+        """
+        from django.contrib.auth.models import Group
+
+        class UserCreationFormWithGroups(UserCreationForm):
+            class Meta(UserCreationForm.Meta):
+                fields = ("username", "groups")
+
+        # Create test groups
+        group1 = Group.objects.create(name="Test Group 1")
+        group2 = Group.objects.create(name="Test Group 2")
+
+        try:
+            data = {
+                "username": "testuser",
+                "password1": "testpassword123",
+                "password2": "testpassword123",
+                "groups": [group1.id, group2.id],
+            }
+            form = UserCreationFormWithGroups(data)
+            self.assertTrue(form.is_valid())
+
+            # Save with commit=False
+            user = form.save(commit=False)
+            user.save()
+
+            # Initially no groups should be saved
+            self.assertEqual(user.groups.count(), 0)
+
+            # save_m2m method should be available
+            self.assertTrue(hasattr(form, "save_m2m"))
+
+            # Call save_m2m to save the ManyToMany data
+            form.save_m2m()
+            self.assertEqual(user.groups.count(), 2)
+            self.assertIn(group1, user.groups.all())
+            self.assertIn(group2, user.groups.all())
+
+            # Clean up
+            user.delete()
+        finally:
+            group1.delete()
+            group2.delete()
+
 
 # To verify that the login form rejects inactive users, use an authentication
 # backend that allows them.
