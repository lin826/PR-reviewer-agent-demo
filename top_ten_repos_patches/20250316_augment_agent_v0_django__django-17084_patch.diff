diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index a778cd413b..a8574d0fe0 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -86,10 +86,21 @@ class Aggregate(Func):
                     )
                     raise FieldError(
                         "Cannot compute %s('%s'): '%s' is an aggregate"
                         % (c.name, name, name)
                     )
+                if expr.contains_over_clause:
+                    before_resolved = self.get_source_expressions()[index]
+                    name = (
+                        before_resolved.name
+                        if hasattr(before_resolved, "name")
+                        else repr(before_resolved)
+                    )
+                    raise FieldError(
+                        "Cannot compute %s('%s'): '%s' is a window function"
+                        % (c.name, name, name)
+                    )
         if (default := c.default) is None:
             return c
         if hasattr(default, "resolve_expression"):
             default = default.resolve_expression(query, allow_joins, reuse, summarize)
             if default._output_field_or_none is None:
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 13a6809dd8..998a5e5734 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -417,10 +417,16 @@ class Query(BaseExpression):
             self.append_annotation_mask([alias])
             refs_subquery |= any(
                 getattr(self.annotations[ref], "subquery", False)
                 for ref in aggregate.get_refs()
             )
+            # Check if any of the referenced annotations contain a window function
+            for ref in aggregate.get_refs():
+                if ref in self.annotations and self.annotations[ref].contains_over_clause:
+                    raise FieldError(
+                        f"Cannot compute {aggregate.name}('{ref}'): '{ref}' is a window function"
+                    )
             aggregate = aggregate.replace_expressions(replacements)
             self.annotations[alias] = aggregate
             replacements[Ref(alias, aggregate)] = aggregate
         # Stash resolved aggregates now that they have been allowed to resolve
         # against each other.
