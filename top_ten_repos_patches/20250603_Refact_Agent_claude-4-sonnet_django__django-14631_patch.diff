diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 88adadb37d..bed9b130d5 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -1,6 +1,7 @@
 import datetime
 import re
 
+from django.core.exceptions import ValidationError
 from django.forms.utils import flatatt, pretty_name
 from django.forms.widgets import Textarea, TextInput
 from django.utils.functional import cached_property
@@ -232,6 +233,27 @@ class BoundField:
     def widget_type(self):
         return re.sub(r'widget$|input$', '', self.field.widget.__class__.__name__.lower())
 
+    def did_change(self):
+        """
+        Return True if data differs from initial.
+        """
+        data_value = self.data
+        if not self.field.show_hidden_initial:
+            # Use the BoundField's initial as this is the value passed to
+            # the widget.
+            initial_value = self.initial
+        else:
+            initial_prefixed_name = self.form.add_initial_prefix(self.name)
+            hidden_widget = self.field.hidden_widget()
+            try:
+                initial_value = self.field.to_python(
+                    self.form._widget_data_value(hidden_widget, initial_prefixed_name)
+                )
+            except ValidationError:
+                # Always assume data has changed if validation fails.
+                return True
+        return self.field.has_changed(initial_value, data_value)
+
 
 @html_safe
 class BoundWidget:
diff --git a/django/forms/forms.py b/django/forms/forms.py
index d14037bfe9..a6e9fef86f 100644
--- a/django/forms/forms.py
+++ b/django/forms/forms.py
@@ -388,13 +388,15 @@ class BaseForm:
 
     def _clean_fields(self):
         for name, field in self.fields.items():
+            # Access values via BoundField for consistency
+            bound_field = self[name]
             if field.disabled:
-                value = self.get_initial_for_field(field, name)
+                value = bound_field.initial
             else:
-                value = self._field_data_value(field, self.add_prefix(name))
+                value = bound_field.data
             try:
                 if isinstance(field, FileField):
-                    initial = self.get_initial_for_field(field, name)
+                    initial = bound_field.initial
                     value = field.clean(value, initial)
                 else:
                     value = field.clean(value)
@@ -434,29 +436,16 @@ class BaseForm:
         """Return True if data differs from initial."""
         return bool(self.changed_data)
 
+    def _bound_items(self):
+        """
+        Yield (name, bound_field) pairs for all fields in this form.
+        """
+        for name in self.fields:
+            yield name, self[name]
+
     @cached_property
     def changed_data(self):
-        data = []
-        for name, field in self.fields.items():
-            data_value = self._field_data_value(field, self.add_prefix(name))
-            if not field.show_hidden_initial:
-                # Use the BoundField's initial as this is the value passed to
-                # the widget.
-                initial_value = self[name].initial
-            else:
-                initial_prefixed_name = self.add_initial_prefix(name)
-                hidden_widget = field.hidden_widget()
-                try:
-                    initial_value = field.to_python(
-                        self._widget_data_value(hidden_widget, initial_prefixed_name)
-                    )
-                except ValidationError:
-                    # Always assume data has changed if validation fails.
-                    data.append(name)
-                    continue
-            if field.has_changed(initial_value, data_value):
-                data.append(name)
-        return data
+        return [name for name, bf in self._bound_items() if bf.did_change()]
 
     @property
     def media(self):
diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py
index e1567f12ce..112f8ad21e 100644
--- a/tests/forms_tests/tests/test_forms.py
+++ b/tests/forms_tests/tests/test_forms.py
@@ -2120,7 +2120,13 @@ Password: <input type="password" name="password" required></li>
 
         form = DateTimeForm({})
         self.assertEqual(form.errors, {})
-        self.assertEqual(form.cleaned_data, {'dt': now})
+        # After the fix, _clean_fields() uses BoundField.initial which strips
+        # microseconds for widgets that don't support them, ensuring consistency
+        # between form[name].initial and form.cleaned_data[name].
+        expected_now = now.replace(microsecond=0)
+        self.assertEqual(form.cleaned_data, {'dt': expected_now})
+        # Verify consistency: form[name].initial should equal cleaned_data[name]
+        self.assertEqual(form['dt'].initial, form.cleaned_data['dt'])
 
     def test_datetime_changed_data_callable_with_microseconds(self):
         class DateTimeForm(forms.Form):
