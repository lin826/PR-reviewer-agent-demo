diff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py
index c6b511f206..ceb218115d 100644
--- a/sympy/simplify/simplify.py
+++ b/sympy/simplify/simplify.py
@@ -251,7 +251,24 @@ def posify(eq):
             eq[i] = e.subs(reps)
         return f(eq), {r: s for s, r in reps.items()}
 
-    reps = {s: Dummy(s.name, positive=True)
+    def _create_positive_dummy(s):
+        """Create a positive dummy symbol preserving compatible assumptions."""
+        # Start with the original symbol's assumptions
+        assumptions = s.assumptions0.copy()
+        
+        # Force positive=True
+        assumptions['positive'] = True
+        
+        # Remove conflicting assumptions that contradict positive=True
+        conflicting_assumptions = ['negative', 'nonpositive', 'zero']
+        for assumption in conflicting_assumptions:
+            if assumption in assumptions:
+                del assumptions[assumption]
+        
+        # Create dummy with preserved assumptions
+        return Dummy(s.name, **assumptions)
+    
+    reps = {s: _create_positive_dummy(s)
                  for s in eq.free_symbols if s.is_positive is None}
     eq = eq.subs(reps)
     return eq, {r: s for s, r in reps.items()}
diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py
index 5fe9352b96..3ade1210e8 100644
--- a/sympy/simplify/tests/test_simplify.py
+++ b/sympy/simplify/tests/test_simplify.py
@@ -512,6 +512,69 @@ def test_posify():
         'Sum(_x**(-n), (n, 1, 3))'
 
 
+def test_posify_assumptions():
+    """Test that posify preserves assumptions from original symbols."""
+    # Test finite assumption preservation (main issue)
+    x_finite = Symbol('x', finite=True)
+    xp_finite, reps_finite = posify(x_finite)
+    assert xp_finite.is_finite == True
+    assert xp_finite.is_positive == True
+    
+    # Test integer assumption preservation
+    x_int = Symbol('x', integer=True)
+    xp_int, reps_int = posify(x_int)
+    assert xp_int.is_integer == True
+    assert xp_int.is_positive == True
+    
+    # Test rational assumption preservation
+    x_rat = Symbol('x', rational=True)
+    xp_rat, reps_rat = posify(x_rat)
+    assert xp_rat.is_rational == True
+    assert xp_rat.is_positive == True
+    
+    # Test even assumption preservation
+    x_even = Symbol('x', even=True)
+    xp_even, reps_even = posify(x_even)
+    assert xp_even.is_even == True
+    assert xp_even.is_positive == True
+    
+    # Test odd assumption preservation
+    x_odd = Symbol('x', odd=True)
+    xp_odd, reps_odd = posify(x_odd)
+    assert xp_odd.is_odd == True
+    assert xp_odd.is_positive == True
+    
+    # Test prime assumption preservation
+    x_prime = Symbol('x', prime=True)
+    xp_prime, reps_prime = posify(x_prime)
+    assert xp_prime.is_prime == True
+    assert xp_prime.is_positive == True
+    
+    # Test multiple assumptions preservation
+    x_multi = Symbol('x', finite=True, integer=True, even=True)
+    xp_multi, reps_multi = posify(x_multi)
+    assert xp_multi.is_finite == True
+    assert xp_multi.is_integer == True
+    assert xp_multi.is_even == True
+    assert xp_multi.is_positive == True
+    
+    # Test that conflicting assumptions prevent posification
+    x_neg = Symbol('x', negative=True, finite=True)
+    xp_neg, reps_neg = posify(x_neg)
+    assert x_neg == xp_neg  # Should be unchanged
+    assert reps_neg == {}   # No replacements
+    
+    x_zero = Symbol('x', zero=True, finite=True)
+    xp_zero, reps_zero = posify(x_zero)
+    assert x_zero == xp_zero  # Should be unchanged
+    assert reps_zero == {}    # No replacements
+    
+    x_nonpos = Symbol('x', nonpositive=True, finite=True)
+    xp_nonpos, reps_nonpos = posify(x_nonpos)
+    assert x_nonpos == xp_nonpos  # Should be unchanged
+    assert reps_nonpos == {}      # No replacements
+
+
 def test_issue_4194():
     # simplify should call cancel
     from sympy.abc import x, y
