diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 5ead82c..b5a9263 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1062,11 +1062,36 @@ class DocstringSignatureMixin:
                     valid_names.extend(cls.__name__ for cls in self.object.__mro__)
             if base not in valid_names:
                 continue
+
+            # Collect signatures of overloaded methods
+            sig_args_list = []
+            sig_retann_list = []
+
+            # Walk over consecutive signature lines starting from current one
+            pos = 0
+            while pos < len(doclines):
+                m = py_ext_sig_re.match(doclines[pos])
+                if not m:
+                    break
+                _exmod, _path, _base, _args, _retann = m.groups()
+                if _base not in valid_names:
+                    break
+                sig_args_list.append(_args)
+                sig_retann_list.append(_retann)
+                pos += 1
+
             # re-prepare docstring to ignore more leading indentation
             tab_width = self.directive.state.document.settings.tab_width  # type: ignore
-            self._new_docstrings[i] = prepare_docstring('\n'.join(doclines[1:]),
+            self._new_docstrings[i] = prepare_docstring('\n'.join(doclines[pos:]),
                                                         tabsize=tab_width)
-            result = args, retann
+
+            # Build composite signature and determine return annotation
+            composite_args = ' | '.join(sig_args_list)
+            composite_retann = (sig_retann_list[0]
+                                if sig_retann_list and all(r == sig_retann_list[0] for r in sig_retann_list)
+                                else None)
+            result = composite_args, composite_retann
+
             # don't look any further
             break
         return result
