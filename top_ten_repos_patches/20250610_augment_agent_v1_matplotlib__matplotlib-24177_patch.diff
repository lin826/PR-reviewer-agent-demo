diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py
index 4f805e0177..17ccfb6df8 100644
--- a/lib/matplotlib/axes/_base.py
+++ b/lib/matplotlib/axes/_base.py
@@ -2430,20 +2430,26 @@ class _AxesBase(martist.Artist):
         if (isinstance(patch, mpatches.Rectangle) and
                 ((not patch.get_width()) and (not patch.get_height()))):
             return
         p = patch.get_path()
         # Get all vertices on the path
-        # Loop through each segment to get extrema for Bezier curve sections
-        vertices = []
-        for curve, code in p.iter_bezier():
-            # Get distance along the curve of any extrema
-            _, dzeros = curve.axis_aligned_extrema()
-            # Calculate vertices of start, end and any extrema in between
-            vertices.append(curve([0, *dzeros, 1]))
-
-        if len(vertices):
-            vertices = np.row_stack(vertices)
+        # For simple polygons (like step histograms), use vertices directly
+        # For complex paths with curves, use the Bezier curve approach
+        if hasattr(p, 'vertices') and len(p.vertices) > 0:
+            # Use direct vertices for polygons - this handles step histograms correctly
+            vertices = p.vertices
+        else:
+            # Loop through each segment to get extrema for Bezier curve sections
+            vertices = []
+            for curve, code in p.iter_bezier():
+                # Get distance along the curve of any extrema
+                _, dzeros = curve.axis_aligned_extrema()
+                # Calculate vertices of start, end and any extrema in between
+                vertices.append(curve([0, *dzeros, 1]))
+
+            if len(vertices):
+                vertices = np.row_stack(vertices)
 
         patch_trf = patch.get_transform()
         updatex, updatey = patch_trf.contains_branch_seperately(self.transData)
         if not (updatex or updatey):
             return
