diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index d17232e4ec..4f677a118b 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -965,11 +965,26 @@ class RenameIndex(IndexOperation):
         new_index = to_model_state.get_index_by_name(self.new_name)
         schema_editor.rename_index(model, old_index, new_index)
 
     def database_backwards(self, app_label, schema_editor, from_state, to_state):
         if self.old_fields:
-            # Backward operation with unnamed index is a no-op.
+            # Backward operation with unnamed index should restore the old auto-generated name.
+            model = from_state.apps.get_model(app_label, self.model_name)
+            if not self.allow_migrate_model(schema_editor.connection.alias, model):
+                return
+
+            from_model_state = from_state.models[app_label, self.model_name_lower]
+            columns = [
+                model._meta.get_field(field).column for field in self.old_fields
+            ]
+            # Generate the original auto-generated index name
+            old_index_name = schema_editor._create_index_name(
+                model._meta.db_table, columns, suffix="_idx"
+            )
+            old_index = models.Index(fields=self.old_fields, name=old_index_name)
+            new_index = from_model_state.get_index_by_name(self.new_name)
+            schema_editor.rename_index(model, new_index, old_index)
             return
 
         self.new_name_lower, self.old_name_lower = (
             self.old_name_lower,
             self.new_name_lower,
diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py
index cfd28b1b39..4de17df06f 100644
--- a/tests/migrations/test_operations.py
+++ b/tests/migrations/test_operations.py
@@ -2982,13 +2982,17 @@ class OperationTests(OperationTestBase):
         operation.state_forwards(app_label, new_state)
         # Rename index.
         with connection.schema_editor() as editor:
             operation.database_forwards(app_label, editor, project_state, new_state)
         self.assertIndexNameExists(table_name, "new_pony_test_idx")
-        # Reverse is a no-op.
-        with connection.schema_editor() as editor, self.assertNumQueries(0):
+        # Reverse operation should restore the original auto-generated name.
+        with connection.schema_editor() as editor:
             operation.database_backwards(app_label, editor, new_state, project_state)
+        self.assertIndexNameNotExists(table_name, "new_pony_test_idx")
+        # Re-apply renaming.
+        with connection.schema_editor() as editor:
+            operation.database_forwards(app_label, editor, project_state, new_state)
         self.assertIndexNameExists(table_name, "new_pony_test_idx")
         # Deconstruction.
         definition = operation.deconstruct()
         self.assertEqual(definition[0], "RenameIndex")
         self.assertEqual(definition[1], [])
