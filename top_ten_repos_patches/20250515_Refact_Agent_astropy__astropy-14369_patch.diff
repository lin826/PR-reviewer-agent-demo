diff --git a/astropy/io/ascii/cds.py b/astropy/io/ascii/cds.py
index 7a83fc39be..8b0a09eca7 100644
--- a/astropy/io/ascii/cds.py
+++ b/astropy/io/ascii/cds.py
@@ -231,10 +231,15 @@ class Cds(core.BaseReader):
          5-  6 I2     h      RAh    Hour of Right Ascension (J2000)
          8-  9 I2     min    RAm    Minute of Right Ascension (J2000)
         11- 15 F5.2   s      RAs    Second of Right Ascension (J2000)
+        17- 26 F10.5  J/(m.s.kpc2)  SBCONT  Cont surface brightness
       --------------------------------------------------------------------------------
       Note (1): A CDS file can contain sections with various metadata.
                 Notes can be multiple lines.
       Note (2): Another note.
+      Note (3): For complex units with multiple divisions, it's recommended to use
+                parentheses and the dot operator for multiplication, e.g., 'J/(m.s.kpc2)'
+                instead of 'J/m/s/kpc2'. While Astropy will interpret 'J/m/s/kpc2' as
+                'J/(m.s.kpc2)', explicit grouping is clearer and follows the CDS standard.
       --------------------------------------------------------------------------------
         1 03 28 39.09
         2 04 18 24.11
diff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py
index 307e987ed6..1551a168e1 100644
--- a/astropy/units/format/cds.py
+++ b/astropy/units/format/cds.py
@@ -295,6 +295,24 @@ class CDS(Base):
         if not isinstance(s, str):
             s = s.decode("ascii")
 
+        # Detect and rewrite ambiguous multiple division symbols without parentheses
+        ambiguous = s.count('/') > 1 and '(' not in s and ')' not in s
+        if ambiguous:
+            import warnings
+            from astropy.utils.exceptions import AstropyWarning
+            
+            # Rewrite the string to make it left-associative: A/B/C -> A/(B.C)
+            parts = s.split('/')
+            rewritten = parts[0] + '/(' + '.'.join(parts[1:]) + ')'
+            
+            warnings.warn(
+                f"Unit string {s!r} contains several '/' without parentheses. "
+                f"Interpreting it as left-associative, i.e. {rewritten!r}",
+                AstropyWarning
+            )
+            
+            s = rewritten
+
         # This is a short circuit for the case where the string
         # is just a single unit name
         try:
