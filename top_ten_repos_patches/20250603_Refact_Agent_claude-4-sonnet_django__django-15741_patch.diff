diff --git a/django/utils/formats.py b/django/utils/formats.py
index 3f38322d84..1072243edf 100644
--- a/django/utils/formats.py
+++ b/django/utils/formats.py
@@ -125,13 +125,13 @@ def get_format(format_type, lang=None, use_l10n=None):
     val = None
     if use_l10n:
         for module in get_format_modules(lang):
-            val = getattr(module, format_type, None)
+            val = getattr(module, str(format_type), None)
             if val is not None:
                 break
     if val is None:
-        if format_type not in FORMAT_SETTINGS:
+        if str(format_type) not in FORMAT_SETTINGS:
             return format_type
-        val = getattr(settings, format_type)
+        val = getattr(settings, str(format_type))
     elif format_type in ISO_INPUT_FORMATS:
         # If a list of input formats from one of the format_modules was
         # retrieved, make sure the ISO_INPUT_FORMATS are in this list.
diff --git a/tests/i18n/tests.py b/tests/i18n/tests.py
index 0093181f64..1c0a0a0d6b 100644
--- a/tests/i18n/tests.py
+++ b/tests/i18n/tests.py
@@ -1658,6 +1658,47 @@ class FormattingTests(SimpleTestCase):
             with translation.override("fr", deactivate=True):
                 self.assertEqual("d/m/Y CUSTOM", get_format("CUSTOM_DAY_FORMAT"))
 
+    def test_get_format_with_lazy_strings(self):
+        """Test that get_format works with lazy translation strings."""
+        from django.utils.translation import gettext_lazy as _
+        
+        # Test with existing Django format settings
+        test_cases = [
+            'DATE_FORMAT',
+            'TIME_FORMAT', 
+            'DATETIME_FORMAT',
+            'DECIMAL_SEPARATOR',
+            'THOUSAND_SEPARATOR',
+        ]
+        
+        for format_name in test_cases:
+            with self.subTest(format_name=format_name):
+                # Test regular string
+                regular_result = get_format(format_name)
+                
+                # Test lazy string
+                lazy_format = _(format_name)
+                lazy_result = get_format(lazy_format)
+                
+                # They should be equal
+                self.assertEqual(regular_result, lazy_result)
+        
+        # Test with custom format strings (not in Django settings)
+        custom_formats = ['Y-m-d', 'H:i:s', 'd/m/Y', 'F j, Y']
+        
+        for fmt in custom_formats:
+            with self.subTest(format=fmt):
+                # Test regular string
+                regular_result = get_format(fmt)
+                
+                # Test lazy string
+                lazy_format = _(fmt)
+                lazy_result = get_format(lazy_format)
+                
+                # They should be equal (should return the format string itself)
+                self.assertEqual(regular_result, lazy_result)
+                self.assertEqual(regular_result, fmt)
+
     def test_admin_javascript_supported_input_formats(self):
         """
         The first input format for DATE_INPUT_FORMATS, TIME_INPUT_FORMATS, and
diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py
index a7c694d50e..068700f6d0 100644
--- a/tests/template_tests/filter_tests/test_date.py
+++ b/tests/template_tests/filter_tests/test_date.py
@@ -3,6 +3,7 @@ from datetime import datetime, time
 from django.template.defaultfilters import date
 from django.test import SimpleTestCase
 from django.utils import timezone, translation
+from django.utils.translation import gettext_lazy as _
 
 from ..utils import setup
 from .timezone_utils import TimezoneTestCase
@@ -81,5 +82,29 @@ class FunctionTests(SimpleTestCase):
         self.assertEqual(date(""), "")
         self.assertEqual(date(None), "")
 
+    def test_lazy_format_strings(self):
+        """Test that date filter works with lazy translation strings."""
+        test_date = datetime(2023, 12, 25, 15, 30, 45)
+        
+        # Test various date formats with lazy strings
+        formats_to_test = [
+            ('Y-m-d', '2023-12-25'),
+            ('d/m/Y', '25/12/2023'),
+            ('H:i:s', '15:30:45'),
+        ]
+        
+        for fmt, expected in formats_to_test:
+            with self.subTest(format=fmt):
+                # Test with regular string
+                result_regular = date(test_date, fmt)
+                
+                # Test with lazy string
+                lazy_format = _(fmt)
+                result_lazy = date(test_date, lazy_format)
+                
+                # Results should be identical
+                self.assertEqual(result_regular, result_lazy)
+                self.assertEqual(result_regular, expected)
+
     def test_escape_characters(self):
         self.assertEqual(date(datetime(2005, 12, 29), r"jS \o\f F"), "29th of December")
