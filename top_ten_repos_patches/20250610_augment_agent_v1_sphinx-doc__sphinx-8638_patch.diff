diff --git b/sphinx/environment/adapters/indexentries.py a/sphinx/environment/adapters/indexentries.py
index 8d539925b..e662bfe4a 100644
--- b/sphinx/environment/adapters/indexentries.py
+++ a/sphinx/environment/adapters/indexentries.py
@@ -123,56 +123,29 @@ class IndexEntries:
             #   func() (in module bar)
             # into
             #   func()
             #     (in module foo)
             #     (in module bar)
-            
-            def extract_class_from_attribute(context: str) -> str:
-                """Extract class name from attribute context like '(ClassName attribute)'."""
-                if ' attribute)' in context:
-                    # Extract class name from contexts like "(testpkg.subA.database.DatabaseConnection attribute)"
-                    class_name = context.strip('()').replace(' attribute', '')
-                    return class_name
-                return ''
-            
             oldkey = ''
             oldsubitems = None  # type: Dict[str, List]
-            old_context = ''
             i = 0
             while i < len(newlist):
                 key, (targets, subitems, _key) = newlist[i]
                 # cannot move if it has subitems; structure gets too complex
                 if not subitems:
                     m = _fixre.match(key)
                     if m:
-                        current_context = m.group(2)
                         if oldkey == m.group(1):
-                            # Check if both entries are attributes from different classes
-                            old_class = extract_class_from_attribute(old_context)
-                            current_class = extract_class_from_attribute(current_context)
-                            
-                            # If current entry is an attribute and either:
-                            # 1. Previous entry is not an attribute (e.g., module variable), OR
-                            # 2. Both are attributes but from different classes
-                            # Then don't group them
-                            if (current_class and 
-                                (not old_class or (old_class and old_class != current_class))):
-                                oldkey = key
-                                old_context = current_context
-                            else:
-                                # prefixes match: add entry as subitem of the
-                                # previous entry
-                                oldsubitems.setdefault(m.group(2), [[], {}, _key])[0].\
-                                    extend(targets)
-                                del newlist[i]
-                                continue
-                        else:
-                            oldkey = m.group(1)
-                            old_context = current_context
+                            # prefixes match: add entry as subitem of the
+                            # previous entry
+                            oldsubitems.setdefault(m.group(2), [[], {}, _key])[0].\
+                                extend(targets)
+                            del newlist[i]
+                            continue
+                        oldkey = m.group(1)
                     else:
                         oldkey = key
-                        old_context = ''
                 oldsubitems = subitems
                 i += 1
 
         # sort the sub-index entries
         def keyfunc2(entry: Tuple[str, List]) -> str:
