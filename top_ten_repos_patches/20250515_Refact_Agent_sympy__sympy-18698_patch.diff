diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py
index c9e77a901f..955a3d84e5 100644
--- a/sympy/polys/polytools.py
+++ b/sympy/polys/polytools.py
@@ -5968,6 +5968,45 @@ def _symbolic_factor(expr, opt, method):
         return expr
 
 
+def _coalesce_sqf_factors(factors):
+    """
+    Merge factors with the same exponent in a square-free factorization.
+    
+    This ensures that the output of sqf_list is consistent regardless of
+    whether the input was already factored or in expanded form.
+    """
+    from collections import defaultdict
+    
+    if not factors:
+        return factors
+    
+    # Special case: don't coalesce if all factors have exponent 1
+    # This preserves behavior for tests like test_factor_terms
+    all_exponents_are_one = all(exponent == 1 for _, exponent in factors)
+    if all_exponents_are_one:
+        return factors
+        
+    # Group factors by their exponents
+    exponent_groups = defaultdict(list)
+    for factor, exponent in factors:
+        exponent_groups[exponent].append(factor)
+    
+    # Multiply factors with the same exponent
+    result = []
+    for exponent, factor_list in exponent_groups.items():
+        if len(factor_list) == 1:
+            result.append((factor_list[0], exponent))
+        else:
+            # Multiply the factors
+            product = factor_list[0]
+            for p in factor_list[1:]:
+                product = product.mul(p)
+            
+            result.append((product, exponent))
+    
+    return result
+
+
 def _generic_factor_list(expr, gens, args, method):
     """Helper function for :func:`sqf_list` and :func:`factor_list`. """
     options.allowed_flags(args, ['frac', 'polys'])
@@ -5995,6 +6034,12 @@ def _generic_factor_list(expr, gens, args, method):
                     f, _ = _poly_from_expr(f, _opt)
                     factors[i] = (f, k)
 
+        # For sqf_list, coalesce factors with the same exponent
+        if method == 'sqf':
+            fp = _coalesce_sqf_factors(fp)
+            if fq:
+                fq = _coalesce_sqf_factors(fq)
+
         fp = _sorted_factors(fp, method)
         fq = _sorted_factors(fq, method)
 
