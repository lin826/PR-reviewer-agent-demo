diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 880a2cc17b..5ac3efc5f1 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -2109,49 +2109,70 @@ class InlineModelAdmin(BaseModelAdmin):
         queryset = super().get_queryset(request)
         if not self.has_view_or_change_permission(request):
             queryset = queryset.none()
         return queryset
 
+    def _get_target_model_opts(self):
+        """
+        For auto-created intermediate models, find the target model options.
+        """
+        opts = self.opts
+        # The model was auto-created as intermediary for a many-to-many
+        # relationship; find the target model.
+        for field in opts.fields:
+            if field.remote_field and field.remote_field.model != self.parent_model:
+                return field.remote_field.model._meta
+        return opts
+
+    def _has_target_model_permission(self, request, permission_type):
+        """
+        Check if the user has a specific permission on the target model
+        for auto-created intermediate models.
+        """
+        if not self.opts.auto_created:
+            return False
+        
+        target_opts = self._get_target_model_opts()
+        codename = get_permission_codename(permission_type, target_opts)
+        return request.user.has_perm('%s.%s' % (target_opts.app_label, codename))
+
     def has_add_permission(self, request, obj):
         if self.opts.auto_created:
             # We're checking the rights to an auto-created intermediate model,
             # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            # to have the change permission for the related model in order to
+            # be able to add to the intermediate model.
+            return self._has_target_model_permission(request, 'change')
         return super().has_add_permission(request)
 
     def has_change_permission(self, request, obj=None):
         if self.opts.auto_created:
             # We're checking the rights to an auto-created intermediate model,
             # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            # to have the change permission for the related model in order to
+            # be able to change the intermediate model.
+            return self._has_target_model_permission(request, 'change')
         return super().has_change_permission(request)
 
     def has_delete_permission(self, request, obj=None):
         if self.opts.auto_created:
             # We're checking the rights to an auto-created intermediate model,
             # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            # to have the change permission for the related model in order to
+            # be able to delete from the intermediate model.
+            return self._has_target_model_permission(request, 'change')
         return super().has_delete_permission(request, obj)
 
     def has_view_permission(self, request, obj=None):
         if self.opts.auto_created:
-            opts = self.opts
-            # The model was auto-created as intermediary for a many-to-many
-            # Many-relationship; find the target model.
-            for field in opts.fields:
-                if field.remote_field and field.remote_field.model != self.parent_model:
-                    opts = field.remote_field.model._meta
-                    break
+            # We're checking the rights to an auto-created intermediate model,
+            # which doesn't have its own individual permissions. The user needs
+            # to have either view or change permission for the related model in order to
+            # be able to view the intermediate model.
             return (
-                request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('view', opts))) or
-                request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))
+                self._has_target_model_permission(request, 'view') or
+                self._has_target_model_permission(request, 'change')
             )
         return super().has_view_permission(request)
 
 
 class StackedInline(InlineModelAdmin):
