diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index c957ffa564..ec296a85e5 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -41,7 +41,11 @@ class Q(tree.Node):
 
     def _combine(self, other, conn):
         if not isinstance(other, Q):
-            raise TypeError(other)
+            # Allow combining with other conditional expressions (like Exists)
+            if not getattr(other, 'conditional', False):
+                raise TypeError(other)
+            # Convert the conditional expression to a Q object
+            other = Q(other)
 
         # If the other Q() is empty, ignore it and just use `self`.
         if not other:
@@ -49,6 +53,12 @@ class Q(tree.Node):
             return type(self)(*args, **kwargs)
         # Or if this Q is empty, ignore it and just use `other`.
         elif not self:
+            # If other contains non-tuple children (like wrapped expressions),
+            # we can't use deconstruct(), so just return other directly
+            if (len(other.children) == 1 and 
+                not isinstance(other.children[0], Q) and 
+                not isinstance(other.children[0], tuple)):
+                return other
             _, args, kwargs = other.deconstruct()
             return type(other)(*args, **kwargs)
 
diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py
index 6dcf36ce02..372504fdc3 100644
--- a/tests/queries/test_q.py
+++ b/tests/queries/test_q.py
@@ -1,6 +1,8 @@
-from django.db.models import F, Q
+from django.db.models import F, Q, Exists
 from django.test import SimpleTestCase
 
+from .models import Author
+
 
 class QTests(SimpleTestCase):
     def test_combine_and_empty(self):
@@ -111,3 +113,58 @@ class QTests(SimpleTestCase):
         q = q1 & q2
         path, args, kwargs = q.deconstruct()
         self.assertEqual(Q(*args, **kwargs), q)
+
+    def test_combine_q_and_exists(self):
+        """Test that Q and Exists can be combined in both directions."""
+        queryset = Author.objects.all()
+        exists = Exists(queryset)
+        q_empty = Q()
+        q_with_condition = Q(name='test')
+        
+        # Test Q() & Exists(...)
+        result = q_empty & exists
+        self.assertIsInstance(result, Q)
+        self.assertEqual(len(result.children), 1)
+        self.assertIn(exists, result.children)
+        
+        # Test Exists(...) & Q()
+        result = exists & q_empty
+        self.assertIsInstance(result, Q)
+        self.assertEqual(len(result.children), 2)
+        self.assertIn(exists, result.children)
+        
+        # Test Q() | Exists(...)
+        result = q_empty | exists
+        self.assertIsInstance(result, Q)
+        self.assertEqual(len(result.children), 1)
+        self.assertIn(exists, result.children)
+        
+        # Test Exists(...) | Q()
+        result = exists | q_empty
+        self.assertIsInstance(result, Q)
+        self.assertEqual(len(result.children), 2)
+        self.assertIn(exists, result.children)
+        
+        # Test Q(name='test') & Exists(...)
+        result = q_with_condition & exists
+        self.assertIsInstance(result, Q)
+        self.assertEqual(len(result.children), 2)
+        self.assertIn(exists, result.children)
+        
+        # Test Exists(...) & Q(name='test')
+        result = exists & q_with_condition
+        self.assertIsInstance(result, Q)
+        self.assertEqual(len(result.children), 2)
+        self.assertIn(exists, result.children)
+        
+        # Test Q(name='test') | Exists(...)
+        result = q_with_condition | exists
+        self.assertIsInstance(result, Q)
+        self.assertEqual(len(result.children), 2)
+        self.assertIn(exists, result.children)
+        
+        # Test Exists(...) | Q(name='test')
+        result = exists | q_with_condition
+        self.assertIsInstance(result, Q)
+        self.assertEqual(len(result.children), 2)
+        self.assertIn(exists, result.children)
