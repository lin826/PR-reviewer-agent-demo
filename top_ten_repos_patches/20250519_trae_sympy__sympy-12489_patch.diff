diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 4ac1c2ef3b..d569dbcd03 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -857,9 +857,9 @@ def __new__(cls, *args, **kwargs):
         #g) (Permutation) = adjust size or return copy
         ok = True
         if not args:  # a
-            return _af_new(list(range(size or 0)))
+            return cls._af_new(list(range(size or 0)))
         elif len(args) > 1:  # c
-            return _af_new(Cycle(*args).list(size))
+            return cls._af_new(Cycle(*args).list(size))
         if len(args) == 1:
             a = args[0]
             if isinstance(a, Perm):  # g
@@ -867,9 +867,9 @@ def __new__(cls, *args, **kwargs):
                     return a
                 return Perm(a.array_form, size=size)
             if isinstance(a, Cycle):  # f
-                return _af_new(a.list(size))
+                return cls._af_new(a.list(size))
             if not is_sequence(a):  # b
-                return _af_new(list(range(a + 1)))
+                return cls._af_new(list(range(a + 1)))
             if has_variety(is_sequence(ai) for ai in a):
                 ok = False
         else:
@@ -924,8 +924,8 @@ def __new__(cls, *args, **kwargs):
         obj._size = size
         return obj
 
-    @staticmethod
-    def _af_new(perm):
+    @classmethod
+    def _af_new(cls, perm):
         """A method to produce a Permutation object from a list;
         the list is bound to the _array_form attribute, so it must
         not be modified; this method is meant for internal use only;
@@ -944,7 +944,7 @@ def _af_new(perm):
         Permutation([2, 1, 3, 0])
 
         """
-        p = Basic.__new__(Perm, perm)
+        p = Basic.__new__(cls, perm)
         p._array_form = perm
         p._size = len(perm)
         return p
@@ -1219,14 +1219,14 @@ def rmul(*args):
             rv = args[i]*rv
         return rv
 
-    @staticmethod
-    def rmul_with_af(*args):
+    @classmethod
+    def rmul_with_af(cls, *args):
         """
         same as rmul, but the elements of args are Permutation objects
         which have _array_form
         """
         a = [x._array_form for x in args]
-        rv = _af_new(_af_rmuln(*a))
+        rv = cls._af_new(_af_rmuln(*a))
         return rv
 
     def mul_inv(self, other):
@@ -1235,7 +1235,7 @@ def mul_inv(self, other):
         """
         a = _af_invert(self._array_form)
         b = other._array_form
-        return _af_new(_af_rmul(a, b))
+        return self.__class__._af_new(_af_rmul(a, b))
 
     def __rmul__(self, other):
         """This is needed to coerse other to Permutation in rmul."""
@@ -1341,7 +1341,7 @@ def __pow__(self, n):
             raise NotImplementedError(
                 'p**p is not defined; do you mean p^p (conjugate)?')
         n = int(n)
-        return _af_new(_af_pow(self.array_form, n))
+        return self.__class__._af_new(_af_pow(self.array_form, n))
 
     def __rxor__(self, i):
         """Return self(i) when ``i`` is an int.
@@ -1519,7 +1519,7 @@ def __invert__(self):
         >>> p*~p == ~p*p == Permutation([0, 1, 2, 3])
         True
         """
-        return _af_new(_af_invert(self._array_form))
+        return self.__class__._af_new(_af_invert(self._array_form))
 
     def __iter__(self):
         """Yield elements from array form.

