diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py
index a3f0310735..2d041ac7a2 100644
--- a/sympy/printing/pycode.py
+++ b/sympy/printing/pycode.py
@@ -357,6 +357,14 @@ def _print_Not(self, expr):
         PREC = precedence(expr)
         return self._operators['not'] + self.parenthesize(expr.args[0], PREC)
 
+    def _print_Indexed(self, expr):
+        base = self._print(expr.base)
+        indices = [self._print(idx) for idx in expr.indices]
+        return "{}[{}]".format(base, ", ".join(indices))
+
+    def _print_IndexedBase(self, expr):
+        return str(expr)
+
 
 for k in PythonCodePrinter._kf:
     setattr(PythonCodePrinter, '_print_%s' % k, _print_known_func)
@@ -365,6 +373,22 @@ def _print_Not(self, expr):
     setattr(PythonCodePrinter, '_print_%s' % k, _print_known_const)
 
 
+# Support for Indexed objects
+def _print_Indexed(self, expr):
+    """Print Indexed objects as Python array indexing syntax"""
+    base = self._print(expr.base)
+    indices = [self._print(idx) for idx in expr.indices]
+    return f"{base}[{', '.join(indices)}]"
+
+def _print_IndexedBase(self, expr):
+    """Print IndexedBase objects as their name"""
+    return str(expr)
+
+# Add the methods to PythonCodePrinter
+PythonCodePrinter._print_Indexed = _print_Indexed
+PythonCodePrinter._print_IndexedBase = _print_IndexedBase
+
+
 def pycode(expr, **settings):
     """ Converts an expr to a string of Python code
 
diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py
index f1a9a37898..f99aa5c9ba 100644
--- a/sympy/printing/tests/test_pycode.py
+++ b/sympy/printing/tests/test_pycode.py
@@ -11,6 +11,7 @@
 from sympy.printing.pycode import (
     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter
 )
+from sympy.tensor.indexed import IndexedBase, Indexed
 from sympy.utilities.pytest import raises
 
 x, y, z = symbols('x y z')
@@ -96,3 +97,50 @@ def test_NumPyPrinter_print_seq():
     n = NumPyPrinter()
 
     assert n._print_seq(range(2)) == '(0, 1,)'
+
+
+def test_PythonCodePrinter_Indexed():
+    prntr = PythonCodePrinter()
+    
+    # Test IndexedBase
+    p = IndexedBase("p")
+    assert prntr.doprint(p) == 'p'
+    
+    # Test single index
+    assert prntr.doprint(p[0]) == 'p[0]'
+    
+    # Test multiple indices
+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'
+    assert prntr.doprint(p[0, 1, 2]) == 'p[0, 1, 2]'
+    
+    # Test symbolic indices
+    i, j = symbols('i j')
+    assert prntr.doprint(p[i]) == 'p[i]'
+    assert prntr.doprint(p[i, j]) == 'p[i, j]'
+    
+    # Test complex indices
+    assert prntr.doprint(p[i + 1, j - 2]) == 'p[i + 1, j - 2]'
+    
+    # Test in expressions
+    x = symbols('x')
+    result = prntr.doprint(p[0] + x**2)
+    assert 'p[0]' in result and 'x**2' in result
+
+
+def test_pycode_Indexed():
+    # Test the main pycode function with Indexed objects
+    p = IndexedBase("p")
+    
+    # Basic tests
+    assert pycode(p[0]) == 'p[0]'
+    assert pycode(p[0, 1]) == 'p[0, 1]'
+    
+    # Test that no "Not supported" warnings appear
+    result = pycode(p[0])
+    assert 'Not supported' not in result
+    assert 'Indexed' not in result or result == 'p[0]'  # 'Indexed' should only appear if it's the actual output
+    
+    # Test with expressions
+    x = symbols('x')
+    result = pycode(p[0] + x)
+    assert 'p[0]' in result and 'x' in result
