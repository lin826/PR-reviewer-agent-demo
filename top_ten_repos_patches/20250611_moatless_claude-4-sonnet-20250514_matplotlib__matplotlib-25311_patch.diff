--- a/lib/matplotlib/offsetbox.py
+++ b/lib/matplotlib/offsetbox.py
@@ -1516,6 +1516,7 @@
 
     def on_motion(self, evt):
         if self._check_still_parented() and self.got_artist:
+            self._ensure_canvas_and_callbacks()
             dx = evt.x - self.mouse_x
             dy = evt.y - self.mouse_y
             self.update_offset(dx, dy)
@@ -1529,6 +1530,7 @@
 
     def on_pick(self, evt):
         if self._check_still_parented() and evt.artist == self.ref_artist:
+            self._ensure_canvas_and_callbacks()
             self.mouse_x = evt.mouseevent.x
             self.mouse_y = evt.mouseevent.y
             self.got_artist = True
@@ -1546,6 +1548,7 @@
 
     def on_release(self, event):
         if self._check_still_parented() and self.got_artist:
+            self._ensure_canvas_and_callbacks()
             self.finalize_offset()
             self.got_artist = False
             self.canvas.mpl_disconnect(self._c1)
@@ -1562,14 +1565,15 @@
 
     def disconnect(self):
         """Disconnect the callbacks."""
-        for cid in self.cids:
-            self.canvas.mpl_disconnect(cid)
-        try:
-            c1 = self._c1
-        except AttributeError:
-            pass
-        else:
-            self.canvas.mpl_disconnect(c1)
+        if self.canvas is not None:
+            for cid in self.cids:
+                self.canvas.mpl_disconnect(cid)
+            try:
+                c1 = self._c1
+            except AttributeError:
+                pass
+            else:
+                self.canvas.mpl_disconnect(c1)
 
     def save_offset(self):
         pass
@@ -1579,6 +1583,81 @@
 
     def finalize_offset(self):
         pass
+
+    def __getstate__(self):
+        """
+        Return the state for pickling.
+        
+        We need to exclude the canvas and callback IDs which cannot be pickled.
+        """
+        state = self.__dict__.copy()
+        # Remove the unpicklable canvas and callback references
+        state.pop('canvas', None)
+        state.pop('cids', None)
+        # Remove any motion callback ID if it exists
+        state.pop('_c1', None)
+        return state
+
+    def __setstate__(self, state):
+        """
+        Restore the state after unpickling.
+        
+        We need to restore the canvas reference and reconnect callbacks.
+        """
+        self.__dict__.update(state)
+        # Restore canvas reference - try multiple ways since figure reference
+        # might not be available during unpickling
+        canvas = None
+        if hasattr(self.ref_artist, 'figure') and self.ref_artist.figure is not None:
+            canvas = self.ref_artist.figure.canvas
+        elif hasattr(self.ref_artist, 'axes') and self.ref_artist.axes is not None:
+            canvas = self.ref_artist.axes.figure.canvas
+        
+        if canvas is not None:
+            self.canvas = canvas
+            # Update _use_blit based on canvas capabilities
+            self._use_blit = getattr(self, '_use_blit', False) and self.canvas.supports_blit
+            # Reconnect the callbacks
+            self.cids = [
+                self.canvas.callbacks._connect_picklable(
+                    'pick_event', self.on_pick),
+                self.canvas.callbacks._connect_picklable(
+                    'button_release_event', self.on_release),
+            ]
+        else:
+            # If we can't get the canvas now, set up a deferred initialization
+            self.canvas = None
+            self.cids = []
+            self._use_blit = False
+    
+    def _ensure_canvas_and_callbacks(self):
+        """
+        Ensure canvas and callbacks are properly set up.
+        
+        This method can be called after unpickling to properly initialize
+        the canvas reference and callbacks if they weren't available during
+        __setstate__.
+        """
+        if self.canvas is None or not self.cids:
+            # Try to get canvas reference
+            canvas = None
+            if hasattr(self.ref_artist, 'figure') and self.ref_artist.figure is not None:
+                canvas = self.ref_artist.figure.canvas
+            elif hasattr(self.ref_artist, 'axes') and self.ref_artist.axes is not None:
+                canvas = self.ref_artist.axes.figure.canvas
+            
+            if canvas is not None:
+                self.canvas = canvas
+                # Update _use_blit based on canvas capabilities
+                self._use_blit = getattr(self, '_use_blit', False) and self.canvas.supports_blit
+                # Reconnect the callbacks if not already connected
+                if not self.cids:
+                    self.cids = [
+                        self.canvas.callbacks._connect_picklable(
+                            'pick_event', self.on_pick),
+                        self.canvas.callbacks._connect_picklable(
+                            'button_release_event', self.on_release),
+                    ]
 
 
 class DraggableOffsetBox(DraggableBase):
