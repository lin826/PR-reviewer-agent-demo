diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index a7def03..7b54910 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -21,9 +21,23 @@ from sphinx.application import Sphinx
 from sphinx.util import inspect, typing
 
 
+
 def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
-                     options: Dict, args: str, retann: str) -> None:
-    """Record type hints to env object."""
+                     options: Dict, args: str, retann: str):
+    """
+    Record type hints to the environment **and** fix broken default‐value
+    rendering by overriding the signature when necessary.
+
+    Sphinx fires the ``autodoc-process-signature`` event with *args* set to the
+    already formatted argument list.  Unfortunately, upstream formatting may
+    drop the surrounding brackets of collection defaults.  We therefore:
+
+    1. Inspect the real Python signature with ``inspect.signature``.
+    2. Convert it to ``str`` which keeps the exact textual representation,
+       including parentheses/brackets/braces.
+    3. Return the new string (together with *retann*) when it differs from the
+       original one so that Sphinx uses the corrected version.
+    """
     try:
         if callable(obj):
             annotations = app.env.temp_data.setdefault('annotations', {})
@@ -34,10 +48,18 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
                     annotation[param.name] = typing.stringify(param.annotation)
             if sig.return_annotation is not sig.empty:
                 annotation['return'] = typing.stringify(sig.return_annotation)
+
+            # Build a reliable textual signature that preserves default values.
+            real_sig = str(sig)
+            if real_sig != args:
+                # Returning a two‑tuple overrides the old (args, retann) pair.
+                return real_sig, retann
     except (TypeError, ValueError):
+        # Some built‑ins may not support signature introspection.
         pass
 
 
+
 def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:
     if domain != 'py':
         return
