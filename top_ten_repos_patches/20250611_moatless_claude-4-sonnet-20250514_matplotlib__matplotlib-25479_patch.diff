--- a/lib/matplotlib/cm.py
+++ b/lib/matplotlib/cm.py
@@ -146,6 +146,42 @@
                                "that was already in the registry.")
 
         self._cmaps[name] = cmap.copy()
+
+    def get_registered_name(self, cmap):
+        """
+        Get the registered name for a colormap object.
+
+        Parameters
+        ----------
+        cmap : matplotlib.colors.Colormap
+            The colormap object to find the registered name for.
+
+        Returns
+        -------
+        str or None
+            The registered name for the colormap, or None if not found.
+            If multiple names are registered for the same colormap,
+            returns the first one found.
+        """
+        # Check if this is the same object as any registered colormap
+        for name, registered_cmap in self._cmaps.items():
+            if cmap is registered_cmap:
+                return name
+        
+        # If not found by identity, check by equality (name and data)
+        # This handles cases where the colormap might be a copy
+        for name, registered_cmap in self._cmaps.items():
+            if (hasattr(cmap, 'name') and hasattr(registered_cmap, 'name') and
+                cmap.name == registered_cmap.name and
+                hasattr(cmap, '_segmentdata') and hasattr(registered_cmap, '_segmentdata') and
+                cmap._segmentdata == registered_cmap._segmentdata):
+                return name
+            # For ListedColormap, check colors
+            elif (hasattr(cmap, 'colors') and hasattr(registered_cmap, 'colors') and
+                  np.array_equal(cmap.colors, registered_cmap.colors)):
+                return name
+        
+        return None
 
     def unregister(self, name):
         """

--- a/lib/matplotlib/pyplot.py
+++ b/lib/matplotlib/pyplot.py
@@ -2278,9 +2278,20 @@
     matplotlib.cm.register_cmap
     matplotlib.cm.get_cmap
     """
+    # Keep track of the original cmap argument to preserve registered names
+    original_name = cmap
     cmap = get_cmap(cmap)
 
-    rc('image', cmap=cmap.name)
+    # If the input was a string, use it directly rather than cmap.name
+    # to preserve the registered name instead of the colormap's internal name
+    if isinstance(original_name, str):
+        rc_name = original_name
+    else:
+        # For Colormap objects, try to find their registered name
+        registered_name = colormaps.get_registered_name(cmap)
+        rc_name = registered_name if registered_name is not None else cmap.name
+    
+    rc('image', cmap=rc_name)
     im = gci()
 
     if im is not None:
