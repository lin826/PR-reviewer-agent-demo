diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py
index dc44ed314..3da77dd43 100644
--- a/sphinx/directives/code.py
+++ b/sphinx/directives/code.py
@@ -225,8 +225,8 @@ class LiteralIncludeReader:
                        self.end_filter,
                        self.lines_filter,
                        self.prepend_filter,
-                       self.append_filter,
-                       self.dedent_filter]
+                       self.dedent_filter,
+                       self.append_filter]
             lines = self.read_file(self.filename, location=location)
             for func in filters:
                 lines = func(lines, location=location)
@@ -343,17 +343,30 @@ class LiteralIncludeReader:
     def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:
         prepend = self.options.get('prepend')
         if prepend:
-            lines.insert(0, prepend + '\n')
+            indent = self._detect_indent(lines)
+            # Apply the same indentation to each line in the prepended text
+            prepend_lines = [indent + line for line in prepend.split('\n')]
+            lines.insert(0, '\n'.join(prepend_lines) + '\n')
 
         return lines
 
     def append_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:
         append = self.options.get('append')
         if append:
-            lines.append(append + '\n')
+            indent = self._detect_indent(lines)
+            # Apply the same indentation to each line in the appended text
+            append_lines = [indent + line for line in append.split('\n')]
+            lines.append('\n'.join(append_lines) + '\n')
 
         return lines
 
+    def _detect_indent(self, lines: List[str]) -> str:
+        """Return the indentation of the first non-empty line in lines."""
+        for line in lines:
+            if line.strip():
+                return line[:len(line) - len(line.lstrip())]
+        return ''
+
     def dedent_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:
         if 'dedent' in self.options:
             return dedent_lines(lines, self.options.get('dedent'), location=location)
