diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py
index aef290f6..ca6a6ffc 100644
--- a/xarray/core/rolling.py
+++ b/xarray/core/rolling.py
@@ -268,16 +268,28 @@ class DataArrayRolling(Rolling["DataArray"]):
         self.window_labels = self.obj[self.dim[0]]
 
     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:
         if self.ndim > 1:
             raise ValueError("__iter__ is only supported for 1d-rolling")
-        stops = np.arange(1, len(self.window_labels) + 1)
-        starts = stops - int(self.window[0])
-        starts[: int(self.window[0])] = 0
-        for (label, start, stop) in zip(self.window_labels, starts, stops):
-            window = self.obj.isel({self.dim[0]: slice(start, stop)})
-
+        
+        # Use the construct method to get the properly centered windows
+        # This ensures we get the same behavior as the regular rolling operations
+        temp_window_dim = "_temp_rolling_window"
+        constructed = self.construct(temp_window_dim)
+        
+        for i, label in enumerate(self.window_labels):
+            # Extract the i-th window
+            window_data = constructed.isel({self.dim[0]: i})
+            
+            # The window_data now has the temp_window_dim as the rolling dimension
+            # We need to rename it back to the original dimension name, but first
+            # we need to drop the scalar coordinate that conflicts (if it exists)
+            if self.dim[0] in window_data.coords:
+                window_data = window_data.drop_vars(self.dim[0])
+            window = window_data.rename({temp_window_dim: self.dim[0]})
+            
+            # Apply min_periods logic
             counts = window.count(dim=self.dim[0])
             window = window.where(counts >= self.min_periods)
 
             yield (label, window)
 
