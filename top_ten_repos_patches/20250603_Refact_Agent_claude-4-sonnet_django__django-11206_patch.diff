diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py
index 88b35fc435..5d4e02b692 100644
--- a/django/utils/numberformat.py
+++ b/django/utils/numberformat.py
@@ -31,14 +31,22 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',
         # scientific notation to avoid high memory usage in {:f}'.format().
         _, digits, exponent = number.as_tuple()
         if abs(exponent) + len(digits) > 200:
-            number = '{:e}'.format(number)
-            coefficient, exponent = number.split('e')
-            # Format the coefficient.
-            coefficient = format(
-                coefficient, decimal_sep, decimal_pos, grouping,
-                thousand_sep, force_grouping, use_l10n,
-            )
-            return '{}e{}'.format(coefficient, exponent)
+            # If decimal_pos is specified and the number would round to zero
+            # at that precision, format as "0.00..." instead of exponential notation
+            if (decimal_pos is not None and exponent < 0 and 
+                abs(exponent) > decimal_pos and len(digits) == 1 and digits[0] == 1):
+                # The number is of the form 1e-N where N > decimal_pos,
+                # so it should be formatted as zero at the given precision
+                str_number = '0'
+            else:
+                number = '{:e}'.format(number)
+                coefficient, exponent = number.split('e')
+                # Format the coefficient.
+                coefficient = format(
+                    coefficient, decimal_sep, decimal_pos, grouping,
+                    thousand_sep, force_grouping, use_l10n,
+                )
+                return '{}e{}'.format(coefficient, exponent)
         else:
             str_number = '{:f}'.format(number)
     else:
diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py
index 3d656025ab..b39ff2abc5 100644
--- a/tests/utils_tests/test_numberformat.py
+++ b/tests/utils_tests/test_numberformat.py
@@ -100,6 +100,33 @@ class TestNumberFormat(SimpleTestCase):
             with self.subTest(value=value):
                 self.assertEqual(nformat(Decimal(value), '.', decimal_pos), expected_value)
 
+    def test_small_decimal_with_decimal_pos(self):
+        """
+        Test that very small decimals with decimal_pos are formatted as zero
+        instead of exponential notation when they would round to zero.
+        """
+        # Test cases for the issue where small decimals were incorrectly
+        # formatted in exponential notation when decimal_pos was specified
+        test_cases = [
+            # Numbers of the form 1e-N where N > decimal_pos should format as zero
+            ('1e-200', 2, '0.00'),
+            ('1e-201', 2, '0.00'),
+            ('1e-300', 3, '0.000'),
+            ('1e-500', 1, '0.0'),
+            ('1e-199', 2, '0.00'),  # Edge case at the 200-digit boundary
+            ('1e-201', 5, '0.00000'),
+            
+            # Numbers with significant digits should still use exponential notation
+            ('1.234e-300', 3, '1.234e-300'),
+            ('2.5e-250', 2, '2.50e-250'),
+            ('9.876e-400', 4, '9.8760e-400'),
+        ]
+        
+        for value, decimal_pos, expected_value in test_cases:
+            with self.subTest(value=value, decimal_pos=decimal_pos):
+                result = nformat(Decimal(value), '.', decimal_pos)
+                self.assertEqual(result, expected_value)
+
     def test_decimal_subclass(self):
         class EuroDecimal(Decimal):
             """
