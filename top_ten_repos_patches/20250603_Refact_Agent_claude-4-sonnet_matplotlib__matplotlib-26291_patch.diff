diff --git a/lib/mpl_toolkits/axes_grid1/inset_locator.py b/lib/mpl_toolkits/axes_grid1/inset_locator.py
index 9d35051074..efa123a03b 100644
--- a/lib/mpl_toolkits/axes_grid1/inset_locator.py
+++ b/lib/mpl_toolkits/axes_grid1/inset_locator.py
@@ -70,6 +70,9 @@ class AnchoredLocatorBase(AnchoredOffsetbox):
 
     def __call__(self, ax, renderer):
         self.axes = ax
+        # If renderer is None, get one from the figure
+        if renderer is None and hasattr(self, 'figure') and self.figure is not None:
+            renderer = self.figure._get_renderer()
         bbox = self.get_window_extent(renderer)
         px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)
         bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)
@@ -287,6 +290,11 @@ def _add_inset_axes(parent_axes, axes_class, axes_kwargs, axes_locator):
     inset_axes = axes_class(
         parent_axes.figure, parent_axes.get_position(),
         **{"navigate": False, **axes_kwargs, "axes_locator": axes_locator})
+    
+    # Set the locator's figure attribute so it can get a renderer when needed
+    # This is required for get_window_extent() fallback during tight bbox calculations
+    axes_locator.figure = parent_axes.figure
+    
     return parent_axes.figure.add_axes(inset_axes)
 
 
