diff --git a/lib/matplotlib/collections.py b/lib/matplotlib/collections.py
index 73d562c0e8..338928f392 100644
--- a/lib/matplotlib/collections.py
+++ b/lib/matplotlib/collections.py
@@ -2203,4 +2203,4 @@ class QuadMesh(Collection):
             ind, = info["ind"]
             return self.get_array()[ind]
         else:
-            return None
+            return None
diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py
index c59b0ac815..38a55b4c65 100644
--- a/lib/matplotlib/colorbar.py
+++ b/lib/matplotlib/colorbar.py
@@ -651,8 +651,12 @@ class Colorbar:
             if not self.drawedges:
                 if len(self._y) >= self.n_rasterize:
                     self.solids.set_rasterized(True)
-        self.dividers.set_segments(
-            np.dstack([X, Y])[1:-1] if self.drawedges else [])
+
+        segs = np.dstack([X, Y])
+        lo = 0 if self._extend_lower() else 1        # keep first segment if lower end is extended
+        hi = None if self._extend_upper() else -1    # keep last segment if upper end is extended
+        self.dividers.set_segments(segs[lo:hi] if self.drawedges else [])
+
 
     def _add_solids_patches(self, X, Y, C, mappable):
         hatches = mappable.hatches * len(C)  # Have enough hatches.
@@ -726,8 +730,10 @@ class Colorbar:
             # add the patch
             val = -1 if self._long_axis().get_inverted() else 0
             color = self.cmap(self.norm(self._values[val]))
+
             patch = mpatches.PathPatch(
-                mpath.Path(xy), facecolor=color, linewidth=0,
+                mpath.Path(xy), facecolor=color, linewidth=(0 if not self.drawedges else 0.5 * mpl.rcParams["axes.linewidth"]),
+
                 antialiased=False, transform=self.ax.transAxes,
                 hatch=hatches[0], clip_on=False,
                 # Place it right behind the standard patches, which is
@@ -747,9 +753,11 @@ class Colorbar:
             # add the patch
             val = 0 if self._long_axis().get_inverted() else -1
             color = self.cmap(self.norm(self._values[val]))
+
             patch = mpatches.PathPatch(
                 mpath.Path(xy), facecolor=color,
-                linewidth=0, antialiased=False,
+                linewidth=(0 if not self.drawedges else 0.5 * mpl.rcParams["axes.linewidth"]), antialiased=False,
+
                 transform=self.ax.transAxes, hatch=hatches[-1], clip_on=False,
                 # Place it right behind the standard patches, which is
                 # needed if we updated the extends
@@ -1634,4 +1642,4 @@ def make_axes_gridspec(parent, *, location=None, orientation=None,
         aspect=aspect0,
         pad=pad)
 
-    return cax, kwargs
+    return cax, kwargs
