--- a/sklearn/model_selection/_split.py
+++ b/sklearn/model_selection/_split.py
@@ -620,7 +620,7 @@
         super().__init__(n_splits, shuffle, random_state)
 
     def _make_test_folds(self, X, y=None):
-        rng = self.random_state
+        rng = check_random_state(self.random_state)
         y = np.asarray(y)
         type_of_target_y = type_of_target(y)
         allowed_target_types = ('binary', 'multiclass')
@@ -651,10 +651,20 @@
         # NOTE: Passing the data corresponding to ith class say X[y==class_i]
         # will break when the data is not 100% stratifiable for all classes.
         # So we pass np.zeroes(max(c, n_splits)) as data to the KFold
-        per_cls_cvs = [
-            KFold(self.n_splits, shuffle=self.shuffle,
-                  random_state=rng).split(np.zeros(max(count, self.n_splits)))
-            for count in y_counts]
+        per_cls_cvs = []
+        for count in y_counts:
+            if self.shuffle:
+                # Generate a different random state for each class
+                cls_random_state = check_random_state(
+                    rng.randint(0, np.iinfo(np.int32).max))
+            else:
+                cls_random_state = rng
+            per_cls_cvs.append(
+                KFold(self.n_splits, shuffle=self.shuffle,
+                      random_state=cls_random_state).split(
+                          np.zeros(max(count, self.n_splits))))
+            
+        per_cls_cvs = list(per_cls_cvs)
 
         test_folds = np.zeros(n_samples, dtype=np.int)
         for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):
