diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index 75b0646512..fc56814ec1 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -149,7 +149,11 @@ class BaseFormSet(RenderableFormMixin):
             return min(self.management_form.cleaned_data[TOTAL_FORM_COUNT], self.absolute_max)
         else:
             initial_forms = self.initial_form_count()
-            total_forms = max(initial_forms, self.min_num) + self.extra
+            # If can_add is False, don't add any extra forms
+            if not getattr(self, 'can_add', True):
+                total_forms = max(initial_forms, self.min_num)
+            else:
+                total_forms = max(initial_forms, self.min_num) + self.extra
             # Allow all existing related objects/inlines to be displayed,
             # but don't allow extra beyond max_num.
             if initial_forms > self.max_num >= 0:
@@ -478,7 +482,7 @@ class BaseFormSet(RenderableFormMixin):
 def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,
                     can_delete=False, max_num=None, validate_max=False,
                     min_num=None, validate_min=False, absolute_max=None,
-                    can_delete_extra=True, renderer=None):
+                    can_delete_extra=True, renderer=None, can_add=True):
     """Return a FormSet for the given form class."""
     if min_num is None:
         min_num = DEFAULT_MIN_NUM
@@ -499,6 +503,7 @@ def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,
         'can_order': can_order,
         'can_delete': can_delete,
         'can_delete_extra': can_delete_extra,
+        'can_add': can_add,
         'min_num': min_num,
         'max_num': max_num,
         'absolute_max': absolute_max,
diff --git a/django/forms/models.py b/django/forms/models.py
index 7effb202e3..5b6dea79de 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -682,6 +682,13 @@ class BaseModelFormSet(BaseFormSet):
 
     def clean(self):
         self.validate_unique()
+        if not getattr(self, 'can_add', True):
+            # If can_add is False, validate that no extra forms have data
+            for form in self.extra_forms:
+                if form.has_changed():
+                    raise ValidationError(
+                        "This formset does not allow adding new objects."
+                    )
 
     def validate_unique(self):
         # Collect unique_checks and date_checks to run from all the forms.
@@ -813,6 +820,9 @@ class BaseModelFormSet(BaseFormSet):
 
     def save_new_objects(self, commit=True):
         self.new_objects = []
+        # If can_add is False, don't save any new objects
+        if not getattr(self, 'can_add', True):
+            return self.new_objects
         for form in self.extra_forms:
             if not form.has_changed():
                 continue
@@ -875,7 +885,8 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
                          widgets=None, validate_max=False, localized_fields=None,
                          labels=None, help_texts=None, error_messages=None,
                          min_num=None, validate_min=False, field_classes=None,
-                         absolute_max=None, can_delete_extra=True, renderer=None):
+                         absolute_max=None, can_delete_extra=True, renderer=None,
+                         can_add=True):
     """Return a FormSet class for the given Django model class."""
     meta = getattr(form, 'Meta', None)
     if (getattr(meta, 'fields', fields) is None and
@@ -894,7 +905,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
                               can_order=can_order, can_delete=can_delete,
                               validate_min=validate_min, validate_max=validate_max,
                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,
-                              renderer=renderer)
+                              renderer=renderer, can_add=can_add)
     FormSet.model = model
     return FormSet
 
@@ -1076,7 +1087,8 @@ def inlineformset_factory(parent_model, model, form=ModelForm,
                           widgets=None, validate_max=False, localized_fields=None,
                           labels=None, help_texts=None, error_messages=None,
                           min_num=None, validate_min=False, field_classes=None,
-                          absolute_max=None, can_delete_extra=True, renderer=None):
+                          absolute_max=None, can_delete_extra=True, renderer=None,
+                          can_add=True):
     """
     Return an ``InlineFormSet`` for the given kwargs.
 
@@ -1109,6 +1121,7 @@ def inlineformset_factory(parent_model, model, form=ModelForm,
         'absolute_max': absolute_max,
         'can_delete_extra': can_delete_extra,
         'renderer': renderer,
+        'can_add': can_add,
     }
     FormSet = modelformset_factory(model, **kwargs)
     FormSet.fk = fk
