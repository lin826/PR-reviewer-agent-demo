diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index 000e2e8d3..302f7f78c 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -1155,25 +1155,41 @@ class PythonDomain(Domain):
                     elif name in self.objects and self.objects[name].objtype in objtypes:
                         newname = name
                     else:
-                        # "fuzzy" searching mode
+                        # "fuzzy" searching mode - but don't do fuzzy matching for variables
+                        # since these are likely to have same names across different modules/classes
                         searchname = '.' + name
-                        matches = [(oname, self.objects[oname]) for oname in self.objects
-                                   if oname.endswith(searchname) and
-                                   self.objects[oname].objtype in objtypes]
+                        is_var_match = type in ('attr', 'var', 'data')
+                        if not is_var_match:
+                            matches = [(oname, self.objects[oname]) for oname in self.objects
+                                      if oname.endswith(searchname) and
+                                      self.objects[oname].objtype in objtypes]
         else:
             # NOTE: searching for exact match, object type is not considered
-            if name in self.objects:
-                newname = name
-            elif type == 'mod':
-                # only exact matches allowed for modules
-                return []
-            elif classname and classname + '.' + name in self.objects:
-                newname = classname + '.' + name
-            elif modname and modname + '.' + name in self.objects:
-                newname = modname + '.' + name
-            elif modname and classname and \
-                    modname + '.' + classname + '.' + name in self.objects:
-                newname = modname + '.' + classname + '.' + name
+            is_var_match = type in ('attr', 'var', 'data')
+
+            # For variables (attributes), only create references within the same class or module
+            # to prevent unwanted cross-references between variables with the same name
+            if is_var_match:
+                if modname and classname and modname + '.' + classname + '.' + name in self.objects:
+                    newname = modname + '.' + classname + '.' + name
+                elif classname and classname + '.' + name in self.objects:
+                    newname = classname + '.' + name
+                elif modname and modname + '.' + name in self.objects:
+                    newname = modname + '.' + name
+            else:
+                # For non-variables, keep the original behavior
+                if name in self.objects:
+                    newname = name
+                elif type == 'mod':
+                    # only exact matches allowed for modules
+                    return []
+                elif classname and classname + '.' + name in self.objects:
+                    newname = classname + '.' + name
+                elif modname and modname + '.' + name in self.objects:
+                    newname = modname + '.' + name
+                elif modname and classname and \
+                        modname + '.' + classname + '.' + name in self.objects:
+                    newname = modname + '.' + classname + '.' + name
         if newname is not None:
             matches.append((newname, self.objects[newname]))
         return matches

