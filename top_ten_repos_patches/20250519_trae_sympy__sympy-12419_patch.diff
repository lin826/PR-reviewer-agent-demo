diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py
index 372487664c..7b80277b5c 100644
--- a/sympy/concrete/summations.py
+++ b/sympy/concrete/summations.py
@@ -866,6 +866,15 @@ def eval_sum(f, limits):
                     return None
                 newargs.append((newexpr, arg.cond))
             return f.func(*newargs)
+        
+        # Handle special case of Piecewise((1, (a <= j) & (j <= b)), (0, True))
+        # This kind of expression typically arises from summing KroneckerDelta
+        if len(f.args) == 2 and f.args[1][0] == S.Zero and f.args[1][1] == True:
+            first_expr, first_cond = f.args[0]
+            if first_expr == S.One and isinstance(first_cond, And):
+                # If condition is a <= j <= b, and we're summing over j from a to b,
+                # this will yield exactly (b-a+1) which is the number of terms
+                return (b - a + 1)
 
     if f.has(KroneckerDelta) and _has_simple_delta(f, limits[0]):
         return deltasummation(f, limits)
diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py
index b4d759836e..72f1460300 100644
--- a/sympy/matrices/expressions/matexpr.py
+++ b/sympy/matrices/expressions/matexpr.py
@@ -476,10 +476,8 @@ def conjugate(self):
         return self
 
     def _entry(self, i, j):
-        if i == j:
-            return S.One
-        else:
-            return S.Zero
+        from sympy.functions import KroneckerDelta
+        return KroneckerDelta(i, j)
 
     def _eval_determinant(self):
         return S.One

