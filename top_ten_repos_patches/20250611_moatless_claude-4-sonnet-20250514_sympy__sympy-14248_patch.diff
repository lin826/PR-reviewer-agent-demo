--- a/sympy/printing/str.py
+++ b/sympy/printing/str.py
@@ -312,8 +312,45 @@
             for arg in expr.args])
 
     def _print_MatAdd(self, expr):
-        return ' + '.join([self.parenthesize(arg, precedence(expr))
-            for arg in expr.args])
+        from sympy.matrices.expressions.matmul import MatMul
+        terms = expr.args
+        PREC = precedence(expr)
+        l = []
+        for term in terms:
+            # Check if this is a MatMul with negative coefficient
+            if (isinstance(term, MatMul) and hasattr(term, 'as_coeff_matrices')):
+                coeff, matrices = term.as_coeff_matrices()
+                if coeff == -1:
+                    # Negative term: print without the -1 coefficient
+                    if len(matrices) == 1:
+                        t = self._print(matrices[0])
+                    else:
+                        t = self._print(MatMul(*matrices))
+                    sign = "-"
+                elif coeff < 0:
+                    # Other negative coefficient
+                    if len(matrices) == 1:
+                        t = self._print(-coeff * matrices[0])
+                    else:
+                        t = self._print(-coeff * MatMul(*matrices))
+                    sign = "-"
+                else:
+                    # Positive coefficient
+                    t = self.parenthesize(term, PREC)
+                    sign = "+"
+            else:
+                # Regular term (not MatMul or no coefficient)
+                t = self.parenthesize(term, PREC)
+                if t.startswith('-'):
+                    sign = "-"
+                    t = t[1:]
+                else:
+                    sign = "+"
+            l.extend([sign, t])
+        sign = l.pop(0)
+        if sign == '+':
+            sign = ""
+        return sign + ' '.join(l)
 
     def _print_NaN(self, expr):
         return 'nan'

--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -1477,9 +1477,44 @@
             return r"%s^\dagger" % self._print(mat)
 
     def _print_MatAdd(self, expr):
-        terms = list(expr.args)
-        tex = " + ".join(map(self._print, terms))
-        return tex
+        from sympy.matrices.expressions.matmul import MatMul
+        terms = expr.args
+        l = []
+        for term in terms:
+            # Check if this is a MatMul with negative coefficient
+            if (isinstance(term, MatMul) and hasattr(term, 'as_coeff_matrices')):
+                coeff, matrices = term.as_coeff_matrices()
+                if coeff == -1:
+                    # Negative term: print without the -1 coefficient
+                    if len(matrices) == 1:
+                        t = self._print(matrices[0])
+                    else:
+                        t = self._print(MatMul(*matrices))
+                    sign = "-"
+                elif coeff < 0:
+                    # Other negative coefficient  
+                    if len(matrices) == 1:
+                        t = self._print(-coeff * matrices[0])
+                    else:
+                        t = self._print(-coeff * MatMul(*matrices))
+                    sign = "-"
+                else:
+                    # Positive coefficient
+                    t = self._print(term)
+                    sign = "+"
+            else:
+                # Regular term (not MatMul or no coefficient)
+                t = self._print(term)
+                if t.startswith('-'):
+                    sign = "-"
+                    t = t[1:]
+                else:
+                    sign = "+"
+            l.extend([sign, t])
+        sign = l.pop(0)
+        if sign == '+':
+            sign = ""
+        return sign + ' '.join(l)
 
     def _print_MatMul(self, expr):
         from sympy import Add, MatAdd, HadamardProduct

--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -819,7 +819,61 @@
         return self._print(B.blocks)
 
     def _print_MatAdd(self, expr):
-        return self._print_seq(expr.args, None, None, ' + ')
+        from sympy.printing.pretty.stringpict import prettyForm, stringPict
+        from sympy.matrices.expressions.matmul import MatMul
+        terms = expr.args
+        s = None
+        
+        for term in terms:
+            # Check if this is a MatMul with negative coefficient
+            if (isinstance(term, MatMul) and hasattr(term, 'as_coeff_matrices')):
+                coeff, matrices = term.as_coeff_matrices()
+                if coeff == -1:
+                    # Negative term: print without the -1 coefficient
+                    if len(matrices) == 1:
+                        pform = self._print(matrices[0])
+                    else:
+                        pform = self._print(MatMul(*matrices))
+                    is_negative = True
+                elif coeff < 0:
+                    # Other negative coefficient
+                    if len(matrices) == 1:
+                        pform = self._print(-coeff * matrices[0])
+                    else:
+                        pform = self._print(-coeff * MatMul(*matrices))
+                    is_negative = True
+                else:
+                    # Positive coefficient
+                    pform = self._print(term)
+                    is_negative = False
+            else:
+                # Regular term (not MatMul or no coefficient)
+                pform = self._print(term)
+                term_str = str(pform)
+                is_negative = term_str.startswith('-')
+                
+                if is_negative and hasattr(pform, 's') and len(pform.s) > 0:
+                    # remove the negative sign from the term representation
+                    new_s = [line[1:] if line.startswith('-') else line for line in pform.s]
+                    pform = prettyForm('\n'.join(new_s))
+            
+            if s is None:
+                # first element
+                if is_negative:
+                    # For first negative term, we need to prepend the minus sign
+                    s = prettyForm(*stringPict.next(prettyForm('-'), pform))
+                else:
+                    s = pform
+            else:
+                # determine delimiter based on sign
+                delimiter = ' - ' if is_negative else ' + '
+                s = prettyForm(*stringPict.next(s, delimiter))
+                s = prettyForm(*stringPict.next(s, pform))
+        
+        if s is None:
+            s = prettyForm('')
+            
+        return s
 
     def _print_MatMul(self, expr):
         args = list(expr.args)
