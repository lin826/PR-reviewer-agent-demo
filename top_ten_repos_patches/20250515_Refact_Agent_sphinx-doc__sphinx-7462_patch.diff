diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index 3ca730e30..683230aaa 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -97,10 +97,10 @@ def _parse_annotation(annotation: str) -> List[Node]:
             return unparse(node.value)
         elif isinstance(node, ast.List):
             result = [addnodes.desc_sig_punctuation('', '[')]  # type: List[Node]
-            for elem in node.elts:
+            for i, elem in enumerate(node.elts):
+                if i:
+                    result.append(addnodes.desc_sig_punctuation('', ', '))
                 result.extend(unparse(elem))
-                result.append(addnodes.desc_sig_punctuation('', ', '))
-            result.pop()
             result.append(addnodes.desc_sig_punctuation('', ']'))
             return result
         elif isinstance(node, ast.Module):
@@ -114,11 +114,16 @@ def _parse_annotation(annotation: str) -> List[Node]:
             result.append(addnodes.desc_sig_punctuation('', ']'))
             return result
         elif isinstance(node, ast.Tuple):
+            # Tuple slices are used by typing.Tuple[â€¦].  For the empty tuple
+            # (``Tuple[()]``) we must still show the parentheses.
+            if not node.elts:
+                return [addnodes.desc_sig_punctuation('', '()')]
+
             result = []
-            for elem in node.elts:
+            for i, elem in enumerate(node.elts):
+                if i:
+                    result.append(addnodes.desc_sig_punctuation('', ', '))
                 result.extend(unparse(elem))
-                result.append(addnodes.desc_sig_punctuation('', ', '))
-            result.pop()
             return result
         else:
             raise SyntaxError  # unsupported syntax
