--- a/sphinx/directives/code.py
+++ b/sphinx/directives/code.py
@@ -343,16 +343,50 @@
     def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:
         prepend = self.options.get('prepend')
         if prepend:
-            lines.insert(0, prepend + '\n')
+            # Auto-detect indentation from existing lines to apply to prepend
+            prepend_line = self._get_indented_line(prepend, lines)
+            lines.insert(0, prepend_line)
 
         return lines
 
     def append_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:
         append = self.options.get('append')
         if append:
-            lines.append(append + '\n')
-
-        return lines
+            # Auto-detect indentation from existing lines to apply to append
+            append_line = self._get_indented_line(append, lines)
+            lines.append(append_line)
+
+        return lines
+
+    def _get_indented_line(self, text: str, lines: List[str]) -> str:
+        """
+        Get the text with appropriate indentation based on the existing lines.
+        If the text already starts with whitespace, use it as-is.
+        Otherwise, detect common indentation from lines and apply it.
+        """
+        if not text:
+            return '\n'
+        
+        # If text already starts with whitespace, preserve it
+        if text.startswith((' ', '\t')):
+            return text + '\n'
+        
+        # Detect indentation from non-empty lines
+        if lines:
+            indentations = []
+            for line in lines:
+                if line.strip():  # Skip empty lines
+                    # Count leading whitespace
+                    indent = len(line) - len(line.lstrip())
+                    indentations.append(indent)
+            
+            if indentations:
+                # Use the minimum indentation (most common case for code blocks)
+                min_indent = min(indentations)
+                return ' ' * min_indent + text + '\n'
+        
+        # Fallback: no indentation
+        return text + '\n'
 
     def dedent_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:
         if 'dedent' in self.options:
