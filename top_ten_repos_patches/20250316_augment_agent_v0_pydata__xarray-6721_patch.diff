diff --git a/xarray/core/common.py b/xarray/core/common.py
index 3c328f42..b330530f 100644
--- a/xarray/core/common.py
+++ b/xarray/core/common.py
@@ -2021,11 +2021,36 @@ def get_chunksizes(
     variables: Iterable[Variable],
 ) -> Mapping[Any, tuple[int, ...]]:
 
     chunks: dict[Any, tuple[int, ...]] = {}
     for v in variables:
-        if hasattr(v.data, "chunks"):
+        # First check if chunks info is in the encoding
+        if "chunks" in v.encoding:
+            encoding_chunks = v.encoding["chunks"]
+            # Convert encoding chunks to chunksizes format
+            var_chunks = dict(zip(v.dims, encoding_chunks))
+            for dim, c in var_chunks.items():
+                if dim in chunks and c != chunks[dim]:
+                    raise ValueError(
+                        f"Object has inconsistent chunks along dimension {dim}. "
+                        "This can be fixed by calling unify_chunks()."
+                    )
+                chunks[dim] = c
+        # Fall back to checking data.chunks if not in encoding
+        elif hasattr(v._data, "chunks"):
+            # Access chunks directly from _data to avoid triggering data loading
+            data_chunks = v._data.chunks
+            var_chunks = dict(zip(v.dims, data_chunks))
+            for dim, c in var_chunks.items():
+                if dim in chunks and c != chunks[dim]:
+                    raise ValueError(
+                        f"Object has inconsistent chunks along dimension {dim}. "
+                        "This can be fixed by calling unify_chunks()."
+                    )
+                chunks[dim] = c
+        # Last resort: check v.data.chunks (may trigger loading)
+        elif hasattr(v.data, "chunks"):
             for dim, c in v.chunksizes.items():
                 if dim in chunks and c != chunks[dim]:
                     raise ValueError(
                         f"Object has inconsistent chunks along dimension {dim}. "
                         "This can be fixed by calling unify_chunks()."
