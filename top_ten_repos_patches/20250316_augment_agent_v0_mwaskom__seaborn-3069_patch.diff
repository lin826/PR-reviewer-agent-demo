diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py
index 4f0290a4..05546c39 100644
--- a/seaborn/_core/plot.py
+++ b/seaborn/_core/plot.py
@@ -1625,15 +1625,22 @@ class Plotter:
                 base_legend = legend
                 self._figure.legends.append(legend)
 
     def _finalize_figure(self, p: Plot) -> None:
 
+        from seaborn._core.scales import Nominal
+
         for sub in self._subplots:
             ax = sub["ax"]
             for axis in "xy":
                 axis_key = sub[axis]
 
+                # Check if this axis uses a Nominal scale
+                is_nominal = False
+                if axis_key in self._scales:
+                    is_nominal = isinstance(self._scales[axis_key], Nominal)
+
                 # Axis limits
                 if axis_key in p._limits:
                     convert_units = getattr(ax, f"{axis}axis").convert_units
                     a, b = p._limits[axis_key]
                     lo = a if a is None else convert_units(a)
@@ -1641,9 +1648,54 @@ class Plotter:
                     if isinstance(a, str):
                         lo = cast(float, lo) - 0.5
                     if isinstance(b, str):
                         hi = cast(float, hi) + 0.5
                     ax.set(**{f"{axis}lim": (lo, hi)})
+                
+                # Apply categorical-like behavior to Nominal scales
+                if is_nominal:
+                    # 1. Set axis limits to +/- 0.5 from first and last tick
+                    ticks = getattr(ax, f"get_{axis}ticks")()
+                    
+                    # Always disable grid for Nominal scales
+                    if axis == "x":
+                        ax.xaxis.grid(False)
+                    else:
+                        ax.yaxis.grid(False)
+                    
+                    # Handle the case when there are ticks (normal case)
+                    if len(ticks) > 0:
+                        # Add an invisible artist with sticky edges and set margin to 0
+                        # This is the approach suggested in the PR description
+                        axis_obj = getattr(ax, f"{axis}axis")
+                        
+                        # Create an invisible artist with sticky edges
+                        import matplotlib.patches as mpatches
+                        if axis == "x":
+                            # Create an invisible rectangle with sticky edges
+                            rect = mpatches.Rectangle((0, 0), 0, 0, visible=False)
+                            rect.sticky_edges.x = [0, len(ticks) - 1]
+                            ax.add_patch(rect)
+                            
+                            # Set limits to +/- 0.5 from first and last tick
+                            ax.set_xlim(-0.5, len(ticks) - 0.5)
+                            # Set margins to 0 to prevent auto-scaling
+                            ax.margins(x=0)
+                        else:
+                            # Create an invisible rectangle with sticky edges
+                            rect = mpatches.Rectangle((0, 0), 0, 0, visible=False)
+                            rect.sticky_edges.y = [0, len(ticks) - 1]
+                            ax.add_patch(rect)
+                            
+                            # 3. Invert y-axis for Nominal scales
+                            ax.set_ylim(len(ticks) - 0.5, -0.5)
+                            # Set margins to 0 to prevent auto-scaling
+                            ax.margins(y=0)
+                    # Handle the case when there are no ticks (empty data)
+                    elif axis == "y":
+                        # For y-axis with no ticks, still invert the axis
+                        # This maintains consistency with the categorical behavior
+                        ax.invert_yaxis()
 
         engine_default = None if p._target is not None else "tight"
         layout_engine = p._layout_spec.get("engine", engine_default)
         set_layout_engine(self._figure, layout_engine)
