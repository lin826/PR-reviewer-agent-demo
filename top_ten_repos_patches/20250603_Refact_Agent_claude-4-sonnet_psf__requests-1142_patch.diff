diff --git a/requests/models.py b/requests/models.py
index 99260453..555be053 100644
--- a/requests/models.py
+++ b/requests/models.py
@@ -344,13 +344,14 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
         is_stream = all([
             hasattr(data, '__iter__'),
             not isinstance(data, basestring),
-            not isinstance(data, dict)
+            not isinstance(data, dict),
+            not isinstance(data, list)  # Don't treat lists as streams
         ])
 
         try:
-            length = str(super_len(data))
-        except (TypeError, AttributeError):
-            length = False
+            length = super_len(data)
+        except (TypeError, AttributeError, OSError, IOError):
+            length = None
 
         if is_stream:
             body = data
@@ -358,10 +359,24 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
             if files:
                 raise NotImplementedError('Streamed bodies and files are mutually exclusive.')
 
-            if length:
-                self.headers['Content-Length'] = length
+            if length is not None:
+                self.headers['Content-Length'] = str(length)
             else:
                 self.headers['Transfer-Encoding'] = 'chunked'
+            
+            # For file-like objects, try to get accurate Content-Length via seek/tell
+            if hasattr(body, 'seek') and hasattr(body, 'tell'):
+                try:
+                    body.seek(0, 2)
+                    file_length = body.tell()
+                    body.seek(0, 0)
+                    # Override Transfer-Encoding with Content-Length for file-like objects
+                    if 'Transfer-Encoding' in self.headers:
+                        del self.headers['Transfer-Encoding']
+                    self.headers['Content-Length'] = str(file_length)
+                except (OSError, IOError):
+                    # If seek/tell fails, keep the Transfer-Encoding: chunked
+                    pass
         # Check if file, fo, generator, iterator.
         # If not, run through normal process.
 
@@ -370,14 +385,33 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
             if files:
                 (body, content_type) = self._encode_files(files, data)
             else:
-                if data:
+                if data is not None and (data or isinstance(data, (str, bytes, builtin_str))):
+                    # Handle non-None data, including empty strings
                     body = self._encode_params(data)
                     if isinstance(data, str) or isinstance(data, builtin_str) or hasattr(data, 'read'):
                         content_type = None
                     else:
                         content_type = 'application/x-www-form-urlencoded'
 
-            self.prepare_content_length(body)
+            # Only set Content-Length if we have actual content or files
+            # Special handling: empty strings should get Content-Length: 0
+            # but empty lists/dicts (from data=None) should not get Content-Length
+            should_set_content_length = False
+            if files:
+                should_set_content_length = True
+            elif data is not None:
+                if isinstance(data, (str, bytes, builtin_str)) or hasattr(data, 'read'):
+                    # Strings, bytes, and file-like objects always get Content-Length, even if empty
+                    should_set_content_length = True
+                elif hasattr(data, '__len__'):
+                    # For collections, only set if non-empty
+                    should_set_content_length = len(data) > 0
+                else:
+                    # For other objects, set Content-Length
+                    should_set_content_length = True
+            
+            if should_set_content_length:
+                self.prepare_content_length(body)
 
             # Add content-type if it wasn't explicitly provided.
             if (content_type) and (not 'content-type' in self.headers):
@@ -386,7 +420,6 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
         self.body = body
 
     def prepare_content_length(self, body):
-        self.headers['Content-Length'] = '0'
         if hasattr(body, 'seek') and hasattr(body, 'tell'):
             body.seek(0, 2)
             self.headers['Content-Length'] = str(body.tell())
