--- a/sympy/parsing/sympy_parser.py
+++ b/sympy/parsing/sympy_parser.py
@@ -1110,6 +1110,14 @@
         ast.BitAnd: 'And',
         ast.BitXor: 'Not',
     }
+    compare_operators = {
+        ast.Lt: 'Lt',
+        ast.LtE: 'Le', 
+        ast.Gt: 'Gt',
+        ast.GtE: 'Ge',
+        ast.Eq: 'Eq',
+        ast.NotEq: 'Ne',
+    }
     functions = (
         'Abs', 'im', 're', 'sign', 'arg', 'conjugate',
         'acos', 'acot', 'acsc', 'asec', 'asin', 'atan',
@@ -1192,6 +1200,24 @@
             new_node.keywords.append(ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load())))
         return new_node
 
+    def visit_Compare(self, node):
+        # Handle comparison operations like <, >, <=, >=, ==, !=
+        if len(node.ops) == 1 and node.ops[0].__class__ in self.compare_operators:
+            sympy_class = self.compare_operators[node.ops[0].__class__]
+            left = self.visit(node.left)
+            right = self.visit(node.comparators[0])
+            
+            new_node = ast.Call(
+                func=ast.Name(id=sympy_class, ctx=ast.Load()),
+                args=[left, right],
+                keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],
+                starargs=None,
+                kwargs=None
+            )
+            return new_node
+        # For chained comparisons or unsupported operators, fall back to default behavior
+        return self.generic_visit(node)
+
 
 _transformation = {  # items can be added but never re-ordered
 0: lambda_notation,
