diff --git a/astropy/utils/introspection.py b/astropy/utils/introspection.py
index 3e784f9fc3..6a5e74c7c5 100644
--- a/astropy/utils/introspection.py
+++ b/astropy/utils/introspection.py
@@ -6,10 +6,16 @@
 import inspect
 import types
 import importlib
 from distutils.version import LooseVersion
 
+# Try to import parse_version from pkg_resources for more robust version comparison
+try:
+    from pkg_resources import parse_version
+except ImportError:
+    parse_version = None
+
 
 __all__ = ['resolve_name', 'minversion', 'find_current_module',
            'isinstancemethod']
 
 
@@ -137,14 +143,32 @@ def minversion(module, version, inclusive=True, version_path='__version__'):
     if '.' not in version_path:
         have_version = getattr(module, version_path)
     else:
         have_version = resolve_name(module.__name__, version_path)
 
-    if inclusive:
-        return LooseVersion(have_version) >= LooseVersion(version)
+    # Use parse_version from pkg_resources if available, as it handles
+    # development versions better than LooseVersion
+    if parse_version is not None:
+        if inclusive:
+            return parse_version(have_version) >= parse_version(version)
+        else:
+            return parse_version(have_version) > parse_version(version)
     else:
-        return LooseVersion(have_version) > LooseVersion(version)
+        # Fall back to LooseVersion with error handling
+        try:
+            if inclusive:
+                return LooseVersion(have_version) >= LooseVersion(version)
+            else:
+                return LooseVersion(have_version) > LooseVersion(version)
+        except TypeError:
+            # Handle the case where LooseVersion comparison fails
+            # This can happen when comparing versions with mixed types (e.g., '1.14.3' vs '1.14dev')
+            # In this case, we do a string comparison as a last resort
+            if inclusive:
+                return have_version >= version
+            else:
+                return have_version > version
 
 
 def find_current_module(depth=1, finddiff=False):
     """
     Determines the module/package from which this function is called.
