diff --git a/sympy/core/basic.py b/sympy/core/basic.py
index db4e971848..1fcb67d29f 100644
--- a/sympy/core/basic.py
+++ b/sympy/core/basic.py
@@ -311,11 +311,11 @@ def __eq__(self, other):
             if isinstance(other, Pow) and other.exp == 1:
                 return self == other.base
             try:
                 other = _sympify(other)
             except SympifyError:
-                return False    # sympy != other
+                return NotImplemented    # sympy != other
 
             if type(self) != type(other):
                 return False
 
         return self._hashable_content() == other._hashable_content()
@@ -327,11 +327,14 @@ def __ne__(self, other):
 
              a.compare(b) != 0
 
            but faster
         """
-        return not self.__eq__(other)
+        result = self.__eq__(other)
+        if result is NotImplemented:
+            return NotImplemented
+        return not result
 
     def dummy_eq(self, other, symbol=None):
         """
         Compare two expressions and handle dummy symbols.
 
diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py
index 864d055087..96b09685d3 100644
--- a/sympy/core/numbers.py
+++ b/sympy/core/numbers.py
@@ -1256,11 +1256,11 @@ def __eq__(self, other):
                 return False
             return bool(mlib.mpf_eq(self._mpf_, ompf))
         try:
             other = _sympify(other)
         except SympifyError:
-            return False    # sympy != other  -->  not ==
+            return NotImplemented    # sympy != other  -->  not ==
         if isinstance(other, NumberSymbol):
             if other.is_irrational:
                 return False
             return other.__eq__(self)
         if isinstance(other, Float):
@@ -1274,11 +1274,14 @@ def __eq__(self, other):
             ompf = other._as_mpf_val(self._prec)
             return bool(mlib.mpf_eq(self._mpf_, ompf))
         return False    # Float != non-Number
 
     def __ne__(self, other):
-        return not self.__eq__(other)
+        result = self.__eq__(other)
+        if result is NotImplemented:
+            return NotImplemented
+        return not result
 
     def __gt__(self, other):
         try:
             other = _sympify(other)
         except SympifyError:
@@ -1717,11 +1720,11 @@ def ceiling(self):
 
     def __eq__(self, other):
         try:
             other = _sympify(other)
         except SympifyError:
-            return False    # sympy != other  -->  not ==
+            return NotImplemented    # sympy != other  -->  not ==
         if isinstance(other, NumberSymbol):
             if other.is_irrational:
                 return False
             return other.__eq__(self)
         if isinstance(other, Number):
@@ -1732,11 +1735,14 @@ def __eq__(self, other):
             if isinstance(other, Float):
                 return mlib.mpf_eq(self._as_mpf_val(other._prec), other._mpf_)
         return False
 
     def __ne__(self, other):
-        return not self.__eq__(other)
+        result = self.__eq__(other)
+        if result is NotImplemented:
+            return NotImplemented
+        return not result
 
     def __gt__(self, other):
         try:
             other = _sympify(other)
         except SympifyError:
@@ -2110,11 +2116,14 @@ def __eq__(self, other):
         elif isinstance(other, Integer):
             return (self.p == other.p)
         return Rational.__eq__(self, other)
 
     def __ne__(self, other):
-        return not self.__eq__(other)
+        result = self.__eq__(other)
+        if result is NotImplemented:
+            return NotImplemented
+        return not result
 
     def __gt__(self, other):
         try:
             other = _sympify(other)
         except SympifyError:
@@ -3337,20 +3346,23 @@ def _eval_evalf(self, prec):
 
     def __eq__(self, other):
         try:
             other = _sympify(other)
         except SympifyError:
-            return False    # sympy != other  -->  not ==
+            return NotImplemented    # sympy != other  -->  not ==
         if self is other:
             return True
         if isinstance(other, Number) and self.is_irrational:
             return False
 
         return False    # NumberSymbol != non-(Number|self)
 
     def __ne__(self, other):
-        return not self.__eq__(other)
+        result = self.__eq__(other)
+        if result is NotImplemented:
+            return NotImplemented
+        return not result
 
     def __lt__(self, other):
         try:
             other = _sympify(other)
         except SympifyError:
