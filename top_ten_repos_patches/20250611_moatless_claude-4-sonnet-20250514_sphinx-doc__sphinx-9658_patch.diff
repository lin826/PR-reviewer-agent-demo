--- a/sphinx/util/typing.py
+++ b/sphinx/util/typing.py
@@ -191,6 +191,14 @@
         return text
     elif isinstance(cls, typing._SpecialForm):
         return ':py:obj:`~%s.%s`' % (cls.__module__, cls._name)
+    elif getattr(cls, '__sphinx_mock__', False):
+        # Handle Sphinx mocked classes - use __display_name__ for proper reference
+        display_name = getattr(cls, '__display_name__', '')
+        if display_name:
+            return ':py:class:`%s`' % display_name
+        else:
+            # Fallback to module.name if display_name is not available
+            return ':py:class:`%s.%s`' % (cls.__module__, getattr(cls, '__name__', repr(cls)))
     elif hasattr(cls, '__qualname__'):
         if cls.__module__ == 'typing':
             return ':py:class:`~%s.%s`' % (cls.__module__, cls.__qualname__)
@@ -273,6 +281,14 @@
                 return ':py:obj:`~typing.Union`\\ [%s]' % param_str
         else:
             return ':py:obj:`Union`'
+    elif getattr(cls, '__sphinx_mock__', False):
+        # Handle Sphinx mocked classes - use __display_name__ for proper reference
+        display_name = getattr(cls, '__display_name__', '')
+        if display_name:
+            return ':py:class:`%s`' % display_name
+        else:
+            # Fallback to module.name if display_name is not available
+            return ':py:class:`%s.%s`' % (cls.__module__, getattr(cls, '__name__', repr(cls)))
     elif hasattr(cls, '__qualname__'):
         if cls.__module__ == 'typing':
             return ':py:class:`~%s.%s`' % (cls.__module__, cls.__qualname__)
