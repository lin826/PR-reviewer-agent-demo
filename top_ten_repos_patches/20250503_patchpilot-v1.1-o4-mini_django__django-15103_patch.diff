diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index d1f3941..08afba5 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -82,8 +82,10 @@ def escapejs_filter(value):
     return escapejs(value)
 
 
+
 @register.filter(is_safe=True)
-def json_script(value, element_id):
+def json_script(value, element_id=None):
+
     """
     Output value JSON-encoded, wrapped in a <script type="application/json">
     tag.
diff --git a/django/utils/html.py b/django/utils/html.py
index 7cf5a9b..848ec8a 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -61,7 +61,8 @@ _json_script_escapes = {
 }
 
 
-def json_script(value, element_id):
+
+def json_script(value, element_id=None):
     """
     Escape all the HTML/XML special characters with their unicode escapes, so
     value is safe to be output anywhere except for inside a tag attribute. Wrap
@@ -69,12 +70,18 @@ def json_script(value, element_id):
     """
     from django.core.serializers.json import DjangoJSONEncoder
     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)
+    if element_id is None:
+        return format_html(
+            '<script type="application/json">{}</script>',
+            mark_safe(json_str)
+        )
     return format_html(
         '<script id="{}" type="application/json">{}</script>',
         element_id, mark_safe(json_str)
     )
 
 
+
 def conditional_escape(text):
     """
     Similar to escape(), except that it doesn't operate on pre-escaped strings.
