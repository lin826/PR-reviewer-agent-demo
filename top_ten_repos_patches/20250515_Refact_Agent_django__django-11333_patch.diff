diff --git a/django/urls/base.py b/django/urls/base.py
index 0e1c3d909c..e7608ed1cc 100644
--- a/django/urls/base.py
+++ b/django/urls/base.py
@@ -92,7 +92,9 @@ reverse_lazy = lazy(reverse, str)
 
 def clear_url_caches():
     get_callable.cache_clear()
-    get_resolver.cache_clear()
+    # Import here to avoid circular import
+    from django.urls.resolvers import _get_resolver
+    _get_resolver.cache_clear()
     get_ns_resolver.cache_clear()
 
 
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 247e3680c0..1f282dd64b 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -63,10 +63,27 @@ class ResolverMatch:
         )
 
 
-@functools.lru_cache(maxsize=None)
 def get_resolver(urlconf=None):
+    """
+    Return a thread-safe, cached URLResolver instance.
+
+    If *urlconf* is ``None`` look up the thread-local override that may have
+    been set by django.urls.base.set_urlconf(). Falling back to
+    settings.ROOT_URLCONF keeps the original behaviour for the default case.
+    Doing the lookup *before* the function is evaluated means the effective
+    URLconf becomes part of the cache-key and we never reuse a resolver that
+    was built for a different URL configuration.
+    """
     if urlconf is None:
-        urlconf = settings.ROOT_URLCONF
+        # Local import to avoid circular dependency during Django start-up.
+        from django.urls.base import get_urlconf
+
+        urlconf = get_urlconf(default=settings.ROOT_URLCONF)
+
+    return _get_resolver(urlconf)
+
+@functools.lru_cache(maxsize=None)
+def _get_resolver(urlconf):
     return URLResolver(RegexPattern(r'^/'), urlconf)
 
 
