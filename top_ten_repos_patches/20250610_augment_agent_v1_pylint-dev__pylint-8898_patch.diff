diff --git a/pylint/config/argument.py b/pylint/config/argument.py
index 30a5fd175..fe6852934 100644
--- a/pylint/config/argument.py
+++ b/pylint/config/argument.py
@@ -109,14 +109,79 @@ def _regex_transformer(value: str) -> Pattern[str]:
     except re.error as e:
         msg = f"Error in provided regular expression: {value} beginning at index {e.pos}: {e.msg}"
         raise argparse.ArgumentTypeError(msg) from e
 
 
+def _regex_csv_split(value: str) -> list[str]:
+    """Split a comma-separated string of regex patterns, respecting regex syntax.
+    
+    This function splits on commas but ignores commas that are inside:
+    - Braces: {n,m} quantifiers
+    - Square brackets: [a,b] character classes  
+    - Parentheses: (a,b) groups
+    
+    It also handles escaped characters properly.
+    """
+    if not value.strip():
+        return []
+    
+    patterns = []
+    current_pattern = []
+    brace_level = 0
+    bracket_level = 0  
+    paren_level = 0
+    escaped = False
+    
+    for char in value:
+        if escaped:
+            # Previous character was a backslash, so this character is escaped
+            # Don't count escaped braces/brackets/parens for nesting
+            current_pattern.append(char)
+            escaped = False
+            continue
+            
+        if char == '\\':
+            # This character is a backslash, next character will be escaped
+            current_pattern.append(char)
+            escaped = True
+            continue
+            
+        # Count braces/brackets/parens for nesting (only if not escaped)
+        if char == '{':
+            brace_level += 1
+        elif char == '}':
+            brace_level = max(0, brace_level - 1)
+        elif char == '[':
+            bracket_level += 1
+        elif char == ']':
+            bracket_level = max(0, bracket_level - 1)
+        elif char == '(':
+            paren_level += 1
+        elif char == ')':
+            paren_level = max(0, paren_level - 1)
+        elif char == ',' and brace_level == 0 and bracket_level == 0 and paren_level == 0:
+            # This comma is not inside any regex construct, so it's a separator
+            pattern = ''.join(current_pattern).strip()
+            if pattern:  # Only add non-empty patterns
+                patterns.append(pattern)
+            current_pattern = []
+            continue
+            
+        current_pattern.append(char)
+    
+    # Add the last pattern
+    pattern = ''.join(current_pattern).strip()
+    if pattern:
+        patterns.append(pattern)
+        
+    return patterns
+
+
 def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:
     """Transforms a comma separated list of regular expressions."""
     patterns: list[Pattern[str]] = []
-    for pattern in _csv_transformer(value):
+    for pattern in _regex_csv_split(value):
         patterns.append(_regex_transformer(pattern))
     return patterns
 
 
 def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:
diff --git a/tests/config/test_config.py b/tests/config/test_config.py
index 83c8b072e..28683bab4 100644
--- a/tests/config/test_config.py
+++ b/tests/config/test_config.py
@@ -130,23 +130,33 @@ def test_regex_error(capsys: CaptureFixture) -> None:
     )
     assert assertString in output.err
 
 
 def test_csv_regex_error(capsys: CaptureFixture) -> None:
-    """Check that we correctly error when an option is passed and one
-    of its comma-separated regular expressions values is an invalid regular expression.
+    """Check that we correctly handle regular expressions with commas in quantifiers.
+    
+    This test was previously checking that (foo{1,3}) would cause a crash due to
+    incorrect CSV parsing, but now it should work correctly.
     """
+    # This should not raise SystemExit anymore - the regex should be parsed correctly
+    run_result = Run(
+        [str(EMPTY_MODULE), r"--bad-names-rgx=(foo{1,3})"],
+        exit=False,
+    )
+    # The run should succeed (no crash)
+    assert run_result is not None
+
+
+def test_csv_regex_invalid_still_errors(capsys: CaptureFixture) -> None:
+    """Check that we still correctly error for actually invalid regular expressions."""
     with pytest.raises(SystemExit):
         Run(
-            [str(EMPTY_MODULE), r"--bad-names-rgx=(foo{1,3})"],
+            [str(EMPTY_MODULE), r"--bad-names-rgx=(foo{1"],  # Actually invalid regex
             exit=False,
         )
     output = capsys.readouterr()
-    assert (
-        r"Error in provided regular expression: (foo{1 beginning at index 0: missing ), unterminated subpattern"
-        in output.err
-    )
+    assert "Error in provided regular expression" in output.err
 
 
 def test_short_verbose(capsys: CaptureFixture) -> None:
     """Check that we correctly handle the -v flag."""
     Run([str(EMPTY_MODULE), "-v"], exit=False)
