diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py
index 3382887ca3..67484a7374 100644
--- a/django/core/management/commands/makemigrations.py
+++ b/django/core/management/commands/makemigrations.py
@@ -307,4 +307,4 @@ class Command(BaseCommand):
                     self.stdout.write(self.style.MIGRATE_HEADING(
                         "Full merge migrations file '%s':" % writer.filename) + "\n"
                     )
-                    self.stdout.write("%s\n" % writer.as_string())
+                    self.stdout.write("%s\n" % writer.as_string())
diff --git a/django/core/management/commands/showmigrations.py b/django/core/management/commands/showmigrations.py
index 48bea1f3f0..0d3501a12e 100644
--- a/django/core/management/commands/showmigrations.py
+++ b/django/core/management/commands/showmigrations.py
@@ -144,4 +144,4 @@ class Command(BaseCommand):
             else:
                 self.stdout.write("[ ]  %s.%s%s" % (node.key[0], node.key[1], deps))
         if not plan:
-            self.stdout.write('(no migrations)', self.style.ERROR)
+            self.stdout.write('(no migrations)', self.style.ERROR)
diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py
index 8c308621d2..e3f4ce18fb 100644
--- a/django/db/migrations/loader.py
+++ b/django/db/migrations/loader.py
@@ -85,10 +85,9 @@ class MigrationLoader:
                 raise
             else:
                 # Empty directories are namespaces.
+
                 # getattr() needed on PY36 and older (replace w/attribute access).
-                if getattr(module, '__file__', None) is None:
-                    self.unmigrated_apps.add(app_config.label)
-                    continue
+
                 # Module is not a package (e.g. migrations.py).
                 if not hasattr(module, '__path__'):
                     self.unmigrated_apps.add(app_config.label)
@@ -96,11 +95,17 @@ class MigrationLoader:
                 # Force a reload if it's already loaded (tests need this)
                 if was_loaded:
                     reload(module)
+
             self.migrated_apps.add(app_config.label)
             migration_names = {
                 name for _, name, is_pkg in pkgutil.iter_modules(module.__path__)
                 if not is_pkg and name[0] not in '_~'
             }
+            if not migration_names:
+                self.migrated_apps.remove(app_config.label)
+                self.unmigrated_apps.add(app_config.label)
+                continue
+
             # Load migrations
             for migration_name in migration_names:
                 migration_path = '%s.%s' % (module_name, migration_name)
