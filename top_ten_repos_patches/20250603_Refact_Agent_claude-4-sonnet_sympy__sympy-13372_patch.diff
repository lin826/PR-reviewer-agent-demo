diff --git a/sympy/core/evalf.py b/sympy/core/evalf.py
index 72a5fbae52..f34908710a 100644
--- a/sympy/core/evalf.py
+++ b/sympy/core/evalf.py
@@ -1301,12 +1301,16 @@ def evalf(x, prec, options):
             elif re.is_number:
                 re = re._to_mpmath(prec, allow_ints=False)._mpf_
                 reprec = prec
+            else:
+                raise NotImplementedError
             if im == 0:
                 im = None
                 imprec = None
             elif im.is_number:
                 im = im._to_mpmath(prec, allow_ints=False)._mpf_
                 imprec = prec
+            else:
+                raise NotImplementedError
             r = re, im, reprec, imprec
         except AttributeError:
             raise NotImplementedError
diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py
index 4ac3d5c471..b3645f96c0 100644
--- a/sympy/core/tests/test_evalf.py
+++ b/sympy/core/tests/test_evalf.py
@@ -511,3 +511,28 @@ def test_issue_10395():
     eq = x*Max(y, -1.1)
     assert nfloat(eq) == eq
     assert Max(y, 4).n() == Max(4.0, y)
+
+
+def test_evalf_unbound_local_error():
+    """
+    Test for issue where evalf raised UnboundLocalError when evaluating
+    expressions with symbolic functions in different argument orders.
+    
+    This was caused by missing else clauses in the fallback evalf code
+    that left reprec and imprec uninitialized when the real or imaginary
+    parts were neither zero nor numeric.
+    """
+    x, y = Symbol('x'), Symbol('y')
+    
+    # These should both work without UnboundLocalError
+    expr1 = Mul(x, Max(0, y), evaluate=False)
+    expr2 = Mul(Max(0, y), x, evaluate=False)
+    
+    # Before the fix, expr2.evalf() would raise:
+    # UnboundLocalError: local variable 'reprec' referenced before assignment
+    result1 = expr1.evalf()
+    result2 = expr2.evalf()
+    
+    # Both should return equivalent symbolic expressions
+    assert str(result1) == 'x*Max(0, y)'
+    assert str(result2) == 'x*Max(0, y)'
