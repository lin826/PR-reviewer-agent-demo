diff --git a/sympy/printing/python.py b/sympy/printing/python.py
index dc6d8ffe59..29ad753ecc 100644
--- a/sympy/printing/python.py
+++ b/sympy/printing/python.py
@@ -7,15 +7,17 @@
 from .repr import ReprPrinter
 from .str import StrPrinter
 
 # A list of classes that should be printed using StrPrinter
 STRPRINT = ("Add", "Infinity", "Integer", "Mul", "NegativeInfinity",
-            "Pow", "Zero")
+            "Pow", "Zero", "Relational")
 
 
 class PythonPrinter(ReprPrinter, StrPrinter):
     """A printer which converts an expression into its Python interpretation."""
+    
+    _default_settings = StrPrinter._default_settings.copy()
 
     def __init__(self, settings=None):
         ReprPrinter.__init__(self)
         StrPrinter.__init__(self, settings)
         self.symbols = []
@@ -81,11 +83,13 @@ def python(expr, **settings):
                     break
         result += newfunctionname + ' = Function(\'' + functionname + '\')\n'
 
     if not len(renamings) == 0:
         exprp = expr.subs(renamings)
-    result += 'e = ' + printer._str(exprp)
+    else:
+        exprp = expr
+    result += 'e = ' + printer.doprint(exprp)
     return result
 
 
 def print_python(expr, **settings):
     """Print output of python() function"""
diff --git a/sympy/printing/str.py b/sympy/printing/str.py
index cc1d19fcce..1f4eef5c08 100644
--- a/sympy/printing/str.py
+++ b/sympy/printing/str.py
@@ -214,13 +214,13 @@ def _print_LatticeOp(self, expr):
         return expr.func.__name__ + "(%s)" % ", ".join(self._print(arg) for arg in args)
 
     def _print_Limit(self, expr):
         e, z, z0, dir = expr.args
         if str(dir) == "+":
-            return "Limit(%s, %s, %s)" % (e, z, z0)
+            return "Limit(%s, %s, %s)" % (self._print(e), self._print(z), self._print(z0))
         else:
-            return "Limit(%s, %s, %s, dir='%s')" % (e, z, z0, dir)
+            return "Limit(%s, %s, %s, dir='%s')" % (self._print(e), self._print(z), self._print(z0), dir)
 
     def _print_list(self, expr):
         return "[%s]" % self.stringify(expr, ", ")
 
     def _print_MatrixBase(self, expr):
@@ -628,11 +628,11 @@ def _print_Relational(self, expr):
             "/=": "DivAugmentedAssignment",
             "%=": "ModAugmentedAssignment",
         }
 
         if expr.rel_op in charmap:
-            return '%s(%s, %s)' % (charmap[expr.rel_op], expr.lhs, expr.rhs)
+            return '%s(%s, %s)' % (charmap[expr.rel_op], self._print(expr.lhs), self._print(expr.rhs))
 
         return '%s %s %s' % (self.parenthesize(expr.lhs, precedence(expr)),
                            self._relationals.get(expr.rel_op) or expr.rel_op,
                            self.parenthesize(expr.rhs, precedence(expr)))
 
