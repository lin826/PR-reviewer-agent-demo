diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 7a5b28d159..2bdf2c6374 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -151,9 +151,12 @@ def floatformat(text, arg=-1):
             use_l10n = False
             arg = arg[:-1] or -1
     try:
-        input_val = repr(text)
-        d = Decimal(input_val)
-    except InvalidOperation:
+        if isinstance(text, Decimal):
+            d = text
+        else:
+            input_val = str(text)
+            d = Decimal(input_val)
+    except (InvalidOperation, ValueError, TypeError):
         try:
             d = Decimal(str(float(text)))
         except (ValueError, InvalidOperation, TypeError):
diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py
index 8dc69b2437..198f5289f4 100644
--- a/tests/template_tests/filter_tests/test_floatformat.py
+++ b/tests/template_tests/filter_tests/test_floatformat.py
@@ -147,3 +147,36 @@ class FunctionTests(SimpleTestCase):
             self.assertEqual(floatformat(15.2042, "-3"), "15.204")
             self.assertEqual(floatformat(Decimal("1.2345"), 2), "1.23")
             self.assertEqual(floatformat(Decimal("15.2042"), -3), "15.204")
+
+    def test_decimal_precision_preservation(self):
+        """
+        Test that Decimal objects preserve their precision without being
+        converted to float first (which would lose precision).
+        """
+        # Test high precision Decimal
+        high_precision = Decimal('42.12345678901234567890')
+        self.assertEqual(floatformat(high_precision, 20), "42.12345678901234567890")
+        
+        # Test very high precision Decimal
+        very_high_precision = Decimal('0.123456789012345678901234567890')
+        self.assertEqual(floatformat(very_high_precision, 30), "0.123456789012345678901234567890")
+        
+        # Test Decimal with many digits
+        many_digits = Decimal('999.999999999999999999999999999')
+        self.assertEqual(floatformat(many_digits, 27), "999.999999999999999999999999999")
+        
+        # Test that precision is still limited by the requested format
+        self.assertEqual(floatformat(high_precision, 10), "42.1234567890")
+        self.assertEqual(floatformat(high_precision, 5), "42.12346")
+        
+        # Test negative precision (only show decimals if needed)
+        self.assertEqual(floatformat(Decimal('42.00000'), -5), "42")
+        self.assertEqual(floatformat(Decimal('42.12300'), -5), "42.12300")
+        
+        # Test zero precision
+        self.assertEqual(floatformat(Decimal('42.567'), 0), "43")
+        
+        # Test with grouping and unlocalized suffixes
+        with translation.override("en"):
+            self.assertEqual(floatformat(Decimal('12345.6789'), "2g"), "12,345.68")
+            self.assertEqual(floatformat(Decimal('12345.6789'), "2u"), "12345.68")
