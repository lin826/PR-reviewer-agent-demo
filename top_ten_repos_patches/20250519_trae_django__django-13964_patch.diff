diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index 872a4c98dc..96e8a5e16f 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -253,8 +253,37 @@ class ForwardManyToOneDescriptor:
 
         # Set the values of the related field.
         else:
-            for lh_field, rh_field in self.field.related_fields:
-                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))
+            # If the related instance is not saved yet (doesn't have a primary key value),
+            # and it's not using an auto-generated primary key, we need to handle the case
+            # where the primary key gets set after assignment
+            if value._state.adding:
+                for lh_field, rh_field in self.field.related_fields:
+                    # Check if this is a non-auto primary key field
+                    if rh_field.primary_key and not rh_field.auto_created:
+                        # Get current value, which might be None or empty string for unsaved model
+                        current_value = getattr(value, rh_field.attname)
+                        setattr(instance, lh_field.attname, current_value)
+                        
+                        # If the PK is empty, register a post_save hook to update the
+                        # foreign key once the related object is saved and has a PK
+                        if not current_value:
+                            def update_fk_on_related_save(sender, **kwargs):
+                                if kwargs.get('instance') is value:
+                                    # Update the related field with the now-saved PK
+                                    pk_value = getattr(value, rh_field.attname)
+                                    setattr(instance, lh_field.attname, pk_value)
+                                    # Unregister to prevent memory leaks
+                                    signals.post_save.disconnect(update_fk_on_related_save, sender=value.__class__)
+                            
+                            # Connect the signal only once for this instance
+                            signals.post_save.connect(update_fk_on_related_save, sender=value.__class__, weak=False)
+                    else:
+                        # For normal fields, just copy the value as before
+                        setattr(instance, lh_field.attname, getattr(value, rh_field.attname))
+            else:
+                # If the object is already saved, just copy all field values as before
+                for lh_field, rh_field in self.field.related_fields:
+                    setattr(instance, lh_field.attname, getattr(value, rh_field.attname))
 
         # Set the related instance cache used by __get__ to avoid an SQL query
         # when accessing the attribute we just set.

