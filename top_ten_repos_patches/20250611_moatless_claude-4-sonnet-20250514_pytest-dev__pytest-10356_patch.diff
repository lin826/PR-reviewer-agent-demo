--- a/src/_pytest/mark/structures.py
+++ b/src/_pytest/mark/structures.py
@@ -357,9 +357,36 @@
 
 def get_unpacked_marks(obj: object) -> Iterable[Mark]:
     """Obtain the unpacked marks that are stored on an object."""
-    mark_list = getattr(obj, "pytestmark", [])
-    if not isinstance(mark_list, list):
-        mark_list = [mark_list]
+    mark_list = []
+    
+    # For classes, collect pytestmark from all classes in MRO
+    if hasattr(obj, "__mro__"):
+        # We use a list to track marks we've already seen to avoid duplicates
+        # We can't use a set because marks may contain unhashable types
+        seen_marks = []
+        for klass in obj.__mro__:
+            if "pytestmark" in klass.__dict__:
+                klass_marks = klass.__dict__["pytestmark"]
+                if not isinstance(klass_marks, list):
+                    klass_marks = [klass_marks]
+                for mark in klass_marks:
+                    # Check if we've already seen this mark
+                    is_duplicate = False
+                    for seen_mark in seen_marks:
+                        if (mark.name == seen_mark.name and 
+                            mark.args == seen_mark.args and 
+                            mark.kwargs == seen_mark.kwargs):
+                            is_duplicate = True
+                            break
+                    if not is_duplicate:
+                        seen_marks.append(mark)
+                        mark_list.append(mark)
+    else:
+        # For non-class objects, use the existing behavior
+        mark_list = getattr(obj, "pytestmark", [])
+        if not isinstance(mark_list, list):
+            mark_list = [mark_list]
+    
     return normalize_mark_list(mark_list)
 
 
