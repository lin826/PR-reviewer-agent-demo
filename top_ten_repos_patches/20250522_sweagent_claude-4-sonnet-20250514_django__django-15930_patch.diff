diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 822968ef56..5fa02aeb15 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1299,6 +1299,11 @@ class When(Expression):
         template_params = extra_context
         sql_params = []
         condition_sql, condition_params = compiler.compile(self.condition)
+        # Handle the case where condition compiles to an empty string.
+        # This can happen with negated empty Q objects like ~Q(pk__in=[]).
+        # An empty condition means "always true", so we use a tautology.
+        if not condition_sql:
+            condition_sql = "1=1"
         template_params["condition"] = condition_sql
         sql_params.extend(condition_params)
         result_sql, result_params = compiler.compile(self.result)
diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py
index 9bad0b8747..acc36e55af 100644
--- a/tests/expressions_case/tests.py
+++ b/tests/expressions_case/tests.py
@@ -415,6 +415,22 @@ class CaseExpressionTests(TestCase):
         self.assertEqual(len(objects), CaseTestModel.objects.count())
         self.assertTrue(all(obj.selected == "not selected" for obj in objects))
 
+    def test_annotate_with_negated_empty_when(self):
+        """
+        Test that ~Q(pk__in=[]) works correctly in Case/When expressions.
+        This is a regression test for a bug where ~Q(pk__in=[]) would
+        generate invalid SQL like "CASE WHEN THEN value".
+        """
+        objects = CaseTestModel.objects.annotate(
+            selected=Case(
+                When(~Q(pk__in=[]), then=Value("selected")),
+                default=Value("not selected"),
+            )
+        )
+        self.assertEqual(len(objects), CaseTestModel.objects.count())
+        # ~Q(pk__in=[]) means "not in empty set" which matches everything
+        self.assertTrue(all(obj.selected == "selected" for obj in objects))
+
     def test_combined_expression(self):
         self.assertQuerysetEqual(
             CaseTestModel.objects.annotate(
