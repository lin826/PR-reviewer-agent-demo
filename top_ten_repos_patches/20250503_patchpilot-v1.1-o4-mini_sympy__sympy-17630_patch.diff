diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 5a4ea29..b5d2318 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -161,13 +161,30 @@ class BlockMatrix(MatrixExpr):
             and self.rowblocksizes == other.rowblocksizes
             and self.colblocksizes == other.colblocksizes)
 
+
     def _blockmul(self, other):
         if (isinstance(other, BlockMatrix) and
                 self.colblocksizes == other.rowblocksizes):
-            return BlockMatrix(self.blocks*other.blocks)
+            # compute raw block product
+            prod = self.blocks*other.blocks
+
+            # ensure every zero retains its matrix shape
+            new_blocks = []
+            for i in range(prod.rows):
+                row = []
+                for j in range(prod.cols):
+                    elem = prod[i, j]
+                    if getattr(elem, 'is_zero', False) and not hasattr(elem, 'shape'):
+                        row.append(ZeroMatrix(self.rowblocksizes[i], other.colblocksizes[j]))
+                    else:
+                        row.append(elem)
+                new_blocks.append(row)
+
+            return BlockMatrix(new_blocks)
 
         return self * other
 
+
     def _blockadd(self, other):
         if (isinstance(other, BlockMatrix)
                 and self.structurally_equal(other)):
