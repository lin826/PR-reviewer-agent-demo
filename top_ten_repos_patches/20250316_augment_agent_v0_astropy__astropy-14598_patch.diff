diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 1b3285ddce..4042bfccce 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -766,11 +766,17 @@ class Card(_Verify):
             )
 
         if m.group("bool") is not None:
             value = m.group("bool") == "T"
         elif m.group("strg") is not None:
-            value = re.sub("''", "'", m.group("strg"))
+            # For string values, handle the case where the card is split across multiple cards
+            if len(self._image) > self.length:
+                # For CONTINUE cards, don't unescape here - it will be done after joining all parts
+                value = m.group("strg")
+            else:
+                # For single cards, unescape as usual
+                value = re.sub("''", "'", m.group("strg"))
         elif m.group("numr") is not None:
             #  Check for numbers with leading 0s.
             numr = self._number_NFSC_RE.match(m.group("numr"))
             digt = translate(numr.group("digt"), FIX_FP_TABLE2, " ")
             if numr.group("sign") is None:
@@ -857,11 +863,11 @@ class Card(_Verify):
                 m = self._strg_comment_RE.match(vc)
                 if not m:
                     return kw, vc
 
                 value = m.group("strg") or ""
-                value = value.rstrip().replace("''", "'")
+                value = value.rstrip()
                 if value and value[-1] == "&":
                     value = value[:-1]
                 values.append(value)
                 comment = m.group("comm")
                 if comment:
@@ -869,11 +875,14 @@ class Card(_Verify):
 
             if keyword in self._commentary_keywords:
                 valuecomment = "".join(values)
             else:
                 # CONTINUE card
-                valuecomment = f"'{''.join(values)}' / {' '.join(comments)}"
+                # Join all values first, then unescape double single-quotes
+                joined_values = "".join(values)
+                joined_values = re.sub("''", "'", joined_values)
+                valuecomment = f"'{joined_values}' / {' '.join(comments)}"
             return keyword, valuecomment
 
         if self.keyword in self._special_keywords:
             keyword, valuecomment = image.split(" ", 1)
         else:
