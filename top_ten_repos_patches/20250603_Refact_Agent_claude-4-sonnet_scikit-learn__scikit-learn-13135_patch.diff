diff --git a/sklearn/preprocessing/_discretization.py b/sklearn/preprocessing/_discretization.py
index dd969c12b..528d39490 100644
--- a/sklearn/preprocessing/_discretization.py
+++ b/sklearn/preprocessing/_discretization.py
@@ -172,6 +172,8 @@ class KBinsDiscretizer(BaseEstimator, TransformerMixin):
                 # 1D k-means procedure
                 km = KMeans(n_clusters=n_bins[jj], init=init, n_init=1)
                 centers = km.fit(column[:, None]).cluster_centers_[:, 0]
+                # Sort the centers to ensure monotonic bin edges
+                centers = np.sort(centers)
                 bin_edges[jj] = (centers[1:] + centers[:-1]) * 0.5
                 bin_edges[jj] = np.r_[col_min, bin_edges[jj], col_max]
 
diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py
index c2e307e85..0d69523b4 100644
--- a/sklearn/preprocessing/tests/test_discretization.py
+++ b/sklearn/preprocessing/tests/test_discretization.py
@@ -247,3 +247,40 @@ def test_overwrite():
     Xinv = est.inverse_transform(Xt)
     assert_array_equal(Xt, Xt_before)
     assert_array_equal(Xinv, np.array([[0.5], [1.5], [2.5], [2.5]]))
+
+
+def test_kmeans_sorted_bin_edges():
+    """Test that kmeans strategy produces sorted bin edges.
+    
+    This is a regression test for the issue where KMeans centers
+    were not sorted, leading to unsorted bin edges and failure
+    in np.digitize.
+    """
+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)
+    
+    # Test the exact case from the original issue report
+    est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')
+    Xt = est.fit_transform(X)
+    
+    # Verify the result
+    assert Xt.shape == (6, 1)
+    assert np.all(Xt >= 0)
+    assert np.all(Xt < 5)
+    
+    # Verify bin edges are sorted
+    bin_edges = est.bin_edges_[0]
+    assert_array_equal(bin_edges, np.sort(bin_edges))
+    
+    # Test with various numbers of bins that previously failed
+    for n_bins in [4, 5, 6]:
+        est = KBinsDiscretizer(n_bins=n_bins, strategy='kmeans', encode='ordinal')
+        Xt = est.fit_transform(X)
+        
+        # Check that bin edges are sorted
+        bin_edges = est.bin_edges_[0]
+        assert_array_equal(bin_edges, np.sort(bin_edges))
+        
+        # Check that transform works without error
+        assert Xt.shape == X.shape
+        assert np.all(Xt >= 0)
+        assert np.all(Xt < n_bins)
