diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index 866e38df83..faee8e6214 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -421,10 +421,40 @@ class In(FieldGetDbPrepValueIterableMixin, BuiltinLookup):
         if isinstance(self.rhs, Query):
             self.rhs.clear_ordering(clear_default=True)
             if not self.rhs.has_select_fields:
                 self.rhs.clear_select_clause()
                 self.rhs.add_fields(["pk"])
+            else:
+                # For IN lookups, we need to ensure only the primary key is selected
+                # even if the query has annotations/aliases. The original condition
+                # checked has_select_fields, but aliases can make this True even when
+                # we want to select only the pk for the IN lookup.
+                # 
+                # However, we need to be careful not to break queries that explicitly
+                # use .values() to select specific fields for the IN lookup.
+                #
+                # The key insight is that if a query has no explicit select fields
+                # (self.rhs.select is empty) but has annotation_select_mask, it likely
+                # means the query has aliases that shouldn't be included in IN subqueries.
+                # Check if there are aliases (annotations not in annotation_select_mask)
+                # Aliases are annotations that were added with select=False and should
+                # not be included in IN subqueries
+                has_aliases = False
+                if (hasattr(self.rhs, 'annotations') and 
+                    self.rhs.annotation_select_mask is not None):
+                    annotation_keys = set(self.rhs.annotations.keys())
+                    selected_annotations = set(self.rhs.annotation_select_mask)
+                    aliases = annotation_keys - selected_annotations
+                    has_aliases = bool(aliases)
+                
+                if (not self.rhs.select and 
+                    not self.rhs.extra_select_mask and
+                    has_aliases):
+                    # No explicit select fields and has aliases, so clear everything and select only pk
+                    # This handles the case where .alias() is used after .annotate()
+                    self.rhs.clear_select_clause()
+                    self.rhs.add_fields(["pk"])
         return super().get_prep_lookup()
 
     def process_rhs(self, compiler, connection):
         db_rhs = getattr(self.rhs, "_db", None)
         if db_rhs is not None and db_rhs != connection.alias:
diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py
index 8de2bf1998..50612fced2 100644
--- a/tests/annotations/tests.py
+++ b/tests/annotations/tests.py
@@ -1380,5 +1380,30 @@ class AliasTests(TestCase):
             "Column aliases cannot contain whitespace characters, quotation marks, "
             "semicolons, or SQL comments."
         )
         with self.assertRaisesMessage(ValueError, msg):
             Book.objects.alias(**{crafted_alias: Value(1)})
+
+    def test_annotation_and_alias_filter_in_subquery(self):
+        long_books_qs = (
+            Book.objects.filter(
+                pages__gt=400,
+            )
+            .annotate(book_annotate=Value(1))
+            .alias(book_alias=Value(1))
+        )
+        publisher_books_qs = (
+            Publisher.objects.filter(
+                book__in=long_books_qs
+            )
+            .values("name")
+        )
+        # The test should pass without the "sub-select returns 10 columns" error
+        # In the test data, all books with pages > 400 are published by Apress
+        self.assertCountEqual(
+            publisher_books_qs,
+            [
+                {'name': 'Apress'},
+                {'name': 'Apress'},
+                {'name': 'Apress'}
+            ]
+        )
\ No newline at end of file
