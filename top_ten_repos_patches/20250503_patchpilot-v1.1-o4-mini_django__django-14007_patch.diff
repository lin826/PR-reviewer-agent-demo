diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 6813c7a..68ee035 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -1400,8 +1400,30 @@ class SQLInsertCompiler(SQLCompiler):
                 for p, vals in zip(placeholder_rows, param_rows)
             ]
 
+
+    def _apply_returning_converters(self, rows):
+        """
+        Apply database converters (from_db_value) to the values returned from
+        INSERT ... RETURNING statements.
+
+        Each value in the returned rows is passed through the converters
+        defined for its corresponding field via `field.get_db_converters()`.
+        """
+        if not self.returning_fields:
+            return rows
+        converted = []
+        for row in rows:
+            new_row = []
+            for value, field in zip(row, self.returning_fields):
+                for converter in field.get_db_converters(self.connection):
+                    value = converter(value, None, self.connection)
+                new_row.append(value)
+            converted.append(tuple(new_row))
+        return converted
+
     def execute_sql(self, returning_fields=None):
         assert not (
+
             returning_fields and len(self.query.objs) != 1 and
             not self.connection.features.can_return_rows_from_bulk_insert
         )
@@ -1411,14 +1433,19 @@ class SQLInsertCompiler(SQLCompiler):
                 cursor.execute(sql, params)
             if not self.returning_fields:
                 return []
+
             if self.connection.features.can_return_rows_from_bulk_insert and len(self.query.objs) > 1:
-                return self.connection.ops.fetch_returned_insert_rows(cursor)
-            if self.connection.features.can_return_columns_from_insert:
+                rows = self.connection.ops.fetch_returned_insert_rows(cursor)
+            elif self.connection.features.can_return_columns_from_insert:
                 assert len(self.query.objs) == 1
-                return [self.connection.ops.fetch_returned_insert_columns(cursor, self.returning_params)]
-            return [(self.connection.ops.last_insert_id(
-                cursor, self.query.get_meta().db_table, self.query.get_meta().pk.column
-            ),)]
+                rows = [self.connection.ops.fetch_returned_insert_columns(cursor, self.returning_params)]
+            else:
+                rows = [(self.connection.ops.last_insert_id(
+                    cursor, self.query.get_meta().db_table, self.query.get_meta().pk.column
+                ),)]
+            rows = self._apply_returning_converters(rows)
+            return rows
+
 
 
 class SQLDeleteCompiler(SQLCompiler):
