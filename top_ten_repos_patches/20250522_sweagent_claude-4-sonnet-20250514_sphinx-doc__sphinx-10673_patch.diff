diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py
index 35e16e623..c8c045039 100644
--- a/sphinx/directives/other.py
+++ b/sphinx/directives/other.py
@@ -76,6 +76,33 @@ class TocTree(SphinxDirective):
         ret.append(wrappernode)
         return ret
 
+    def _is_builtin_toctree_entry(self, docname: str) -> bool:
+        """Check if docname refers to a built-in special page like genindex, modindex, search."""
+        # Check standard domain labels for built-in pages
+        try:
+            std_domain = self.env.get_domain('std')
+            if hasattr(std_domain, 'data') and 'labels' in std_domain.data:
+                # Check if this docname is a label name (like 'modindex' -> 'py-modindex')
+                if docname in std_domain.data['labels']:
+                    return True
+                # Also check if this docname is a target for any of the standard labels
+                for label_name, (target_docname, labelid, sectionname) in std_domain.data['labels'].items():
+                    if target_docname == docname:
+                        return True
+            
+            # Also check domain indices (like py-modindex)
+            for domain in self.env.domains.values():
+                for index_cls in domain.indices:
+                    if hasattr(index_cls, 'name') and index_cls.name:
+                        index_docname = f"{domain.name}-{index_cls.name}"
+                        if index_docname == docname:
+                            return True
+        except Exception:
+            # If anything goes wrong, don't treat it as a built-in page
+            pass
+        
+        return False
+
     def parse_content(self, toctree: addnodes.toctree) -> List[Node]:
         suffixes = self.config.source_suffix
 
@@ -119,16 +146,22 @@ class TocTree(SphinxDirective):
                 if url_re.match(ref) or ref == 'self':
                     toctree['entries'].append((title, ref))
                 elif docname not in self.env.found_docs:
-                    if excluded(self.env.doc2path(docname, False)):
+                    # Check if this is a built-in special page (genindex, modindex, search, etc.)
+                    if self._is_builtin_toctree_entry(docname):
+                        # Built-in pages are valid toctree entries, add them without warning
+                        toctree['entries'].append((title, docname))
+                    elif excluded(self.env.doc2path(docname, False)):
                         message = __('toctree contains reference to excluded document %r')
                         subtype = 'excluded'
+                        logger.warning(message, docname, type='toc', subtype=subtype,
+                                       location=toctree)
+                        self.env.note_reread()
                     else:
                         message = __('toctree contains reference to nonexisting document %r')
                         subtype = 'not_readable'
-
-                    logger.warning(message, docname, type='toc', subtype=subtype,
-                                   location=toctree)
-                    self.env.note_reread()
+                        logger.warning(message, docname, type='toc', subtype=subtype,
+                                       location=toctree)
+                        self.env.note_reread()
                 else:
                     if docname in all_docnames:
                         all_docnames.remove(docname)
diff --git a/sphinx/environment/adapters/toctree.py b/sphinx/environment/adapters/toctree.py
index 9678e3c7c..d0c32961e 100644
--- a/sphinx/environment/adapters/toctree.py
+++ b/sphinx/environment/adapters/toctree.py
@@ -23,6 +23,33 @@ class TocTree:
     def __init__(self, env: "BuildEnvironment") -> None:
         self.env = env
 
+    def _is_builtin_toctree_entry(self, docname: str) -> bool:
+        """Check if docname refers to a built-in special page like genindex, modindex, search."""
+        # Check standard domain labels for built-in pages
+        try:
+            std_domain = self.env.get_domain('std')
+            if hasattr(std_domain, 'data') and 'labels' in std_domain.data:
+                # Check if this docname is a label name (like 'modindex' -> 'py-modindex')
+                if docname in std_domain.data['labels']:
+                    return True
+                # Also check if this docname is a target for any of the standard labels
+                for label_name, (target_docname, labelid, sectionname) in std_domain.data['labels'].items():
+                    if target_docname == docname:
+                        return True
+            
+            # Also check domain indices (like py-modindex)
+            for domain in self.env.domains.values():
+                for index_cls in domain.indices:
+                    if hasattr(index_cls, 'name') and index_cls.name:
+                        index_docname = f"{domain.name}-{index_cls.name}"
+                        if index_docname == docname:
+                            return True
+        except Exception:
+            # If anything goes wrong, don't treat it as a built-in page
+            pass
+        
+        return False
+
     def note(self, docname: str, toctreenode: addnodes.toctree) -> None:
         """Note a TOC tree directive in a document and gather information about
         file relations from it.
@@ -165,15 +192,45 @@ class TocTree:
                                        ref, location=toctreenode)
                 except KeyError:
                     # this is raised if the included file does not exist
-                    if excluded(self.env.doc2path(ref, False)):
+                    # Check if this is a built-in special page (genindex, modindex, search, etc.)
+                    if self._is_builtin_toctree_entry(ref):
+                        # Built-in pages don't have tocs but should be treated as valid references
+                        # Create a simple reference node for them
+                        if title is None:
+                            # Use a default title based on the page type
+                            if ref == 'genindex':
+                                title = 'Index'
+                            elif ref == 'search':
+                                title = 'Search Page'
+                            elif ref.endswith('-modindex'):
+                                title = 'Module Index'
+                            elif ref == 'modindex':
+                                # Handle the common case where users write 'modindex' instead of 'py-modindex'
+                                title = 'Module Index'
+                            else:
+                                title = ref.title()
+                        
+                        reference = nodes.reference('', '', internal=True,
+                                                   refuri=ref, anchorname='',
+                                                   *[nodes.Text(title)])
+                        para = addnodes.compact_paragraph('', '', reference)
+                        item = nodes.list_item('', para)
+                        toc = nodes.bullet_list('', item)
+                    elif excluded(self.env.doc2path(ref, False)):
                         message = __('toctree contains reference to excluded document %r')
+                        logger.warning(message, ref, location=toctreenode)
+                        continue
                     elif not included(self.env.doc2path(ref, False)):
                         message = __('toctree contains reference to non-included document %r')
+                        logger.warning(message, ref, location=toctreenode)
+                        continue
                     else:
                         message = __('toctree contains reference to nonexisting document %r')
-
-                    logger.warning(message, ref, location=toctreenode)
-                else:
+                        logger.warning(message, ref, location=toctreenode)
+                        continue
+                
+                # Process the toc (either from normal document or built-in page)
+                if 'toc' in locals():
                     # if titles_only is given, only keep the main title and
                     # sub-toctrees
                     if titles_only:
diff --git a/tox.ini b/tox.ini
index 7ca990b56..a0708b02c 100644
--- a/tox.ini
+++ b/tox.ini
@@ -30,7 +30,7 @@ setenv =
     PYTHONWARNINGS = all
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}
+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}
 
 [testenv:du-latest]
 commands =
