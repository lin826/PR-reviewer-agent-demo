diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py
index 1a37c6b7d0..d2ca57f7a0 100644
--- a/django/db/migrations/recorder.py
+++ b/django/db/migrations/recorder.py
@@ -54,12 +54,25 @@ class MigrationRecorder:
         """Return True if the django_migrations table exists."""
         with self.connection.cursor() as cursor:
             tables = self.connection.introspection.table_names(cursor)
         return self.Migration._meta.db_table in tables
 
+    def is_migration_allowed(self):
+        """Check if migrations are allowed for this connection."""
+        from django.db import router
+        return router.allow_migrate(
+            self.connection.alias,
+            'migrations',
+            model_name='migration',
+        )
+
     def ensure_schema(self):
         """Ensure the table exists and has the correct schema."""
+        # Check if migrations are allowed for this connection
+        if not self.is_migration_allowed():
+            return
+            
         # If the table's there, that's fine - we've never changed its schema
         # in the codebase.
         if self.has_table():
             return
         # Make the table
@@ -72,25 +85,41 @@ class MigrationRecorder:
     def applied_migrations(self):
         """
         Return a dict mapping (app_name, migration_name) to Migration instances
         for all applied migrations.
         """
+        # Check if migrations are allowed for this connection
+        if not self.is_migration_allowed():
+            return {}
+            
         if self.has_table():
             return {(migration.app, migration.name): migration for migration in self.migration_qs}
         else:
             # If the django_migrations table doesn't exist, then no migrations
             # are applied.
             return {}
 
     def record_applied(self, app, name):
         """Record that a migration was applied."""
+        # Check if migrations are allowed for this connection
+        if not self.is_migration_allowed():
+            return
+            
         self.ensure_schema()
         self.migration_qs.create(app=app, name=name)
 
     def record_unapplied(self, app, name):
         """Record that a migration was unapplied."""
+        # Check if migrations are allowed for this connection
+        if not self.is_migration_allowed():
+            return
+            
         self.ensure_schema()
         self.migration_qs.filter(app=app, name=name).delete()
 
     def flush(self):
         """Delete all migration records. Useful for testing migrations."""
+        # Check if migrations are allowed for this connection
+        if not self.is_migration_allowed():
+            return
+            
         self.migration_qs.all().delete()
