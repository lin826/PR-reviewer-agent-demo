diff --git a/sympy/printing/repr.py b/sympy/printing/repr.py
index c936a692c0..8bebdf49b1 100644
--- a/sympy/printing/repr.py
+++ b/sympy/printing/repr.py
@@ -144,6 +144,21 @@ def _print_EmptySequence(self, expr):
     def _print_list(self, expr):
         return "[%s]" % self.reprify(expr, ", ")
 
+    def _print_set(self, expr):
+        """Print a Python set with symbolic repr of its elements."""
+        # Sort by the printed form to get a deterministic order
+        elements = sorted(expr, key=lambda e: self.doprint(e))
+        return "{%s}" % self.reprify(elements, ", ")
+
+    def _print_dict(self, expr):
+        """Print a Python dict with symbolic repr of keys and values."""
+        # Sort items by key's printed form to get a deterministic order
+        items = sorted(expr.items(), key=lambda kv: self.doprint(kv[0]))
+        parts = []
+        for k, v in items:
+            parts.append("%s: %s" % (self.doprint(k), self.doprint(v)))
+        return "{%s}" % ", ".join(parts)
+
     def _print_MatrixBase(self, expr):
         # special case for some empty matrices
         if (expr.rows == 0) ^ (expr.cols == 0):
diff --git a/sympy/printing/tests/test_repr.py b/sympy/printing/tests/test_repr.py
index f749683ff7..364ab4c22d 100644
--- a/sympy/printing/tests/test_repr.py
+++ b/sympy/printing/tests/test_repr.py
@@ -193,6 +193,33 @@ def test_tuple():
     sT((x, y), "(Symbol('x'), Symbol('y'))")
 
 
+def test_srepr_dict_and_set():
+    # Single-element set
+    out = srepr({x})
+    assert out == "{Symbol('x')}"
+    assert eval(out, ENV) == {x}
+
+    # Two-element set (order may vary but must round-trip)
+    out = srepr({x, y})
+    assert out.startswith("{") and out.endswith("}")
+    items = out[1:-1].split(", ")
+    assert set(items) == {"Symbol('x')", "Symbol('y')"}
+    assert eval(out, ENV) == {x, y}
+
+    # Single-pair dict
+    out = srepr({x: y})
+    assert out == "{Symbol('x'): Symbol('y')}"
+    assert eval(out, ENV) == {x: y}
+
+    # Multi-pair dict (we sort keys by repr so order is deterministic)
+    od = {x: y, y: x}
+    out = srepr(od)
+    assert out.startswith("{") and out.endswith("}")
+    parts = out[1:-1].split(", ")
+    assert set(parts) == {"Symbol('x'): Symbol('y')", "Symbol('y'): Symbol('x')"}
+    assert eval(out, ENV) == od
+
+
 def test_WildFunction():
     sT(WildFunction('w'), "WildFunction('w')")
 
