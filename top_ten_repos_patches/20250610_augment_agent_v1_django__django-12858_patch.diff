diff --git a/django/db/models/base.py b/django/db/models/base.py
index 6c9e9d3707..124db6eed0 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1745,11 +1745,11 @@ class Model(metaclass=ModelBase):
                     if fld.is_relation:
                         _cls = fld.get_path_info()[-1].to_opts.model
                     else:
                         _cls = None
                 except (FieldDoesNotExist, AttributeError):
-                    if fld is None or fld.get_transform(part) is None:
+                    if fld is None or (fld.get_transform(part) is None and fld.get_lookup(part) is None):
                         errors.append(
                             checks.Error(
                                 "'ordering' refers to the nonexistent field, "
                                 "related field, or lookup '%s'." % field,
                                 obj=cls,
diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py
index 6bfdf2e736..09515a14cd 100644
--- a/tests/invalid_models_tests/test_models.py
+++ b/tests/invalid_models_tests/test_models.py
@@ -891,10 +891,25 @@ class OtherModelTests(SimpleTestCase):
                 ordering = ('test__lower',)
 
         with register_lookup(models.CharField, Lower):
             self.assertEqual(Model.check(), [])
 
+    def test_ordering_allows_registered_lookups_and_builtin_lookups(self):
+        """Test that ordering allows both registered transforms and built-in lookups."""
+        class Parent(models.Model):
+            pass
+
+        class Child(models.Model):
+            parent = models.ForeignKey(Parent, models.CASCADE, null=True)
+            name = models.CharField(max_length=100)
+
+            class Meta:
+                ordering = ('parent__isnull', 'name__lower')
+
+        with register_lookup(models.CharField, Lower):
+            self.assertEqual(Child.check(), [])
+
     def test_ordering_pointing_to_related_model_pk(self):
         class Parent(models.Model):
             pass
 
         class Child(models.Model):
