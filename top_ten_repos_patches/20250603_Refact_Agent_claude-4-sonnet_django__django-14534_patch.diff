diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 2ff8b0ee26..7fb73cc47f 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -277,7 +277,7 @@ class BoundWidget:
 
     @property
     def id_for_label(self):
-        return 'id_%s_%s' % (self.data['name'], self.data['index'])
+        return self.data['attrs'].get('id') or 'id_%s_%s' % (self.data['name'], self.data['index'])
 
     @property
     def choice_label(self):
diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py
index f3ee64ceda..7d9eabb513 100644
--- a/tests/forms_tests/tests/test_forms.py
+++ b/tests/forms_tests/tests/test_forms.py
@@ -3211,6 +3211,59 @@ Good luck picking a username that doesn&#x27;t already exist.</p>
         self.assertEqual(f['first_name'].widget_type, 'text')
         self.assertEqual(f['birthday'].widget_type, 'splithiddendatetime')
 
+    def test_boundwidget_id_for_label_with_custom_auto_id(self):
+        """BoundWidget.id_for_label should use the id from data['attrs']['id'] when available."""
+        class TestForm(Form):
+            choices = MultipleChoiceField(
+                choices=[('option1', 'Option 1'), ('option2', 'Option 2')],
+                widget=CheckboxSelectMultiple()
+            )
+        
+        form = TestForm(auto_id='custom_id_%s')
+        bound_field = form['choices']
+        subwidgets = bound_field.subwidgets
+        
+        for i, subwidget in enumerate(subwidgets):
+            expected_id = f'custom_id_choices_{i}'
+            self.assertEqual(subwidget.data['attrs']['id'], expected_id)
+            self.assertEqual(subwidget.id_for_label, expected_id)
+
+    def test_boundwidget_id_for_label_fallback_when_no_id(self):
+        """BoundWidget.id_for_label should fall back to hardcoded format when no id in attrs."""
+        class TestForm(Form):
+            choices = MultipleChoiceField(
+                choices=[('option1', 'Option 1'), ('option2', 'Option 2')],
+                widget=CheckboxSelectMultiple()
+            )
+        
+        form = TestForm(auto_id=False)
+        bound_field = form['choices']
+        subwidgets = bound_field.subwidgets
+        
+        for i, subwidget in enumerate(subwidgets):
+            # When auto_id=False, no id should be set in attrs
+            self.assertIsNone(subwidget.data['attrs'].get('id'))
+            # Should fall back to hardcoded format
+            expected_fallback = f'id_choices_{i}'
+            self.assertEqual(subwidget.id_for_label, expected_fallback)
+
+    def test_boundwidget_id_for_label_with_widget_attrs_id(self):
+        """BoundWidget.id_for_label should work when widget has explicit id in attrs."""
+        class TestForm(Form):
+            choices = MultipleChoiceField(
+                choices=[('option1', 'Option 1'), ('option2', 'Option 2')],
+                widget=CheckboxSelectMultiple(attrs={'id': 'explicit_id'})
+            )
+        
+        form = TestForm()
+        bound_field = form['choices']
+        subwidgets = bound_field.subwidgets
+        
+        for i, subwidget in enumerate(subwidgets):
+            expected_id = f'explicit_id_{i}'
+            self.assertEqual(subwidget.data['attrs']['id'], expected_id)
+            self.assertEqual(subwidget.id_for_label, expected_id)
+
     def test_boundfield_css_classes(self):
         form = Person()
         field = form['first_name']
