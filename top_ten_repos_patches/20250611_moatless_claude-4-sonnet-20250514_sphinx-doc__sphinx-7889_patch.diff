--- a/sphinx/ext/autodoc/mock.py
+++ b/sphinx/ext/autodoc/mock.py
@@ -14,7 +14,7 @@
 from importlib.abc import Loader, MetaPathFinder
 from importlib.machinery import ModuleSpec
 from types import FunctionType, MethodType, ModuleType
-from typing import Any, Generator, Iterator, List, Sequence, Tuple, Union
+from typing import Any, Generator, Iterator, List, Sequence, Tuple, TypeVar, Union
 
 from sphinx.util import logging
 
@@ -68,12 +68,18 @@
         return self.__display_name__
 
 
-def _make_subclass(name: str, module: str, superclass: Any = _MockObject,
+def _make_subclass(name: Any, module: str, superclass: Any = _MockObject,
                    attributes: Any = None) -> Any:
-    attrs = {'__module__': module, '__display_name__': module + '.' + name}
+    # Convert name to string if it's a TypeVar or other non-string type
+    if isinstance(name, TypeVar):
+        name_str = name.__name__
+    else:
+        name_str = str(name)
+    
+    attrs = {'__module__': module, '__display_name__': module + '.' + name_str}
     attrs.update(attributes or {})
 
-    return type(name, (superclass,), attrs)
+    return type(name_str, (superclass,), attrs)
 
 
 class _MockModule(ModuleType):
