diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py
index 0403b6947..78cec5282 100644
--- a/src/_pytest/pathlib.py
+++ b/src/_pytest/pathlib.py
@@ -15,6 +15,8 @@ from os.path import normcase
 from os.path import sep
 from posixpath import sep as posix_sep
 
+import py
+
 from _pytest.warning_types import PytestWarning
 
 if sys.version_info[:2] >= (3, 6):
@@ -337,10 +339,41 @@ def parts(s):
     return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}
 
 
+class _UniqPath(py.path.local):
+    """py.path.local that compares/hashes case-insensitively on Windows
+    but keeps the real (case-preserving) path string intact so that
+    pyimport() receives the right package names."""
+    __slots__ = ("_normcase_path",)
+
+    def __new__(cls, p):
+        self = super().__new__(cls, p)
+        # Lower-cased absolute path for hash/equality only.
+        self._normcase_path = normcase(str(self))
+        return self
+
+    def __hash__(self):
+        # hash on the canonicalised (lower-case) path
+        return hash(self._normcase_path)
+
+    def __eq__(self, other):
+        if not isinstance(other, py.path.local):
+            return NotImplemented
+        return self._normcase_path == normcase(str(other))
+
+
 def unique_path(path):
     """Returns a unique path in case-insensitive (but case-preserving) file
     systems such as Windows.
 
     This is needed only for ``py.path.local``; ``pathlib.Path`` handles this
-    natively with ``resolve()``."""
-    return type(path)(normcase(str(path.realpath())))
+    natively with ``resolve()``.
+    
+    The returned path object is logically unique on case-insensitive
+    filesystems (Windows) while still preserving the original casing.
+    """
+    # Resolve symlinks etc. first
+    path = path.realpath()
+    # Only necessary for py.path.local (pytest uses that everywhere here)
+    if isinstance(path, py.path.local) and sys.platform.startswith("win"):
+        return _UniqPath(path)
+    return path
