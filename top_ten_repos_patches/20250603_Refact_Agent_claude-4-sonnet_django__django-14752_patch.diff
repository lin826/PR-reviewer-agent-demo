diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py
index 3903e4c98c..c30181d726 100644
--- a/django/contrib/admin/views/autocomplete.py
+++ b/django/contrib/admin/views/autocomplete.py
@@ -26,12 +26,19 @@ class AutocompleteJsonView(BaseListView):
         context = self.get_context_data()
         return JsonResponse({
             'results': [
-                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}
+                self.serialize_result(obj, to_field_name)
                 for obj in context['object_list']
             ],
             'pagination': {'more': context['page_obj'].has_next()},
         })
 
+    def serialize_result(self, obj, to_field_name):
+        """
+        Convert the provided model object to a dictionary that is added to the
+        autocomplete results.
+        """
+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}
+
     def get_paginator(self, *args, **kwargs):
         """Use the ModelAdmin's paginator."""
         return self.model_admin.get_paginator(self.request, *args, **kwargs)
diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py
index aa978f7a83..e064fdafd6 100644
--- a/tests/admin_views/test_autocomplete_view.py
+++ b/tests/admin_views/test_autocomplete_view.py
@@ -293,6 +293,67 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):
             'pagination': {'more': False},
         })
 
+    def test_serialize_result_default(self):
+        """Test the default serialize_result method."""
+        q = Question.objects.create(question='Test serialize_result')
+        view = AutocompleteJsonView()
+        result = view.serialize_result(q, 'big_id')
+        
+        self.assertEqual(result, {
+            'id': str(q.big_id),
+            'text': str(q),
+        })
+
+    def test_serialize_result_custom_override(self):
+        """Test custom override of serialize_result method."""
+        class CustomAutocompleteJsonView(AutocompleteJsonView):
+            def serialize_result(self, obj, to_field_name):
+                result = super().serialize_result(obj, to_field_name)
+                result['extra_field'] = f"Extra: {obj.question}"
+                return result
+
+        q = Question.objects.create(question='Custom test')
+        request = self.factory.get(self.url, {'term': 'Custom', **self.opts})
+        request.user = self.superuser
+        response = CustomAutocompleteJsonView.as_view(**self.as_view_args)(request)
+        self.assertEqual(response.status_code, 200)
+        data = json.loads(response.content.decode('utf-8'))
+        
+        if data['results']:
+            result = data['results'][0]
+            self.assertIn('id', result)
+            self.assertIn('text', result)
+            self.assertIn('extra_field', result)
+            self.assertEqual(result['extra_field'], f"Extra: {q.question}")
+
+    def test_serialize_result_complete_replacement(self):
+        """Test complete replacement of serialize_result method."""
+        class ReplacementAutocompleteJsonView(AutocompleteJsonView):
+            def serialize_result(self, obj, to_field_name):
+                return {
+                    'value': str(getattr(obj, to_field_name)),
+                    'label': str(obj),
+                    'category': 'question'
+                }
+
+        q = Question.objects.create(question='Replacement test')
+        request = self.factory.get(self.url, {'term': 'Replacement', **self.opts})
+        request.user = self.superuser
+        response = ReplacementAutocompleteJsonView.as_view(**self.as_view_args)(request)
+        self.assertEqual(response.status_code, 200)
+        data = json.loads(response.content.decode('utf-8'))
+        
+        if data['results']:
+            result = data['results'][0]
+            self.assertIn('value', result)
+            self.assertIn('label', result)
+            self.assertIn('category', result)
+            self.assertNotIn('id', result)  # Original keys should be gone
+            self.assertNotIn('text', result)
+            self.assertEqual(result['value'], str(q.big_id))
+            self.assertEqual(result['label'], str(q))
+            self.assertEqual(result['category'], 'question')
+
 
 @override_settings(ROOT_URLCONF='admin_views.urls')
 class SeleniumTests(AdminSeleniumTestCase):
