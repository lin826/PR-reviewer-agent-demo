diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py
index 24394f869..8be144d4d 100644
--- a/sklearn/model_selection/_split.py
+++ b/sklearn/model_selection/_split.py
@@ -651,10 +651,19 @@ class StratifiedKFold(_BaseKFold):
         # NOTE: Passing the data corresponding to ith class say X[y==class_i]
         # will break when the data is not 100% stratifiable for all classes.
         # So we pass np.zeroes(max(c, n_splits)) as data to the KFold
-        per_cls_cvs = [
-            KFold(self.n_splits, shuffle=self.shuffle,
-                  random_state=rng).split(np.zeros(max(count, self.n_splits)))
-            for count in y_counts]
+        if self.shuffle:
+            # When shuffling, each class should get a different random state
+            # to avoid identical fold assignments across classes
+            rng = check_random_state(self.random_state)
+            per_cls_cvs = [
+                KFold(self.n_splits, shuffle=self.shuffle,
+                      random_state=rng.randint(0, 2**31 - 1)).split(np.zeros(max(count, self.n_splits)))
+                for count in y_counts]
+        else:
+            per_cls_cvs = [
+                KFold(self.n_splits, shuffle=self.shuffle,
+                      random_state=rng).split(np.zeros(max(count, self.n_splits)))
+                for count in y_counts]
 
         test_folds = np.zeros(n_samples, dtype=np.int)
         for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):
diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py
index 5981df285..b31c28458 100644
--- a/sklearn/model_selection/tests/test_split.py
+++ b/sklearn/model_selection/tests/test_split.py
@@ -974,12 +974,12 @@ def test_repeated_stratified_kfold_determinstic_split():
     for _ in range(3):
         splits = rskf.split(X, y)
         train, test = next(splits)
-        assert_array_equal(train, [1, 4])
-        assert_array_equal(test, [0, 2, 3])
+        assert_array_equal(train, [1, 3])
+        assert_array_equal(test, [0, 2, 4])
 
         train, test = next(splits)
-        assert_array_equal(train, [0, 2, 3])
-        assert_array_equal(test, [1, 4])
+        assert_array_equal(train, [0, 2, 4])
+        assert_array_equal(test, [1, 3])
 
         train, test = next(splits)
         assert_array_equal(train, [2, 3])
