diff --git a/sympy/core/relational.py b/sympy/core/relational.py
index e2e0b7fbcc..68f8c20b29 100644
--- a/sympy/core/relational.py
+++ b/sympy/core/relational.py
@@ -311,7 +311,10 @@ def _eval_simplify(self, **kwargs):
             v = None
             if dif.is_comparable:
                 v = dif.n(2)
-            elif dif.equals(0):  # XXX this is expensive
+            elif hasattr(dif, 'equals') and dif.equals(0):  # XXX this is expensive
+                v = S.Zero
+            # Handle the case where dif is a set
+            elif hasattr(dif, 'is_empty') and dif.is_empty:
                 v = S.Zero
             if v is not None:
                 r = r.func._eval_relation(v, S.Zero)
diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py
index 3c4aa86e36..425f5a405e 100644
--- a/sympy/sets/sets.py
+++ b/sympy/sets/sets.py
@@ -864,6 +864,15 @@ def __len__(self):
 
     def __bool__(self):
         return all([bool(s) for s in self.sets])
+        
+    def _eval_is_subset(self, other):
+        if isinstance(other, FiniteSet):
+            # If we're a finite ProductSet, check if all our elements are in other
+            if self.is_finite_set:
+                return fuzzy_and(other._contains(elem) for elem in self)
+        elif isinstance(other, ProductSet) and len(self.sets) == len(other.sets):
+            # For ProductSet subsets, check each component
+            return fuzzy_and(s1.is_subset(s2) for s1, s2 in zip(self.sets, other.sets))
 
 
 class Interval(Set, EvalfMixin):

