diff --git b/sphinx/ext/inheritance_diagram.py a/sphinx/ext/inheritance_diagram.py
index c78e0835a..6e3985512 100644
--- b/sphinx/ext/inheritance_diagram.py
+++ a/sphinx/ext/inheritance_diagram.py
@@ -31,11 +31,10 @@ LaTeX.
 from __future__ import annotations
 
 import builtins
 import hashlib
 import inspect
-import posixpath
 import re
 from collections.abc import Iterable
 from importlib import import_module
 from typing import Any, cast
 
@@ -412,32 +411,16 @@ def html_visit_inheritance_diagram(self: HTML5Translator, node: inheritance_diag
     urls = {}
     pending_xrefs = cast(Iterable[addnodes.pending_xref], node)
     for child in pending_xrefs:
         if child.get('refuri') is not None:
             if graphviz_output_format == 'SVG':
-                # For SVG, calculate the relative path from _images/ directory to the target
-                # Get the directory of the current page
-                current_dir = posixpath.dirname(self.builder.current_docname)
-                # Combine with refuri to get the target path relative to the build root
-                if current_dir:
-                    target_path = posixpath.join(current_dir, child.get('refuri'))
-                else:
-                    target_path = child.get('refuri')
-                # Calculate relative path from _images/ to target
-                # Since _images is at the root level, we need to go up one level and then to target
-                urls[child['reftitle']] = '../' + target_path
+                urls[child['reftitle']] = "../" + child.get('refuri')
             else:
                 urls[child['reftitle']] = child.get('refuri')
         elif child.get('refid') is not None:
             if graphviz_output_format == 'SVG':
-                # For SVG, calculate the relative path from _images/ directory to the current file
-                current_dir = posixpath.dirname(self.builder.current_docname)
-                if current_dir:
-                    target_path = posixpath.join(current_dir, posixpath.basename(current_filename))
-                else:
-                    target_path = current_filename
-                urls[child['reftitle']] = '../' + target_path + '#' + child.get('refid')
+                urls[child['reftitle']] = '../' + current_filename + '#' + child.get('refid')
             else:
                 urls[child['reftitle']] = '#' + child.get('refid')
 
     dotcode = graph.generate_dot(name, urls, env=self.builder.env)
     render_dot_html(self, node, dotcode, {}, 'inheritance', 'inheritance',
diff --git b/tests/test_ext_inheritance_diagram.py a/tests/test_ext_inheritance_diagram.py
index 1de9b54de..16581b075 100644
--- b/tests/test_ext_inheritance_diagram.py
+++ a/tests/test_ext_inheritance_diagram.py
@@ -169,35 +169,10 @@ def test_inheritance_diagram_svg_html(app, status, warning):
                'title="Permalink to this image">\xb6</a></p>\n</figcaption>\n</figure>\n')
 
     assert re.search(pattern, content, re.M)
 
 
-@pytest.mark.sphinx('html', testroot='ext-inheritance_diagram',
-                    confoverrides={'graphviz_output_format': 'svg'})
-@pytest.mark.usefixtures('if_graphviz_found')
-def test_inheritance_diagram_svg_links(app, status, warning):
-    """Test that SVG inheritance diagrams have correct links from nested directories."""
-    app.builder.build_all()
-
-    # Find the SVG file
-    svg_files = list(app.outdir.glob('_images/inheritance-*.svg'))
-    assert len(svg_files) >= 1
-    
-    svg_content = svg_files[0].read_text(encoding='utf8')
-    
-    # Check that the SVG contains links that are relative to the _images directory
-    # The links should be in the format ../path/to/target.html
-    # For the test case, we expect links to test.html files
-    href_pattern = r'href="([^"]*)"'
-    hrefs = re.findall(href_pattern, svg_content)
-    
-    # All hrefs should start with ../ since they're relative to _images directory
-    for href in hrefs:
-        if href.endswith('.html') or '#' in href:
-            assert href.startswith('../'), f"SVG link {href} should start with '../' to be relative to _images directory"
-
-
 @pytest.mark.sphinx('latex', testroot='ext-inheritance_diagram')
 @pytest.mark.usefixtures('if_graphviz_found')
 def test_inheritance_diagram_latex(app, status, warning):
     app.builder.build_all()
 
