--- a/sphinx/builders/linkcheck.py
+++ b/sphinx/builders/linkcheck.py
@@ -208,12 +208,55 @@
                 else:
                     return 'redirected', new_url, 0
 
+        def check_local_uri(uri: str, docname: str) -> Tuple[str, str, int]:
+            """Check local URI (file path, document reference, etc.)"""
+            # Handle anchors (either standalone or with document reference)
+            if '#' in uri:
+                path_part, anchor = uri.split('#', 1)
+                # Skip anchor validation for now - would need to parse document content
+                # Focus on checking if the document/file exists
+                uri = path_part if path_part else docname  # For standalone '#anchor', check current doc
+            
+            # If URI is empty after removing anchor, it refers to current document
+            if not uri:
+                return 'working', '', 0
+                
+            # Check if it's a reference to another document by name (without extension)
+            if uri in self.env.found_docs:
+                return 'working', '', 0
+                
+            # Check if it's a file reference - try to resolve the path
+            try:
+                rel_path, abs_path = self.env.relfn2path(uri, docname)
+                if path.isfile(abs_path):
+                    return 'working', '', 0
+                else:
+                    return 'broken', __('Local file not found: %s') % rel_path, 0
+            except Exception:
+                # If relfn2path fails, try checking if it's a document with extension
+                if uri.endswith(('.rst', '.txt', '.md')):
+                    # Remove extension and check if document exists
+                    doc_name = path.splitext(uri)[0]
+                    if doc_name in self.env.found_docs:
+                        return 'working', '', 0
+                
+                # Check if the URI might be a document path relative to source
+                try:
+                    potential_docname = self.env.path2doc(uri)
+                    if potential_docname in self.env.found_docs:
+                        return 'working', '', 0
+                except Exception:
+                    pass
+                    
+                return 'broken', __('Local reference not found: %s') % uri, 0
+
         def check() -> Tuple[str, str, int]:
             # check for various conditions without bothering the network
             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):
                 return 'unchecked', '', 0
             elif not uri.startswith(('http:', 'https:')):
-                return 'local', '', 0
+                # Check local links instead of just marking them as 'local'
+                return check_local_uri(uri, docname)
             elif uri in self.good:
                 return 'working', 'old', 0
             elif uri in self.broken:
