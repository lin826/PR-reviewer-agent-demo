diff --git b/sphinx/directives/other.py a/sphinx/directives/other.py
index 2500687a9..35e16e623 100644
--- b/sphinx/directives/other.py
+++ a/sphinx/directives/other.py
@@ -116,39 +116,30 @@ class TocTree(SphinxDirective):
                         break
                 # absolutize filenames
                 docname = docname_join(self.env.docname, docname)
                 if url_re.match(ref) or ref == 'self':
                     toctree['entries'].append((title, ref))
+                elif docname not in self.env.found_docs:
+                    if excluded(self.env.doc2path(docname, False)):
+                        message = __('toctree contains reference to excluded document %r')
+                        subtype = 'excluded'
+                    else:
+                        message = __('toctree contains reference to nonexisting document %r')
+                        subtype = 'not_readable'
+
+                    logger.warning(message, docname, type='toc', subtype=subtype,
+                                   location=toctree)
+                    self.env.note_reread()
                 else:
-                    # Check if this is a special built-in label (genindex, modindex, search)
-                    std_domain = self.env.get_domain('std')
-                    is_special_builtin = (ref in std_domain.labels or 
-                                        ref in std_domain.anonlabels)
-                    
-                    if is_special_builtin:
-                        # Special built-in pages like genindex, modindex, search
-                        toctree['entries'].append((title, ref))
-                    elif docname not in self.env.found_docs:
-                        if excluded(self.env.doc2path(docname, False)):
-                            message = __('toctree contains reference to excluded document %r')
-                            subtype = 'excluded'
-                        else:
-                            message = __('toctree contains reference to nonexisting document %r')
-                            subtype = 'not_readable'
-
-                        logger.warning(message, docname, type='toc', subtype=subtype,
-                                       location=toctree)
-                        self.env.note_reread()
+                    if docname in all_docnames:
+                        all_docnames.remove(docname)
                     else:
-                        if docname in all_docnames:
-                            all_docnames.remove(docname)
-                        else:
-                            logger.warning(__('duplicated entry found in toctree: %s'), docname,
-                                           location=toctree)
-
-                        toctree['entries'].append((title, docname))
-                        toctree['includefiles'].append(docname)
+                        logger.warning(__('duplicated entry found in toctree: %s'), docname,
+                                       location=toctree)
+
+                    toctree['entries'].append((title, docname))
+                    toctree['includefiles'].append(docname)
 
         # entries contains all entries (self references, external links etc.)
         if 'reversed' in self.options:
             toctree['entries'] = list(reversed(toctree['entries']))
             toctree['includefiles'] = list(reversed(toctree['includefiles']))
diff --git b/sphinx/environment/adapters/toctree.py a/sphinx/environment/adapters/toctree.py
index aefa3635a..9678e3c7c 100644
--- b/sphinx/environment/adapters/toctree.py
+++ a/sphinx/environment/adapters/toctree.py
@@ -138,46 +138,28 @@ class TocTree:
                         para = addnodes.compact_paragraph('', '', reference)
                         item = nodes.list_item('', para)
                         # don't show subitems
                         toc = nodes.bullet_list('', item)
                     else:
-                        # Check if this is a special built-in label (genindex, modindex, search)
-                        std_domain = self.env.get_domain('std')
-                        if ref in std_domain.labels or ref in std_domain.anonlabels:
-                            # Handle special built-in pages
-                            if not title:
-                                if ref in std_domain.labels:
-                                    title = str(std_domain.labels[ref][2])  # sectionname
-                                else:
-                                    title = ref  # fallback to ref name
-                            reference = nodes.reference('', '', internal=True,
-                                                        refuri=ref,
-                                                        anchorname='',
-                                                        *[nodes.Text(title)])
-                            para = addnodes.compact_paragraph('', '', reference)
-                            item = nodes.list_item('', para)
-                            # don't show subitems for special pages
-                            toc = nodes.bullet_list('', item)
-                        else:
-                            if ref in parents:
-                                logger.warning(__('circular toctree references '
-                                                  'detected, ignoring: %s <- %s'),
-                                               ref, ' <- '.join(parents),
-                                               location=ref, type='toc', subtype='circular')
-                                continue
-                            refdoc = ref
-                            toc = self.env.tocs[ref].deepcopy()
-                            maxdepth = self.env.metadata[ref].get('tocdepth', 0)
-                            if ref not in toctree_ancestors or (prune and maxdepth > 0):
-                                self._toctree_prune(toc, 2, maxdepth, collapse)
-                            process_only_nodes(toc, builder.tags)
-                            if title and toc.children and len(toc.children) == 1:
-                                child = toc.children[0]
-                                for refnode in child.findall(nodes.reference):
-                                    if refnode['refuri'] == ref and \
-                                       not refnode['anchorname']:
-                                        refnode.children = [nodes.Text(title)]
+                        if ref in parents:
+                            logger.warning(__('circular toctree references '
+                                              'detected, ignoring: %s <- %s'),
+                                           ref, ' <- '.join(parents),
+                                           location=ref, type='toc', subtype='circular')
+                            continue
+                        refdoc = ref
+                        toc = self.env.tocs[ref].deepcopy()
+                        maxdepth = self.env.metadata[ref].get('tocdepth', 0)
+                        if ref not in toctree_ancestors or (prune and maxdepth > 0):
+                            self._toctree_prune(toc, 2, maxdepth, collapse)
+                        process_only_nodes(toc, builder.tags)
+                        if title and toc.children and len(toc.children) == 1:
+                            child = toc.children[0]
+                            for refnode in child.findall(nodes.reference):
+                                if refnode['refuri'] == ref and \
+                                   not refnode['anchorname']:
+                                    refnode.children = [nodes.Text(title)]
                     if not toc.children:
                         # empty toc means: no titles will show up in the toctree
                         logger.warning(__('toctree contains reference to document %r that '
                                           'doesn\'t have a title: no link will be generated'),
                                        ref, location=toctreenode)
