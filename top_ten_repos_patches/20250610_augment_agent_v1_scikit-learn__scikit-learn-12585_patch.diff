diff --git a/sklearn/base.py b/sklearn/base.py
index 56ffb18bf..58d0c55bc 100644
--- a/sklearn/base.py
+++ b/sklearn/base.py
@@ -46,17 +46,17 @@ def clone(estimator, safe=True):
     """
     estimator_type = type(estimator)
     # XXX: not handling dictionaries
     if estimator_type in (list, tuple, set, frozenset):
         return estimator_type([clone(e, safe=safe) for e in estimator])
-    elif not hasattr(estimator, 'get_params'):
+    elif not hasattr(estimator, 'get_params') or isinstance(estimator, type):
         if not safe:
             return copy.deepcopy(estimator)
         else:
             raise TypeError("Cannot clone object '%s' (type %s): "
                             "it does not seem to be a scikit-learn estimator "
-                            "as it does not implement a 'get_params' methods."
+                            "instance (it is a class or does not implement a 'get_params' method)."
                             % (repr(estimator), type(estimator)))
     klass = estimator.__class__
     new_object_params = estimator.get_params(deep=False)
     for name, param in six.iteritems(new_object_params):
         new_object_params[name] = clone(param, safe=False)
@@ -178,11 +178,11 @@ class BaseEstimator(object):
             Parameter names mapped to their values.
         """
         out = dict()
         for key in self._get_param_names():
             value = getattr(self, key, None)
-            if deep and hasattr(value, 'get_params'):
+            if deep and hasattr(value, 'get_params') and not isinstance(value, type):
                 deep_items = value.get_params().items()
                 out.update((key + '__' + k, val) for k, val in deep_items)
             out[key] = value
         return out
 
