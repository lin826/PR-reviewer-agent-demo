diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py
index 0403b6947..27b03cbfd 100644
--- a/src/_pytest/pathlib.py
+++ b/src/_pytest/pathlib.py
@@ -343,4 +343,15 @@ def unique_path(path):
 
     This is needed only for ``py.path.local``; ``pathlib.Path`` handles this
     natively with ``resolve()``."""
-    return type(path)(normcase(str(path.realpath())))
+    # Get the real path to resolve symlinks
+    real_path = path.realpath()
+    
+    # On Windows, we need to handle case-insensitive comparison
+    # but preserve the original case for Python imports
+    if sys.platform.startswith("win"):
+        # Preserve case on Windows to avoid breaking Python imports
+        # The case-insensitive comparison should be done elsewhere if needed
+        return real_path
+    else:
+        # On case-sensitive systems, normcase is safe to use
+        return type(path)(normcase(str(real_path)))
diff --git a/testing/test_conftest.py b/testing/test_conftest.py
index 9888f5457..cf7845465 100644
--- a/testing/test_conftest.py
+++ b/testing/test_conftest.py
@@ -292,6 +292,30 @@ def test_conftest_badcase(testdir):
     assert result.ret == ExitCode.NO_TESTS_COLLECTED
 
 
+def test_unique_path_preserves_case():
+    """Test that unique_path preserves case on Windows to prevent import issues."""
+    import sys
+    from unittest.mock import patch
+    
+    # Create a test path with mixed case
+    test_path = py.path.local("/tmp/ComponentTest/Python/PIsys/conftest.py")
+    
+    # Test on simulated Windows
+    with patch('sys.platform', 'win32'):
+        result = unique_path(test_path)
+        
+        # Case should be preserved on Windows
+        assert str(test_path) == str(result), f"Case changed: {test_path} -> {result}"
+        
+        # Should still be the same type
+        assert type(result) == type(test_path)
+    
+    # Test on Unix (current platform) - should work as before
+    result = unique_path(test_path)
+    assert str(test_path) == str(result)
+    assert type(result) == type(test_path)
+
+
 def test_no_conftest(testdir):
     testdir.makeconftest("assert 0")
     result = testdir.runpytest("--noconftest")
