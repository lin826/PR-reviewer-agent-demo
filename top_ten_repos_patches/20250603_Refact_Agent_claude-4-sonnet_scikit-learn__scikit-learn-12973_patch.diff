diff --git a/sklearn/linear_model/least_angle.py b/sklearn/linear_model/least_angle.py
index 03b34a0dc..8ae06efba 100644
--- a/sklearn/linear_model/least_angle.py
+++ b/sklearn/linear_model/least_angle.py
@@ -1501,7 +1501,7 @@ class LassoLarsIC(LassoLars):
         X, y = check_X_y(X, y, y_numeric=True)
 
         X, y, Xmean, ymean, Xstd = LinearModel._preprocess_data(
-            X, y, self.fit_intercept, self.normalize, self.copy_X)
+            X, y, self.fit_intercept, self.normalize, copy_X)
         max_iter = self.max_iter
 
         Gram = self.precompute
diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py
index 21496efa6..f815e6a50 100644
--- a/sklearn/linear_model/tests/test_least_angle.py
+++ b/sklearn/linear_model/tests/test_least_angle.py
@@ -469,6 +469,37 @@ def test_lasso_lars_ic():
     assert_raises(ValueError, lars_broken.fit, X, y)
 
 
+def test_lasso_lars_ic_copy_x_behavior():
+    """Test that copy_X parameter in fit() properly overrides constructor parameter."""
+    # Create sample data
+    rng = np.random.RandomState(42)
+    X = rng.randn(50, 10)
+    y = rng.randn(50)
+    
+    # Test case 1: Constructor copy_X=False, fit() copy_X=True should preserve X
+    estimator1 = linear_model.LassoLarsIC(copy_X=False)
+    X_original1 = X.copy()
+    estimator1.fit(X, y, copy_X=True)
+    assert_equal(np.array_equal(X, X_original1), True,
+                 "X should not be modified when copy_X=True in fit(), "
+                 "regardless of constructor setting")
+    
+    # Test case 2: Constructor copy_X=False, fit() default should preserve X
+    # (because fit() defaults to copy_X=True)
+    estimator2 = linear_model.LassoLarsIC(copy_X=False)
+    X_original2 = X.copy()
+    estimator2.fit(X, y)  # Default copy_X=True
+    assert_equal(np.array_equal(X, X_original2), True,
+                 "X should not be modified when fit() uses default copy_X=True")
+    
+    # Test case 3: Both constructor and fit() copy_X=True should preserve X
+    estimator3 = linear_model.LassoLarsIC(copy_X=True)
+    X_original3 = X.copy()
+    estimator3.fit(X, y, copy_X=True)
+    assert_equal(np.array_equal(X, X_original3), True,
+                 "X should not be modified when both constructor and fit() use copy_X=True")
+
+
 def test_lars_path_readonly_data():
     # When using automated memory mapping on large input, the
     # fold data is in read-only mode
