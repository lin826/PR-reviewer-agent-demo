diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index d913658291..4bb3bcdb18 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -425,6 +425,21 @@ class Expression(BaseExpression, Combinable):
 class CombinedExpression(SQLiteNumericMixin, Expression):
 
     def __init__(self, lhs, connector, rhs, output_field=None):
+        # If it's a subtraction of DateTimeFields, automatically set output_field to DurationField
+        if output_field is None and connector == self.SUB:
+            try:
+                lhs_field = getattr(lhs, 'output_field', None)
+                rhs_field = getattr(rhs, 'output_field', None)
+                lhs_type = getattr(lhs_field, 'get_internal_type', lambda: None)()
+                rhs_type = getattr(rhs_field, 'get_internal_type', lambda: None)()
+                # Check if both are temporal fields and of the same type
+                datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}
+                if lhs_type in datetime_fields and lhs_type == rhs_type:
+                    output_field = fields.DurationField()
+            except (AttributeError, FieldError):
+                # If any attribute lookup fails, just proceed with the original code
+                pass
+                
         super().__init__(output_field=output_field)
         self.connector = connector
         self.lhs = lhs
@@ -442,6 +457,31 @@ class CombinedExpression(SQLiteNumericMixin, Expression):
     def set_source_expressions(self, exprs):
         self.lhs, self.rhs = exprs
 
+    def _resolve_output_field(self):
+        # Special case for temporal subtraction:
+        # If we're doing a subtraction of two temporal fields of the same type,
+        # the output should be a DurationField
+        if self.connector == self.SUB:
+            sources = self.get_source_expressions()
+            if len(sources) == 2:  # lhs and rhs
+                lhs, rhs = sources
+                try:
+                    lhs_field = getattr(lhs, 'output_field', None)
+                    rhs_field = getattr(rhs, 'output_field', None)
+                    
+                    if lhs_field is not None and rhs_field is not None:
+                        lhs_type = lhs_field.get_internal_type()
+                        rhs_type = rhs_field.get_internal_type()
+                        
+                        datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}
+                        if lhs_type in datetime_fields and lhs_type == rhs_type:
+                            return fields.DurationField()
+                except (AttributeError, FieldError):
+                    pass
+        
+        # Fall back to default behavior
+        return super()._resolve_output_field()
+
     def as_sql(self, compiler, connection):
         try:
             lhs_type = self.lhs.output_field.get_internal_type()

