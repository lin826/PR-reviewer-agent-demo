diff --git b/sphinx/directives/code.py a/sphinx/directives/code.py
index d95d99dfa..dc44ed314 100644
--- b/sphinx/directives/code.py
+++ a/sphinx/directives/code.py
@@ -338,52 +338,21 @@ class LiteralIncludeReader:
             else:
                 raise ValueError('end-before pattern not found: %s' % end)
 
         return lines
 
-    def get_indentation(self, line: str) -> str:
-        """Return the indentation (leading whitespace) of a line."""
-        if not line:
-            return ""
-        return line[:len(line) - len(line.lstrip())]
-
     def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:
         prepend = self.options.get('prepend')
         if prepend:
-            # Get indentation from the first line if available
-            indentation = ""
-            if lines and lines[0].strip():
-                indentation = self.get_indentation(lines[0])
-            
-            # Apply indentation to each line of the prepend text
-            prepend_lines = prepend.splitlines()
-            if prepend_lines:
-                # Insert in reverse order to maintain correct order
-                for i in range(len(prepend_lines) - 1, -1, -1):
-                    lines.insert(0, indentation + prepend_lines[i] + '\n')
-            else:
-                # Empty string case
-                lines.insert(0, indentation + prepend + '\n')
+            lines.insert(0, prepend + '\n')
 
         return lines
 
     def append_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:
         append = self.options.get('append')
         if append:
-            # Get indentation from the last line if available
-            indentation = ""
-            if lines and lines[-1].strip():
-                indentation = self.get_indentation(lines[-1])
-            
-            # Apply indentation to each line of the append text
-            append_lines = append.splitlines()
-            if append_lines:
-                for line in append_lines:
-                    lines.append(indentation + line + '\n')
-            else:
-                # Empty string case
-                lines.append(indentation + append + '\n')
+            lines.append(append + '\n')
 
         return lines
 
     def dedent_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:
         if 'dedent' in self.options:
