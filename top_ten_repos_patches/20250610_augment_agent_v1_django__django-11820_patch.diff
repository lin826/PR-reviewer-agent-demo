diff --git a/django/db/models/base.py b/django/db/models/base.py
index 3ce711f3f1..418babaf7b 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1706,11 +1706,16 @@ class Model(metaclass=ModelBase):
         for field in related_fields:
             _cls = cls
             fld = None
             for part in field.split(LOOKUP_SEP):
                 try:
-                    fld = _cls._meta.get_field(part)
+                    # Skip ordering on pk. This is always a valid order_by field
+                    # but is an alias and therefore won't be found by opts.get_field.
+                    if part == 'pk':
+                        fld = _cls._meta.pk
+                    else:
+                        fld = _cls._meta.get_field(part)
                     if fld.is_relation:
                         _cls = fld.get_path_info()[-1].to_opts.model
                 except (FieldDoesNotExist, AttributeError):
                     if fld is None or fld.get_transform(part) is None:
                         errors.append(
diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py
index 0f1d1e4dc3..9aa2829ad2 100644
--- a/tests/invalid_models_tests/test_models.py
+++ b/tests/invalid_models_tests/test_models.py
@@ -822,10 +822,37 @@ class OtherModelTests(SimpleTestCase):
                 ordering = ('test__lower',)
 
         with register_lookup(models.CharField, Lower):
             self.assertEqual(Model.check(), [])
 
+    def test_ordering_pointing_to_related_model_pk(self):
+        class Parent(models.Model):
+            pass
+
+        class Child(models.Model):
+            parent = models.ForeignKey(Parent, models.CASCADE)
+
+            class Meta:
+                ordering = ('parent__pk',)
+
+        self.assertEqual(Child.check(), [])
+
+    def test_ordering_pointing_to_nested_related_model_pk(self):
+        class GrandParent(models.Model):
+            pass
+
+        class Parent(models.Model):
+            grandparent = models.ForeignKey(GrandParent, models.CASCADE)
+
+        class Child(models.Model):
+            parent = models.ForeignKey(Parent, models.CASCADE)
+
+            class Meta:
+                ordering = ('parent__grandparent__pk',)
+
+        self.assertEqual(Child.check(), [])
+
     def test_ordering_pointing_to_foreignkey_field(self):
         class Parent(models.Model):
             pass
 
         class Child(models.Model):
