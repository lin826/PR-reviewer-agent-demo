diff --git a/django/utils/deconstruct.py b/django/utils/deconstruct.py
index 58c58d8..2a4839b 100644
--- a/django/utils/deconstruct.py
+++ b/django/utils/deconstruct.py
@@ -25,9 +25,19 @@ def deconstructible(*args, path=None):
             # Fallback version
             if path and type(obj) is klass:
                 module_name, _, name = path.rpartition('.')
+
             else:
                 module_name = obj.__module__
                 name = obj.__class__.__name__
+                if module_name.startswith('django.db.models.expressions'):
+                    module_name = 'django.db.models'
+                elif module_name.startswith('django.db.models.functions'):
+                    module_name = 'django.db.models.functions'
+                elif module_name.startswith('django.db.models.aggregates'):
+                    module_name = 'django.db.models'
+                elif module_name.startswith('django.contrib.postgres.expressions'):
+                    module_name = 'django.contrib.postgres'
+
             # Make sure it's actually there and not an inner class
             module = import_module(module_name)
             if not hasattr(module, name):
@@ -39,14 +49,17 @@ def deconstructible(*args, path=None):
                     "For more information, see "
                     "https://docs.djangoproject.com/en/%s/topics/migrations/#serializing-values"
                     % (name, module_name, get_docs_version()))
+
             return (
                 path
                 if path and type(obj) is klass
-                else f'{obj.__class__.__module__}.{name}',
+                else f'{module_name}.{name}',
                 obj._constructor_args[0],
                 obj._constructor_args[1],
             )
 
+
+
         klass.__new__ = staticmethod(__new__)
         klass.deconstruct = deconstruct
 
@@ -54,4 +67,4 @@ def deconstructible(*args, path=None):
 
     if not args:
         return decorator
-    return decorator(*args)
+    return decorator(*args)
