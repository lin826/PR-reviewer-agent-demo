diff --git a/Dockerfile b/Dockerfile
index aafe62a6a..f42072446 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,7 +1,30 @@
-FROM python:3.9.0-alpine3.12
 
-COPY ./ /tmp/build
-WORKDIR /tmp/build
-RUN python setup.py install && rm -rf /tmp/build
+FROM swebench/sweb.eval.x86_64.pylint-dev_1776_pylint-4970:latest
 
-ENTRYPOINT ["pylint"]
+WORKDIR /install
+# Install docker cli
+# Add Docker's official GPG key:
+RUN apt-get update
+RUN apt-get install -y ca-certificates curl
+RUN install -m 0755 -d /etc/apt/keyrings
+RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
+RUN chmod a+r /etc/apt/keyrings/docker.asc
+
+# Add the repository to Apt sources:
+RUN echo   "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu   $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" |   tee /etc/apt/sources.list.d/docker.list > /dev/null
+RUN apt-get update && apt-get install -y docker-ce-cli
+
+# Install required dependencies for SWE-bench (verification)
+RUN apt-get install -y -V ca-certificates lsb-release wget
+RUN wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
+RUN apt-get update
+RUN apt-get install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
+
+# Install SWE repo
+RUN git clone https://github.com/princeton-nlp/SWE-bench.git /SWE-bench
+WORKDIR /SWE-bench
+RUN apt-get install -y python3-venv
+RUN python3 -m venv .venv
+RUN . .venv/bin/activate      &&     pip install --upgrade pip &&     pip install . 
+
+WORKDIR /testbed
diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py
index c65b1c893..449fd19c0 100644
--- a/pylint/checkers/similar.py
+++ b/pylint/checkers/similar.py
@@ -241,6 +241,12 @@ def hash_lineset(
     # Comments, docstring and other specific patterns maybe excluded -> call to stripped_lines
     # to get only what is desired
     lines = tuple(x.text for x in lineset.stripped_lines)
+    
+    # When min_common_lines is 0, we want to disable the similarity check entirely
+    # by returning empty dictionaries, which will result in no similarities being found
+    if min_common_lines == 0:
+        return hash2index, index2lines
+    
     # Need different iterators on same lines but each one is shifted 1 from the precedent
     shifted_lines = [iter(lines[i:]) for i in range(min_common_lines)]
 
diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py
index 4ddf2029a..69c051437 100644
--- a/tests/checkers/unittest_similar.py
+++ b/tests/checkers/unittest_similar.py
@@ -393,6 +393,20 @@ def test_no_args() -> None:
             pytest.fail("not system exit")
 
 
+def test_min_similarity_lines_zero_disables_check() -> None:
+    """Test that setting min-similarity-lines to 0 disables the duplicate code check"""
+    output = StringIO()
+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:
+        similar.Run(["--duplicates=0", SIMILAR1, SIMILAR2])
+    assert ex.value.code == 0
+    assert (
+        output.getvalue().strip()
+        == """
+TOTAL lines=62 duplicates=0 percent=0.00
+""".strip()
+    )
+
+
 def test_get_map_data() -> None:
     """Tests that a SimilarChecker respects the MapReduceMixin interface"""
     linter = PyLinter(reporter=Reporter())
