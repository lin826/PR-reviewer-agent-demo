diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index f8e4be999..e5dbc6d3e 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1049,26 +1049,45 @@ class DocstringSignatureMixin:
             # no lines in docstring, no match
             if not doclines:
                 continue
-            # match first line of docstring against signature RE
-            match = py_ext_sig_re.match(doclines[0])
-            if not match:
-                continue
-            exmod, path, base, args, retann = match.groups()
-            # the base name must match ours
+            
+            # Check for multiple signatures at the beginning of the docstring
+            signatures = []
+            signature_lines = 0
             valid_names = [self.objpath[-1]]  # type: ignore
             if isinstance(self, ClassDocumenter):
                 valid_names.append('__init__')
                 if hasattr(self.object, '__mro__'):
                     valid_names.extend(cls.__name__ for cls in self.object.__mro__)
-            if base not in valid_names:
-                continue
-            # re-prepare docstring to ignore more leading indentation
-            tab_width = self.directive.state.document.settings.tab_width  # type: ignore
-            self._new_docstrings[i] = prepare_docstring('\n'.join(doclines[1:]),
-                                                        tabsize=tab_width)
-            result = args, retann
-            # don't look any further
-            break
+            
+            # Scan consecutive lines from the beginning for signatures
+            for line_idx, line in enumerate(doclines):
+                match = py_ext_sig_re.match(line.strip())
+                if not match:
+                    # Stop scanning when we hit a non-signature line
+                    break
+                    
+                exmod, path, base, args, retann = match.groups()
+                # the base name must match ours
+                if base not in valid_names:
+                    # Stop scanning when we hit a signature for a different method
+                    # Don't increment signature_lines since this line shouldn't be removed
+                    break
+                    
+                signatures.append((args, retann))
+                signature_lines += 1
+            
+            # If we found any signatures, use the first one and remove all signature lines
+            if signatures:
+                # re-prepare docstring to ignore signature lines and leading indentation
+                tab_width = self.directive.state.document.settings.tab_width  # type: ignore
+                remaining_lines = doclines[signature_lines:]
+                self._new_docstrings[i] = prepare_docstring('\n'.join(remaining_lines),
+                                                            tabsize=tab_width)
+                result = signatures[0]  # Return first signature for backward compatibility
+                # Store all signatures for potential future use
+                self._overload_signatures = signatures
+                # don't look any further
+                break
         return result
 
     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:
