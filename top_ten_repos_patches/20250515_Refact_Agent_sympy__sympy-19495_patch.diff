diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py
index 118eda6f77..2b6b3cdb78 100644
--- a/sympy/sets/conditionset.py
+++ b/sympy/sets/conditionset.py
@@ -240,8 +240,32 @@ def _eval_subs(self, old, new):
             # the base set should be filtered and if new is not in
             # the base set then this substitution is ignored
             return self.func(sym, cond, base)
+        
+        # Import necessary classes
+        from sympy.sets.contains import Contains
+        from sympy.sets.sets import Interval
+        from sympy import S
+        
+        # Get the substituted condition and base set
         cond = self.condition.subs(old, new)
         base = self.base_set.subs(old, new)
+        
+        # Special handling for Contains
+        if isinstance(self.condition, Contains) and old == self.condition.args[0]:
+            # Original condition is Contains(old, container)
+            container = self.condition.args[1]
+            
+            # Check if the container is an Interval
+            if isinstance(container, Interval):
+                # Check if new value is in interval
+                contains_result = container.contains(new)
+                if contains_result is S.true:
+                    # Condition is satisfied, return just the substituted base_set
+                    return base
+                elif contains_result is S.false:
+                    # Condition is not satisfied, return EmptySet
+                    return S.EmptySet
+        
         if cond is S.true:
             return ConditionSet(new, Contains(new, base), base)
         return self.func(self.sym, cond, base)
diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py
index 0d4527a52c..578d3aef0f 100644
--- a/sympy/sets/tests/test_conditionset.py
+++ b/sympy/sets/tests/test_conditionset.py
@@ -179,3 +179,34 @@ def test_failing_contains():
     # and the comparison is giving an error.
     assert ConditionSet(x, 1/x >= 0, S.Reals).contains(0) == \
         Contains(0, ConditionSet(x, 1/x >= 0, S.Reals), evaluate=False)
+
+
+def test_conditionset_with_imageset():
+    from sympy import pi, asin, ImageSet, Lambda, Rational, Interval, Contains
+    from sympy.sets.fancysets import ImageSet
+    
+    n = Symbol('n')
+    y = Symbol('y')
+    z = Symbol('z')
+    
+    # Create an ImageSet
+    img_set = ImageSet(Lambda(n, 2*n*pi + asin(y)), S.Integers)
+    
+    # Create a ConditionSet with the ImageSet as base_set
+    cond_set = ConditionSet(x, Contains(y, Interval(-1, 1)), img_set)
+    
+    # Test substitution with a value inside the interval
+    result1 = cond_set.subs(y, Rational(1, 3))
+    expected1 = ImageSet(Lambda(n, 2*n*pi + asin(Rational(1, 3))), S.Integers)
+    assert result1 == expected1
+    
+    # Test substitution with a value outside the interval
+    result2 = cond_set.subs(y, 2)
+    assert result2 == S.EmptySet
+    
+    # Test substitution with a symbol
+    result3 = cond_set.subs(y, z)
+    assert isinstance(result3, ConditionSet)
+    assert result3.sym == x
+    assert result3.condition == Contains(z, Interval(-1, 1))
+    assert result3.base_set == ImageSet(Lambda(n, 2*n*pi + asin(z)), S.Integers)
