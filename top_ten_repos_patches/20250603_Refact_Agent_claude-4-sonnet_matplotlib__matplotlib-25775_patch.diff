diff --git a/lib/matplotlib/backends/backend_agg.py b/lib/matplotlib/backends/backend_agg.py
index 7d038a998f..22907b00d9 100644
--- a/lib/matplotlib/backends/backend_agg.py
+++ b/lib/matplotlib/backends/backend_agg.py
@@ -206,7 +206,7 @@ class RendererAgg(RendererBase):
         # space) in the following call to draw_text_image).
         font.set_text(s, 0, flags=get_hinting_flag())
         font.draw_glyphs_to_bitmap(
-            antialiased=mpl.rcParams['text.antialiased'])
+            antialiased=gc.get_antialiased())
         d = font.get_descent() / 64.0
         # The descent needs to be adjusted for the angle.
         xo, yo = font.get_bitmap_offset()
diff --git a/lib/matplotlib/backends/backend_cairo.py b/lib/matplotlib/backends/backend_cairo.py
index 9ccadcdf1c..7f1888b4dd 100644
--- a/lib/matplotlib/backends/backend_cairo.py
+++ b/lib/matplotlib/backends/backend_cairo.py
@@ -205,7 +205,7 @@ class RendererCairo(RendererBase):
             ctx.set_font_size(self.points_to_pixels(prop.get_size_in_points()))
             opts = cairo.FontOptions()
             opts.set_antialias(
-                cairo.ANTIALIAS_DEFAULT if mpl.rcParams["text.antialiased"]
+                cairo.ANTIALIAS_DEFAULT if gc.get_antialiased()
                 else cairo.ANTIALIAS_NONE)
             ctx.set_font_options(opts)
             if angle:
diff --git a/lib/matplotlib/tests/test_text.py b/lib/matplotlib/tests/test_text.py
index f86b9f111b..444d3ccd38 100644
--- a/lib/matplotlib/tests/test_text.py
+++ b/lib/matplotlib/tests/test_text.py
@@ -204,6 +204,80 @@ def test_afm_kerning():
     assert afm.string_width_height('VAVAVAVAVAVA') == (7174.0, 718)
 
 
+def test_text_antialiasing_methods():
+    """Test that Text objects have get/set_antialiased methods."""
+    fig, ax = plt.subplots()
+    text = ax.text(0.5, 0.5, "Test")
+    
+    # Test that methods exist
+    assert hasattr(text, 'get_antialiased')
+    assert hasattr(text, 'set_antialiased')
+    
+    # Test default value matches rcParams
+    assert text.get_antialiased() == mpl.rcParams['text.antialiased']
+    
+    # Test setting antialiasing
+    text.set_antialiased(False)
+    assert text.get_antialiased() is False
+    
+    text.set_antialiased(True)
+    assert text.get_antialiased() is True
+    
+    plt.close(fig)
+
+
+def test_text_antialiasing_constructor():
+    """Test Text constructor with antialiased parameter."""
+    fig, ax = plt.subplots()
+    
+    # Test with explicit antialiased=False
+    text1 = ax.text(0.5, 0.5, "Test", antialiased=False)
+    assert text1.get_antialiased() is False
+    
+    # Test with explicit antialiased=True
+    text2 = ax.text(0.5, 0.5, "Test", antialiased=True)
+    assert text2.get_antialiased() is True
+    
+    # Test with default (None)
+    text3 = ax.text(0.5, 0.5, "Test")
+    assert text3.get_antialiased() == mpl.rcParams['text.antialiased']
+    
+    plt.close(fig)
+
+
+def test_annotation_antialiasing():
+    """Test that Annotation inherits antialiasing methods from Text."""
+    fig, ax = plt.subplots()
+    
+    # Test with explicit antialiased parameter
+    annotation = ax.annotate("Test", (0.5, 0.5), antialiased=False)
+    assert hasattr(annotation, 'get_antialiased')
+    assert hasattr(annotation, 'set_antialiased')
+    assert annotation.get_antialiased() is False
+    
+    # Test setting antialiasing
+    annotation.set_antialiased(True)
+    assert annotation.get_antialiased() is True
+    
+    plt.close(fig)
+
+
+def test_text_update_from_antialiasing():
+    """Test that update_from copies antialiasing state."""
+    fig, ax = plt.subplots()
+    
+    text1 = ax.text(0.5, 0.5, "Test1", antialiased=False)
+    text2 = ax.text(0.5, 0.5, "Test2", antialiased=True)
+    
+    assert text1.get_antialiased() is False
+    assert text2.get_antialiased() is True
+    
+    text1.update_from(text2)
+    assert text1.get_antialiased() is True
+    
+    plt.close(fig)
+
+
 @image_comparison(['text_contains.png'])
 def test_contains():
     fig = plt.figure()
diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py
index 4591316cf9..0cc569e6f9 100644
--- a/lib/matplotlib/text.py
+++ b/lib/matplotlib/text.py
@@ -115,6 +115,7 @@ class Text(Artist):
                  wrap=False,
                  transform_rotates_text=False,
                  parse_math=None,    # defaults to rcParams['text.parse_math']
+                 antialiased=None,     # defaults to rcParams['text.antialiased']
                  **kwargs
                  ):
         """
@@ -149,6 +150,7 @@ class Text(Artist):
             transform_rotates_text=transform_rotates_text,
             linespacing=linespacing,
             rotation_mode=rotation_mode,
+            antialiased=antialiased,
         )
         self.update(kwargs)
 
@@ -167,6 +169,7 @@ class Text(Artist):
         transform_rotates_text=False,
         linespacing=None,
         rotation_mode=None,
+        antialiased=None,
     ):
         self.set_text(text)
         self.set_color(
@@ -187,6 +190,9 @@ class Text(Artist):
             linespacing = 1.2  # Maybe use rcParam later.
         self.set_linespacing(linespacing)
         self.set_rotation_mode(rotation_mode)
+        self._antialiased = None  # Initialize before calling setter
+        self.set_antialiased(antialiased if antialiased is not None else
+                            mpl.rcParams['text.antialiased'])
 
     def update(self, kwargs):
         # docstring inherited
@@ -322,6 +328,7 @@ class Text(Artist):
         self._transform_rotates_text = other._transform_rotates_text
         self._picker = other._picker
         self._linespacing = other._linespacing
+        self._antialiased = other._antialiased
         self.stale = True
 
     def _get_layout(self, renderer):
@@ -736,6 +743,7 @@ class Text(Artist):
             gc = renderer.new_gc()
             gc.set_foreground(self.get_color())
             gc.set_alpha(self.get_alpha())
+            gc.set_antialiased(self.get_antialiased())
             gc.set_url(self._url)
             self._set_gc_clip(gc)
 
@@ -774,6 +782,22 @@ class Text(Artist):
         """Return the color of the text."""
         return self._color
 
+    def get_antialiased(self):
+        """Return whether antialiased rendering is used."""
+        return self._antialiased
+
+    def set_antialiased(self, antialiased):
+        """
+        Set whether to use antialiased rendering.
+
+        Parameters
+        ----------
+        antialiased : bool
+        """
+        if self._antialiased != antialiased:
+            self.stale = True
+        self._antialiased = antialiased
+
     def get_fontproperties(self):
         """Return the `.font_manager.FontProperties`."""
         return self._fontproperties
