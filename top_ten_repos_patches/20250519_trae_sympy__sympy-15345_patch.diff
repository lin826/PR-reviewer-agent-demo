diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py
index ea7e3a2d94..822373e0b8 100644
--- a/sympy/printing/mathematica.py
+++ b/sympy/printing/mathematica.py
@@ -6,6 +6,7 @@
 from sympy.printing.codeprinter import CodePrinter
 from sympy.printing.str import StrPrinter
 from sympy.printing.precedence import precedence
+from sympy.core.function import Function
 
 # Used in MCodePrinter._print_Function(self)
 known_functions = {
@@ -31,7 +32,6 @@
     "asech": [(lambda x: True, "ArcSech")],
     "acsch": [(lambda x: True, "ArcCsch")],
     "conjugate": [(lambda x: True, "Conjugate")],
-
 }
 
 
@@ -116,6 +116,20 @@ def _print_Derivative(self, expr):
         dvars = [i[0] if i[1] == 1 else i for i in expr.variable_count]
         return "Hold[D[" + ', '.join(self.doprint(a) for a in [dexpr] + dvars) + "]]"
 
+    def _print_Max(self, expr):
+        # Reorder args for Mathematica, which expects symbolic arguments first
+        args = list(expr.args)
+        # Sort arguments so that symbols come before numbers
+        symbols_first = sorted(args, key=lambda arg: not hasattr(arg, 'is_Symbol') or not arg.is_Symbol)
+        return "Max[%s]" % self.stringify(symbols_first, ", ")
+
+    def _print_Min(self, expr):
+        # Reorder args for Mathematica, which expects symbolic arguments first
+        args = list(expr.args)
+        # Sort arguments so that symbols come before numbers
+        symbols_first = sorted(args, key=lambda arg: not hasattr(arg, 'is_Symbol') or not arg.is_Symbol)
+        return "Min[%s]" % self.stringify(symbols_first, ", ")
+
 
 def mathematica_code(expr, **settings):
     r"""Converts an expr to a string of the Wolfram Mathematica code

