diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 0f53d9c30b..508b4c458d 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -2524,7 +2524,25 @@ class AutoFieldMeta(type):
         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)
 
     def __subclasscheck__(self, subclass):
-        return subclass in self._subclasses or super().__subclasscheck__(subclass)
+        """
+        Consider a class a (virtual) subclass of AutoField if it is a subclass
+        of any of the concrete automatically-generated field classes that
+        Django provides out-of-the-box (BigAutoField or SmallAutoField) *or*
+        if the normal Python MRO rules already say so.
+
+        Using direct tuple-membership, as was previously done, only matched the
+        two classes themselves and failed for every user-defined subclass,
+        e.g.:
+
+            class MyBigAutoField(models.BigAutoField): ...
+
+        which broke DEFAULT_AUTO_FIELD and AppConfig.default_auto_field when
+        such a subclass was supplied.
+        """
+        return (
+            any(issubclass(subclass, cls) for cls in self._subclasses)
+            or super().__subclasscheck__(subclass)
+        )
 
 
 class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):
