diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index aaf35ee37c..143bd69dc8 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -597,16 +597,18 @@ class Query(BaseExpression):
             j for j in self.alias_map if self.alias_map[j].join_type == INNER)
         rhs_votes = set()
         # Now, add the joins from rhs query into the new query (skipping base
         # table).
         rhs_tables = list(rhs.alias_map)[1:]
+        # Collect all RHS aliases to avoid conflicts when generating new aliases
+        rhs_aliases = set(rhs.alias_map.keys())
         for alias in rhs_tables:
             join = rhs.alias_map[alias]
             # If the left side of the join was already relabeled, use the
             # updated alias.
             join = join.relabeled_clone(change_map)
-            new_alias = self.join(join, reuse=reuse)
+            new_alias = self.join(join, reuse=reuse, avoid_aliases=rhs_aliases)
             if join.join_type == INNER:
                 rhs_votes.add(new_alias)
             # We can't reuse the same join again in the query. If we have two
             # distinct joins for the same connection in rhs query, then the
             # combined query must have two joins, too.
@@ -743,27 +745,36 @@ class Query(BaseExpression):
             for model in orig_opts.get_parent_list():
                 seen.setdefault(model, set())
             for model, values in seen.items():
                 callback(target, model, values)
 
-    def table_alias(self, table_name, create=False, filtered_relation=None):
+    def table_alias(self, table_name, create=False, filtered_relation=None, avoid_aliases=None):
         """
         Return a table alias for the given table_name and whether this is a
         new alias or not.
 
         If 'create' is true, a new alias is always created. Otherwise, the
         most recently created alias for the table (if one exists) is reused.
+        
+        The 'avoid_aliases' parameter can be a set of aliases to avoid when
+        generating new aliases to prevent conflicts.
         """
         alias_list = self.table_map.get(table_name)
         if not create and alias_list:
             alias = alias_list[0]
             self.alias_refcount[alias] += 1
             return alias, False
 
         # Create a new alias for this table.
         if alias_list:
-            alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)
+            # Generate alias, avoiding conflicts with existing aliases and avoid_aliases
+            avoid_aliases = avoid_aliases or set()
+            base_num = len(self.alias_map) + 1
+            alias = '%s%d' % (self.alias_prefix, base_num)
+            while alias in avoid_aliases or alias in self.alias_map:
+                base_num += 1
+                alias = '%s%d' % (self.alias_prefix, base_num)
             alias_list.append(alias)
         else:
             # The first occurrence of a table uses the table name directly.
             alias = filtered_relation.alias if filtered_relation is not None else table_name
             self.table_map[table_name] = [alias]
@@ -946,18 +957,21 @@ class Query(BaseExpression):
         count. After execution, the reference counts are zeroed, so tables
         added in compiler will not be seen by this method.
         """
         return len([1 for count in self.alias_refcount.values() if count])
 
-    def join(self, join, reuse=None):
+    def join(self, join, reuse=None, avoid_aliases=None):
         """
         Return an alias for the 'join', either reusing an existing alias for
         that join or creating a new one. 'join' is either a base_table_class or
         join_class.
 
         The 'reuse' parameter can be either None which means all joins are
         reusable, or it can be a set containing the aliases that can be reused.
+        
+        The 'avoid_aliases' parameter can be a set of aliases to avoid when
+        generating new aliases to prevent conflicts.
 
         A join is always created as LOUTER if the lhs alias is LOUTER to make
         sure chains like t1 LOUTER t2 INNER t3 aren't generated. All new
         joins are created as LOUTER if the join is nullable.
         """
@@ -974,11 +988,11 @@ class Query(BaseExpression):
                 reuse_alias = reuse_aliases[-1]
             self.ref_alias(reuse_alias)
             return reuse_alias
 
         # No reuse is possible, so we need a new alias.
-        alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)
+        alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation, avoid_aliases=avoid_aliases)
         if join.join_type:
             if self.alias_map[join.parent_alias].join_type == LOUTER or join.nullable:
                 join_type = LOUTER
             else:
                 join_type = INNER
