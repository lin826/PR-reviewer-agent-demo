--- a/django/db/models/fields/files.py
+++ b/django/db/models/fields/files.py
@@ -227,18 +227,45 @@
     def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs):
         self._primary_key_set_explicitly = 'primary_key' in kwargs
 
-        self.storage = storage or default_storage
-        if callable(self.storage):
-            self.storage = self.storage()
-            if not isinstance(self.storage, Storage):
+        # Store the original storage parameter for deconstruction
+        self._storage_callable = storage
+        storage = storage or default_storage
+        if callable(storage):
+            # For callable storage, validate that it returns a Storage but don't store the result
+            test_storage = storage()
+            if not isinstance(test_storage, Storage):
                 raise TypeError(
                     "%s.storage must be a subclass/instance of %s.%s"
                     % (self.__class__.__qualname__, Storage.__module__, Storage.__qualname__)
                 )
+        else:
+            # For non-callable storage, validate immediately
+            if not isinstance(storage, Storage):
+                raise TypeError(
+                    "%s.storage must be a subclass/instance of %s.%s"
+                    % (self.__class__.__qualname__, Storage.__module__, Storage.__qualname__)
+                )
+        self._storage = storage
         self.upload_to = upload_to
 
         kwargs.setdefault('max_length', 100)
         super().__init__(verbose_name, name, **kwargs)
+
+    @property
+    def storage(self):
+        """
+        Return the storage for this field. If the storage was provided as a
+        callable, evaluate it each time to allow for runtime changes.
+        """
+        if callable(self._storage_callable):
+            storage = self._storage_callable()
+            if not isinstance(storage, Storage):
+                raise TypeError(
+                    "%s.storage must be a subclass/instance of %s.%s"
+                    % (self.__class__.__qualname__, Storage.__module__, Storage.__qualname__)
+                )
+            return storage
+        return self._storage
 
     def check(self, **kwargs):
         return [
@@ -278,8 +305,10 @@
         if kwargs.get("max_length") == 100:
             del kwargs["max_length"]
         kwargs['upload_to'] = self.upload_to
-        if self.storage is not default_storage:
-            kwargs['storage'] = self.storage
+        # Use the original storage parameter if it was provided, not the evaluated version
+        storage_for_deconstruct = self._storage_callable or self._storage
+        if storage_for_deconstruct is not default_storage:
+            kwargs['storage'] = storage_for_deconstruct
         return name, path, args, kwargs
 
     def get_internal_type(self):
