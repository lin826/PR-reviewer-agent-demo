diff --git a/django/db/models/base.py b/django/db/models/base.py
index 4038859cfa..d0fa0d5ee4 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1302,6 +1302,25 @@ class Model(metaclass=ModelBase):
             not settings.is_overridden('DEFAULT_AUTO_FIELD') and
             not cls._meta.app_config._is_default_auto_field_overridden
         ):
+            # Don't warn for inherited primary keys from multi-table inheritance
+            # If the primary key is a OneToOneField pointing to a parent model,
+            # traverse the inheritance chain to find the ultimate base model
+            # and check if it has an explicitly defined primary key
+            if cls._meta.pk.one_to_one and cls._meta.pk.related_model in cls._meta.parents:
+                # Traverse up the inheritance chain to find the root model
+                current_model = cls._meta.pk.related_model
+                while (
+                    current_model._meta.pk.auto_created and
+                    current_model._meta.pk.one_to_one and
+                    current_model._meta.pk.related_model in current_model._meta.parents
+                ):
+                    current_model = current_model._meta.pk.related_model
+                
+                # If the root model has an explicitly defined primary key,
+                # this is inheritance, not a truly auto-created primary key
+                if not current_model._meta.pk.auto_created:
+                    return []
+            
             return [
                 checks.Warning(
                     f"Auto-created primary key used when not defining a "
diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py
index d4342ada07..f9da674788 100644
--- a/tests/check_framework/test_model_checks.py
+++ b/tests/check_framework/test_model_checks.py
@@ -415,3 +415,43 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):
                 app_label = 'check_framework.apps.CheckPKConfig'
 
         self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])
+
+    def test_inherited_pk_from_explicit_pk(self):
+        """Models inheriting from a model with explicit PK should not trigger W042."""
+        class BaseModel(models.Model):
+            id = models.BigAutoField(primary_key=True)
+            name = models.CharField(max_length=100)
+
+        class ChildModel(BaseModel):
+            email = models.EmailField()
+
+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])
+
+    def test_inherited_pk_from_auto_pk(self):
+        """Models inheriting from a model with auto PK should still trigger W042."""
+        class BaseModelWithAutoPK(models.Model):
+            name = models.CharField(max_length=100)
+
+        class ChildModelWithAutoPK(BaseModelWithAutoPK):
+            email = models.EmailField()
+
+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())
+        # Both parent and child should have W042 warnings
+        w042_errors = [e for e in errors if e.id == 'models.W042']
+        self.assertEqual(len(w042_errors), 2)
+        self.assertIn(BaseModelWithAutoPK, [e.obj for e in w042_errors])
+        self.assertIn(ChildModelWithAutoPK, [e.obj for e in w042_errors])
+
+    def test_multi_level_inherited_pk_from_explicit_pk(self):
+        """Multi-level inheritance from explicit PK should not trigger W042."""
+        class BaseModel(models.Model):
+            id = models.BigAutoField(primary_key=True)
+            name = models.CharField(max_length=100)
+
+        class MiddleModel(BaseModel):
+            email = models.EmailField()
+
+        class LeafModel(MiddleModel):
+            phone = models.CharField(max_length=20)
+
+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])
