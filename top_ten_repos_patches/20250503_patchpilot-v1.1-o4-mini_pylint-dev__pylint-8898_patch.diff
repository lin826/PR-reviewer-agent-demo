diff --git a/pylint/config/argument.py b/pylint/config/argument.py
index 58062ab..6525c29 100644
--- a/pylint/config/argument.py
+++ b/pylint/config/argument.py
@@ -102,6 +102,7 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:
     return version
 
 
+
 def _regex_transformer(value: str) -> Pattern[str]:
     """Return `re.compile(value)`."""
     try:
@@ -111,18 +112,96 @@ def _regex_transformer(value: str) -> Pattern[str]:
         raise argparse.ArgumentTypeError(msg) from e
 
 
+def _split_regex_csv(value: str) -> list[str]:
+    """Split a commaâ€‘separated string containing regular expressions.
+
+    A comma is considered a separator only when it is not escaped and when
+    it is not inside one of the following regex constructs:
+        * character class  [...]
+        * grouping         (...)
+        * quantifier       {...}
+
+    The returned substrings are stripped of surrounding whitespace.
+    """
+    parts: list[str] = []
+    current: list[str] = []
+
+    escape = False
+    in_char_class = False
+    paren_depth = 0
+    brace_depth = 0
+
+    for char in value:
+        if escape:
+            current.append(char)
+            escape = False
+            continue
+
+        if char == "\\":
+            current.append(char)
+            escape = True
+            continue
+
+        if char == "[" and not in_char_class:
+            in_char_class = True
+            current.append(char)
+            continue
+        if char == "]" and in_char_class:
+            in_char_class = False
+            current.append(char)
+            continue
+
+        if char == "(" and not in_char_class:
+            paren_depth += 1
+            current.append(char)
+            continue
+        if char == ")" and not in_char_class and paren_depth:
+            paren_depth -= 1
+            current.append(char)
+            continue
+
+        if char == "{" and not in_char_class:
+            brace_depth += 1
+            current.append(char)
+            continue
+        if char == "}" and not in_char_class and brace_depth:
+            brace_depth -= 1
+            current.append(char)
+            continue
+
+        if (
+            char == ","
+            and not in_char_class
+            and paren_depth == 0
+            and brace_depth == 0
+        ):
+            parts.append("".join(current).strip())
+            current = []
+            continue
+
+        current.append(char)
+
+    parts.append("".join(current).strip())
+    return [part for part in parts if part]
+
+
 def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:
+
     """Transforms a comma separated list of regular expressions."""
+
     patterns: list[Pattern[str]] = []
-    for pattern in _csv_transformer(value):
+    for pattern in _split_regex_csv(value):
+
         patterns.append(_regex_transformer(pattern))
     return patterns
 
 
 def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:
     """Transforms a comma separated list of regular expressions paths."""
+
     patterns: list[Pattern[str]] = []
-    for pattern in _csv_transformer(value):
+    for pattern in _split_regex_csv(value):
+
         patterns.append(
             re.compile(
                 str(pathlib.PureWindowsPath(pattern)).replace("\\", "\\\\")
