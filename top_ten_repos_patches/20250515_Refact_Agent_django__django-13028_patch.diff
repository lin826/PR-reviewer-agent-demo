diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index ce18098fd2..73ba46499e 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1124,14 +1124,27 @@ class Query(BaseExpression):
 
     def check_filterable(self, expression):
         """Raise an error if expression cannot be used in a WHERE clause."""
+        # We only enforce 'filterable' on true SQL expressions.
+        # Skip any ordinary Python value (including model instances,
+        # primitives, lists, dicts, etc.), even if they happen to have
+        # a .filterable attribute.
+        from django.db.models.expressions import BaseExpression
+
+        if not isinstance(expression, BaseExpression):
+            return
+
+        # If this SQL expression class has declared filterable=False,
+        # block it now.
         if not getattr(expression, 'filterable', True):
             raise NotSupportedError(
-                expression.__class__.__name__ + ' is disallowed in the filter '
-                'clause.'
+                f"{expression.__class__.__name__} is disallowed in the filter clause."
             )
+
+        # Recurse into any child‚Äêexpressions (so Subquery, aggregates,
+        # Window expressions, etc. are still properly checked).
         if hasattr(expression, 'get_source_expressions'):
-            for expr in expression.get_source_expressions():
-                self.check_filterable(expr)
+            for subexpr in expression.get_source_expressions():
+                self.check_filterable(subexpr)
 
     def build_lookup(self, lookups, lhs, rhs):
         """
