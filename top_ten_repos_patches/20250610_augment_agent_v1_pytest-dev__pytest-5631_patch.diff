diff --git a/src/_pytest/compat.py b/src/_pytest/compat.py
index d238061b4..31c3791f0 100644
--- a/src/_pytest/compat.py
+++ b/src/_pytest/compat.py
@@ -57,20 +57,31 @@ def getlocation(function, curdir):
     if fn.relto(curdir):
         fn = fn.relto(curdir)
     return "%s:%d" % (fn, lineno + 1)
 
 
+def _safe_in_check(obj, container):
+    """Safely check if obj is in container, handling array-like objects."""
+    try:
+        return obj in container
+    except (ValueError, DeprecationWarning, Warning):
+        # This can happen with array-like objects (e.g., numpy arrays)
+        # that override comparison operators. Since sentinel values are
+        # simple objects, array-like objects are never sentinels.
+        return False
+
+
 def num_mock_patch_args(function):
     """ return number of arguments used up by mock arguments (if any) """
     patchings = getattr(function, "patchings", None)
     if not patchings:
         return 0
     mock_modules = [sys.modules.get("mock"), sys.modules.get("unittest.mock")]
     if any(mock_modules):
         sentinels = [m.DEFAULT for m in mock_modules if m is not None]
         return len(
-            [p for p in patchings if not p.attribute_name and p.new in sentinels]
+            [p for p in patchings if not p.attribute_name and _safe_in_check(p.new, sentinels)]
         )
     return len(patchings)
 
 
 def getfuncargnames(function, is_method=False, cls=None):
