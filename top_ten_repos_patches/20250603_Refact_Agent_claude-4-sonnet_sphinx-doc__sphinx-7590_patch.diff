diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py
index fe52d881d..c1a7dbb25 100644
--- a/sphinx/domains/cpp.py
+++ b/sphinx/domains/cpp.py
@@ -314,6 +314,7 @@ _fold_operator_re = re.compile(r'''(?x)
     |   !=
     |   [<>=/*%+|&^~-]=?
 ''')
+_udl_suffix_re = re.compile(r'[a-zA-Z_][a-zA-Z0-9_]*')
 # see https://en.cppreference.com/w/cpp/keyword
 _keywords = [
     'alignas', 'alignof', 'and', 'and_eq', 'asm', 'auto', 'bitand', 'bitor',
@@ -855,6 +856,23 @@ class ASTStringLiteral(ASTLiteral):
         signode.append(nodes.Text(txt, txt))
 
 
+class ASTUserDefinedLiteral(ASTLiteral):
+    def __init__(self, literal: str, suffix: str) -> None:
+        self.literal = literal
+        self.suffix = suffix
+
+    def _stringify(self, transform: StringifyTransform) -> str:
+        return self.literal + self.suffix
+
+    def get_id(self, version: int) -> str:
+        return "LUD%s%sE" % (self.literal, self.suffix)
+
+    def describe_signature(self, signode: TextElement, mode: str,
+                           env: "BuildEnvironment", symbol: "Symbol") -> None:
+        txt = str(self)
+        signode.append(nodes.Text(txt, txt))
+
+
 class ASTCharLiteral(ASTLiteral):
     def __init__(self, prefix: str, data: str) -> None:
         self.prefix = prefix  # may be None when no prefix
@@ -4658,22 +4676,53 @@ class DefinitionParser(BaseParser):
             return ASTBooleanLiteral(True)
         if self.skip_word('false'):
             return ASTBooleanLiteral(False)
+        
+        # Try parsing numeric literals with potential UDL suffixes
         for regex in [float_literal_re, binary_literal_re, hex_literal_re,
                       integer_literal_re, octal_literal_re]:
             pos = self.pos
             if self.match(regex):
+                # Handle traditional suffixes (uUlLfF)
                 while self.current_char in 'uUlLfF':
                     self.pos += 1
-                return ASTNumberLiteral(self.definition[pos:self.pos])
-
+                literal_text = self.definition[pos:self.pos]
+                
+                # Check for UDL suffix after the literal
+                if self._try_parse_udl_suffix():
+                    suffix_start = self.pos
+                    if self.match(_udl_suffix_re):
+                        suffix = self.definition[suffix_start:self.pos]
+                        return ASTUserDefinedLiteral(literal_text, suffix)
+                
+                return ASTNumberLiteral(literal_text)
+
+        # Try parsing string literals with potential UDL suffixes
+        string_pos = self.pos
         string = self._parse_string()
         if string is not None:
+            # Check for UDL suffix after the string literal
+            if self._try_parse_udl_suffix():
+                suffix_start = self.pos
+                if self.match(_udl_suffix_re):
+                    suffix = self.definition[suffix_start:self.pos]
+                    return ASTUserDefinedLiteral(string, suffix)
             return ASTStringLiteral(string)
 
-        # character-literal
+        # Try parsing character literals with potential UDL suffixes
         if self.match(char_literal_re):
             prefix = self.last_match.group(1)  # may be None when no prefix
             data = self.last_match.group(2)
+            
+            # Build the full character literal text
+            char_text = (prefix or '') + "'" + data + "'"
+            
+            # Check for UDL suffix after the character literal
+            if self._try_parse_udl_suffix():
+                suffix_start = self.pos
+                if self.match(_udl_suffix_re):
+                    suffix = self.definition[suffix_start:self.pos]
+                    return ASTUserDefinedLiteral(char_text, suffix)
+            
             try:
                 return ASTCharLiteral(prefix, data)
             except UnicodeDecodeError as e:
@@ -4682,9 +4731,18 @@ class DefinitionParser(BaseParser):
                 self.fail("Can not handle character literal"
                           " resulting in multiple decoded characters.")
 
-        # TODO: user-defined lit
         return None
 
+    def _try_parse_udl_suffix(self) -> bool:
+        """Check if there's a UDL suffix at the current position."""
+        # UDL suffix must start immediately after the literal (no whitespace)
+        if self.pos >= len(self.definition):
+            return False
+        
+        # UDL suffix must start with underscore or letter
+        char = self.definition[self.pos]
+        return char.isalpha() or char == '_'
+
     def _parse_fold_or_paren_expression(self) -> ASTExpression:
         # "(" expression ")"
         # fold-expression
@@ -4983,7 +5041,10 @@ class DefinitionParser(BaseParser):
                 postFixes.append(ASTPostfixCallExpr(lst))
                 continue
             break
-        return ASTPostfixExpr(prefix, postFixes)
+        if len(postFixes) == 0:
+            return prefix
+        else:
+            return ASTPostfixExpr(prefix, postFixes)
 
     def _parse_unary_expression(self) -> ASTExpression:
         # -> postfix
@@ -5154,7 +5215,10 @@ class DefinitionParser(BaseParser):
                         self.pos = pos
                 if not oneMore:
                     break
-            return ASTBinOpExpr(exprs, ops)
+            if len(ops) == 0:
+                return exprs[0]
+            else:
+                return ASTBinOpExpr(exprs, ops)
         return _parse_bin_op_expr(self, 0, inTemplate=inTemplate)
 
     def _parse_conditional_expression_tail(self, orExprHead: Any) -> None:
