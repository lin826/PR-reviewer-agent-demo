diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index fdca700c9d..2b3acba06f 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -126,9 +126,16 @@ class JSONField(CheckFieldDefaultMixin, Field):
         )
 
 
-def compile_json_path(key_transforms, include_root=True):
+def compile_json_path(key_transforms, include_root=True, *, force_text=False):
     path = ["$"] if include_root else []
     for key_transform in key_transforms:
+        # When force_text=True always treat the part as an *object* key,
+        # not as an array index, even if it looks like a number.
+        if force_text:
+            path.append(".")
+            path.append(json.dumps(str(key_transform)))
+            continue
+
         try:
             num = int(key_transform)
         except ValueError:  # non-integer
@@ -178,7 +185,8 @@ class HasKeyLookup(PostgresOperatorLookup):
             lhs, lhs_params, lhs_key_transforms = self.lhs.preprocess_lhs(
                 compiler, connection
             )
-            lhs_json_path = compile_json_path(lhs_key_transforms)
+            # For has_key() we always address an object property.
+            lhs_json_path = compile_json_path(lhs_key_transforms, force_text=True)
         else:
             lhs, lhs_params = self.process_lhs(compiler, connection)
             lhs_json_path = "$"
@@ -197,7 +205,11 @@ class HasKeyLookup(PostgresOperatorLookup):
                 "%s%s"
                 % (
                     lhs_json_path,
-                    compile_json_path(rhs_key_transforms, include_root=False),
+                    compile_json_path(
+                        rhs_key_transforms,
+                        include_root=False,
+                        force_text=True,
+                    ),
                 )
             )
         # Add condition for each key.
