diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py
index e10a5bb6d9..1d1dd819f8 100644
--- a/django/db/models/fields/files.py
+++ b/django/db/models/fields/files.py
@@ -227,6 +227,8 @@ class FileField(Field):
     def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs):
         self._primary_key_set_explicitly = 'primary_key' in kwargs
 
+        # Store the original storage parameter for deconstruction
+        self._original_storage = storage
         self.storage = storage or default_storage
         if callable(self.storage):
             self.storage = self.storage()
@@ -278,7 +280,12 @@ class FileField(Field):
         if kwargs.get("max_length") == 100:
             del kwargs["max_length"]
         kwargs['upload_to'] = self.upload_to
-        if self.storage is not default_storage:
+        # Use the original storage parameter if it was provided and is not default_storage
+        original_storage = getattr(self, '_original_storage', None)
+        if original_storage is not None and original_storage is not default_storage:
+            kwargs['storage'] = original_storage
+        elif self.storage is not default_storage:
+            # Fallback for cases where _original_storage might not be set (e.g., older instances)
             kwargs['storage'] = self.storage
         return name, path, args, kwargs
 
diff --git a/tests/field_deconstruction/tests.py b/tests/field_deconstruction/tests.py
index bf00aa44e2..bebc00f31b 100644
--- a/tests/field_deconstruction/tests.py
+++ b/tests/field_deconstruction/tests.py
@@ -174,6 +174,42 @@ class FieldDeconstructionTests(SimpleTestCase):
         self.assertEqual(args, [])
         self.assertEqual(kwargs, {"upload_to": "foo/bar", "max_length": 200})
 
+    def test_file_field_callable_storage(self):
+        """Test that FileField with callable storage preserves the original callable in deconstruct()."""
+        from django.core.files.storage import FileSystemStorage
+        import tempfile
+        
+        # Create a temporary storage
+        temp_storage_location = tempfile.mkdtemp()
+        temp_storage = FileSystemStorage(location=temp_storage_location)
+        
+        # Test callable function storage
+        def callable_storage():
+            return temp_storage
+        
+        field = models.FileField(storage=callable_storage, upload_to="test")
+        name, path, args, kwargs = field.deconstruct()
+        self.assertEqual(path, "django.db.models.FileField")
+        self.assertEqual(args, [])
+        self.assertEqual(kwargs, {"storage": callable_storage, "upload_to": "test"})
+        # Verify the original callable is preserved
+        self.assertIs(kwargs["storage"], callable_storage)
+        self.assertTrue(callable(kwargs["storage"]))
+        
+        # Test callable class storage
+        class CallableStorageClass(FileSystemStorage):
+            def __call__(self):
+                return self
+        
+        field = models.FileField(storage=CallableStorageClass, upload_to="test")
+        name, path, args, kwargs = field.deconstruct()
+        self.assertEqual(path, "django.db.models.FileField")
+        self.assertEqual(args, [])
+        self.assertEqual(kwargs, {"storage": CallableStorageClass, "upload_to": "test"})
+        # Verify the original callable class is preserved
+        self.assertIs(kwargs["storage"], CallableStorageClass)
+        self.assertTrue(callable(kwargs["storage"]))
+
     def test_file_path_field(self):
         field = models.FilePathField(match=r".*\.txt$")
         name, path, args, kwargs = field.deconstruct()
@@ -347,6 +383,28 @@ class FieldDeconstructionTests(SimpleTestCase):
         self.assertEqual(args, [])
         self.assertEqual(kwargs, {"upload_to": "foo/barness", "width_field": "width", "height_field": "height"})
 
+    def test_image_field_callable_storage(self):
+        """Test that ImageField with callable storage preserves the original callable in deconstruct()."""
+        from django.core.files.storage import FileSystemStorage
+        import tempfile
+        
+        # Create a temporary storage
+        temp_storage_location = tempfile.mkdtemp()
+        temp_storage = FileSystemStorage(location=temp_storage_location)
+        
+        # Test callable function storage
+        def callable_storage():
+            return temp_storage
+        
+        field = models.ImageField(storage=callable_storage, upload_to="test")
+        name, path, args, kwargs = field.deconstruct()
+        self.assertEqual(path, "django.db.models.ImageField")
+        self.assertEqual(args, [])
+        self.assertEqual(kwargs, {"storage": callable_storage, "upload_to": "test"})
+        # Verify the original callable is preserved
+        self.assertIs(kwargs["storage"], callable_storage)
+        self.assertTrue(callable(kwargs["storage"]))
+
     def test_integer_field(self):
         field = models.IntegerField()
         name, path, args, kwargs = field.deconstruct()
