diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 59a5d6abbb..adba35181e 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -1855,6 +1855,29 @@ class SQLUpdateCompiler(SQLCompiler):
                 idents.extend(r[0] for r in rows)
             self.query.add_filter("pk__in", idents)
             self.query.related_ids = idents
+            
+            # For multiple inheritance, we need to collect the correct parent IDs
+            # for each parent model that needs updating
+            if self.query.related_updates:
+                self.query.related_parent_ids = {}
+                current_model = self.query.get_meta().concrete_model
+                
+                for parent_model in self.query.related_updates.keys():
+                    if parent_model in current_model._meta.parents:
+                        # Get the parent link field for this parent model
+                        parent_link = current_model._meta.parents[parent_model]
+                        parent_field_name = parent_link.attname
+                        
+                        # Create a new query to get the parent IDs
+                        parent_query = query.clone()
+                        parent_query.clear_select_clause()
+                        parent_query.add_fields([parent_field_name])
+                        
+                        parent_ids = []
+                        for rows in parent_query.get_compiler(self.using).execute_sql(MULTI):
+                            parent_ids.extend(r[0] for r in rows)
+                        
+                        self.query.related_parent_ids[parent_model] = parent_ids
         else:
             # The fast path. Filters and updates in one query.
             self.query.add_filter("pk__in", query)
diff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py
index 04063f73bc..ed4934b669 100644
--- a/django/db/models/sql/subqueries.py
+++ b/django/db/models/sql/subqueries.py
@@ -62,10 +62,12 @@ class UpdateQuery(Query):
         self.values = []
         self.related_ids = None
         self.related_updates = {}
+        self.related_parent_ids = {}
 
     def clone(self):
         obj = super().clone()
         obj.related_updates = self.related_updates.copy()
+        obj.related_parent_ids = getattr(self, 'related_parent_ids', {}).copy()
         return obj
 
     def update_batch(self, pk_list, values, using):
@@ -134,7 +136,11 @@ class UpdateQuery(Query):
             query = UpdateQuery(model)
             query.values = values
             if self.related_ids is not None:
-                query.add_filter("pk__in", self.related_ids)
+                # Use parent-specific IDs if available (for multiple inheritance)
+                if hasattr(self, 'related_parent_ids') and model in self.related_parent_ids:
+                    query.add_filter("pk__in", self.related_parent_ids[model])
+                else:
+                    query.add_filter("pk__in", self.related_ids)
             result.append(query)
         return result
 
