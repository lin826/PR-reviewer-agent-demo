diff --git a/sphinx/pycode/ast.py b/sphinx/pycode/ast.py
index 5db5a4a..710c45a 100644
--- a/sphinx/pycode/ast.py
+++ b/sphinx/pycode/ast.py
@@ -200,23 +200,37 @@ class _UnparseVisitor(ast.NodeVisitor):
                 not any(isinstance(elt, ast.Starred) for elt in value.elts)
             )
 
+
         if is_simple_tuple(node.slice):
-            elts = ", ".join(self.visit(e) for e in node.slice.elts)  # type: ignore
+            elts_list = [self.visit(e) for e in node.slice.elts]  # type: ignore
+            elts = ", ".join(elts_list)
+            if len(elts_list) == 1:
+                elts += ","
             return "%s[%s]" % (self.visit(node.value), elts)
         elif isinstance(node.slice, ast.Index) and is_simple_tuple(node.slice.value):
-            elts = ", ".join(self.visit(e) for e in node.slice.value.elts)  # type: ignore
+            elts_list = [self.visit(e) for e in node.slice.value.elts]  # type: ignore
+            elts = ", ".join(elts_list)
+            if len(elts_list) == 1:
+                elts += ","
             return "%s[%s]" % (self.visit(node.value), elts)
         else:
             return "%s[%s]" % (self.visit(node.value), self.visit(node.slice))
 
+
     def visit_UnaryOp(self, node: ast.UnaryOp) -> str:
         return "%s %s" % (self.visit(node.op), self.visit(node.operand))
 
+
     def visit_Tuple(self, node: ast.Tuple) -> str:
-        if node.elts:
-            return "(" + ", ".join(self.visit(e) for e in node.elts) + ")"
-        else:
+        # Handle empty tuple, single‑element tuple, and general case
+        if not node.elts:
             return "()"
+        elif len(node.elts) == 1:
+            # A single‑element tuple must keep its trailing comma
+            return "(" + self.visit(node.elts[0]) + ",)"
+        else:
+            return "(" + ", ".join(self.visit(e) for e in node.elts) + ")"
+
 
     if sys.version_info < (3, 8):
         # these ast nodes were deprecated in python 3.8
