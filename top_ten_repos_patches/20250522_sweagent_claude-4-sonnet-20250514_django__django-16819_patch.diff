diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 967a91fdc8..63aa09aa9b 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -807,6 +807,31 @@ class IndexOperation(Operation):
     def model_name_lower(self):
         return self.model_name.lower()
 
+    def references_model(self, name, app_label):
+        return name.lower() == self.model_name_lower
+
+    def reduce(self, operation, app_label):
+        # Allow optimization through operations that don't conflict
+        if isinstance(operation, IndexOperation) and self.model_name_lower == operation.model_name_lower:
+            # Same model - check if they're working on different indexes
+            if hasattr(self, 'name') and hasattr(operation, 'name'):
+                # Both are RemoveIndex operations
+                if self.name != operation.name:
+                    return True  # Can optimize through
+            elif hasattr(self, 'index') and hasattr(operation, 'index'):
+                # Both are AddIndex operations
+                if self.index.name != operation.index.name:
+                    return True  # Can optimize through
+            elif hasattr(self, 'name') and hasattr(operation, 'index'):
+                # self is RemoveIndex, operation is AddIndex
+                if self.name != operation.index.name:
+                    return True  # Can optimize through
+            elif hasattr(self, 'index') and hasattr(operation, 'name'):
+                # self is AddIndex, operation is RemoveIndex
+                if self.index.name != operation.name:
+                    return True  # Can optimize through
+        return super().reduce(operation, app_label)
+
 
 class AddIndex(IndexOperation):
     """Add an index on a model."""
@@ -861,6 +886,23 @@ class AddIndex(IndexOperation):
     def migration_name_fragment(self):
         return "%s_%s" % (self.model_name_lower, self.index.name.lower())
 
+    def reduce(self, operation, app_label):
+        if (
+            isinstance(operation, RemoveIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.index.name == operation.name
+        ):
+            # AddIndex followed by RemoveIndex for the same index can be optimized away
+            return []
+        elif (
+            isinstance(operation, AddIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.index.name == operation.index.name
+        ):
+            # AddIndex followed by AddIndex for the same index, keep the second one
+            return [operation]
+        return super().reduce(operation, app_label)
+
 
 class RemoveIndex(IndexOperation):
     """Remove an index from a model."""
@@ -904,6 +946,23 @@ class RemoveIndex(IndexOperation):
     def migration_name_fragment(self):
         return "remove_%s_%s" % (self.model_name_lower, self.name.lower())
 
+    def reduce(self, operation, app_label):
+        if (
+            isinstance(operation, AddIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.name == operation.index.name
+        ):
+            # RemoveIndex followed by AddIndex for the same index can be optimized away
+            return []
+        elif (
+            isinstance(operation, RemoveIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.name == operation.name
+        ):
+            # RemoveIndex followed by RemoveIndex for the same index, keep the second one
+            return [operation]
+        return super().reduce(operation, app_label)
+
 
 class RenameIndex(IndexOperation):
     """Rename an index."""
