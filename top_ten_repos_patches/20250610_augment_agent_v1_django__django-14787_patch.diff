diff --git a/django/utils/decorators.py b/django/utils/decorators.py
index 5c9a5d01c7..c563a5c163 100644
--- a/django/utils/decorators.py
+++ b/django/utils/decorators.py
@@ -35,11 +35,15 @@ def _multi_decorate(decorators, method):
     def _wrapper(self, *args, **kwargs):
         # bound_method has the signature that 'decorator' expects i.e. no
         # 'self' argument, but it's a closure over self so it can call
         # 'func'. Also, wrap method.__get__() in a function because new
         # attributes can't be set on bound method objects, only on functions.
-        bound_method = partial(method.__get__(self, type(self)))
+        bound_method_func = method.__get__(self, type(self))
+        bound_method = partial(bound_method_func)
+        # Copy function attributes from the original bound method to the partial
+        # object so that decorators can access attributes like __name__, __module__, etc.
+        update_wrapper(bound_method, bound_method_func)
         for dec in decorators:
             bound_method = dec(bound_method)
         return bound_method(*args, **kwargs)
 
     # Copy any attributes that a decorator adds to the function it decorates.
