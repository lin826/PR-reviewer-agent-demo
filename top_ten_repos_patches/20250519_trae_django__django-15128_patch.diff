diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index aaf35ee37c..b6bb526deb 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -846,38 +846,58 @@ class Query(BaseExpression):
         relabelling any references to them in select columns and the where
         clause.
         """
-        assert set(change_map).isdisjoint(change_map.values())
-
-        # 1. Update references in "select" (normal columns plus aliases),
-        # "group by" and "where".
-        self.where.relabel_aliases(change_map)
-        if isinstance(self.group_by, tuple):
-            self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])
-        self.select = tuple([col.relabeled_clone(change_map) for col in self.select])
-        self.annotations = self.annotations and {
-            key: col.relabeled_clone(change_map) for key, col in self.annotations.items()
-        }
-
-        # 2. Rename the alias in the internal table/alias datastructures.
-        for old_alias, new_alias in change_map.items():
-            if old_alias not in self.alias_map:
-                continue
-            alias_data = self.alias_map[old_alias].relabeled_clone(change_map)
-            self.alias_map[new_alias] = alias_data
-            self.alias_refcount[new_alias] = self.alias_refcount[old_alias]
-            del self.alias_refcount[old_alias]
-            del self.alias_map[old_alias]
-
-            table_aliases = self.table_map[alias_data.table_name]
-            for pos, alias in enumerate(table_aliases):
-                if alias == old_alias:
-                    table_aliases[pos] = new_alias
-                    break
-        self.external_aliases = {
-            # Table is aliased or it's being changed and thus is aliased.
-            change_map.get(alias, alias): (aliased or alias in change_map)
-            for alias, aliased in self.external_aliases.items()
-        }
+        # Define a local function to apply a change map
+        def _apply_map(change_map):
+            # The assertion ensures that no alias is changed twice by preventing
+            # situations where an alias could be transformed multiple times
+            # (e.g. T4->T5, T5->T6 would change T5 twice)
+            assert set(change_map).isdisjoint(change_map.values())
+
+            # 1. Update references in "select" (normal columns plus aliases),
+            # "group by" and "where".
+            self.where.relabel_aliases(change_map)
+            if isinstance(self.group_by, tuple):
+                self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])
+            self.select = tuple([col.relabeled_clone(change_map) for col in self.select])
+            self.annotations = self.annotations and {
+                key: col.relabeled_clone(change_map) for key, col in self.annotations.items()
+            }
+
+            # 2. Rename the alias in the internal table/alias datastructures.
+            for old_alias, new_alias in change_map.items():
+                if old_alias not in self.alias_map:
+                    continue
+                alias_data = self.alias_map[old_alias].relabeled_clone(change_map)
+                self.alias_map[new_alias] = alias_data
+                self.alias_refcount[new_alias] = self.alias_refcount[old_alias]
+                del self.alias_refcount[old_alias]
+                del self.alias_map[old_alias]
+
+                table_aliases = self.table_map[alias_data.table_name]
+                for pos, alias in enumerate(table_aliases):
+                    if alias == old_alias:
+                        table_aliases[pos] = new_alias
+                        break
+            self.external_aliases = {
+                # Table is aliased or it's being changed and thus is aliased.
+                change_map.get(alias, alias): (aliased or alias in change_map)
+                for alias, aliased in self.external_aliases.items()
+            }
+
+        # Check if there's a conflict between keys and values (e.g. {'T4': 'T5', 'T5': 'T6'})
+        # This can happen during an OR operation between querysets when aliases need to be renamed
+        if not set(change_map).isdisjoint(change_map.values()):
+            # Use a two-phase approach to handle conflicts
+            # Phase 1: Create and apply a mapping from original aliases to temporary aliases
+            temp_map = {old_alias: f"__TEMP__{old_alias}" for old_alias in change_map}
+            _apply_map(temp_map)
+
+            # Phase 2: Create and apply a mapping from temp aliases to final aliases
+            final_map = {temp_map[old_alias]: new_alias for old_alias, new_alias in change_map.items()}
+            _apply_map(final_map)
+        else:
+            # No conflict, apply the change_map directly
+            _apply_map(change_map)
 
     def bump_prefix(self, outer_query):
         """

