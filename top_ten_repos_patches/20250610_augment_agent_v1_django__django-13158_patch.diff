diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index c913267476..502b526d07 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1775,10 +1775,16 @@ class Query(BaseExpression):
             # outercol IS NULL we will not match the row.
         return condition, needed_inner
 
     def set_empty(self):
         self.where.add(NothingNode(), AND)
+        # Clear combined queries for union/intersection/difference queries
+        # to ensure they are truly empty
+        if self.combinator:
+            self.combined_queries = ()
+            self.combinator = None
+            self.combinator_all = False
 
     def is_empty(self):
         return any(isinstance(c, NothingNode) for c in self.where.children)
 
     def set_limits(self, low=None, high=None):
diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py
index 9c6fd474ca..41ece618f1 100644
--- a/tests/queries/test_qs_combinators.py
+++ b/tests/queries/test_qs_combinators.py
@@ -312,5 +312,28 @@ class QuerySetSetOperationTests(TestCase):
                     with self.assertRaisesMessage(
                         NotSupportedError,
                         msg % (operation, combinator),
                     ):
                         getattr(getattr(qs, combinator)(qs), operation)()
+
+    def test_none_on_combined_queries(self):
+        """Test that calling .none() on combined queries returns empty results."""
+        qs1 = Number.objects.filter(num__lt=2)
+        qs2 = Number.objects.filter(num__gt=8)
+        
+        # Test union
+        union_qs = qs1.union(qs2)
+        self.assertEqual(len(union_qs.none()), 0)
+        
+        # Test intersection (if supported)
+        if connection.features.supports_select_intersection:
+            intersection_qs = Number.objects.filter(num__lt=5).intersection(
+                Number.objects.filter(num__gt=2)
+            )
+            self.assertEqual(len(intersection_qs.none()), 0)
+        
+        # Test difference (if supported)
+        if connection.features.supports_select_difference:
+            difference_qs = Number.objects.filter(num__lt=6).difference(
+                Number.objects.filter(num__gt=3)
+            )
+            self.assertEqual(len(difference_qs.none()), 0)
