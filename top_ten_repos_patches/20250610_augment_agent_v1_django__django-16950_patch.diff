diff --git a/django/forms/models.py b/django/forms/models.py
index 3fa04b821f..4228df3b13 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -1176,11 +1176,22 @@ class BaseInlineFormSet(BaseModelFormSet):
             if kwargs.get("to_field") is not None:
                 to_field = self.instance._meta.get_field(kwargs["to_field"])
             else:
                 to_field = self.instance._meta.pk
             if to_field.has_default():
-                setattr(self.instance, to_field.attname, None)
+                # Only set to None if it's an auto-incrementing field or if the
+                # current value is None. For fields like UUIDField with callable
+                # defaults, preserve the existing value to avoid NOT NULL constraint
+                # errors when saving.
+                from django.db.models.fields import AutoFieldMixin
+                current_value = getattr(self.instance, to_field.attname)
+                if isinstance(to_field, AutoFieldMixin) or current_value is None:
+                    setattr(self.instance, to_field.attname, None)
+                else:
+                    # For non-auto fields with existing values (like UUIDField),
+                    # preserve the value but mark that the initial should be None
+                    kwargs["ignore_initial"] = True
 
         form.fields[name] = InlineForeignKeyField(self.instance, **kwargs)
 
     def get_unique_error_message(self, unique_check):
         unique_check = [field for field in unique_check if field != self.fk.name]
@@ -1344,15 +1355,15 @@ class InlineForeignKeyField(Field):
     widget = HiddenInput
     default_error_messages = {
         "invalid_choice": _("The inline value did not match the parent instance."),
     }
 
-    def __init__(self, parent_instance, *args, pk_field=False, to_field=None, **kwargs):
+    def __init__(self, parent_instance, *args, pk_field=False, to_field=None, ignore_initial=False, **kwargs):
         self.parent_instance = parent_instance
         self.pk_field = pk_field
         self.to_field = to_field
-        if self.parent_instance is not None:
+        if self.parent_instance is not None and not ignore_initial:
             if self.to_field:
                 kwargs["initial"] = getattr(self.parent_instance, self.to_field)
             else:
                 kwargs["initial"] = self.parent_instance.pk
         kwargs["required"] = False
