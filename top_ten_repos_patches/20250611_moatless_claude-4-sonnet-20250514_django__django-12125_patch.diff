--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -90,7 +90,55 @@
 
     @staticmethod
     def _serialize_path(path):
-        module, name = path.rsplit(".", 1)
+        import importlib
+        
+        # Split the path into parts
+        parts = path.split(".")
+        
+        # Try to find the actual module by testing progressively shorter paths from the right
+        module_path = None
+        for i in range(len(parts) - 1, 0, -1):
+            try_module = ".".join(parts[:i])
+            try:
+                importlib.import_module(try_module)
+                module_path = try_module
+                break  # Found the module, stop searching
+            except ImportError:
+                continue
+        
+        # If no module was found by import testing, use heuristics
+        if module_path is None:
+            # Look for common Django patterns
+            if ".models." in path:
+                # Find the position of .models. and consider that + "models" as the module
+                models_index = None
+                for i, part in enumerate(parts):
+                    if part == "models":
+                        models_index = i
+                        break
+                
+                if models_index is not None and models_index < len(parts) - 1:
+                    # Module includes everything up to and including "models"
+                    module_path = ".".join(parts[:models_index + 1])
+            else:
+                # For other cases, fall back to old behavior
+                module_path, _ = path.rsplit(".", 1)
+        
+        # Calculate the module and name parts
+        if module_path:
+            module = module_path
+            # Everything after the module path becomes the class name
+            module_parts = module.split(".")
+            name_parts = parts[len(module_parts):]
+            if name_parts:
+                name = ".".join(name_parts)
+            else:
+                # This shouldn't happen, but fallback just in case
+                name = parts[-1]
+        else:
+            # Ultimate fallback to old behavior
+            module, name = path.rsplit(".", 1)
+        
         if module == "django.db.models":
             imports = {"from django.db import models"}
             name = "models.%s" % name
