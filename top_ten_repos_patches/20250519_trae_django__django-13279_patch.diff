diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py
index b5453160a5..b62922918d 100644
--- a/django/contrib/sessions/backends/base.py
+++ b/django/contrib/sessions/backends/base.py
@@ -108,18 +108,50 @@ class SessionBase:
 
     def encode(self, session_dict):
         "Return the given session dictionary serialized and encoded as a string."
-        return signing.dumps(
-            session_dict, salt=self.key_salt, serializer=self.serializer,
-            compress=True,
-        )
+        from django.conf import settings
+        # During the transition to Django 3.1, use the legacy encoding
+        # when DEFAULT_HASHING_ALGORITHM is sha1 to maintain compatibility
+        # with existing sessions
+        if settings.DEFAULT_HASHING_ALGORITHM == 'sha1':
+            serialized = self.serializer().dumps(session_dict)
+            hash = self._hash(serialized)
+            return base64.b64encode(hash.encode() + b":" + serialized).decode('ascii')
+        else:
+            return signing.dumps(
+                session_dict, salt=self.key_salt, serializer=self.serializer,
+                compress=True,
+            )
 
     def decode(self, session_data):
-        try:
-            return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)
-        # RemovedInDjango40Warning: when the deprecation ends, handle here
-        # exceptions similar to what _legacy_decode() does now.
-        except Exception:
-            return self._legacy_decode(session_data)
+        from django.conf import settings
+        
+        # If using sha1 algorithm, try legacy decode first 
+        if settings.DEFAULT_HASHING_ALGORITHM == 'sha1':
+            try:
+                return self._legacy_decode(session_data)
+            # If legacy decode fails, try the new format with explicit sha256
+            except Exception:
+                # Temporarily set algorithm to sha256 for decoding
+                original_algorithm = settings.DEFAULT_HASHING_ALGORITHM
+                try:
+                    # Force sha256 temporarily to decode the new format
+                    settings.DEFAULT_HASHING_ALGORITHM = 'sha256'
+                    result = signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)
+                    return result
+                except Exception:
+                    # If both methods fail, return empty dict as in _legacy_decode
+                    return {}
+                finally:
+                    # Restore original algorithm
+                    settings.DEFAULT_HASHING_ALGORITHM = original_algorithm
+        # When not using sha1, use the standard decode path
+        else:
+            try:
+                return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)
+            # RemovedInDjango40Warning: when the deprecation ends, handle here
+            # exceptions similar to what _legacy_decode() does now.
+            except Exception:
+                return self._legacy_decode(session_data)
 
     def _legacy_decode(self, session_data):
         # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.

