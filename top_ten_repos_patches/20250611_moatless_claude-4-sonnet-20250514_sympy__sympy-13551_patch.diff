--- a/sympy/concrete/products.py
+++ b/sympy/concrete/products.py
@@ -276,17 +276,21 @@
 
         elif term.is_Add:
             p, q = term.as_numer_denom()
-            q = self._eval_product(q, (k, a, n))
-            if q.is_Number:
-
-                # There is expression, which couldn't change by
-                # as_numer_denom(). E.g. n**(2/3) + 1 --> (n**(2/3) + 1, 1).
-                # We have to catch this case.
-
-                p = sum([self._eval_product(i, (k, a, n)) for i in p.as_coeff_Add()])
-            else:
-                p = self._eval_product(p, (k, a, n))
-            return p / q
+            # Only apply the transformation if the original term is a rational function
+            # in the variable k. For example, 1 + 1/k and 1 + a/k^2 should be handled,
+            # but n + 1/2^k should not because the exponential makes it non-rational.
+            if term.is_rational_function(k):
+                q = self._eval_product(q, (k, a, n))
+                if q.is_Number:
+
+                    # There is expression, which couldn't change by
+                    # as_numer_denom(). E.g. n**(2/3) + 1 --> (n**(2/3) + 1, 1).
+                    # We have to catch this case.
+
+                    p = sum([self._eval_product(i, (k, a, n)) for i in p.as_coeff_Add()])
+                else:
+                    p = self._eval_product(p, (k, a, n))
+                return p / q
 
         elif term.is_Mul:
             exclude, include = [], []
