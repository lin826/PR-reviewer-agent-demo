diff --git a/sympy/printing/repr.py b/sympy/printing/repr.py
index c936a692c0..da4a8ff7cd 100644
--- a/sympy/printing/repr.py
+++ b/sympy/printing/repr.py
@@ -10,10 +10,11 @@
 from typing import Any, Dict
 
 from sympy.core.function import AppliedUndef
 from sympy.core.mul import Mul
 from mpmath.libmp import repr_dps, to_str as mlib_to_str
+from sympy.utilities import default_sort_key
 
 from .printer import Printer
 
 
 class ReprPrinter(Printer):
@@ -248,10 +249,32 @@ def _print_tuple(self, expr):
         if len(expr) == 1:
             return "(%s,)" % self._print(expr[0])
         else:
             return "(%s)" % self.reprify(expr, ", ")
 
+    def _print_set(self, expr):
+        if not expr:
+            return "set()"
+        items = sorted(expr, key=default_sort_key)
+        args = ', '.join(self._print(item) for item in items)
+        return '{%s}' % args
+
+    def _print_frozenset(self, expr):
+        if not expr:
+            return "frozenset()"
+        return "frozenset(%s)" % self._print_set(expr)
+
+    def _print_dict(self, expr):
+        if not expr:
+            return "{}"
+        keys = sorted(expr.keys(), key=default_sort_key)
+        items = []
+        for key in keys:
+            item = "%s: %s" % (self._print(key), self._print(expr[key]))
+            items.append(item)
+        return "{%s}" % ", ".join(items)
+
     def _print_WildFunction(self, expr):
         return "%s('%s')" % (expr.__class__.__name__, expr.name)
 
     def _print_AlgebraicNumber(self, expr):
         return "%s(%s, %s)" % (expr.__class__.__name__,
