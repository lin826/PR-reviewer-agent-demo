diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py
index 917717bb74..2b6330e981 100644
--- a/sympy/sets/sets.py
+++ b/sympy/sets/sets.py
@@ -217,7 +217,35 @@ def _complement(self, other):
             return S.EmptySet
 
         elif isinstance(other, FiniteSet):
-            return FiniteSet(*[el for el in other if self.contains(el) != True])
+            # Separate elements that are definitely not contained from those that might be
+            definitely_not_contained = []
+            might_be_contained = []
+            
+            for el in other:
+                containment = self.contains(el)
+                if containment is S.true:
+                    # Element is definitely contained, so exclude it from result
+                    continue
+                elif containment is S.false:
+                    # Element is definitely not contained, include it in result
+                    definitely_not_contained.append(el)
+                else:
+                    # Containment is unknown (symbolic), need to preserve in complement
+                    might_be_contained.append(el)
+            
+            # If we have elements with unknown containment, we can't fully simplify
+            if might_be_contained:
+                result_set = FiniteSet(*definitely_not_contained)
+                if might_be_contained:
+                    unknown_set = FiniteSet(*might_be_contained)
+                    if result_set == S.EmptySet:
+                        return Complement(unknown_set, self, evaluate=False)
+                    else:
+                        return Union(result_set, Complement(unknown_set, self, evaluate=False))
+                return result_set
+            else:
+                # All elements have definite containment status
+                return FiniteSet(*definitely_not_contained)
 
     def symmetric_difference(self, other):
         """
diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py
index 8c59d85b20..486c49c330 100644
--- a/sympy/sets/tests/test_sets.py
+++ b/sympy/sets/tests/test_sets.py
@@ -188,6 +188,26 @@ def test_Complement():
     assert S.Reals - Union(S.Naturals, FiniteSet(pi)) == \
             Intersection(S.Reals - S.Naturals, S.Reals - FiniteSet(pi))
 
+    # Test for mixed symbols and numbers (issue fix)
+    # When FiniteSet contains both symbols and numbers, the complement should
+    # properly handle both: remove numbers that are contained, preserve symbolic complement
+    from sympy.abc import x, y
+    mixed_set = FiniteSet(x, y, 2)
+    interval = Interval(-10, 10)
+    result = Complement(mixed_set, interval)
+    # The number 2 should be removed (it's in the interval)
+    # The symbols x, y should remain in a symbolic complement
+    expected = Complement(FiniteSet(x, y), interval, evaluate=False)
+    assert result == expected
+    
+    # Test with multiple numbers
+    mixed_set2 = FiniteSet(x, y, 1, 5, 15, 20)
+    result2 = Complement(mixed_set2, interval)
+    # Numbers 1, 5 are in interval (removed), 15, 20 are outside (kept)
+    # Symbols x, y remain in symbolic complement
+    expected2 = Union(FiniteSet(15, 20), Complement(FiniteSet(x, y), interval, evaluate=False))
+    assert result2 == expected2
+
 def test_complement():
     assert Interval(0, 1).complement(S.Reals) == \
         Union(Interval(-oo, 0, True, True), Interval(1, oo, True, True))
