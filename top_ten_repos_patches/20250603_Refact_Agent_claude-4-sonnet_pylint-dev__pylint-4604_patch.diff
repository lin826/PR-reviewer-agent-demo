diff --git a/Dockerfile b/Dockerfile
index aafe62a6a..d57addbf5 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,7 +1,30 @@
-FROM python:3.9.0-alpine3.12
 
-COPY ./ /tmp/build
-WORKDIR /tmp/build
-RUN python setup.py install && rm -rf /tmp/build
+FROM swebench/sweb.eval.x86_64.pylint-dev_1776_pylint-4604:latest
 
-ENTRYPOINT ["pylint"]
+WORKDIR /install
+# Install docker cli
+# Add Docker's official GPG key:
+RUN apt-get update
+RUN apt-get install -y ca-certificates curl
+RUN install -m 0755 -d /etc/apt/keyrings
+RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
+RUN chmod a+r /etc/apt/keyrings/docker.asc
+
+# Add the repository to Apt sources:
+RUN echo   "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu   $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" |   tee /etc/apt/sources.list.d/docker.list > /dev/null
+RUN apt-get update && apt-get install -y docker-ce-cli
+
+# Install required dependencies for SWE-bench (verification)
+RUN apt-get install -y -V ca-certificates lsb-release wget
+RUN wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
+RUN apt-get update
+RUN apt-get install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
+
+# Install SWE repo
+RUN git clone https://github.com/princeton-nlp/SWE-bench.git /SWE-bench
+WORKDIR /SWE-bench
+RUN apt-get install -y python3-venv
+RUN python3 -m venv .venv
+RUN . .venv/bin/activate      &&     pip install --upgrade pip &&     pip install . 
+
+WORKDIR /testbed
diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py
index 3ddafd599..adc5b50f9 100644
--- a/pylint/checkers/variables.py
+++ b/pylint/checkers/variables.py
@@ -1826,6 +1826,30 @@ class VariablesChecker(BaseChecker):
             self._type_annotation_names.append(type_annotation.name)
             return
 
+        if isinstance(type_annotation, astroid.Attribute):
+            # Handle dotted names like abc.ABC or collections.abc.Mapping
+            # We need to collect both the full dotted name and all its prefixes
+            # to handle different import styles
+            
+            def _get_dotted_name(node):
+                """Get the full dotted name from an Attribute node."""
+                if isinstance(node, astroid.Name):
+                    return node.name
+                elif isinstance(node, astroid.Attribute):
+                    base = _get_dotted_name(node.expr)
+                    if base:
+                        return f"{base}.{node.attrname}"
+                return None
+            
+            full_name = _get_dotted_name(type_annotation)
+            if full_name:
+                # Add the full dotted name and all its prefixes
+                parts = full_name.split('.')
+                for i in range(1, len(parts) + 1):
+                    prefix = '.'.join(parts[:i])
+                    self._type_annotation_names.append(prefix)
+            return
+
         if not isinstance(type_annotation, astroid.Subscript):
             return
 
@@ -1837,10 +1861,15 @@ class VariablesChecker(BaseChecker):
             self._type_annotation_names.append(TYPING_MODULE)
             return
 
+        # Handle all Name nodes
         self._type_annotation_names.extend(
             annotation.name
             for annotation in type_annotation.nodes_of_class(astroid.Name)
         )
+        
+        # Handle all Attribute nodes (for dotted names inside subscripts)
+        for attr_node in type_annotation.nodes_of_class(astroid.Attribute):
+            self._store_type_annotation_node(attr_node)
 
     def _store_type_annotation_names(self, node):
         type_annotation = node.type_annotation
