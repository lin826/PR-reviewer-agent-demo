diff --git b/sphinx/ext/autodoc/__init__.py a/sphinx/ext/autodoc/__init__.py
index 44175b994..f8e4be999 100644
--- b/sphinx/ext/autodoc/__init__.py
+++ a/sphinx/ext/autodoc/__init__.py
@@ -1035,72 +1035,43 @@ class DocstringSignatureMixin:
     """
     Mixin for FunctionDocumenter and MethodDocumenter to provide the
     feature of reading the signature from the docstring.
     """
 
-    def _find_signature(self, encoding: str = None) -> Union[Tuple[str, str], None]:
+    def _find_signature(self, encoding: str = None) -> Tuple[str, str]:
         if encoding is not None:
             warnings.warn("The 'encoding' argument to autodoc.%s._find_signature() is "
                           "deprecated." % self.__class__.__name__,
                           RemovedInSphinx40Warning, stacklevel=2)
         docstrings = self.get_doc()
         self._new_docstrings = docstrings[:]
-        results = []
-        
+        result = None
         for i, doclines in enumerate(docstrings):
             # no lines in docstring, no match
             if not doclines:
                 continue
-            
-            # Process all lines that match the signature pattern
-            matched_lines = []
-            for j, line in enumerate(doclines):
-                # Strip leading whitespace to handle indented signatures
-                stripped_line = line.strip()
-                match = py_ext_sig_re.match(stripped_line)
-                if not match:
-                    continue
-                
-                exmod, path, base, args, retann = match.groups()
-                # the base name must match ours
-                valid_names = [self.objpath[-1]]  # type: ignore
-                if isinstance(self, ClassDocumenter):
-                    valid_names.append('__init__')
-                    if hasattr(self.object, '__mro__'):
-                        valid_names.extend(cls.__name__ for cls in self.object.__mro__)
-                
-                # For __init__ method, also accept the class name as the base name
-                if self.objpath[-1] == '__init__' and hasattr(self, 'parent') and hasattr(self.parent, '__name__'):
-                    valid_names.append(self.parent.__name__)
-                
-                if base not in valid_names:
-                    continue
-                
-                # Add to results
-                results.append((args, retann))
-                matched_lines.append(j)
-            
-            # If we found matches, remove them from the docstring
-            if matched_lines:
-                # Create a new docstring without the matched lines
-                new_doclines = [line for j, line in enumerate(doclines) if j not in matched_lines]
-                # re-prepare docstring to ignore more leading indentation
-                tab_width = self.directive.state.document.settings.tab_width  # type: ignore
-                self._new_docstrings[i] = prepare_docstring('\n'.join(new_doclines),
-                                                            tabsize=tab_width)
-        
-        # Store all results for use in format_signature
-        if len(results) > 1:
-            # Store all signatures for use in format_signature
-            self.all_args = results
-            # Return the first result for backward compatibility
-            return results[0]
-        elif len(results) == 1:
-            # For backward compatibility, if there's only one result, don't set all_args
-            return results[0]
-        else:
-            return None
+            # match first line of docstring against signature RE
+            match = py_ext_sig_re.match(doclines[0])
+            if not match:
+                continue
+            exmod, path, base, args, retann = match.groups()
+            # the base name must match ours
+            valid_names = [self.objpath[-1]]  # type: ignore
+            if isinstance(self, ClassDocumenter):
+                valid_names.append('__init__')
+                if hasattr(self.object, '__mro__'):
+                    valid_names.extend(cls.__name__ for cls in self.object.__mro__)
+            if base not in valid_names:
+                continue
+            # re-prepare docstring to ignore more leading indentation
+            tab_width = self.directive.state.document.settings.tab_width  # type: ignore
+            self._new_docstrings[i] = prepare_docstring('\n'.join(doclines[1:]),
+                                                        tabsize=tab_width)
+            result = args, retann
+            # don't look any further
+            break
+        return result
 
     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:
         if encoding is not None:
             warnings.warn("The 'encoding' argument to autodoc.%s.get_doc() is deprecated."
                           % self.__class__.__name__,
@@ -1115,29 +1086,10 @@ class DocstringSignatureMixin:
             # only act if a signature is not explicitly given already, and if
             # the feature is enabled
             result = self._find_signature()
             if result is not None:
                 self.args, self.retann = result
-                
-                # Check if we have multiple signatures
-                if hasattr(self, 'all_args'):
-                    # Format each signature
-                    sigs = []
-                    for args, retann in self.all_args:
-                        # Save the current args and retann
-                        orig_args, orig_retann = self.args, self.retann
-                        # Set the current signature
-                        self.args, self.retann = args, retann
-                        # Format the signature
-                        sig = super().format_signature(**kwargs)  # type: ignore
-                        sigs.append(sig)
-                        # Restore the original args and retann
-                        self.args, self.retann = orig_args, orig_retann
-                    
-                    # Join all signatures with newlines
-                    return "\n".join(sigs)
-        
         return super().format_signature(**kwargs)  # type: ignore
 
 
 class DocstringStripSignatureMixin(DocstringSignatureMixin):
     """
