diff --git a/lib/matplotlib/backends/backend_agg.py b/lib/matplotlib/backends/backend_agg.py
index 7d038a998f..22907b00d9 100644
--- a/lib/matplotlib/backends/backend_agg.py
+++ b/lib/matplotlib/backends/backend_agg.py
@@ -204,11 +204,11 @@ class RendererAgg(RendererBase):
         font = self._prepare_font(prop)
         # We pass '0' for angle here, since it will be rotated (in raster
         # space) in the following call to draw_text_image).
         font.set_text(s, 0, flags=get_hinting_flag())
         font.draw_glyphs_to_bitmap(
-            antialiased=mpl.rcParams['text.antialiased'])
+            antialiased=gc.get_antialiased())
         d = font.get_descent() / 64.0
         # The descent needs to be adjusted for the angle.
         xo, yo = font.get_bitmap_offset()
         xo /= 64.0
         yo /= 64.0
diff --git a/lib/matplotlib/backends/backend_cairo.py b/lib/matplotlib/backends/backend_cairo.py
index 9ccadcdf1c..7f1888b4dd 100644
--- a/lib/matplotlib/backends/backend_cairo.py
+++ b/lib/matplotlib/backends/backend_cairo.py
@@ -203,11 +203,11 @@ class RendererCairo(RendererBase):
             ctx.save()
             ctx.select_font_face(*_cairo_font_args_from_font_prop(prop))
             ctx.set_font_size(self.points_to_pixels(prop.get_size_in_points()))
             opts = cairo.FontOptions()
             opts.set_antialias(
-                cairo.ANTIALIAS_DEFAULT if mpl.rcParams["text.antialiased"]
+                cairo.ANTIALIAS_DEFAULT if gc.get_antialiased()
                 else cairo.ANTIALIAS_NONE)
             ctx.set_font_options(opts)
             if angle:
                 ctx.rotate(np.deg2rad(-angle))
             ctx.show_text(s)
diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py
index 4591316cf9..e900b2a6d6 100644
--- a/lib/matplotlib/text.py
+++ b/lib/matplotlib/text.py
@@ -113,10 +113,11 @@ class Text(Artist):
                  rotation_mode=None,
                  usetex=None,          # defaults to rcParams['text.usetex']
                  wrap=False,
                  transform_rotates_text=False,
                  parse_math=None,    # defaults to rcParams['text.parse_math']
+                 antialiased=None,     # defaults to rcParams['text.antialiased']
                  **kwargs
                  ):
         """
         Create a `.Text` instance at *x*, *y* with string *text*.
 
@@ -147,10 +148,11 @@ class Text(Artist):
             multialignment=multialignment,
             rotation=rotation,
             transform_rotates_text=transform_rotates_text,
             linespacing=linespacing,
             rotation_mode=rotation_mode,
+            antialiased=antialiased,
         )
         self.update(kwargs)
 
     def _reset_visual_defaults(
         self,
@@ -165,10 +167,11 @@ class Text(Artist):
         multialignment=None,
         rotation=None,
         transform_rotates_text=False,
         linespacing=None,
         rotation_mode=None,
+        antialiased=None,
     ):
         self.set_text(text)
         self.set_color(
             color if color is not None else mpl.rcParams["text.color"])
         self.set_fontproperties(fontproperties)
@@ -185,10 +188,11 @@ class Text(Artist):
         self._renderer = None
         if linespacing is None:
             linespacing = 1.2  # Maybe use rcParam later.
         self.set_linespacing(linespacing)
         self.set_rotation_mode(rotation_mode)
+        self.set_antialiased(antialiased)
 
     def update(self, kwargs):
         # docstring inherited
         kwargs = cbook.normalize_kwargs(kwargs, Text)
         sentinel = object()  # bbox can be None, so use another sentinel.
@@ -734,10 +738,11 @@ class Text(Artist):
                 self._bbox_patch.draw(renderer)
 
             gc = renderer.new_gc()
             gc.set_foreground(self.get_color())
             gc.set_alpha(self.get_alpha())
+            gc.set_antialiased(self.get_antialiased())
             gc.set_url(self._url)
             self._set_gc_clip(gc)
 
             angle = self.get_rotation()
 
@@ -772,10 +777,14 @@ class Text(Artist):
 
     def get_color(self):
         """Return the color of the text."""
         return self._color
 
+    def get_antialiased(self):
+        """Return whether antialiased rendering is used."""
+        return self._antialiased
+
     def get_fontproperties(self):
         """Return the `.font_manager.FontProperties`."""
         return self._fontproperties
 
     def get_fontfamily(self):
@@ -960,10 +969,24 @@ class Text(Artist):
         if not cbook._str_equal(color, "auto"):
             mpl.colors._check_color_like(color=color)
         self._color = color
         self.stale = True
 
+    def set_antialiased(self, aa):
+        """
+        Set whether to use antialiased rendering.
+
+        Parameters
+        ----------
+        aa : bool or None
+            If None, defaults to :rc:`text.antialiased`.
+        """
+        if aa is None:
+            aa = mpl.rcParams['text.antialiased']
+        self._antialiased = aa
+        self.stale = True
+
     def set_horizontalalignment(self, align):
         """
         Set the horizontal alignment relative to the anchor point.
 
         See also :doc:`/gallery/text_labels_and_annotations/text_alignment`.
