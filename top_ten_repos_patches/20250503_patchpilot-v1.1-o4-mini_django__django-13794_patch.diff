diff --git a/django/template/base.py b/django/template/base.py
index 85ce3c2abd..cc11566517 100644
--- a/django/template/base.py
+++ b/django/template/base.py
@@ -1042,4 +1042,4 @@ def token_kwargs(bits, parser, support_legacy=False):
             if bits[0] != 'and':
                 return kwargs
             del bits[:1]
-    return kwargs
+    return kwargs
diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 1c844580c6..fa1632b7e2 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -20,9 +20,12 @@ from django.utils.text import (
     Truncator, normalize_newlines, phone2numeric, slugify as _slugify, wrap,
 )
 from django.utils.timesince import timesince, timeuntil
+
 from django.utils.translation import gettext, ngettext
+from django.utils.functional import Promise
 
 from .base import Variable, VariableDoesNotExist
+
 from .library import Library
 
 register = Library()
@@ -677,12 +680,19 @@ def add(value, arg):
     try:
         return int(value) + int(arg)
     except (ValueError, TypeError):
+
         try:
             return value + arg
+        except TypeError:
+            # Handle concatenation where either operand is a lazy object.
+            if isinstance(value, Promise) or isinstance(arg, Promise):
+                return str(value) + str(arg)
+            return ''
         except Exception:
             return ''
 
 
+
 @register.filter(is_safe=False)
 def get_digit(value, arg):
     """
@@ -919,4 +929,4 @@ def pprint(value):
     try:
         return pformat(value)
     except Exception as e:
-        return "Error in formatting: %s: %s" % (e.__class__.__name__, e)
+        return "Error in formatting: %s: %s" % (e.__class__.__name__, e)
diff --git a/django/utils/functional.py b/django/utils/functional.py
index 6d38f932f9..3451f2ee30 100644
--- a/django/utils/functional.py
+++ b/django/utils/functional.py
@@ -171,12 +171,18 @@ def lazy(func, *resultclasses):
         def __hash__(self):
             return hash(self.__cast())
 
+
         def __mod__(self, rhs):
             if self._delegate_text:
                 return str(self) % rhs
             return self.__cast() % rhs
 
+        def __radd__(self, other):
+            # Support reversed addition to allow concatenation with lazy objects.
+            return other + self.__cast__()
+
         def __deepcopy__(self, memo):
+
             # Instances of this class are effectively immutable. It's just a
             # collection of functions. So we don't need to do anything
             # complicated for copying.
@@ -414,4 +420,4 @@ def partition(predicate, values):
     results = ([], [])
     for item in values:
         results[predicate(item)].append(item)
-    return results
+    return results
diff --git a/django/utils/safestring.py b/django/utils/safestring.py
index a484f678e2..abb5e6762e 100644
--- a/django/utils/safestring.py
+++ b/django/utils/safestring.py
@@ -60,4 +60,4 @@ def mark_safe(s):
         return s
     if callable(s):
         return _safety_decorator(mark_safe, s)
-    return SafeString(s)
+    return SafeString(s)
diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py
index 8042f6fdc4..511fcb0d29 100644
--- a/django/utils/translation/trans_real.py
+++ b/django/utils/translation/trans_real.py
@@ -577,4 +577,4 @@ def parse_accept_lang_header(lang_string):
             priority = 1.0
         result.append((lang, priority))
     result.sort(key=lambda k: k[1], reverse=True)
-    return tuple(result)
+    return tuple(result)
