diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py
index a59f0c8dcb..c22e720c57 100644
--- a/django/db/migrations/writer.py
+++ b/django/db/migrations/writer.py
@@ -175,7 +175,17 @@ class MigrationWriter:
 
         # Sort imports by the package / module to be imported (the part after
         # "from" in "from ... import ..." or after "import" in "import ...").
-        sorted_imports = sorted(imports, key=lambda i: i.split()[1])
+        # Place all import module statements before from module import objects
+        # in each section, as per Django coding style and isort defaults.
+        import_statements = [imp for imp in imports if imp.startswith('import ')]
+        from_statements = [imp for imp in imports if imp.startswith('from ')]
+        
+        # Sort each group separately by module name
+        import_statements.sort(key=lambda i: i.split()[1])
+        from_statements.sort(key=lambda i: i.split()[1])
+        
+        # Combine with import statements first
+        sorted_imports = import_statements + from_statements
         items["imports"] = "\n".join(sorted_imports) + "\n" if imports else ""
         if migration_imports:
             items["imports"] += (
diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py
index 1c11c68e97..351b215785 100644
--- a/tests/migrations/test_writer.py
+++ b/tests/migrations/test_writer.py
@@ -922,6 +922,59 @@ class WriterTests(SimpleTestCase):
             output,
         )
 
+    def test_sorted_imports_with_mixed_types(self):
+        """
+        Test that import statements come before from statements when mixed,
+        following Django coding style and isort defaults.
+        """
+        # Create a migration that would generate mixed import types
+        migration = type(
+            "Migration",
+            (migrations.Migration,),
+            {
+                "operations": [],
+                "dependencies": [],
+            },
+        )
+        writer = MigrationWriter(migration)
+        
+        # Simulate the imports that would be collected from various operations
+        test_imports = {
+            "import datetime",
+            "import time", 
+            "from django.db import migrations, models"
+        }
+        
+        # Apply the sorting logic from writer.py
+        import_statements = [imp for imp in test_imports if imp.startswith('import ')]
+        from_statements = [imp for imp in test_imports if imp.startswith('from ')]
+        
+        import_statements.sort(key=lambda i: i.split()[1])
+        from_statements.sort(key=lambda i: i.split()[1])
+        
+        sorted_imports = import_statements + from_statements
+        
+        # Verify that all import statements come before all from statements
+        expected_order = [
+            'import datetime',
+            'import time', 
+            'from django.db import migrations, models'
+        ]
+        self.assertEqual(sorted_imports, expected_order)
+        
+        # Verify that import statements are grouped before from statements
+        import_indices = [i for i, imp in enumerate(sorted_imports) if imp.startswith('import ')]
+        from_indices = [i for i, imp in enumerate(sorted_imports) if imp.startswith('from ')]
+        
+        if import_indices and from_indices:
+            last_import_idx = max(import_indices)
+            first_from_idx = min(from_indices)
+            self.assertLess(
+                last_import_idx, 
+                first_from_idx,
+                "All 'import' statements should come before all 'from' statements"
+            )
+
     def test_migration_file_header_comments(self):
         """
         Test comments at top of file.
