diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index 75b0646512..700c1019d3 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -478,8 +478,15 @@ class BaseFormSet(RenderableFormMixin):
 def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,
                     can_delete=False, max_num=None, validate_max=False,
                     min_num=None, validate_min=False, absolute_max=None,
-                    can_delete_extra=True, renderer=None):
-    """Return a FormSet for the given form class."""
+                    can_delete_extra=True, can_add_new=True, renderer=None):
+    """
+    Return a FormSet for the given form class.
+    
+    can_add_new: If False, prevents new objects from being created via the formset.
+                 This provides a reliable way to create "edit only" formsets that
+                 only allow editing existing objects, even if additional forms are
+                 submitted via JavaScript or POST data manipulation.
+    """
     if min_num is None:
         min_num = DEFAULT_MIN_NUM
     if max_num is None:
@@ -499,6 +506,7 @@ def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,
         'can_order': can_order,
         'can_delete': can_delete,
         'can_delete_extra': can_delete_extra,
+        'can_add_new': can_add_new,
         'min_num': min_num,
         'max_num': max_num,
         'absolute_max': absolute_max,
diff --git a/django/forms/models.py b/django/forms/models.py
index 7effb202e3..2b015fec05 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -682,6 +682,14 @@ class BaseModelFormSet(BaseFormSet):
 
     def clean(self):
         self.validate_unique()
+        # Check if new objects are being created when can_add_new=False
+        if not getattr(self, 'can_add_new', True):
+            for form in self.extra_forms:
+                if form.has_changed() and not (self.can_delete and self._should_delete_form(form)):
+                    raise ValidationError(
+                        gettext("Adding new objects is not allowed."),
+                        code='can_add_new_false'
+                    )
 
     def validate_unique(self):
         # Collect unique_checks and date_checks to run from all the forms.
@@ -820,6 +828,9 @@ class BaseModelFormSet(BaseFormSet):
             # object.
             if self.can_delete and self._should_delete_form(form):
                 continue
+            # If can_add_new is False, don't save new objects
+            if not getattr(self, 'can_add_new', True):
+                continue
             self.new_objects.append(self.save_new(form, commit=commit))
             if not commit:
                 self.saved_forms.append(form)
@@ -875,8 +886,16 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
                          widgets=None, validate_max=False, localized_fields=None,
                          labels=None, help_texts=None, error_messages=None,
                          min_num=None, validate_min=False, field_classes=None,
-                         absolute_max=None, can_delete_extra=True, renderer=None):
-    """Return a FormSet class for the given Django model class."""
+                         absolute_max=None, can_delete_extra=True, can_add_new=True,
+                         renderer=None):
+    """
+    Return a FormSet class for the given Django model class.
+    
+    can_add_new: If False, prevents new model instances from being created via the
+                 formset. This provides a reliable way to create "edit only" formsets
+                 that only allow editing existing model instances, even if additional
+                 forms are submitted via JavaScript or POST data manipulation.
+    """
     meta = getattr(form, 'Meta', None)
     if (getattr(meta, 'fields', fields) is None and
             getattr(meta, 'exclude', exclude) is None):
@@ -894,7 +913,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
                               can_order=can_order, can_delete=can_delete,
                               validate_min=validate_min, validate_max=validate_max,
                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,
-                              renderer=renderer)
+                              can_add_new=can_add_new, renderer=renderer)
     FormSet.model = model
     return FormSet
 
@@ -1076,12 +1095,19 @@ def inlineformset_factory(parent_model, model, form=ModelForm,
                           widgets=None, validate_max=False, localized_fields=None,
                           labels=None, help_texts=None, error_messages=None,
                           min_num=None, validate_min=False, field_classes=None,
-                          absolute_max=None, can_delete_extra=True, renderer=None):
+                          absolute_max=None, can_delete_extra=True, can_add_new=True,
+                          renderer=None):
     """
     Return an ``InlineFormSet`` for the given kwargs.
 
     ``fk_name`` must be provided if ``model`` has more than one ``ForeignKey``
     to ``parent_model``.
+    
+    ``can_add_new``: If False, prevents new model instances from being created via
+                     the inline formset. This provides a reliable way to create
+                     "edit only" inline formsets that only allow editing existing
+                     related model instances, even if additional forms are submitted
+                     via JavaScript or POST data manipulation.
     """
     fk = _get_foreign_key(parent_model, model, fk_name=fk_name)
     # enforce a max_num=1 when the foreign key to the parent model is unique.
@@ -1108,6 +1134,7 @@ def inlineformset_factory(parent_model, model, form=ModelForm,
         'field_classes': field_classes,
         'absolute_max': absolute_max,
         'can_delete_extra': can_delete_extra,
+        'can_add_new': can_add_new,
         'renderer': renderer,
     }
     FormSet = modelformset_factory(model, **kwargs)
