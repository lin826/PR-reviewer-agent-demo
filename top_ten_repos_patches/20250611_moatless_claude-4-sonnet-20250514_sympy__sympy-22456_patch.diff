--- a/sympy/codegen/ast.py
+++ b/sympy/codegen/ast.py
@@ -894,18 +894,62 @@
     String('foo')
 
     """
-    __slots__ = ('text',)
-    not_in_args = ['text']
+    __slots__ = ('_text',)
+    not_in_args = []
     is_Atom = True
+    
+    @property
+    def text(self):
+        """Return the text as a string."""
+        return self._text.name
 
     @classmethod
-    def _construct_text(cls, text):
-        if not isinstance(text, str):
+    def _construct__text(cls, text):
+        from sympy.core.symbol import Str
+        if isinstance(text, Str):
+            return text
+        elif isinstance(text, str):
+            return Str(text)
+        else:
             raise TypeError("Argument text is not a string type.")
-        return text
 
     def _sympystr(self, printer, *args, **kwargs):
         return self.text
+    
+    def __repr__(self):
+        return f"String({repr(self.text)})"
+    
+    def _repr_pretty_(self, p, cycle):
+        """Custom pretty printing for IPython/Jupyter."""
+        if cycle:
+            p.text('...')
+        else:
+            p.text(f"String({repr(self.text)})")
+    
+    def __srepr__(self):
+        """Custom srepr representation."""
+        return f"String({repr(self.text)})"
+    
+    def _sympyrepr(self, printer, *args, **kwargs):
+        """Custom _sympyrepr for ReprPrinter."""
+        return f"String({repr(self.text)})"
+    
+    @classmethod
+    def _patch_repr_printer(cls):
+        """Patch the ReprPrinter to handle String correctly."""
+        from sympy.printing.repr import ReprPrinter
+        def _print_String(self, expr):
+            return f"String({repr(expr.text)})"
+        ReprPrinter._print_String = _print_String
+
+# Patch the ReprPrinter when this module is imported
+try:
+    from sympy.printing.repr import ReprPrinter
+    def _print_String(self, expr):
+        return f"String({repr(expr.text)})"
+    ReprPrinter._print_String = _print_String
+except ImportError:
+    pass
 
 
 class QuotedString(String):
