diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index 3a462f1c4c..be4592e998 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -88,7 +88,11 @@ class Collector:
         if not objs:
             return []
         new_objs = []
-        model = objs[0].__class__
+        # Use objs.model to avoid forcing QuerySet evaluation when objs is a QuerySet
+        if hasattr(objs, 'model'):
+            model = objs.model
+        else:
+            model = objs[0].__class__
         instances = self.data.setdefault(model, set())
         for obj in objs:
             if obj not in instances:
@@ -111,7 +115,11 @@ class Collector:
         """
         if not objs:
             return
-        model = objs[0].__class__
+        # Use objs.model to avoid forcing QuerySet evaluation when objs is a QuerySet
+        if hasattr(objs, 'model'):
+            model = objs.model
+        else:
+            model = objs[0].__class__
         self.field_updates.setdefault(
             model, {}).setdefault(
             (field, value), set()).update(objs)
@@ -193,7 +201,11 @@ class Collector:
         if not new_objs:
             return
 
-        model = new_objs[0].__class__
+        # Use objs.model to avoid forcing QuerySet evaluation when objs is a QuerySet
+        if hasattr(objs, 'model'):
+            model = objs.model
+        else:
+            model = new_objs[0].__class__
 
         if not keep_parents:
             # Recursively collect concrete model's parent models, but not their
@@ -234,7 +246,7 @@ class Collector:
         """
         return related.related_model._base_manager.using(self.using).filter(
             **{"%s__in" % related.field.name: objs}
-        )
+        ).only('pk', related.field.name)
 
     def instances_with_model(self):
         for model, instances in self.data.items():
diff --git a/django/db/models/query.py b/django/db/models/query.py
index 84236107f3..e15f2a2018 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -695,6 +695,10 @@ class QuerySet:
         del_query.query.select_related = False
         del_query.query.clear_ordering(force_empty=True)
 
+        # Optimize for deletion: only fetch the primary key to avoid loading
+        # unnecessary fields that might contain problematic data (e.g., invalid unicode)
+        del_query = del_query.only('pk')
+
         collector = Collector(using=del_query.db)
         collector.collect(del_query)
         deleted, _rows_count = collector.delete()
