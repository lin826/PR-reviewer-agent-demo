diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py
index 335773c6a..c1c4c9454 100644
--- a/sklearn/utils/_set_output.py
+++ b/sklearn/utils/_set_output.py
@@ -12,6 +12,7 @@ def _wrap_in_pandas_container(
     *,
     columns,
     index=None,
+    dtypes=None,
 ):
     """Create a Pandas DataFrame.
 
@@ -36,6 +37,10 @@ def _wrap_in_pandas_container(
     index : array-like, default=None
         Index for data.
 
+    dtypes : dict or Series, default=None
+        The data types to use for the columns of the output DataFrame. If None,
+        the default pandas dtypes are used.
+
     Returns
     -------
     dataframe : DataFrame
@@ -59,7 +64,21 @@ def _wrap_in_pandas_container(
             data_to_wrap.index = index
         return data_to_wrap
 
-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)
+    df = pd.DataFrame(data_to_wrap, index=index, columns=columns)
+    
+    # Apply dtypes if provided
+    if dtypes is not None:
+        # Only apply dtypes for columns that exist in both the DataFrame and dtypes
+        common_columns = set(df.columns) & set(dtypes.keys() if isinstance(dtypes, dict) else dtypes.index)
+        if common_columns:
+            for col in common_columns:
+                try:
+                    df[col] = df[col].astype(dtypes[col])
+                except (ValueError, TypeError):
+                    # If conversion fails, keep the original dtype
+                    pass
+    
+    return df
 
 
 def _get_output_config(method, estimator=None):
@@ -81,19 +100,33 @@ def _get_output_config(method, estimator=None):
 
         - "dense": specifies the dense container for `method`. This can be
           `"default"` or `"pandas"`.
+        - "preserve_dtypes": whether to preserve original dtypes when converting
+          to pandas DataFrame.
     """
     est_sklearn_output_config = getattr(estimator, "_sklearn_output_config", {})
+    
+    # Get the dense config
     if method in est_sklearn_output_config:
-        dense_config = est_sklearn_output_config[method]
+        if isinstance(est_sklearn_output_config[method], dict):
+            config = est_sklearn_output_config[method].copy()
+            dense_config = config.get("dense", "default")
+        else:
+            dense_config = est_sklearn_output_config[method]
+            config = {"dense": dense_config}
     else:
         dense_config = get_config()[f"{method}_output"]
+        config = {"dense": dense_config}
 
     if dense_config not in {"default", "pandas"}:
         raise ValueError(
             f"output config must be 'default' or 'pandas' got {dense_config}"
         )
+    
+    # Ensure preserve_dtypes is in the config
+    if "preserve_dtypes" not in config:
+        config["preserve_dtypes"] = False
 
-    return {"dense": dense_config}
+    return config
 
 
 def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):
@@ -126,11 +159,17 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):
     if output_config["dense"] == "default" or not _auto_wrap_is_configured(estimator):
         return data_to_wrap
 
+    # Get dtypes from original input if it's a DataFrame and preserve_dtypes is enabled
+    dtypes = None
+    if hasattr(original_input, "dtypes") and output_config.get("preserve_dtypes", False):
+        dtypes = original_input.dtypes
+
     # dense_config == "pandas"
     return _wrap_in_pandas_container(
         data_to_wrap=data_to_wrap,
         index=getattr(original_input, "index", None),
         columns=estimator.get_feature_names_out,
+        dtypes=dtypes,
     )
 
 
@@ -208,7 +247,7 @@ class _SetOutputMixin:
             setattr(cls, method, wrapped_method)
 
     @available_if(_auto_wrap_is_configured)
-    def set_output(self, *, transform=None):
+    def set_output(self, *, transform=None, preserve_dtypes=False):
         """Set output container.
 
         See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`
@@ -223,22 +262,41 @@ class _SetOutputMixin:
             - `"pandas"`: DataFrame output
             - `None`: Transform configuration is unchanged
 
+        preserve_dtypes : bool, default=False
+            Whether to preserve original dtypes when converting to pandas DataFrame.
+            Only used when `transform="pandas"`.
+
         Returns
         -------
         self : estimator instance
             Estimator instance.
         """
-        if transform is None:
+        if transform is None and not preserve_dtypes:
             return self
 
         if not hasattr(self, "_sklearn_output_config"):
             self._sklearn_output_config = {}
 
-        self._sklearn_output_config["transform"] = transform
+        if "transform" not in self._sklearn_output_config:
+            # Initialize with default if not already set
+            self._sklearn_output_config["transform"] = {"dense": "default", "preserve_dtypes": False}
+        elif not isinstance(self._sklearn_output_config["transform"], dict):
+            # Convert string config to dict
+            self._sklearn_output_config["transform"] = {
+                "dense": self._sklearn_output_config["transform"],
+                "preserve_dtypes": False
+            }
+
+        # Update config
+        if transform is not None:
+            self._sklearn_output_config["transform"]["dense"] = transform
+        
+        self._sklearn_output_config["transform"]["preserve_dtypes"] = preserve_dtypes
+        
         return self
 
 
-def _safe_set_output(estimator, *, transform=None):
+def _safe_set_output(estimator, *, transform=None, preserve_dtypes=False):
     """Safely call estimator.set_output and error if it not available.
 
     This is used by meta-estimators to set the output for child estimators.
@@ -256,6 +314,10 @@ def _safe_set_output(estimator, *, transform=None):
 
         If `None`, this operation is a no-op.
 
+    preserve_dtypes : bool, default=False
+        Whether to preserve original dtypes when converting to pandas DataFrame.
+        Only used when `transform="pandas"`.
+
     Returns
     -------
     estimator : estimator instance
@@ -264,7 +326,7 @@ def _safe_set_output(estimator, *, transform=None):
     set_output_for_transform = (
         hasattr(estimator, "transform")
         or hasattr(estimator, "fit_transform")
-        and transform is not None
+        and (transform is not None or preserve_dtypes)
     )
     if not set_output_for_transform:
         # If estimator can not transform, then `set_output` does not need to be
@@ -276,4 +338,4 @@ def _safe_set_output(estimator, *, transform=None):
             f"Unable to configure output for {estimator} because `set_output` "
             "is not available."
         )
-    return estimator.set_output(transform=transform)
+    return estimator.set_output(transform=transform, preserve_dtypes=preserve_dtypes)
