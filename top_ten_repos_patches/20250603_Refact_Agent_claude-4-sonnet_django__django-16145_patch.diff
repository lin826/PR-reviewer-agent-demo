diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py
index 3c39f57e4d..4f6134acbd 100644
--- a/django/core/management/commands/runserver.py
+++ b/django/core/management/commands/runserver.py
@@ -137,6 +137,11 @@ class Command(BaseCommand):
         self.check_migrations()
         now = datetime.now().strftime("%B %d, %Y - %X")
         self.stdout.write(now)
+        # Convert "0" to "0.0.0.0" for display purposes to match documentation
+        display_addr = self.addr
+        if self.addr == "0":
+            display_addr = "0.0.0.0"
+        
         self.stdout.write(
             (
                 "Django version %(version)s, using settings %(settings)r\n"
@@ -147,7 +152,7 @@ class Command(BaseCommand):
                 "version": self.get_version(),
                 "settings": settings.SETTINGS_MODULE,
                 "protocol": self.protocol,
-                "addr": "[%s]" % self.addr if self._raw_ipv6 else self.addr,
+                "addr": "[%s]" % display_addr if self._raw_ipv6 else display_addr,
                 "port": self.port,
                 "quit_command": quit_command,
             }
diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py
index 9d2ca839d5..c9ca71423c 100644
--- a/tests/admin_scripts/tests.py
+++ b/tests/admin_scripts/tests.py
@@ -1587,6 +1587,36 @@ class ManageRunserver(SimpleTestCase):
         call_command(self.cmd, addrport="7000")
         self.assertServerSettings("127.0.0.1", "7000")
 
+        # Test the "0" shorthand for "0.0.0.0"
+        call_command(self.cmd, addrport="0:8000")
+        self.assertServerSettings("0", "8000")
+
+    def test_runserver_zero_display(self):
+        """Test that "0" is displayed as "0.0.0.0" in the server startup message."""
+        from io import StringIO
+        
+        output = StringIO()
+        cmd = RunserverCommand(stdout=output)
+        
+        # Mock the run method to avoid actually starting the server
+        def mock_run(**options):
+            return
+        cmd.run = mock_run
+        
+        # Test the display logic directly
+        cmd.addr = "0"
+        cmd.port = "8000"
+        cmd.protocol = "http"
+        cmd._raw_ipv6 = False
+        
+        # Simulate the display logic from inner_run
+        display_addr = cmd.addr
+        if cmd.addr == "0":
+            display_addr = "0.0.0.0"
+        
+        expected_url = f"{cmd.protocol}://{display_addr}:{cmd.port}/"
+        self.assertEqual(expected_url, "http://0.0.0.0:8000/")
+
     @unittest.skipUnless(socket.has_ipv6, "platform doesn't support IPv6")
     def test_runner_addrport_ipv6(self):
         call_command(self.cmd, addrport="", use_ipv6=True)
