diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py
index dd5317087..eb4342f30 100644
--- a/sphinx/builders/linkcheck.py
+++ b/sphinx/builders/linkcheck.py
@@ -77,7 +77,7 @@ def check_anchor(response: requests.requests.Response, anchor: str) -> bool:
 
 class CheckExternalLinksBuilder(Builder):
     """
-    Checks for broken external links.
+    Checks for broken external and internal links.
     """
     name = 'linkcheck'
     epilog = __('Look for any errors in the above output or in '
@@ -213,7 +213,64 @@ class CheckExternalLinksBuilder(Builder):
             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):
                 return 'unchecked', '', 0
             elif not uri.startswith(('http:', 'https:')):
-                return 'local', '', 0
+                # Check if local link references an existing file
+                doc_dir = path.dirname(self.env.doc2path(docname, base=None))
+                try:
+                    # Split anchor from target if present
+                    if '#' in uri:
+                        target_uri, anchor = uri.split('#', 1)
+                    else:
+                        target_uri, anchor = uri, None
+                    
+                    # Try to find referenced document
+                    target_file = path.normpath(path.join(doc_dir, target_uri))
+                    valid_file = False
+                    
+                    if path.isfile(target_file):
+                        valid_file = True
+                    else:
+                        # Also try with various extensions
+                        for suffix in self.env.config.source_suffix:
+                            if path.isfile(target_file + suffix):
+                                valid_file = True
+                                target_file = target_file + suffix
+                                break
+                                
+                        if not valid_file:
+                            # Try resolving as a document name
+                            try:
+                                target_doc = self.env.doc2path(target_uri, base=None)
+                                if path.isfile(target_doc):
+                                    valid_file = True
+                                    target_file = target_doc
+                            except Exception:
+                                # If doc2path fails, continue with other checks
+                                pass
+                    
+                    if not valid_file:
+                        return 'broken', 'File not found', 0
+                        
+                    # If we have an anchor and the file exists, check if the anchor exists
+                    if anchor and self.app.config.linkcheck_anchors:
+                        # Check if the target is a reST document with the label
+                        try:
+                            if any(target_file.endswith(suffix) for suffix in self.env.config.source_suffix):
+                                # For reST files, look for the label pattern
+                                with open(target_file, 'r') as f:
+                                    content = f.read()
+                                    # Look for patterns like ".. _label:" or ".. _`label`:"
+                                    label_patterns = [
+                                        f".. _{anchor}:", 
+                                        f".. _`{anchor}`:"
+                                    ]
+                                    if not any(pattern in content for pattern in label_patterns):
+                                        return 'broken', f"Anchor '{anchor}' not found", 0
+                        except Exception as err:
+                            return 'broken', str(err), 0
+                                        
+                    return 'working', '', 0
+                except Exception as err:
+                    return 'broken', str(err), 0
             elif uri in self.good:
                 return 'working', 'old', 0
             elif uri in self.broken:

