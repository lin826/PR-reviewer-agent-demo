diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py
index fe52d881d..61071f7a8 100644
--- a/sphinx/domains/cpp.py
+++ b/sphinx/domains/cpp.py
@@ -856,9 +856,10 @@ class ASTStringLiteral(ASTLiteral):
 
 
 class ASTCharLiteral(ASTLiteral):
-    def __init__(self, prefix: str, data: str) -> None:
+    def __init__(self, prefix: str, data: str, suffix: str = None) -> None:
         self.prefix = prefix  # may be None when no prefix
         self.data = data
+        self.suffix = suffix  # may be None when no user-defined suffix
         assert prefix in _id_char_from_prefix
         self.type = _id_char_from_prefix[prefix]
         decoded = data.encode().decode('unicode-escape')
@@ -869,9 +870,12 @@ class ASTCharLiteral(ASTLiteral):
 
     def _stringify(self, transform: StringifyTransform) -> str:
         if self.prefix is None:
-            return "'" + self.data + "'"
+            result = "'" + self.data + "'"
         else:
-            return self.prefix + "'" + self.data + "'"
+            result = self.prefix + "'" + self.data + "'"
+        if self.suffix:
+            result += self.suffix
+        return result
 
     def get_id(self, version: int) -> str:
         return self.type + str(self.value)
@@ -4635,6 +4639,13 @@ class DefinitionParser(BaseParser):
                 self.fail("Unexpected end during inside string.")
             elif self.current_char == '"' and not escape:
                 self.pos += 1
+                # Check for user-defined literal suffix
+                if not self.eof and self.current_char == '_':
+                    suffix_start = self.pos
+                    self.pos += 1  # Skip the underscore
+                    # Consume all alphanumeric characters and underscores for the UDL suffix
+                    while not self.eof and (self.current_char.isalnum() or self.current_char == '_'):
+                        self.pos += 1
                 break
             elif self.current_char == '\\':
                 escape = True
@@ -4662,8 +4673,20 @@ class DefinitionParser(BaseParser):
                       integer_literal_re, octal_literal_re]:
             pos = self.pos
             if self.match(regex):
+                # Handle standard suffixes
                 while self.current_char in 'uUlLfF':
                     self.pos += 1
+                
+                # Handle user-defined literal suffix
+                if not self.eof and self.current_char == '_':
+                    suffix_start = self.pos
+                    self.pos += 1  # Skip the underscore
+                    # Consume all alphanumeric characters and underscores for the UDL suffix
+                    while not self.eof and (self.current_char.isalnum() or self.current_char == '_'):
+                        self.pos += 1
+                    suffix = self.definition[suffix_start:self.pos]
+                    return ASTNumberLiteral(self.definition[pos:suffix_start] + suffix)
+                
                 return ASTNumberLiteral(self.definition[pos:self.pos])
 
         string = self._parse_string()
@@ -4674,8 +4697,17 @@ class DefinitionParser(BaseParser):
         if self.match(char_literal_re):
             prefix = self.last_match.group(1)  # may be None when no prefix
             data = self.last_match.group(2)
+            # Check for user-defined literal suffix
+            suffix = None
+            if not self.eof and self.current_char == '_':
+                suffix_start = self.pos
+                self.pos += 1  # Skip the underscore
+                # Consume all alphanumeric characters and underscores for the UDL suffix
+                while not self.eof and (self.current_char.isalnum() or self.current_char == '_'):
+                    self.pos += 1
+                suffix = self.definition[suffix_start:self.pos]
             try:
-                return ASTCharLiteral(prefix, data)
+                return ASTCharLiteral(prefix, data, suffix)
             except UnicodeDecodeError as e:
                 self.fail("Can not handle character literal. Internal error was: %s" % e)
             except UnsupportedMultiCharacterCharLiteral:
