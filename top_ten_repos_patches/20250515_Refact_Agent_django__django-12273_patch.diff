diff --git a/django/db/models/utils.py b/django/db/models/utils.py
index 989667dc8c..b23a21db47 100644
--- a/django/db/models/utils.py
+++ b/django/db/models/utils.py
@@ -1,30 +1,64 @@
+"""
+Utilities for model operations.
+"""
+
+
 def make_model_tuple(model):
     """
-    Take a model or a string of the form "app_label.ModelName" and return a
+    Takes a model or a string of the form "app_label.ModelName" and returns a
     corresponding ("app_label", "modelname") tuple. If a tuple is passed in,
-    assume it's a valid model tuple already and return it unchanged.
+    it's assumed to be a valid model tuple already and returned unchanged.
     """
-    try:
-        if isinstance(model, tuple):
-            model_tuple = model
-        elif isinstance(model, str):
+    if isinstance(model, tuple):
+        model_tuple = model
+    elif isinstance(model, str):
+        try:
             app_label, model_name = model.split(".")
-            model_tuple = app_label, model_name.lower()
-        else:
-            model_tuple = model._meta.app_label, model._meta.model_name
-        assert len(model_tuple) == 2
-        return model_tuple
-    except (ValueError, AssertionError):
-        raise ValueError(
-            "Invalid model reference '%s'. String model references "
-            "must be of the form 'app_label.ModelName'." % model
-        )
+        except ValueError:
+            raise ValueError(
+                "Invalid model reference '%s'. String model references "
+                "must be of the form 'app_label.ModelName'." % model
+            )
+        model_tuple = (app_label, model_name.lower())
+    else:
+        model_tuple = (model._meta.app_label, model._meta.model_name)
+    return model_tuple
 
 
 def resolve_callables(mapping):
     """
-    Generate key/value pairs for the given mapping where the values are
-    evaluated if they're callable.
+    Transforms any callables in a mapping into the objects they return. For
+    example, this lets us write `QuerySet.create(pub_date=timezone.now)` instead
+    of `QuerySet.create(pub_date=timezone.now())`.
     """
+    result = {}
     for k, v in mapping.items():
-        yield k, v() if callable(v) else v
+        if callable(v):
+            result[k] = v()
+        else:
+            result[k] = v
+    return result
+
+
+def reset_pk(instance):
+    """
+    Reset the primary key of a model instance to create a new instance on save.
+    
+    This function handles multi-table inheritance by resetting both the parent's
+    primary key and any OneToOneField that serves as a primary key in child models.
+    
+    Args:
+        instance: A Django model instance
+        
+    Returns:
+        The instance with primary key(s) reset
+    """
+    # Reset the primary key field of the model
+    for field in instance._meta.fields:
+        if field.primary_key:
+            setattr(instance, field.attname, None)
+    
+    # Make Django treat this as a new instance
+    instance._state.adding = True
+    
+    return instance
