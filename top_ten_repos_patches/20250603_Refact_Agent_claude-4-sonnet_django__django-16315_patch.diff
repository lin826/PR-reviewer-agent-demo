diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py
index 76ca815765..f0df2bcbf5 100644
--- a/django/db/backends/mysql/operations.py
+++ b/django/db/backends/mysql/operations.py
@@ -435,6 +435,12 @@ class DatabaseOperations(BaseDatabaseOperations):
 
     def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fields):
         if on_conflict == OnConflict.UPDATE:
+            # Create a mapping from field names to database column names
+            field_map = {field.name: field.column for field in fields}
+            
+            # Map field names to their database column names
+            update_columns = [field_map.get(name, name) for name in update_fields]
+            
             conflict_suffix_sql = "ON DUPLICATE KEY UPDATE %(fields)s"
             # The use of VALUES() is deprecated in MySQL 8.0.20+. Instead, use
             # aliases for the new row and its columns available in MySQL
@@ -449,13 +455,13 @@ class DatabaseOperations(BaseDatabaseOperations):
             else:
                 field_sql = "%(field)s = VALUE(%(field)s)"
 
-            fields = ", ".join(
+            fields_sql = ", ".join(
                 [
-                    field_sql % {"field": field}
-                    for field in map(self.quote_name, update_fields)
+                    field_sql % {"field": self.quote_name(column)}
+                    for column in update_columns
                 ]
             )
-            return conflict_suffix_sql % {"fields": fields}
+            return conflict_suffix_sql % {"fields": fields_sql}
         return super().on_conflict_suffix_sql(
             fields,
             on_conflict,
diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py
index 62273fc43c..8c846cfca0 100644
--- a/django/db/backends/postgresql/operations.py
+++ b/django/db/backends/postgresql/operations.py
@@ -353,12 +353,19 @@ class DatabaseOperations(BaseDatabaseOperations):
         if on_conflict == OnConflict.IGNORE:
             return "ON CONFLICT DO NOTHING"
         if on_conflict == OnConflict.UPDATE:
+            # Create a mapping from field names to database column names
+            field_map = {field.name: field.column for field in fields}
+            
+            # Map field names to their database column names
+            unique_columns = [field_map.get(name, name) for name in unique_fields]
+            update_columns = [field_map.get(name, name) for name in update_fields]
+            
             return "ON CONFLICT(%s) DO UPDATE SET %s" % (
-                ", ".join(map(self.quote_name, unique_fields)),
+                ", ".join(map(self.quote_name, unique_columns)),
                 ", ".join(
                     [
-                        f"{field} = EXCLUDED.{field}"
-                        for field in map(self.quote_name, update_fields)
+                        f"{self.quote_name(column)} = EXCLUDED.{self.quote_name(column)}"
+                        for column in update_columns
                     ]
                 ),
             )
diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py
index bb84d52071..9855ce795a 100644
--- a/django/db/backends/sqlite3/operations.py
+++ b/django/db/backends/sqlite3/operations.py
@@ -417,12 +417,19 @@ class DatabaseOperations(BaseDatabaseOperations):
             on_conflict == OnConflict.UPDATE
             and self.connection.features.supports_update_conflicts_with_target
         ):
+            # Create a mapping from field names to database column names
+            field_map = {field.name: field.column for field in fields}
+            
+            # Map field names to their database column names
+            unique_columns = [field_map.get(name, name) for name in unique_fields]
+            update_columns = [field_map.get(name, name) for name in update_fields]
+            
             return "ON CONFLICT(%s) DO UPDATE SET %s" % (
-                ", ".join(map(self.quote_name, unique_fields)),
+                ", ".join(map(self.quote_name, unique_columns)),
                 ", ".join(
                     [
-                        f"{field} = EXCLUDED.{field}"
-                        for field in map(self.quote_name, update_fields)
+                        f"{self.quote_name(column)} = EXCLUDED.{self.quote_name(column)}"
+                        for column in update_columns
                     ]
                 ),
             )
diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py
index 27abc416bd..dcfd101355 100644
--- a/tests/bulk_create/models.py
+++ b/tests/bulk_create/models.py
@@ -136,3 +136,10 @@ class RelatedModel(models.Model):
     name = models.CharField(max_length=15, null=True)
     country = models.OneToOneField(Country, models.CASCADE, primary_key=True)
     big_auto_fields = models.ManyToManyField(BigAutoFieldModel)
+
+
+class UpsertConflictWithDbColumn(models.Model):
+    """Model with db_column attributes to test bulk_create with update_conflicts."""
+    number = models.IntegerField(unique=True, db_column="NumberColumn")
+    rank = models.IntegerField(db_column="RankColumn")
+    name = models.CharField(max_length=15, db_column="NameColumn")
diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py
index 6c490d1235..9ed5848dea 100644
--- a/tests/bulk_create/tests.py
+++ b/tests/bulk_create/tests.py
@@ -772,3 +772,47 @@ class BulkCreateTests(TestCase):
     @skipIfDBFeature("supports_update_conflicts_with_target")
     def test_update_conflicts_no_unique_fields(self):
         self._test_update_conflicts([])
+
+    @skipUnlessDBFeature(
+        "supports_update_conflicts", "supports_update_conflicts_with_target"
+    )
+    def test_update_conflicts_with_db_column(self):
+        """
+        Test bulk_create with update_conflicts when fields have db_column attributes.
+        This ensures that the ON CONFLICT clause uses database column names instead
+        of Django field names.
+        """
+        from .models import UpsertConflictWithDbColumn
+        
+        # Create initial objects
+        initial_objects = [
+            UpsertConflictWithDbColumn(number=1, rank=1, name="Alice"),
+            UpsertConflictWithDbColumn(number=2, rank=2, name="Bob"),
+        ]
+        UpsertConflictWithDbColumn.objects.bulk_create(initial_objects)
+        
+        # Create conflicting objects that should update existing ones
+        conflicting_objects = [
+            UpsertConflictWithDbColumn(number=1, rank=10, name="Alice Updated"),
+            UpsertConflictWithDbColumn(number=2, rank=20, name="Bob Updated"),
+            UpsertConflictWithDbColumn(number=3, rank=30, name="Charlie"),
+        ]
+        
+        # This should work without errors, using correct database column names
+        UpsertConflictWithDbColumn.objects.bulk_create(
+            conflicting_objects,
+            update_conflicts=True,
+            update_fields=["rank", "name"],
+            unique_fields=["number"],
+        )
+        
+        # Verify the results
+        self.assertEqual(UpsertConflictWithDbColumn.objects.count(), 3)
+        self.assertCountEqual(
+            UpsertConflictWithDbColumn.objects.values("number", "rank", "name"),
+            [
+                {"number": 1, "rank": 10, "name": "Alice Updated"},
+                {"number": 2, "rank": 20, "name": "Bob Updated"},
+                {"number": 3, "rank": 30, "name": "Charlie"},
+            ],
+        )
