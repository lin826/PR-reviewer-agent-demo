diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 9b00e24509..5f621335d9 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -43,16 +43,21 @@ class ResolverMatch:
         self.app_names = [x for x in app_names if x] if app_names else []
         self.app_name = ':'.join(self.app_names)
         self.namespaces = [x for x in namespaces if x] if namespaces else []
         self.namespace = ':'.join(self.namespaces)
 
-        if not hasattr(func, '__name__'):
+        # Determine the function to use for path construction
+        func_for_path = func
+        if isinstance(func, functools.partial):
+            func_for_path = func.func
+
+        if not hasattr(func_for_path, '__name__'):
             # A class-based view
-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__
+            self._func_path = func_for_path.__class__.__module__ + '.' + func_for_path.__class__.__name__
         else:
             # A function-based view
-            self._func_path = func.__module__ + '.' + func.__name__
+            self._func_path = func_for_path.__module__ + '.' + func_for_path.__name__
 
         view_path = url_name or self._func_path
         self.view_name = ':'.join(self.namespaces + [view_path])
 
     def __getitem__(self, index):
diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py
index 09028be795..f30e69a629 100644
--- a/tests/urlpatterns_reverse/tests.py
+++ b/tests/urlpatterns_reverse/tests.py
@@ -1143,10 +1143,48 @@ class ResolverMatchTests(SimpleTestCase):
             "ResolverMatch(func=urlpatterns_reverse.views.empty_view, "
             "args=('42', '37'), kwargs={}, url_name=no-kwargs, app_names=[], "
             "namespaces=[], route=^no_kwargs/([0-9]+)/([0-9]+)/$)",
         )
 
+    def test_repr_functools_partial(self):
+        """
+        Test that ResolverMatch.__repr__() handles functools.partial nicely.
+        """
+        import functools
+        from .views import empty_view
+        
+        # Create a partial function
+        partial_view = functools.partial(empty_view, extra_arg="test")
+        
+        # Create a ResolverMatch with the partial function
+        match = ResolverMatch(
+            func=partial_view,
+            args=('arg1', 'arg2'),
+            kwargs={'kwarg1': 'value1'},
+            url_name='test-partial',
+            app_names=['app1'],
+            namespaces=['ns1'],
+            route='test/route/'
+        )
+        
+        # The repr should show the underlying function, not 'functools.partial'
+        expected_repr = (
+            "ResolverMatch(func=urlpatterns_reverse.views.empty_view, "
+            "args=('arg1', 'arg2'), kwargs={'kwarg1': 'value1'}, "
+            "url_name=test-partial, app_names=['app1'], namespaces=['ns1'], "
+            "route=test/route/)"
+        )
+        self.assertEqual(repr(match), expected_repr)
+        
+        # The func attribute should still be the partial object
+        self.assertIsInstance(match.func, functools.partial)
+        self.assertEqual(match.func.func, empty_view)
+        self.assertEqual(match.func.keywords, {'extra_arg': 'test'})
+        
+        # The _func_path should be the underlying function path
+        self.assertEqual(match._func_path, 'urlpatterns_reverse.views.empty_view')
+
 
 @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')
 class ErroneousViewTests(SimpleTestCase):
 
     def test_noncallable_view(self):
