diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py
index ea7e3a2d94..317e46dd81 100644
--- a/sympy/printing/mathematica.py
+++ b/sympy/printing/mathematica.py
@@ -114,10 +114,42 @@ def _print_Sum(self, expr):
     def _print_Derivative(self, expr):
         dexpr = expr.expr
         dvars = [i[0] if i[1] == 1 else i for i in expr.variable_count]
         return "Hold[D[" + ', '.join(self.doprint(a) for a in [dexpr] + dvars) + "]]"
 
+    def _print_MaxMin(self, expr, func_name):
+        """Helper method for printing Max and Min with proper Mathematica syntax"""
+        from sympy.core.symbol import Symbol
+        from sympy.core.numbers import Number
+        
+        def sort_key(arg):
+            # Symbols come first, then numbers, then other expressions
+            if isinstance(arg, Symbol):
+                return (0, str(arg))
+            elif isinstance(arg, Number):
+                try:
+                    # Handle finite numbers
+                    if arg.is_finite:
+                        return (1, float(arg))
+                    else:
+                        # Handle infinities
+                        return (1, float('inf') if arg.is_positive else float('-inf'))
+                except (ValueError, TypeError):
+                    # Fallback for numbers that can't be converted to float
+                    return (1, str(arg))
+            else:
+                return (2, str(arg))
+        
+        sorted_args = sorted(expr.args, key=sort_key)
+        return "%s[%s]" % (func_name, self.stringify(sorted_args, ", "))
+
+    def _print_Max(self, expr):
+        return self._print_MaxMin(expr, "Max")
+
+    def _print_Min(self, expr):
+        return self._print_MaxMin(expr, "Min")
+
 
 def mathematica_code(expr, **settings):
     r"""Converts an expr to a string of the Wolfram Mathematica code
 
     Examples
