diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 5240b07cd6..85f2a346b4 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -464,9 +464,16 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
             # It is allowed to filter on values that would be found from local
             # model anyways. For example, if you filter on employee__department__id,
             # then the id value would be found already from employee__department_id.
+            # However, manually created OneToOneField with primary_key=True should be 
+            # treated as a regular relation, not as concrete inheritance.
+            is_manual_pk_one2one = (
+                getattr(field, 'primary_key', False) and 
+                field.__class__.__name__ == 'OneToOneField' and
+                not getattr(field, 'auto_created', False)
+            )
             if not prev_field or (
                 prev_field.is_relation
-                and field not in prev_field.path_infos[-1].target_fields
+                and (is_manual_pk_one2one or field not in prev_field.path_infos[-1].target_fields)
             ):
                 relation_parts.append(part)
             if not getattr(field, "path_infos", None):
diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py
index c6b4a565c8..98f5005fd1 100644
--- a/tests/modeladmin/tests.py
+++ b/tests/modeladmin/tests.py
@@ -154,6 +154,28 @@ class ModelAdminTests(TestCase):
             ma.lookup_allowed("employee__department__code", "test_value"), True
         )
 
+    @isolate_apps("modeladmin")
+    def test_lookup_allowed_foreign_primary(self):
+        class Country(models.Model):
+            name = models.CharField(max_length=256)
+
+        class Place(models.Model):
+            country = models.ForeignKey(Country, models.CASCADE)
+
+        class Restaurant(models.Model):
+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)
+
+        class Waiter(models.Model):
+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)
+
+        class WaiterAdmin(ModelAdmin):
+            list_filter = [
+                'restaurant__place__country',
+            ]
+
+        ma = WaiterAdmin(Waiter, self.site)
+        self.assertIs(ma.lookup_allowed('restaurant__place__country', 'test_value'), True)
+
     def test_field_arguments(self):
         # If fields is specified, fieldsets_add and fieldsets_change should
         # just stick the fields into a formsets structure and return it.
