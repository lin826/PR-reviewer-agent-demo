--- a/xarray/core/computation.py
+++ b/xarray/core/computation.py
@@ -1727,7 +1727,7 @@
     return result.transpose(*all_dims, missing_dims="ignore")
 
 
-def where(cond, x, y):
+def where(cond, x, y, keep_attrs=None):
     """Return elements from `x` or `y` depending on `cond`.
 
     Performs xarray-like broadcasting across input arguments.
@@ -1743,6 +1743,11 @@
         values to choose from where `cond` is True
     y : scalar, array, Variable, DataArray or Dataset
         values to choose from where `cond` is False
+    keep_attrs : bool, optional
+        If True, the attributes (attrs) will be copied from the first input that
+        has attributes (prioritizing `x`, then `y`) to the new object. If False, 
+        the new object will be returned without attributes. If None (default), 
+        the global default set by the "keep_attrs" option is used.
 
     Returns
     -------
@@ -1808,8 +1813,15 @@
     Dataset.where, DataArray.where :
         equivalent methods
     """
-    # alignment for three arguments is complicated, so don't support it yet
-    return apply_ufunc(
+    from .dataarray import DataArray  
+    from .dataset import Dataset
+    from .options import _get_keep_attrs
+    
+    if keep_attrs is None:
+        keep_attrs = _get_keep_attrs(default=True)
+    
+    # Compute result without attributes first
+    result = apply_ufunc(
         duck_array_ops.where,
         cond,
         x,
@@ -1817,7 +1829,29 @@
         join="exact",
         dataset_join="exact",
         dask="allowed",
+        keep_attrs=False,  # Handle attributes manually
     )
+    
+    # Handle attributes manually when keep_attrs is True
+    # Priority: take from x first, then y, then cond
+    if keep_attrs:
+        attrs_to_copy = {}
+        
+        # First try to get attributes from x
+        if isinstance(x, (DataArray, Dataset)) and hasattr(x, 'attrs') and x.attrs:
+            attrs_to_copy = x.attrs
+        # If x doesn't have attributes, try y
+        elif isinstance(y, (DataArray, Dataset)) and hasattr(y, 'attrs') and y.attrs:
+            attrs_to_copy = y.attrs
+        # If neither x nor y have attributes, try cond
+        elif isinstance(cond, (DataArray, Dataset)) and hasattr(cond, 'attrs') and cond.attrs:
+            attrs_to_copy = cond.attrs
+            
+        # Apply the attributes to the result
+        if attrs_to_copy and isinstance(result, (DataArray, Dataset)):
+            result.attrs.update(attrs_to_copy)
+    
+    return result
 
 
 def polyval(coord, coeffs, degree_dim="degree"):
