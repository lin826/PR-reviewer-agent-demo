diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 1cecb1f79..b32952c9a 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -2670,25 +2670,75 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #
         real_modname = self.get_attr(self.parent or self.object, '__module__', None)
         return real_modname or self.modname
 
+
+class ClassPropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  # type: ignore
+    """
+    Specialized Documenter subclass for @classmethod @property combinations.
+    """
+    objtype = 'classproperty'
+    directivetype = 'property'  # Use the same directive type as property
+    member_order = 60
+
+    # Higher priority than PropertyDocumenter to check class properties first
+    priority = PropertyDocumenter.priority + 0.1
+
+    @classmethod
+    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
+                          ) -> bool:
+        if not isinstance(parent, ClassDocumenter):
+            return False
+        
+        # Check if this is a class property by examining the class __dict__
+        try:
+            parent_cls = parent.object
+            return inspect.is_classmethod_property(parent_cls, membername)
+        except (AttributeError, TypeError):
+            pass
+            
+        return False
+        
+    def import_object(self, raiseerror: bool = False) -> bool:
+        """Import the object and extract the class property docstring."""
+        ret = super().import_object(raiseerror)
+        if not ret:
+            return ret
+            
+        # Extract the docstring from the classmethod property
+        try:
+            cls_dict_obj = self.parent.__dict__.get(self.object_name)
+            if isinstance(cls_dict_obj, classmethod):
+                inner_func = cls_dict_obj.__func__
+                if isinstance(inner_func, property):
+                    # Replace the object with a property-like object that has the correct docstring
+                    self._docstring = inner_func.__doc__
+                    
+                    # Setting classmethod flag to display it correctly
+                    self.is_classmethod = True
+        except (AttributeError, TypeError):
+            pass
+            
+        return ret
+    
     def add_directive_header(self, sig: str) -> None:
         super().add_directive_header(sig)
+        
+        # Add the classmethod flag to show it's a class property
         sourcename = self.get_sourcename()
-        if inspect.isabstractmethod(self.object):
-            self.add_line('   :abstractmethod:', sourcename)
+        self.add_line('   :classmethod:', sourcename)
+    
+    def get_doc(self, encoding: str = None, ignore: int = None) -> Optional[List[List[str]]]:
+        """Retrieve docstring manually if we extracted it during import_object."""
+        if hasattr(self, '_docstring') and self._docstring:
+            return [[self._docstring]]
+        
+        return super().get_doc(encoding, ignore)
 
-        if safe_getattr(self.object, 'fget', None) and self.config.autodoc_typehints != 'none':
-            try:
-                signature = inspect.signature(self.object.fget,
-                                              type_aliases=self.config.autodoc_type_aliases)
-                if signature.return_annotation is not Parameter.empty:
-                    objrepr = stringify_typehint(signature.return_annotation)
-                    self.add_line('   :type: ' + objrepr, sourcename)
-            except TypeError as exc:
-                logger.warning(__("Failed to get a function signature for %s: %s"),
-                               self.fullname, exc)
-                return None
-            except ValueError:
-                return None
+    def document_members(self, all_members: bool = False) -> None:
+        pass
+
+    def get_real_modname(self) -> str:
+        real_modname = self.get_attr(self.parent or self.object, '__module__', None)
+        return real_modname or self.modname
 
 
 class NewTypeAttributeDocumenter(AttributeDocumenter):
diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py
index 23dd9e930..3a07c01ed 100644
--- a/sphinx/util/inspect.py
+++ b/sphinx/util/inspect.py
@@ -392,6 +392,22 @@ def isproperty(obj: Any) -> bool:
 
     return isinstance(obj, property)
 
+def is_classmethod_property(cls: Any, name: str) -> bool:
+    """Check if the specified member is a combination of @classmethod @property."""
+    cls_dict_obj = cls.__dict__.get(name)
+    
+    # If it's a classmethod, check if it wraps a property
+    if isinstance(cls_dict_obj, classmethod):
+        # Try to inspect the inner function
+        try:
+            inner_func = cls_dict_obj.__func__
+            if isinstance(inner_func, property):
+                return True
+        except (AttributeError, TypeError):
+            pass
+    
+    return False
+
 
 def isgenericalias(obj: Any) -> bool:
     """Check if the object is GenericAlias."""

