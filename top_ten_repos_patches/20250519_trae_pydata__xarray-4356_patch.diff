diff --git a/xarray/core/nanops.py b/xarray/core/nanops.py
index 41c8d258..2483b67c 100644
--- a/xarray/core/nanops.py
+++ b/xarray/core/nanops.py
@@ -26,23 +26,31 @@ def _maybe_null_out(result, axis, mask, min_count=1):
     """
     xarray version of pandas.core.nanops._maybe_null_out
     """
-    if hasattr(axis, "__len__"):  # if tuple or list
-        raise ValueError(
-            "min_count is not available for reduction with more than one dimensions."
-        )
-
+    # Calculate the total number of valid (non-NaN) elements
+    valid_count = mask.size - mask.sum()
+    
+    # For complete reduction to scalar with min_count, check immediately
+    if hasattr(axis, "__len__") and len(axis) == mask.ndim:  # if reducing all dimensions
+        if valid_count < min_count:
+            return np.nan
+    elif axis is None:  # another way to reduce all dimensions
+        if valid_count < min_count:
+            return np.nan
+    
+    # Handle partial reductions (not reducing to scalar)
     if axis is not None and getattr(result, "ndim", False):
-        null_mask = (mask.shape[axis] - mask.sum(axis) - min_count) < 0
+        if hasattr(axis, "__len__"):  # multi-dimension reduction
+            # Multi-axis reduction but not to a scalar
+            null_mask = (mask.size - mask.sum(axis=axis) - min_count) < 0
+        else:
+            # Single axis reduction
+            null_mask = (mask.shape[axis] - mask.sum(axis) - min_count) < 0
+            
         if null_mask.any():
             dtype, fill_value = dtypes.maybe_promote(result.dtype)
             result = result.astype(dtype)
             result[null_mask] = fill_value
-
-    elif getattr(result, "dtype", None) not in dtypes.NAT_TYPES:
-        null_mask = mask.size - mask.sum()
-        if null_mask < min_count:
-            result = np.nan
-
+    
     return result
 
 

