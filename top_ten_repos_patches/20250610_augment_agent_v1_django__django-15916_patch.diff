diff --git a/django/forms/models.py b/django/forms/models.py
index 192d9fad94..69af2ebeab 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -261,11 +261,18 @@ class ModelFormMetaclass(DeclarativeFieldsMetaclass):
         for b in bases:
             if hasattr(b, "Meta") and hasattr(b.Meta, "formfield_callback"):
                 base_formfield_callback = b.Meta.formfield_callback
                 break
 
-        formfield_callback = attrs.pop("formfield_callback", base_formfield_callback)
+        # Check if the current class defines a Meta with formfield_callback
+        meta_formfield_callback = None
+        if "Meta" in attrs and hasattr(attrs["Meta"], "formfield_callback"):
+            meta_formfield_callback = attrs["Meta"].formfield_callback
+
+        # Meta formfield_callback takes precedence over class-level formfield_callback
+        class_formfield_callback = attrs.pop("formfield_callback", None)
+        formfield_callback = meta_formfield_callback or class_formfield_callback or base_formfield_callback
 
         new_class = super().__new__(mcs, name, bases, attrs)
 
         if bases == (BaseModelForm,):
             return new_class
@@ -628,10 +635,15 @@ def modelform_factory(
 
     # If parent form class already has an inner Meta, the Meta we're
     # creating needs to inherit from the parent's inner meta.
     bases = (form.Meta,) if hasattr(form, "Meta") else ()
     Meta = type("Meta", bases, attrs)
+    
+    # If no formfield_callback was explicitly provided, check if the base form has one
+    if formfield_callback is None and hasattr(form, "Meta") and hasattr(form.Meta, "formfield_callback"):
+        formfield_callback = form.Meta.formfield_callback
+    
     if formfield_callback:
         Meta.formfield_callback = staticmethod(formfield_callback)
     # Give this new form class a reasonable name.
     class_name = model.__name__ + "Form"
 
