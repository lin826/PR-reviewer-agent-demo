diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py
index 2a19bc9a6..29bf10600 100644
--- a/sklearn/ensemble/tests/test_voting.py
+++ b/sklearn/ensemble/tests/test_voting.py
@@ -507,3 +507,41 @@ def test_transform():
             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),
             eclf2.transform(X)
     )
+
+
+@pytest.mark.filterwarnings('ignore: Default solver will be changed')  # 0.22
+@pytest.mark.filterwarnings('ignore: Default multi_class will')  # 0.22
+@pytest.mark.filterwarnings('ignore:The default value of n_estimators')
+def test_none_estimator_with_sample_weight():
+    """Test that VotingClassifier and VotingRegressor work with None estimators and sample_weight."""
+    # Test VotingClassifier
+    X, y = datasets.load_iris(return_X_y=True)
+    sample_weight = np.ones(y.shape)
+    
+    # Create classifier with all estimators
+    clf1 = LogisticRegression(solver='lbfgs', multi_class='auto', random_state=123)
+    clf2 = RandomForestClassifier(n_estimators=10, random_state=123)
+    eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2)])
+    
+    # Fit with sample_weight - should work
+    eclf.fit(X, y, sample_weight=sample_weight)
+    
+    # Set one estimator to None and fit again with sample_weight - should work
+    eclf.set_params(lr=None)
+    eclf.fit(X, y, sample_weight=sample_weight)
+    
+    # Test VotingRegressor
+    X_r, y_r = datasets.load_boston(return_X_y=True)
+    sample_weight_r = np.ones(y_r.shape)
+    
+    # Create regressor with all estimators
+    reg1 = DummyRegressor(strategy='mean')
+    reg2 = DummyRegressor(strategy='median')
+    ereg = VotingRegressor(estimators=[('mean', reg1), ('median', reg2)])
+    
+    # Fit with sample_weight - should work
+    ereg.fit(X_r, y_r, sample_weight=sample_weight_r)
+    
+    # Set one estimator to None and fit again with sample_weight - should work
+    ereg.set_params(mean=None)
+    ereg.fit(X_r, y_r, sample_weight=sample_weight_r)
diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py
index 7afa7180c..13accdcec 100644
--- a/sklearn/ensemble/voting.py
+++ b/sklearn/ensemble/voting.py
@@ -78,7 +78,7 @@ class _BaseVoting(_BaseComposition, TransformerMixin):
 
         if sample_weight is not None:
             for name, step in self.estimators:
-                if not has_fit_parameter(step, 'sample_weight'):
+                if step is not None and not has_fit_parameter(step, 'sample_weight'):
                     raise ValueError('Underlying estimator \'%s\' does not'
                                      ' support sample weights.' % name)
 
