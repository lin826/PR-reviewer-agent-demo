diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py
index ea7e3a2d94..806ac3e994 100644
--- a/sympy/printing/mathematica.py
+++ b/sympy/printing/mathematica.py
@@ -116,6 +116,12 @@ def _print_Derivative(self, expr):
         dvars = [i[0] if i[1] == 1 else i for i in expr.variable_count]
         return "Hold[D[" + ', '.join(self.doprint(a) for a in [dexpr] + dvars) + "]]"
 
+    def _print_Max(self, expr):
+        return "Max[%s]" % self.stringify(expr.args, ", ")
+
+    def _print_Min(self, expr):
+        return "Min[%s]" % self.stringify(expr.args, ", ")
+
 
 def mathematica_code(expr, **settings):
     r"""Converts an expr to a string of the Wolfram Mathematica code
diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py
index dd636d0623..cea1eae16e 100644
--- a/sympy/printing/tests/test_mathematica.py
+++ b/sympy/printing/tests/test_mathematica.py
@@ -2,7 +2,7 @@
                         Rational, Integer, Tuple, Derivative)
 from sympy.integrals import Integral
 from sympy.concrete import Sum
-from sympy.functions import exp, sin, cos, conjugate
+from sympy.functions import exp, sin, cos, conjugate, Max, Min
 
 from sympy import mathematica_code as mcode
 
@@ -90,3 +90,31 @@ def test_Sum():
                      (y, -oo, oo))) == \
         "Hold[Sum[Exp[-x^2 - y^2], {x, -Infinity, Infinity}, " \
         "{y, -Infinity, Infinity}]]"
+
+
+def test_Max():
+    # Test basic Max functionality
+    assert mcode(Max(x, 2)) == "Max[2, x]"
+    assert mcode(Max(x, y)) == "Max[x, y]"
+    assert mcode(Max(x, y, z)) == "Max[x, y, z]"
+    
+    # Test with numbers - when all numeric, Max evaluates to the maximum value
+    assert mcode(Max(1, 2, 3)) == "3"  # Max simplifies to single value
+    assert mcode(Max(x, 1, 2)) == "Max[2, x]"  # Max keeps the larger number and x
+    
+    # Test nested expressions
+    assert mcode(Max(x + 1, y - 1)) == "Max[x + 1, y - 1]"
+
+
+def test_Min():
+    # Test basic Min functionality  
+    assert mcode(Min(x, 2)) == "Min[2, x]"
+    assert mcode(Min(x, y)) == "Min[x, y]"
+    assert mcode(Min(x, y, z)) == "Min[x, y, z]"
+    
+    # Test with numbers - when all numeric, Min evaluates to the minimum value
+    assert mcode(Min(1, 2, 3)) == "1"  # Min simplifies to single value
+    assert mcode(Min(x, 1, 2)) == "Min[1, x]"  # Min keeps the smaller number and x
+    
+    # Test nested expressions
+    assert mcode(Min(x + 1, y - 1)) == "Min[x + 1, y - 1]"
