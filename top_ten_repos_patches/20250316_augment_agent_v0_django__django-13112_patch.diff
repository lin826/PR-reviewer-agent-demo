diff --git a/django/apps/registry.py b/django/apps/registry.py
index 408964a146..e68ba2cfed 100644
--- a/django/apps/registry.py
+++ b/django/apps/registry.py
@@ -152,10 +152,15 @@ class Apps:
         """
         self.check_apps_ready()
         try:
             return self.app_configs[app_label]
         except KeyError:
+            # Try case-insensitive lookup
+            for label, app_config in self.app_configs.items():
+                if label.lower() == app_label.lower():
+                    return app_config
+            
             message = "No installed app with label '%s'." % app_label
             for app_config in self.get_app_configs():
                 if app_config.name == app_label:
                     message += " Did you mean '%s'?" % app_config.label
                     break
@@ -212,10 +217,11 @@ class Apps:
     def register_model(self, app_label, model):
         # Since this method is called when models are imported, it cannot
         # perform imports because of the risk of import loops. It mustn't
         # call get_app_config().
         model_name = model._meta.model_name
+        app_label = app_label.lower()  # Ensure app_label is lowercase for consistency
         app_models = self.all_models[app_label]
         if model_name in app_models:
             if (model.__name__ == app_models[model_name].__name__ and
                     model.__module__ == app_models[model_name].__module__):
                 warnings.warn(
@@ -265,10 +271,11 @@ class Apps:
         the given app_label.
 
         It's safe to call this method at import time, even while the registry
         is being populated.
         """
+        app_label = app_label.lower()  # Ensure app_label is lowercase for consistency
         model = self.all_models[app_label].get(model_name.lower())
         if model is None:
             raise LookupError(
                 "Model '%s.%s' not registered." % (app_label, model_name))
         return model
diff --git a/django/db/models/utils.py b/django/db/models/utils.py
index 989667dc8c..8d6e9b6a97 100644
--- a/django/db/models/utils.py
+++ b/django/db/models/utils.py
@@ -7,13 +7,13 @@ def make_model_tuple(model):
     try:
         if isinstance(model, tuple):
             model_tuple = model
         elif isinstance(model, str):
             app_label, model_name = model.split(".")
-            model_tuple = app_label, model_name.lower()
+            model_tuple = app_label.lower(), model_name.lower()
         else:
-            model_tuple = model._meta.app_label, model._meta.model_name
+            model_tuple = model._meta.app_label.lower(), model._meta.model_name
         assert len(model_tuple) == 2
         return model_tuple
     except (ValueError, AssertionError):
         raise ValueError(
             "Invalid model reference '%s'. String model references "
