diff --git a/django/core/validators.py b/django/core/validators.py
index a385819510..3475f456f1 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -99,10 +99,13 @@ class URLValidator(RegexValidator):
             self.schemes = schemes
 
     def __call__(self, value):
         if not isinstance(value, str):
             raise ValidationError(self.message, code=self.code, params={'value': value})
+        # Check for characters that should not be in URLs
+        if any(char in value for char in '\n\r\t'):
+            raise ValidationError(self.message, code=self.code, params={'value': value})
         # Check if the scheme is valid.
         scheme = value.split('://')[0].lower()
         if scheme not in self.schemes:
             raise ValidationError(self.message, code=self.code, params={'value': value})
 
diff --git a/django/forms/fields.py b/django/forms/fields.py
index daa65d61eb..5e937d2606 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -679,10 +679,16 @@ class URLField(CharField):
             except ValueError:
                 # urlparse.urlsplit can raise a ValueError with some
                 # misformatted URLs.
                 raise ValidationError(self.error_messages['invalid'], code='invalid')
 
+        # Check for characters that should not be in URLs before any processing
+        if value not in self.empty_values:
+            value_str = str(value)
+            if any(char in value_str for char in '\n\r\t'):
+                raise ValidationError(self.error_messages['invalid'], code='invalid')
+        
         value = super().to_python(value)
         if value:
             url_fields = split_url(value)
             if not url_fields[0]:
                 # If no URL scheme given, assume http://
