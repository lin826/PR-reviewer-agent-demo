diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index f2ca8c8df9..cbf0c6623e 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -562,6 +562,13 @@ class BaseDatabaseSchemaEditor:
         }
         meta_index_names = {constraint.name for constraint in model._meta.indexes}
         columns = [model._meta.get_field(field).column for field in fields]
+        
+        # When looking for unique constraints to delete, exclude primary key constraints
+        # to avoid conflicts when a field is both a primary key and in unique_together
+        constraint_kwargs = constraint_kwargs.copy()
+        if constraint_kwargs.get('unique'):
+            constraint_kwargs['primary_key'] = False
+        
         constraint_names = self._constraint_names(
             model,
             columns,
diff --git a/tests/schema/models.py b/tests/schema/models.py
index 55f7d2c13c..0baebd0bb7 100644
--- a/tests/schema/models.py
+++ b/tests/schema/models.py
@@ -227,6 +227,15 @@ class UniqueTest(models.Model):
         unique_together = ["year", "slug"]
 
 
+class UniqueTogetherPrimaryKeyTest(models.Model):
+    """Test model with unique_together on primary key - the problematic case"""
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        apps = new_apps
+        unique_together = [("id",)]
+
+
 class Node(models.Model):
     node_id = models.AutoField(primary_key=True)
     parent = models.ForeignKey("self", models.CASCADE, null=True, blank=True)
diff --git a/tests/schema/tests.py b/tests/schema/tests.py
index fe717f8841..ee56e4ebd7 100644
--- a/tests/schema/tests.py
+++ b/tests/schema/tests.py
@@ -84,6 +84,7 @@ from .models import (
     TagUniqueRename,
     Thing,
     UniqueTest,
+    UniqueTogetherPrimaryKeyTest,
     new_apps,
 )
 
@@ -2548,6 +2549,39 @@ class SchemaTests(TransactionTestCase):
         with connection.schema_editor() as editor:
             editor.alter_unique_together(Book, [["author", "title"]], [])
 
+    def test_unique_together_on_primary_key(self):
+        """
+        Test that unique_together constraints on primary key fields can be removed.
+        
+        This addresses the issue where removing a unique_together constraint on a 
+        primary key field would fail with "Found wrong number (2) of constraints"
+        because both the primary key constraint and the unique_together constraint
+        were found, but only one was expected.
+        """
+        # Create the table with unique_together on primary key
+        with connection.schema_editor() as editor:
+            editor.create_model(UniqueTogetherPrimaryKeyTest)
+        
+        # This operation should succeed with the fix
+        # Before the fix, this would raise:
+        # ValueError: Found wrong number (2) of constraints for table_name(id)
+        with connection.schema_editor() as editor:
+            editor.alter_unique_together(
+                UniqueTogetherPrimaryKeyTest,
+                [('id',)],  # old - remove the erroneous unique_together on primary key
+                []  # new - no unique_together
+            )
+        
+        # Verify the operation completed successfully by checking constraints
+        constraints = self.get_constraints(UniqueTogetherPrimaryKeyTest._meta.db_table)
+        
+        # There should still be a primary key constraint
+        primary_key_constraints = [
+            name for name, details in constraints.items()
+            if details.get('primary_key')
+        ]
+        self.assertEqual(len(primary_key_constraints), 1)
+
     def test_unique_together_with_fk_with_existing_index(self):
         """
         Tests removing and adding unique_together constraints that include
