diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 28374272f4..9e21771bae 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -514,21 +514,41 @@ class Field(RegisterLookupMixin):
         return self.__class__(*args, **kwargs)
 
     def __eq__(self, other):
         # Needed for @total_ordering
         if isinstance(other, Field):
-            return self.creation_counter == other.creation_counter
+            if self.creation_counter != other.creation_counter:
+                return False
+            # If creation_counters are equal, also compare models if both have them
+            self_model = getattr(self, 'model', None)
+            other_model = getattr(other, 'model', None)
+            return self_model == other_model
         return NotImplemented
 
     def __lt__(self, other):
         # This is needed because bisect does not take a comparison function.
         if isinstance(other, Field):
-            return self.creation_counter < other.creation_counter
+            if self.creation_counter != other.creation_counter:
+                return self.creation_counter < other.creation_counter
+            # If creation_counters are equal, compare by model
+            self_model = getattr(self, 'model', None)
+            other_model = getattr(other, 'model', None)
+            if self_model is None and other_model is None:
+                return False  # Both are equal
+            if self_model is None:
+                return True  # Fields without model come first
+            if other_model is None:
+                return False  # Fields with model come after
+            # Compare models by their string representation for consistent ordering
+            return str(self_model) < str(other_model)
         return NotImplemented
 
     def __hash__(self):
-        return hash(self.creation_counter)
+        model = getattr(self, 'model', None)
+        if model is None:
+            return hash(self.creation_counter)
+        return hash((self.creation_counter, model))
 
     def __deepcopy__(self, memodict):
         # We don't have to deepcopy very much here, since most things are not
         # intended to be altered after initial creation.
         obj = copy.copy(self)
