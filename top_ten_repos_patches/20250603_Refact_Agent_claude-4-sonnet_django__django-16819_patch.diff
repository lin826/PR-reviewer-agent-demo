diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 967a91fdc8..75d7b7db98 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -807,6 +807,9 @@ class IndexOperation(Operation):
     def model_name_lower(self):
         return self.model_name.lower()
 
+    def references_model(self, name, app_label):
+        return name.lower() == self.model_name_lower
+
 
 class AddIndex(IndexOperation):
     """Add an index on a model."""
@@ -861,6 +864,23 @@ class AddIndex(IndexOperation):
     def migration_name_fragment(self):
         return "%s_%s" % (self.model_name_lower, self.index.name.lower())
 
+    def reduce(self, operation, app_label):
+        if (
+            isinstance(operation, RemoveIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.index.name == operation.name
+        ):
+            # AddIndex followed by RemoveIndex with same name cancels out
+            return []
+        elif (
+            isinstance(operation, AddIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.index.name == operation.index.name
+        ):
+            # AddIndex followed by AddIndex with same name, keep the second one
+            return [operation]
+        return super().reduce(operation, app_label)
+
 
 class RemoveIndex(IndexOperation):
     """Remove an index from a model."""
@@ -904,6 +924,23 @@ class RemoveIndex(IndexOperation):
     def migration_name_fragment(self):
         return "remove_%s_%s" % (self.model_name_lower, self.name.lower())
 
+    def reduce(self, operation, app_label):
+        if (
+            isinstance(operation, AddIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.name == operation.index.name
+        ):
+            # RemoveIndex followed by AddIndex with same name, keep the AddIndex
+            return [operation]
+        elif (
+            isinstance(operation, RemoveIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.name == operation.name
+        ):
+            # RemoveIndex followed by RemoveIndex with same name, keep one
+            return [operation]
+        return super().reduce(operation, app_label)
+
 
 class RenameIndex(IndexOperation):
     """Rename an index."""
diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py
index 8cd4c67fbd..4162a29ea4 100644
--- a/tests/migrations/test_optimizer.py
+++ b/tests/migrations/test_optimizer.py
@@ -1158,3 +1158,81 @@ class OptimizerTests(SimpleTestCase):
                 ),
             ]
         )
+
+    def test_add_remove_index(self):
+        """
+        AddIndex and RemoveIndex should optimize.
+        """
+        # AddIndex + RemoveIndex should cancel out
+        self.assertOptimizesTo(
+            [
+                migrations.AddIndex(
+                    "Pony", models.Index(fields=["pink"], name="pony_pink_idx")
+                ),
+                migrations.RemoveIndex("Pony", name="pony_pink_idx"),
+            ],
+            [],
+        )
+
+        # RemoveIndex + AddIndex should optimize to just AddIndex
+        self.assertOptimizesTo(
+            [
+                migrations.RemoveIndex("Pony", name="pony_pink_idx"),
+                migrations.AddIndex(
+                    "Pony", models.Index(fields=["pink", "weight"], name="pony_pink_idx")
+                ),
+            ],
+            [
+                migrations.AddIndex(
+                    "Pony", models.Index(fields=["pink", "weight"], name="pony_pink_idx")
+                ),
+            ],
+        )
+
+        # AddIndex + AddIndex with same name should keep the last one
+        self.assertOptimizesTo(
+            [
+                migrations.AddIndex(
+                    "Pony", models.Index(fields=["pink"], name="pony_pink_idx")
+                ),
+                migrations.AddIndex(
+                    "Pony", models.Index(fields=["pink", "weight"], name="pony_pink_idx")
+                ),
+            ],
+            [
+                migrations.AddIndex(
+                    "Pony", models.Index(fields=["pink", "weight"], name="pony_pink_idx")
+                ),
+            ],
+        )
+
+        # RemoveIndex + RemoveIndex with same name should keep one
+        self.assertOptimizesTo(
+            [
+                migrations.RemoveIndex("Pony", name="pony_pink_idx"),
+                migrations.RemoveIndex("Pony", name="pony_pink_idx"),
+            ],
+            [
+                migrations.RemoveIndex("Pony", name="pony_pink_idx"),
+            ],
+        )
+
+        # Different models should not optimize
+        self.assertDoesNotOptimize(
+            [
+                migrations.AddIndex(
+                    "Pony", models.Index(fields=["pink"], name="pony_pink_idx")
+                ),
+                migrations.RemoveIndex("Stable", name="pony_pink_idx"),
+            ]
+        )
+
+        # Different index names should not optimize
+        self.assertDoesNotOptimize(
+            [
+                migrations.AddIndex(
+                    "Pony", models.Index(fields=["pink"], name="pony_pink_idx")
+                ),
+                migrations.RemoveIndex("Pony", name="pony_weight_idx"),
+            ]
+        )
