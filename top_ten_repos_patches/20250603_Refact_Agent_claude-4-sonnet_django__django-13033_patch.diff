diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index abbb1e37cb..f59babce50 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -727,7 +727,8 @@ class SQLCompiler:
         # If we get to this point and the field is a relation to another model,
         # append the default ordering for that model unless it is the pk
         # shortcut or the attribute name of the field that is specified.
-        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':
+        # Also skip if the name ends with '_id' which indicates a direct foreign key field reference.
+        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk' and not name.endswith('_id'):
             # Firstly, avoid infinite loops.
             already_seen = already_seen or set()
             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)
diff --git a/tests/ordering/models.py b/tests/ordering/models.py
index 2efb743e44..5608462ab7 100644
--- a/tests/ordering/models.py
+++ b/tests/ordering/models.py
@@ -59,3 +59,18 @@ class Reference(models.Model):
 
     class Meta:
         ordering = ('article',)
+
+
+class SelfRefModel(models.Model):
+    """Model with self-referencing foreign key and default ordering."""
+    parent = models.ForeignKey("self", on_delete=models.CASCADE, null=True)
+    value = models.IntegerField(null=True)
+
+    class Meta:
+        ordering = ("-id",)
+
+
+class RelatedToSelfRefModel(models.Model):
+    """Model that references SelfRefModel."""
+    ref = models.ForeignKey(SelfRefModel, on_delete=models.CASCADE)
+    data = models.IntegerField(null=True)
diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py
index a9cc729c45..dfd173db88 100644
--- a/tests/ordering/tests.py
+++ b/tests/ordering/tests.py
@@ -8,7 +8,10 @@ from django.db.models import (
 from django.db.models.functions import Upper
 from django.test import TestCase
 
-from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference
+from .models import (
+    Article, Author, ChildArticle, OrderedByFArticle, Reference,
+    RelatedToSelfRefModel, SelfRefModel,
+)
 
 
 class OrderingTests(TestCase):
@@ -480,3 +483,82 @@ class OrderingTests(TestCase):
         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))
         articles = ChildArticle.objects.order_by('article_ptr')
         self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])
+
+    def test_self_referencing_fk_ordering_by_id_field(self):
+        """
+        Regression test for issue where ordering by a self-referencing foreign key
+        field with _id suffix creates unnecessary joins and applies wrong ordering.
+        """
+        # Create test data
+        root = SelfRefModel.objects.create(parent=None, value=1)
+        child1 = SelfRefModel.objects.create(parent=root, value=2)
+        child2 = SelfRefModel.objects.create(parent=root, value=3)
+
+        rel1 = RelatedToSelfRefModel.objects.create(ref=root, data=10)
+        rel2 = RelatedToSelfRefModel.objects.create(ref=child1, data=20)
+        rel3 = RelatedToSelfRefModel.objects.create(ref=child2, data=30)
+
+        # Test ordering by 'ref__parent_id' - should not create extra joins
+        qs = RelatedToSelfRefModel.objects.filter(ref__value__in=[1, 2, 3]).order_by("ref__parent_id")
+        sql = str(qs.query)
+        
+        # Should not have LEFT OUTER JOIN or T3 table alias
+        self.assertNotIn("LEFT OUTER JOIN", sql)
+        self.assertNotIn("T3", sql)
+        
+        # Should have correct ASC ordering
+        self.assertIn("ORDER BY", sql)
+        self.assertIn("ASC", sql)
+        self.assertNotIn("DESC", sql)
+        
+        # Verify results are correctly ordered (None values first, then by parent_id)
+        results = list(qs.values('id', 'ref__parent_id'))
+        # rel1 has no parent (None), rel2 and rel3 have root as parent
+        expected_parent_ids = [None, root.id, root.id]
+        actual_parent_ids = [r['ref__parent_id'] for r in results]
+        self.assertEqual(actual_parent_ids, expected_parent_ids)
+
+    def test_self_referencing_fk_ordering_by_id_field_desc(self):
+        """
+        Test that ordering by '-ref__parent_id' works correctly.
+        """
+        root = SelfRefModel.objects.create(parent=None, value=1)
+        child1 = SelfRefModel.objects.create(parent=root, value=2)
+        child2 = SelfRefModel.objects.create(parent=root, value=3)
+
+        rel1 = RelatedToSelfRefModel.objects.create(ref=root, data=10)
+        rel2 = RelatedToSelfRefModel.objects.create(ref=child1, data=20)
+        rel3 = RelatedToSelfRefModel.objects.create(ref=child2, data=30)
+
+        qs = RelatedToSelfRefModel.objects.filter(ref__value__in=[1, 2, 3]).order_by("-ref__parent_id")
+        sql = str(qs.query)
+        
+        # Should not have LEFT OUTER JOIN or T3 table alias
+        self.assertNotIn("LEFT OUTER JOIN", sql)
+        self.assertNotIn("T3", sql)
+        
+        # Should have correct DESC ordering
+        self.assertIn("ORDER BY", sql)
+        self.assertIn("DESC", sql)
+
+    def test_self_referencing_fk_ordering_by_relation_object(self):
+        """
+        Test that ordering by 'ref__parent' (the relation object) still works
+        and applies the default ordering from the related model.
+        """
+        root = SelfRefModel.objects.create(parent=None, value=1)
+        child1 = SelfRefModel.objects.create(parent=root, value=2)
+        child2 = SelfRefModel.objects.create(parent=root, value=3)
+
+        rel1 = RelatedToSelfRefModel.objects.create(ref=root, data=10)
+        rel2 = RelatedToSelfRefModel.objects.create(ref=child1, data=20)
+        rel3 = RelatedToSelfRefModel.objects.create(ref=child2, data=30)
+
+        qs = RelatedToSelfRefModel.objects.filter(ref__value__in=[1, 2, 3]).order_by("ref__parent")
+        sql = str(qs.query)
+        
+        # This case should still create a join and apply default ordering
+        # because we're ordering by the relation object, not the _id field
+        self.assertIn("LEFT OUTER JOIN", sql)
+        self.assertIn("T3", sql)
+        self.assertIn("DESC", sql)  # Default ordering from SelfRefModel
