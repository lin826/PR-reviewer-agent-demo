diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index b3cfc6723c..28462a9bc6 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -163,7 +163,10 @@ class UserChangeForm(forms.ModelForm):
         super().__init__(*args, **kwargs)
         password = self.fields.get("password")
         if password:
-            password.help_text = password.help_text.format("../password/")
+            if self.instance and self.instance.pk:
+                password.help_text = password.help_text.format(f"../../{self.instance.pk}/password/")
+            else:
+                password.help_text = password.help_text.format("../password/")
         user_permissions = self.fields.get("user_permissions")
         if user_permissions:
             user_permissions.queryset = user_permissions.queryset.select_related(
diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py
index 3bacd7a9fb..cc0a7003f9 100644
--- a/tests/auth_tests/test_forms.py
+++ b/tests/auth_tests/test_forms.py
@@ -822,6 +822,48 @@ class UserChangeFormTest(TestDataMixin, TestCase):
             if v.code == "invalid"
         )
         self.assertEqual(form["username"].errors, [str(validator.message)])
+    def test_password_link_with_instance_pk(self):
+        """Test that password link uses instance PK when available."""
+        user = User.objects.create_user(username="testuser", email="test@example.com")
+        
+        form = UserChangeForm(instance=user)
+        password_field = form.fields.get('password')
+        
+        self.assertIsNotNone(password_field)
+        help_text = password_field.help_text
+        
+        # Should contain the instance PK in the link
+        expected_link = f"../../{user.pk}/password/"
+        self.assertIn(expected_link, help_text)
+        
+        # Should NOT contain the old hardcoded link when instance has PK
+        self.assertNotIn("../password/", help_text)
+    
+    def test_password_link_without_instance(self):
+        """Test that password link falls back to relative path when no instance."""
+        form = UserChangeForm()
+        password_field = form.fields.get('password')
+        
+        self.assertIsNotNone(password_field)
+        help_text = password_field.help_text
+        
+        # Should contain the fallback relative link
+        self.assertIn("../password/", help_text)
+    
+    def test_password_link_with_unsaved_instance(self):
+        """Test that password link falls back when instance has no PK."""
+        user = User(username="testuser", email="test@example.com")
+        # user.pk is None since it's not saved
+        
+        form = UserChangeForm(instance=user)
+        password_field = form.fields.get('password')
+        
+        self.assertIsNotNone(password_field)
+        help_text = password_field.help_text
+        
+        # Should contain the fallback relative link
+        self.assertIn("../password/", help_text)
+
 
     def test_bug_14242(self):
         # A regression test, introduce by adding an optimization for the
