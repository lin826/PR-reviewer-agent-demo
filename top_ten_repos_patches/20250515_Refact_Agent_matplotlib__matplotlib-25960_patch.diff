diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py
index dab2bc4a5a..29cedd7d3d 100644
--- a/lib/matplotlib/figure.py
+++ b/lib/matplotlib/figure.py
@@ -2272,14 +2272,44 @@ class SubFigure(FigureBase):
             self.bbox_relative.p0 = bbox.p0
             self.bbox_relative.p1 = bbox.p1
             return
-        # need to figure out *where* this subplotspec is.
+        
+        # Get the gridspec and figure
         gs = self._subplotspec.get_gridspec()
-        wr = np.asarray(gs.get_width_ratios())
-        hr = np.asarray(gs.get_height_ratios())
-        dx = wr[self._subplotspec.colspan].sum() / wr.sum()
-        dy = hr[self._subplotspec.rowspan].sum() / hr.sum()
-        x0 = wr[:self._subplotspec.colspan.start].sum() / wr.sum()
-        y0 = 1 - hr[:self._subplotspec.rowspan.stop].sum() / hr.sum()
+        fig = self._parent.figure
+        
+        # Get the grid positions from the gridspec, which accounts for wspace and hspace
+        bottoms, tops, lefts, rights = gs.get_grid_positions(fig)
+        
+        # Get the row and column indices for this subplotspec
+        rows, cols = np.unravel_index([self._subplotspec.num1, self._subplotspec.num2], 
+                                      gs.get_geometry())
+        
+        # Get the position of this subplotspec
+        fig_bottom = bottoms[rows].min()
+        fig_top = tops[rows].max()
+        fig_left = lefts[cols].min()
+        fig_right = rights[cols].max()
+        
+        # If this is a nested subfigure, convert from figure coordinates to parent subfigure coordinates
+        if isinstance(self._parent, SubFigure):
+            parent_bbox = self._parent.bbox
+            parent_width = parent_bbox.width
+            parent_height = parent_bbox.height
+            parent_x0 = parent_bbox.x0
+            parent_y0 = parent_bbox.y0
+            
+            # Convert from figure coordinates to parent subfigure coordinates
+            x0 = (fig_left - parent_x0) / parent_width
+            y0 = (fig_bottom - parent_y0) / parent_height
+            dx = (fig_right - fig_left) / parent_width
+            dy = (fig_top - fig_bottom) / parent_height
+        else:
+            # For top-level subfigures, use figure coordinates directly
+            x0 = fig_left
+            y0 = fig_bottom
+            dx = fig_right - fig_left
+            dy = fig_top - fig_bottom
+        
         if self.bbox_relative is None:
             self.bbox_relative = Bbox.from_bounds(x0, y0, dx, dy)
         else:
