diff --git a/django/forms/models.py b/django/forms/models.py
index 192d9fad94..dc8c57f05b 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -257,19 +257,35 @@ class ModelFormOptions:
 
 class ModelFormMetaclass(DeclarativeFieldsMetaclass):
     def __new__(mcs, name, bases, attrs):
+        # Check if there's a Meta class with formfield_callback in the current class
+        meta = attrs.get('Meta')
+        if meta is not None and hasattr(meta, 'formfield_callback'):
+            # Add formfield_callback to the class attributes
+            attrs['formfield_callback'] = meta.formfield_callback
+
+        # Continue with the original logic for base classes
         base_formfield_callback = None
         for b in bases:
             if hasattr(b, "Meta") and hasattr(b.Meta, "formfield_callback"):
                 base_formfield_callback = b.Meta.formfield_callback
                 break
 
-        formfield_callback = attrs.pop("formfield_callback", base_formfield_callback)
+        # If formfield_callback is in attrs, use it; otherwise use base_formfield_callback
+        if "formfield_callback" in attrs:
+            formfield_callback = attrs["formfield_callback"]
+        else:
+            formfield_callback = base_formfield_callback
 
+        # Create the new class
         new_class = super().__new__(mcs, name, bases, attrs)
 
         if bases == (BaseModelForm,):
             return new_class
 
+        # Store the formfield_callback on the new class if it exists
+        if formfield_callback is not None:
+            new_class.formfield_callback = formfield_callback
+
         opts = new_class._meta = ModelFormOptions(getattr(new_class, "Meta", None))
 
         # We check if a string was passed to `fields` or `exclude`,
@@ -630,13 +646,29 @@ def modelform_factory(
     # creating needs to inherit from the parent's inner meta.
     bases = (form.Meta,) if hasattr(form, "Meta") else ()
     Meta = type("Meta", bases, attrs)
+    
+    # If no explicit formfield_callback is provided, check for callbacks in this order:
+    # 1. Class attribute on the form
+    # 2. Meta attribute on the form
+    if formfield_callback is None:
+        if hasattr(form, "formfield_callback"):
+            formfield_callback = form.formfield_callback
+        elif hasattr(form, "Meta") and hasattr(form.Meta, "formfield_callback"):
+            formfield_callback = getattr(form.Meta, "formfield_callback", None)
+    
+    # Only set formfield_callback on Meta if it's not None
     if formfield_callback:
         Meta.formfield_callback = staticmethod(formfield_callback)
+    
     # Give this new form class a reasonable name.
     class_name = model.__name__ + "Form"
 
     # Class attributes for the new form class.
-    form_class_attrs = {"Meta": Meta, "formfield_callback": formfield_callback}
+    form_class_attrs = {"Meta": Meta}
+    
+    # Only add formfield_callback to class attributes if it's not None
+    if formfield_callback:
+        form_class_attrs["formfield_callback"] = formfield_callback
 
     if getattr(Meta, "fields", None) is None and getattr(Meta, "exclude", None) is None:
         raise ImproperlyConfigured(
