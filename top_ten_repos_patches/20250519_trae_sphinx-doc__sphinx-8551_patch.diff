diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index 79d7e4f46..c7c6f2d4c 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -91,8 +91,10 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr
     else:
         kwargs = {}
 
-    return pending_xref('', nodes.Text(text),
-                        refdomain='py', reftype=reftype, reftarget=text, **kwargs)
+    pnode = pending_xref('', nodes.Text(text),
+                       refdomain='py', reftype=reftype, reftarget=text, **kwargs)
+    pnode['refspecific'] = True  # Set refspecific=True to use context-sensitive lookup
+    return pnode
 
 
 def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Node]:
@@ -272,6 +274,14 @@ class PyXrefMixin:
         result = super().make_xref(rolename, domain, target,  # type: ignore
                                    innernode, contnode, env)
         result['refspecific'] = True
+        
+        # Explicitly set module and class context from environment to ensure it's available during resolution
+        if env and env.ref_context:
+            if 'py:module' in env.ref_context:
+                result['py:module'] = env.ref_context.get('py:module')
+            if 'py:class' in env.ref_context:
+                result['py:class'] = env.ref_context.get('py:class')
+        
         if target.startswith(('.', '~')):
             prefix, result['reftarget'] = target[0], target[1:]
             if prefix == '.':

