diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py
index 9db44b7994..5479bc1af0 100644
--- a/lib/mpl_toolkits/mplot3d/axes3d.py
+++ b/lib/mpl_toolkits/mplot3d/axes3d.py
@@ -387,6 +387,8 @@ class Axes3D(Axes):
 
     @martist.allow_rasterization
     def draw(self, renderer):
+        if not self.get_visible():
+            return
         self._unstale_viewLim()
 
         # draw the background patch
diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py
index 966eb50b21..f2df90e5b6 100644
--- a/lib/mpl_toolkits/tests/test_mplot3d.py
+++ b/lib/mpl_toolkits/tests/test_mplot3d.py
@@ -1,5 +1,6 @@
 import functools
 import itertools
+from io import BytesIO
 
 import pytest
 
@@ -1736,3 +1737,81 @@ def test_view_init_vertical_axis(
         tickdir_expected = tickdirs_expected[i]
         tickdir_actual = axis._get_tickdir()
         np.testing.assert_array_equal(tickdir_expected, tickdir_actual)
+
+
+def test_axes3d_set_visible():
+    """Test that Axes3D respects set_visible(False)."""
+    fig = plt.figure()
+    ax = fig.add_subplot(111, projection='3d')
+    
+    # Add some content to the axes
+    ax.scatter([1], [1], [1], c='red', s=100)
+    ax.set_xlabel('X')
+    ax.set_ylabel('Y')
+    ax.set_zlabel('Z')
+    
+    # Test that visibility flag is set correctly
+    assert ax.get_visible() is True  # Default should be visible
+    
+    ax.set_visible(False)
+    assert ax.get_visible() is False
+    
+    ax.set_visible(True)
+    assert ax.get_visible() is True
+
+
+def test_axes3d_draw_respects_visibility():
+    """Test that Axes3D.draw() respects the visibility flag."""
+    fig = plt.figure()
+    ax = fig.add_subplot(111, projection='3d')
+    
+    # Add some content
+    ax.scatter([1, 2, 3], [1, 2, 3], [1, 2, 3], c=['red', 'green', 'blue'])
+    
+    # Create a mock renderer to track draw calls
+    from matplotlib.backends.backend_agg import RendererAgg
+    renderer = RendererAgg(100, 100, 72)
+    
+    # When visible, draw should proceed normally
+    ax.set_visible(True)
+    try:
+        ax.draw(renderer)
+        # If we get here without exception, drawing worked
+        draw_succeeded_when_visible = True
+    except Exception:
+        draw_succeeded_when_visible = False
+    
+    assert draw_succeeded_when_visible, "Drawing should succeed when axes is visible"
+    
+    # When invisible, draw should return early without doing work
+    ax.set_visible(False)
+    try:
+        ax.draw(renderer)
+        # Should return early, no exception expected
+        draw_succeeded_when_invisible = True
+    except Exception:
+        draw_succeeded_when_invisible = False
+    
+    assert draw_succeeded_when_invisible, "Drawing should return early when axes is invisible"
+
+
+def test_axes3d_visibility_with_subplots():
+    """Test visibility with multiple 3D subplots (reproduces original issue)."""
+    fig, (ax1, ax2) = plt.subplots(1, 2, subplot_kw={'projection': '3d'})
+    ax1.scatter(1, 1, 1)
+    ax2.scatter(1, 1, 1, c='r')
+    ax1.set_visible(False)
+    
+    # Test that visibility flags are set correctly
+    assert ax1.get_visible() is False
+    assert ax2.get_visible() is True
+    
+    # Save to buffer to ensure no exceptions during rendering
+    buf = BytesIO()
+    fig.savefig(buf, format='png')
+    buf.seek(0)
+    
+    # Should produce a valid image with only ax2 visible
+    assert len(buf.getvalue()) > 0, "Should produce a valid image"
+    
+    plt.close(fig)
