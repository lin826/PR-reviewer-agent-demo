diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index 8a105d4f35..6d4cad5705 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -18,6 +18,7 @@ import pytz
 from django.core.exceptions import ImproperlyConfigured
 from django.db import IntegrityError
 from django.db.backends import utils as backend_utils
+from django.db.backends.utils import normalize_query_params
 from django.db.backends.base.base import BaseDatabaseWrapper
 from django.utils import timezone
 from django.utils.asyncio import async_unsafe
@@ -409,11 +410,15 @@ class SQLiteCursorWrapper(Database.Cursor):
         if params is None:
             return Database.Cursor.execute(self, query)
         query = self.convert_query(query)
-        return Database.Cursor.execute(self, query, params)
+        # Normalize parameters to unwrap LazyObject instances
+        normalized_params = normalize_query_params(params)
+        return Database.Cursor.execute(self, query, normalized_params)
 
     def executemany(self, query, param_list):
         query = self.convert_query(query)
-        return Database.Cursor.executemany(self, query, param_list)
+        # Normalize each parameter set to unwrap LazyObject instances
+        normalized_param_list = [normalize_query_params(params) for params in param_list]
+        return Database.Cursor.executemany(self, query, normalized_param_list)
 
     def convert_query(self, query):
         return FORMAT_QMARK_REGEX.sub('?', query).replace('%%', '%')
diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py
index 1f77b3109f..025bfcbfb3 100644
--- a/django/db/backends/sqlite3/operations.py
+++ b/django/db/backends/sqlite3/operations.py
@@ -12,6 +12,7 @@ from django.db.models.expressions import Col
 from django.utils import timezone
 from django.utils.dateparse import parse_date, parse_datetime, parse_time
 from django.utils.functional import cached_property
+from django.db.backends.utils import normalize_query_params
 
 
 class DatabaseOperations(BaseDatabaseOperations):
@@ -137,7 +138,9 @@ class DatabaseOperations(BaseDatabaseOperations):
         cursor = self.connection.connection.cursor()
         # Native sqlite3 cursors cannot be used as context managers.
         try:
-            return cursor.execute(sql, params).fetchone()
+            # Normalize parameters to unwrap LazyObject instances
+            normalized_params = normalize_query_params(params)
+            return cursor.execute(sql, normalized_params).fetchone()
         finally:
             cursor.close()
 
diff --git a/django/db/backends/utils.py b/django/db/backends/utils.py
index 45c03ba3e9..12cce54036 100644
--- a/django/db/backends/utils.py
+++ b/django/db/backends/utils.py
@@ -7,10 +7,36 @@ import time
 from contextlib import contextmanager
 
 from django.db import NotSupportedError
+from django.utils.functional import LazyObject
 
 logger = logging.getLogger('django.db.backends')
 
 
+def normalize_query_params(params):
+    """
+    Normalize query parameters by unwrapping LazyObject instances.
+    
+    This ensures that database drivers receive native Python types
+    instead of Django's lazy wrapper objects.
+    """
+    if params is None:
+        return None
+    
+    def unwrap_lazy_object(param):
+        if isinstance(param, LazyObject):
+            # Force evaluation of the lazy object by accessing its string representation
+            # This will trigger _setup() if not already called
+            return str(param)
+        return param
+    
+    if isinstance(params, (list, tuple)):
+        return type(params)(unwrap_lazy_object(param) for param in params)
+    elif isinstance(params, dict):
+        return {key: unwrap_lazy_object(value) for key, value in params.items()}
+    else:
+        return params
+
+
 class CursorWrapper:
     def __init__(self, cursor, db):
         self.cursor = cursor
@@ -81,12 +107,16 @@ class CursorWrapper:
                 # params default might be backend specific.
                 return self.cursor.execute(sql)
             else:
-                return self.cursor.execute(sql, params)
+                # Normalize parameters to unwrap LazyObject instances
+                normalized_params = normalize_query_params(params)
+                return self.cursor.execute(sql, normalized_params)
 
     def _executemany(self, sql, param_list, *ignored_wrapper_args):
         self.db.validate_no_broken_transaction()
         with self.db.wrap_database_errors:
-            return self.cursor.executemany(sql, param_list)
+            # Normalize each parameter set to unwrap LazyObject instances
+            normalized_param_list = [normalize_query_params(params) for params in param_list]
+            return self.cursor.executemany(sql, normalized_param_list)
 
 
 class CursorDebugWrapper(CursorWrapper):
