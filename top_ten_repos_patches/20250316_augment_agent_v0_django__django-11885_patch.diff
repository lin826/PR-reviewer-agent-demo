diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index ae82d26340..8494f0bc81 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -2,10 +2,11 @@ from collections import Counter
 from itertools import chain
 from operator import attrgetter
 
 from django.db import IntegrityError, connections, transaction
 from django.db.models import signals, sql
+from django.db.models.sql.where import OR
 
 
 class ProtectedError(IntegrityError):
     def __init__(self, msg, protected_objects):
         self.protected_objects = protected_objects
@@ -308,13 +309,32 @@ class Collector:
                     signals.pre_delete.send(
                         sender=model, instance=obj, using=self.using
                     )
 
             # fast deletes
+            # Group fast deletes by model
+            model_querysets = {}
             for qs in self.fast_deletes:
-                count = qs._raw_delete(using=self.using)
-                deleted_counter[qs.model._meta.label] += count
+                model_querysets.setdefault(qs.model, []).append(qs)
+
+            # Process each model's querysets
+            for model, querysets in model_querysets.items():
+                if len(querysets) == 1:
+                    # Only one queryset for this model, no need to combine
+                    count = querysets[0]._raw_delete(using=self.using)
+                else:
+                    # Multiple querysets for this model, combine their WHERE clauses using OR
+                    combined_where = querysets[0].query.where.clone()
+                    for qs in querysets[1:]:
+                        combined_where.add(qs.query.where, OR)
+                    
+                    # Create a new queryset with the combined WHERE clause
+                    combined_qs = querysets[0]._chain()
+                    combined_qs.query.where = combined_where
+                    count = combined_qs._raw_delete(using=self.using)
+                
+                deleted_counter[model._meta.label] += count
 
             # update fields
             for model, instances_for_fieldvalues in self.field_updates.items():
                 for (field, value), instances in instances_for_fieldvalues.items():
                     query = sql.UpdateQuery(model)
