diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py
index 860989f7c1..391576af75 100644
--- a/sympy/functions/elementary/hyperbolic.py
+++ b/sympy/functions/elementary/hyperbolic.py
@@ -248,7 +248,21 @@ def _eval_is_real(self):
         # if `im` is of the form n*pi
         # else, check if it is a number
         re, im = arg.as_real_imag()
-        return (im%pi).is_zero
+        
+        # Check if im is a multiple of pi without using modulo operation
+        # which can trigger problematic polynomial operations with Piecewise
+        from sympy import floor, pi
+        try:
+            # Try to divide by pi first, which is safer
+            n = im / pi
+            # Check if n is an integer
+            return n.is_integer
+        except Exception:
+            # If that fails, fall back to the original approach but protect against Piecewise
+            from sympy.functions.elementary.piecewise import Piecewise
+            if isinstance(im, Piecewise) or re.has(Piecewise) or im.has(Piecewise):
+                return None  # Unable to determine for Piecewise
+            return (im % pi).is_zero
 
     def _eval_is_extended_real(self):
         if self.args[0].is_extended_real:
@@ -437,7 +451,21 @@ def _eval_is_real(self):
         # the imaginary part can be an expression like n*pi
         # if not, check if the imaginary part is a number
         re, im = arg.as_real_imag()
-        return (im%pi).is_zero
+        
+        # Check if im is a multiple of pi without using modulo operation
+        # which can trigger problematic polynomial operations with Piecewise
+        from sympy import pi
+        try:
+            # Try to divide by pi first, which is safer
+            n = im / pi
+            # Check if n is an integer
+            return n.is_integer
+        except Exception:
+            # If that fails, fall back to the original approach but protect against Piecewise
+            from sympy.functions.elementary.piecewise import Piecewise
+            if isinstance(im, Piecewise) or re.has(Piecewise) or im.has(Piecewise):
+                return None  # Unable to determine for Piecewise
+            return (im % pi).is_zero
 
     def _eval_is_positive(self):
         # cosh(x+I*y) = cos(y)*cosh(x) + I*sin(y)*sinh(x)
@@ -448,9 +476,33 @@ def _eval_is_positive(self):
         z = self.args[0]
 
         x, y = z.as_real_imag()
-        ymod = y % (2*pi)
-
-        yzero = ymod.is_zero
+        
+        # Handle Piecewise case first
+        from sympy.functions.elementary.piecewise import Piecewise
+        if isinstance(y, Piecewise) or x.has(Piecewise) or y.has(Piecewise):
+            return None
+        
+        # Try to calculate ymod = y % (2*pi) safely without direct modulo
+        from sympy import pi
+        try:
+            # Try division approach first
+            n = y / (2*pi)
+            if n.is_integer:
+                yzero = True
+            else:
+                yzero = False
+                # Calculate equivalent of ymod < pi/2 or ymod > 3*pi/2
+                n_frac = n - floor(n)
+                ymod_cond = (n_frac < Rational(1, 4)) | (n_frac > Rational(3, 4))
+        except Exception:
+            # Fall back to modulo operation if division approach fails
+            ymod = y % (2*pi)
+            yzero = ymod.is_zero
+            # shortcut if ymod is zero
+            if yzero:
+                return True
+            ymod_cond = (ymod < pi/2) | (ymod > 3*pi/2)
+            
         # shortcut if ymod is zero
         if yzero:
             return True
@@ -466,7 +518,7 @@ def _eval_is_positive(self):
                 # Case 2:
                 fuzzy_and([
                     xzero,
-                    fuzzy_or([ymod < pi/2, ymod > 3*pi/2])
+                    ymod_cond
                 ])
             ])
 
@@ -475,9 +527,33 @@ def _eval_is_nonnegative(self):
         z = self.args[0]
 
         x, y = z.as_real_imag()
-        ymod = y % (2*pi)
-
-        yzero = ymod.is_zero
+        
+        # Handle Piecewise case first
+        from sympy.functions.elementary.piecewise import Piecewise
+        if isinstance(y, Piecewise) or x.has(Piecewise) or y.has(Piecewise):
+            return None
+        
+        # Try to calculate ymod = y % (2*pi) safely without direct modulo
+        from sympy import pi
+        try:
+            # Try division approach first
+            n = y / (2*pi)
+            if n.is_integer:
+                yzero = True
+            else:
+                yzero = False
+                # Calculate equivalent of ymod <= pi/2 or ymod >= 3*pi/2
+                n_frac = n - floor(n)
+                ymod_cond = (n_frac <= Rational(1, 4)) | (n_frac >= Rational(3, 4))
+        except Exception:
+            # Fall back to modulo operation if division approach fails
+            ymod = y % (2*pi)
+            yzero = ymod.is_zero
+            # shortcut if ymod is zero
+            if yzero:
+                return True
+            ymod_cond = (ymod <= pi/2) | (ymod >= 3*pi/2)
+            
         # shortcut if ymod is zero
         if yzero:
             return True
@@ -493,7 +569,7 @@ def _eval_is_nonnegative(self):
                 # Case 2:
                 fuzzy_and([
                     xzero,
-                    fuzzy_or([ymod <= pi/2, ymod >= 3*pi/2])
+                    ymod_cond
                 ])
             ])
 
@@ -657,13 +733,22 @@ def _eval_is_real(self):
 
         re, im = arg.as_real_imag()
 
-        # if denom = 0, tanh(arg) = zoo
-        if re == 0 and im % pi == pi/2:
+        # Check for Piecewise before proceeding with modulo operations
+        from sympy.functions.elementary.piecewise import Piecewise
+        if isinstance(im, Piecewise) or re.has(Piecewise) or im.has(Piecewise):
             return None
 
-        # check if im is of the form n*pi/2 to make sin(2*im) = 0
-        # if not, im could be a number, return False in that case
-        return (im % (pi/2)).is_zero
+        # if denom = 0, tanh(arg) = zoo
+        # Try to check if im % pi == pi/2 without direct modulo
+        from sympy import pi
+        try:
+            # Try dividing by pi first
+            n = im / pi
+            # Check if n - 1/2 is an integer (equivalent to im % pi == pi/2)
+            return None if (n - S.Half).is_integer else True
+        except Exception:
+            # Fall back to modulo operation if division approach fails
+            return None if im % pi == pi/2 else True
 
     def _eval_is_extended_real(self):
         if self.args[0].is_extended_real:

