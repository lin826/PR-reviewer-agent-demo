diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py
index 3f8b8d49e0..b60eca01ca 100644
--- a/sympy/printing/mathml.py
+++ b/sympy/printing/mathml.py
@@ -333,8 +333,6 @@ def _print_Sum(self, e):
         return self._print_Integral(e)
 
     def _print_Symbol(self, sym):
-        ci = self.dom.createElement(self.mathml_tag(sym))
-
         def join(items):
             if len(items) > 1:
                 mrow = self.dom.createElement('mml:mrow')
@@ -343,14 +341,22 @@ def join(items):
                         mo = self.dom.createElement('mml:mo')
                         mo.appendChild(self.dom.createTextNode(" "))
                         mrow.appendChild(mo)
-                    mi = self.dom.createElement('mml:mi')
-                    mi.appendChild(self.dom.createTextNode(item))
-                    mrow.appendChild(mi)
+                    # Use mn for numbers, mi for others
+                    if item.isdigit():
+                        token = self.dom.createElement('mml:mn')
+                    else:
+                        token = self.dom.createElement('mml:mi')
+                    token.appendChild(self.dom.createTextNode(item))
+                    mrow.appendChild(token)
                 return mrow
             else:
-                mi = self.dom.createElement('mml:mi')
-                mi.appendChild(self.dom.createTextNode(items[0]))
-                return mi
+                # Use mn for numbers, mi for others
+                if items[0].isdigit():
+                    token = self.dom.createElement('mml:mn')
+                else:
+                    token = self.dom.createElement('mml:mi')
+                token.appendChild(self.dom.createTextNode(items[0]))
+                return token
 
         # translate name, supers and subs to unicode characters
         def translate(s):
@@ -364,29 +370,41 @@ def translate(s):
         supers = [translate(sup) for sup in supers]
         subs = [translate(sub) for sub in subs]
 
+        # Create the base ci element
+        ci = self.dom.createElement(self.mathml_tag(sym))
+        
+        # Create the base name element
         mname = self.dom.createElement('mml:mi')
         mname.appendChild(self.dom.createTextNode(name))
+        
         if len(supers) == 0:
             if len(subs) == 0:
+                # No subscripts or superscripts, just return the name in ci
                 ci.appendChild(self.dom.createTextNode(name))
+                return ci
             else:
+                # Only subscripts
                 msub = self.dom.createElement('mml:msub')
                 msub.appendChild(mname)
                 msub.appendChild(join(subs))
                 ci.appendChild(msub)
+                return ci
         else:
             if len(subs) == 0:
+                # Only superscripts
                 msup = self.dom.createElement('mml:msup')
                 msup.appendChild(mname)
                 msup.appendChild(join(supers))
                 ci.appendChild(msup)
+                return ci
             else:
+                # Both superscripts and subscripts
                 msubsup = self.dom.createElement('mml:msubsup')
                 msubsup.appendChild(mname)
                 msubsup.appendChild(join(subs))
                 msubsup.appendChild(join(supers))
                 ci.appendChild(msubsup)
-        return ci
+                return ci
 
     _print_MatrixSymbol = _print_Symbol
     _print_RandomSymbol = _print_Symbol
@@ -743,11 +761,6 @@ def _print_Sum(self, e):
         return mrow
 
     def _print_Symbol(self, sym, style='plain'):
-        x = self.dom.createElement('mi')
-
-        if style == 'bold':
-            x.setAttribute('mathvariant', 'bold')
-
         def join(items):
             if len(items) > 1:
                 mrow = self.dom.createElement('mrow')
@@ -756,14 +769,22 @@ def join(items):
                         mo = self.dom.createElement('mo')
                         mo.appendChild(self.dom.createTextNode(" "))
                         mrow.appendChild(mo)
-                    mi = self.dom.createElement('mi')
-                    mi.appendChild(self.dom.createTextNode(item))
-                    mrow.appendChild(mi)
+                    # Use mn for numbers, mi for others
+                    if item.isdigit():
+                        token = self.dom.createElement('mn')
+                    else:
+                        token = self.dom.createElement('mi')
+                    token.appendChild(self.dom.createTextNode(item))
+                    mrow.appendChild(token)
                 return mrow
             else:
-                mi = self.dom.createElement('mi')
-                mi.appendChild(self.dom.createTextNode(items[0]))
-                return mi
+                # Use mn for numbers, mi for others
+                if items[0].isdigit():
+                    token = self.dom.createElement('mn')
+                else:
+                    token = self.dom.createElement('mi')
+                token.appendChild(self.dom.createTextNode(items[0]))
+                return token
 
         # translate name, supers and subs to unicode characters
         def translate(s):
@@ -778,28 +799,36 @@ def translate(s):
         subs = [translate(sub) for sub in subs]
 
         mname = self.dom.createElement('mi')
+        if style == 'bold':
+            mname.setAttribute('mathvariant', 'bold')
         mname.appendChild(self.dom.createTextNode(name))
+        
         if len(supers) == 0:
             if len(subs) == 0:
-                x.appendChild(self.dom.createTextNode(name))
+                # No subscripts or superscripts, just return the name
+                if style == 'bold':
+                    mname.setAttribute('mathvariant', 'bold')
+                return mname
             else:
+                # Only subscripts
                 msub = self.dom.createElement('msub')
                 msub.appendChild(mname)
                 msub.appendChild(join(subs))
-                x.appendChild(msub)
+                return msub
         else:
             if len(subs) == 0:
+                # Only superscripts
                 msup = self.dom.createElement('msup')
                 msup.appendChild(mname)
                 msup.appendChild(join(supers))
-                x.appendChild(msup)
+                return msup
             else:
+                # Both superscripts and subscripts
                 msubsup = self.dom.createElement('msubsup')
                 msubsup.appendChild(mname)
                 msubsup.appendChild(join(subs))
                 msubsup.appendChild(join(supers))
-                x.appendChild(msubsup)
-        return x
+                return msubsup
 
     def _print_MatrixSymbol(self, sym):
         return self._print_Symbol(sym, style=self._settings['mat_symbol_style'])
