diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py
index 2c62182d31..8b28a60485 100644
--- a/django/db/backends/mysql/base.py
+++ b/django/db/backends/mysql/base.py
@@ -200,9 +200,9 @@ class DatabaseWrapper(BaseDatabaseWrapper):
         if settings_dict['USER']:
             kwargs['user'] = settings_dict['USER']
         if settings_dict['NAME']:
-            kwargs['db'] = settings_dict['NAME']
+            kwargs['database'] = settings_dict['NAME']
         if settings_dict['PASSWORD']:
-            kwargs['passwd'] = settings_dict['PASSWORD']
+            kwargs['password'] = settings_dict['PASSWORD']
         if settings_dict['HOST'].startswith('/'):
             kwargs['unix_socket'] = settings_dict['HOST']
         elif settings_dict['HOST']:
diff --git a/tests/backends/mysql/tests.py b/tests/backends/mysql/tests.py
index 02fc312abc..e00b372936 100644
--- a/tests/backends/mysql/tests.py
+++ b/tests/backends/mysql/tests.py
@@ -1,5 +1,6 @@
 import unittest
 from contextlib import contextmanager
+from unittest.mock import MagicMock, patch
 
 from django.core.exceptions import ImproperlyConfigured
 from django.db import connection
@@ -89,3 +90,101 @@ class IsolationLevelTests(TestCase):
         )
         with self.assertRaisesMessage(ImproperlyConfigured, msg):
             new_connection.cursor()
+
+
+class MySQLConnectionParamsTests(TestCase):
+    """Test that MySQL backend uses correct connection parameters."""
+    
+    def setUp(self):
+        """Set up mocks for MySQLdb."""
+        # Create comprehensive MySQLdb mock
+        self.mysqldb_mock = MagicMock()
+        self.mysqldb_mock.constants = MagicMock()
+        self.mysqldb_mock.constants.CLIENT = MagicMock()
+        self.mysqldb_mock.constants.CLIENT.FOUND_ROWS = 2
+        self.mysqldb_mock.constants.FIELD_TYPE = MagicMock()
+        self.mysqldb_mock.constants.FIELD_TYPE.TIME = 12
+        self.mysqldb_mock.converters = MagicMock()
+        self.mysqldb_mock.converters.conversions = {}
+        self.mysqldb_mock.version_info = (2, 0, 0)
+        self.mysqldb_mock.__version__ = '2.0.0'
+        
+        # Patch sys.modules
+        self.modules_patcher = patch.dict('sys.modules', {
+            'MySQLdb': self.mysqldb_mock,
+            'MySQLdb.constants': self.mysqldb_mock.constants,
+            'MySQLdb.converters': self.mysqldb_mock.converters,
+        })
+        self.modules_patcher.start()
+    
+    def tearDown(self):
+        """Clean up mocks."""
+        self.modules_patcher.stop()
+    
+    def test_connection_params_use_new_kwargs(self):
+        """Test that get_connection_params uses 'database' and 'password' instead of deprecated 'db' and 'passwd'."""
+        # Import after mocking
+        from django.db.backends.mysql.base import DatabaseWrapper
+        
+        # Create test settings
+        db_settings = {
+            'ENGINE': 'django.db.backends.mysql',
+            'NAME': 'test_database',
+            'USER': 'test_user',
+            'PASSWORD': 'test_password',
+            'HOST': 'localhost',
+            'PORT': '3306',
+            'OPTIONS': {},
+        }
+        
+        # Create database wrapper
+        wrapper = DatabaseWrapper(db_settings)
+        
+        # Get connection parameters
+        params = wrapper.get_connection_params()
+        
+        # Verify new kwargs are used
+        self.assertIn('database', params)
+        self.assertIn('password', params)
+        self.assertEqual(params['database'], 'test_database')
+        self.assertEqual(params['password'], 'test_password')
+        
+        # Verify deprecated kwargs are NOT used
+        self.assertNotIn('db', params)
+        self.assertNotIn('passwd', params)
+        
+        # Verify other expected parameters
+        self.assertIn('user', params)
+        self.assertIn('host', params)
+        self.assertIn('port', params)
+        self.assertEqual(params['user'], 'test_user')
+        self.assertEqual(params['host'], 'localhost')
+        self.assertEqual(params['port'], 3306)
+    
+    def test_connection_params_empty_values(self):
+        """Test that empty NAME and PASSWORD don't create kwargs."""
+        from django.db.backends.mysql.base import DatabaseWrapper
+        
+        # Create test settings with empty NAME and PASSWORD
+        db_settings = {
+            'ENGINE': 'django.db.backends.mysql',
+            'NAME': '',
+            'USER': 'test_user',
+            'PASSWORD': '',
+            'HOST': 'localhost',
+            'PORT': '3306',
+            'OPTIONS': {},
+        }
+        
+        wrapper = DatabaseWrapper(db_settings)
+        params = wrapper.get_connection_params()
+        
+        # Verify that empty values don't create kwargs
+        self.assertNotIn('database', params)
+        self.assertNotIn('password', params)
+        self.assertNotIn('db', params)
+        self.assertNotIn('passwd', params)
+        
+        # But user should still be there
+        self.assertIn('user', params)
+        self.assertEqual(params['user'], 'test_user')
