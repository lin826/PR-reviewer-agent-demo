diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 1c844580c6..5ff4e51451 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -680,6 +680,13 @@ def add(value, arg):
         try:
             return value + arg
         except Exception:
+            # Handle lazy objects by converting to strings
+            from django.utils.functional import Promise
+            if isinstance(value, Promise) or isinstance(arg, Promise):
+                try:
+                    return str(value) + str(arg)
+                except Exception:
+                    return ''
             return ''
 
 
diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py
index 0fcc661f4a..0ffcbc62c5 100644
--- a/tests/template_tests/filter_tests/test_add.py
+++ b/tests/template_tests/filter_tests/test_add.py
@@ -2,6 +2,8 @@ from datetime import date, timedelta
 
 from django.template.defaultfilters import add
 from django.test import SimpleTestCase
+from django.utils.functional import lazy
+from django.utils.translation import gettext_lazy
 
 from ..utils import setup
 
@@ -46,8 +48,69 @@ class AddTests(SimpleTestCase):
         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})
         self.assertEqual(output, 'Jan. 11, 2000')
 
+    @setup({'add08': '{{ s1|add:s2 }}'})
+    def test_add08_string_lazy_string(self):
+        """Test concatenating a regular string with a lazy string."""
+        output = self.engine.render_to_string('add08', {
+            's1': 'Hello ',
+            's2': gettext_lazy('World')
+        })
+        self.assertEqual(output, 'Hello World')
+
+    @setup({'add09': '{{ s1|add:s2 }}'})
+    def test_add09_lazy_string_string(self):
+        """Test concatenating a lazy string with a regular string."""
+        output = self.engine.render_to_string('add09', {
+            's1': gettext_lazy('Hello '),
+            's2': 'World'
+        })
+        self.assertEqual(output, 'Hello World')
+
+    @setup({'add10': '{{ s1|add:s2 }}'})
+    def test_add10_lazy_string_lazy_string(self):
+        """Test concatenating two lazy strings."""
+        output = self.engine.render_to_string('add10', {
+            's1': gettext_lazy('Hello '),
+            's2': gettext_lazy('World')
+        })
+        self.assertEqual(output, 'Hello World')
+
+    @setup({'add11': '{{ s1|add:s2 }}'})
+    def test_add11_custom_lazy_string(self):
+        """Test concatenating with custom lazy objects."""
+        custom_lazy = lazy(lambda: 'Custom', str)()
+        output = self.engine.render_to_string('add11', {
+            's1': 'Prefix ',
+            's2': custom_lazy
+        })
+        self.assertEqual(output, 'Prefix Custom')
+
 
 class FunctionTests(SimpleTestCase):
 
     def test_add(self):
         self.assertEqual(add('1', '2'), 3)
+
+    def test_add_string_lazy_string(self):
+        """Test add function with string and lazy string."""
+        lazy_str = gettext_lazy('World')
+        self.assertEqual(add('Hello ', lazy_str), 'Hello World')
+
+    def test_add_lazy_string_string(self):
+        """Test add function with lazy string and string."""
+        lazy_str = gettext_lazy('Hello ')
+        self.assertEqual(add(lazy_str, 'World'), 'Hello World')
+
+    def test_add_lazy_string_lazy_string(self):
+        """Test add function with two lazy strings."""
+        lazy_str1 = gettext_lazy('Hello ')
+        lazy_str2 = gettext_lazy('World')
+        self.assertEqual(add(lazy_str1, lazy_str2), 'Hello World')
+
+    def test_add_custom_lazy_objects(self):
+        """Test add function with custom lazy objects."""
+        custom_lazy1 = lazy(lambda: 'Custom ', str)()
+        custom_lazy2 = lazy(lambda: 'Lazy', str)()
+        self.assertEqual(add(custom_lazy1, custom_lazy2), 'Custom Lazy')
+        self.assertEqual(add('Prefix ', custom_lazy1), 'Prefix Custom ')
+        self.assertEqual(add(custom_lazy2, ' Suffix'), 'Lazy Suffix')
