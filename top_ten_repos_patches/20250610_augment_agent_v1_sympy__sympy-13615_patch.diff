diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py
index 917717bb74..03bb777704 100644
--- a/sympy/sets/sets.py
+++ b/sympy/sets/sets.py
@@ -215,11 +215,37 @@ def _complement(self, other):
 
         elif isinstance(other, EmptySet):
             return S.EmptySet
 
         elif isinstance(other, FiniteSet):
-            return FiniteSet(*[el for el in other if self.contains(el) != True])
+            # Separate elements by membership status
+            definitely_not_in = []  # elements definitely not in self
+            unknown = []  # elements with unknown membership
+            
+            for el in other:
+                contains_result = sympify(self.contains(el))
+                if contains_result is S.true:
+                    # Element is definitely in self, so exclude from complement
+                    pass
+                elif contains_result is S.false:
+                    # Element is definitely not in self, so include in complement
+                    definitely_not_in.append(el)
+                else:
+                    # Element has unknown membership
+                    unknown.append(el)
+            
+            if unknown:
+                # If there are elements with unknown membership, return a Complement
+                # that includes the definitely_not_in elements and the unknown elements
+                remaining = definitely_not_in + unknown
+                if remaining:
+                    return Complement(FiniteSet(*remaining), self, evaluate=False)
+                else:
+                    return S.EmptySet
+            else:
+                # All elements have known membership, so we can simplify completely
+                return FiniteSet(*definitely_not_in)
 
     def symmetric_difference(self, other):
         """
         Returns symmetric difference of `self` and `other`.
 
