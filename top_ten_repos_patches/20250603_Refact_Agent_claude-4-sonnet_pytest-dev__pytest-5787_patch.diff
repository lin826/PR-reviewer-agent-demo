diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py
index 4682d5b6e..cf39a3614 100644
--- a/src/_pytest/reports.py
+++ b/src/_pytest/reports.py
@@ -184,11 +184,62 @@ class BaseReport:
                 "sections": rep.longrepr.sections,
             }
 
+        def disassembled_exception_chain(rep):
+            """Serialize ExceptionChainRepr objects for chained exceptions."""
+            chain_data = []
+            for reprtraceback, reprcrash, descr in rep.longrepr.chain:
+                # Serialize the traceback
+                tb_data = reprtraceback.__dict__.copy()
+                if hasattr(reprtraceback, "reprentries"):
+                    new_entries = []
+                    for entry in reprtraceback.reprentries:
+                        entry_data = {
+                            "type": type(entry).__name__,
+                            "data": entry.__dict__.copy(),
+                        }
+                        for key, value in entry_data["data"].items():
+                            if hasattr(value, "__dict__"):
+                                entry_data["data"][key] = value.__dict__.copy()
+                        new_entries.append(entry_data)
+                    tb_data["reprentries"] = new_entries
+                
+                # Serialize the crash info
+                crash_data = reprcrash.__dict__.copy() if reprcrash else None
+                
+                chain_data.append({
+                    "reprtraceback": tb_data,
+                    "reprcrash": crash_data,
+                    "description": descr,
+                })
+            
+            return {
+                "chain": chain_data,
+                "sections": rep.longrepr.sections,
+            }
+
         d = self.__dict__.copy()
         if hasattr(self.longrepr, "toterminal"):
-            if hasattr(self.longrepr, "reprtraceback") and hasattr(
+            if hasattr(self.longrepr, "chain"):
+                # Check if this is a single exception chain (backward compatibility)
+                if len(self.longrepr.chain) == 1 and self.longrepr.chain[0][2] is None:
+                    # Single exception - serialize in old format for backward compatibility
+                    reprtraceback, reprcrash, _ = self.longrepr.chain[0]
+                    # Create a temporary object that looks like ReprExceptionInfo
+                    temp_repr = type('TempRepr', (), {
+                        'reprtraceback': reprtraceback,
+                        'reprcrash': reprcrash,
+                        'sections': self.longrepr.sections
+                    })()
+                    temp_report = type('TempReport', (), {'longrepr': temp_repr})()
+                    d["longrepr"] = disassembled_report(temp_report)
+                else:
+                    # True chained exceptions
+                    d["longrepr"] = disassembled_exception_chain(self)
+                    d["longrepr"]["_report_type"] = "ExceptionChainRepr"
+            elif hasattr(self.longrepr, "reprtraceback") and hasattr(
                 self.longrepr, "reprcrash"
             ):
+                # Handle ReprExceptionInfo (single exceptions) - keep backward compatibility
                 d["longrepr"] = disassembled_report(self)
             else:
                 d["longrepr"] = str(self.longrepr)
@@ -212,13 +263,73 @@ class BaseReport:
         Experimental method.
         """
         if reportdict["longrepr"]:
-            if (
-                "reprcrash" in reportdict["longrepr"]
-                and "reprtraceback" in reportdict["longrepr"]
+            longrepr_data = reportdict["longrepr"]
+            
+            # Check if this is an ExceptionChainRepr
+            if isinstance(longrepr_data, dict) and longrepr_data.get("_report_type") == "ExceptionChainRepr":
+                from _pytest._code.code import ExceptionChainRepr
+                
+                chain = []
+                for chain_item in longrepr_data["chain"]:
+                    # Reconstruct reprtraceback
+                    reprtraceback_data = chain_item["reprtraceback"]
+                    if "reprentries" in reprtraceback_data:
+                        unserialized_entries = []
+                        for entry_data in reprtraceback_data["reprentries"]:
+                            data = entry_data["data"]
+                            entry_type = entry_data["type"]
+                            if entry_type == "ReprEntry":
+                                reprfuncargs = None
+                                reprfileloc = None
+                                reprlocals = None
+                                if data["reprfuncargs"]:
+                                    reprfuncargs = ReprFuncArgs(**data["reprfuncargs"])
+                                if data["reprfileloc"]:
+                                    reprfileloc = ReprFileLocation(**data["reprfileloc"])
+                                if data["reprlocals"]:
+                                    reprlocals = ReprLocals(data["reprlocals"]["lines"])
+
+                                reprentry = ReprEntry(
+                                    lines=data["lines"],
+                                    reprfuncargs=reprfuncargs,
+                                    reprlocals=reprlocals,
+                                    filelocrepr=reprfileloc,
+                                    style=data["style"],
+                                )
+                            elif entry_type == "ReprEntryNative":
+                                reprentry = ReprEntryNative(data["lines"])
+                            else:
+                                _report_unserialization_failure(entry_type, cls, reportdict)
+                            unserialized_entries.append(reprentry)
+                        reprtraceback_data["reprentries"] = unserialized_entries
+                    
+                    reprtraceback = ReprTraceback(**reprtraceback_data)
+                    
+                    # Reconstruct reprcrash
+                    reprcrash = None
+                    if chain_item["reprcrash"]:
+                        reprcrash = ReprFileLocation(**chain_item["reprcrash"])
+                    
+                    # Add to chain
+                    chain.append((reprtraceback, reprcrash, chain_item["description"]))
+                
+                # Create ExceptionChainRepr
+                exception_chain = ExceptionChainRepr(chain)
+                
+                # Add sections
+                for section in longrepr_data["sections"]:
+                    exception_chain.addsection(*section)
+                    
+                reportdict["longrepr"] = exception_chain
+                
+            # Check if this is a ReprExceptionInfo (original logic)
+            elif (
+                isinstance(longrepr_data, dict) and
+                ("reprcrash" in longrepr_data and "reprtraceback" in longrepr_data)
             ):
 
-                reprtraceback = reportdict["longrepr"]["reprtraceback"]
-                reprcrash = reportdict["longrepr"]["reprcrash"]
+                reprtraceback = longrepr_data["reprtraceback"]
+                reprcrash = longrepr_data["reprcrash"]
 
                 unserialized_entries = []
                 reprentry = None
@@ -255,7 +366,7 @@ class BaseReport:
                     reprcrash=ReprFileLocation(**reprcrash),
                 )
 
-                for section in reportdict["longrepr"]["sections"]:
+                for section in longrepr_data["sections"]:
                     exception_info.addsection(*section)
                 reportdict["longrepr"] = exception_info
 
diff --git a/testing/test_reports.py b/testing/test_reports.py
index b8b1a5406..1dd8c221d 100644
--- a/testing/test_reports.py
+++ b/testing/test_reports.py
@@ -242,6 +242,61 @@ class TestReportSerialization:
         ):
             TestReport._from_json(data)
 
+    def test_chained_exception_serialization(self, testdir):
+        """Test serialization and deserialization of chained exceptions."""
+        testdir.makepyfile(
+            """
+            def test_chained_with_from():
+                try:
+                    try:
+                        raise ValueError(11)
+                    except Exception as e1:
+                        raise ValueError(12) from e1
+                except Exception as e2:
+                    raise ValueError(13) from e2
+
+            def test_chained_without_from():
+                try:
+                    try:
+                        raise ValueError(21)
+                    except Exception:
+                        raise ValueError(22)
+                except Exception:
+                    raise ValueError(23)
+        """
+        )
+        reprec = testdir.inline_run()
+        reports = reprec.getreports("pytest_runtest_logreport")
+        
+        # Find the failed test reports
+        failed_reports = [r for r in reports if r.outcome == "failed"]
+        assert len(failed_reports) == 2
+        
+        for report in failed_reports:
+            # Test serialization and deserialization
+            data = report._to_json()
+            deserialized_report = TestReport._from_json(data)
+            
+            # Verify the chain is preserved
+            original_repr = str(report.longrepr)
+            deserialized_repr = str(deserialized_report.longrepr)
+            
+            # Check that chained exception information is preserved
+            if "direct cause" in original_repr:
+                assert "direct cause" in deserialized_repr
+                assert "ValueError: 11" in deserialized_repr
+                assert "ValueError: 12" in deserialized_repr
+                assert "ValueError: 13" in deserialized_repr
+            elif "During handling" in original_repr:
+                assert "During handling" in deserialized_repr
+                assert "ValueError: 21" in deserialized_repr
+                assert "ValueError: 22" in deserialized_repr
+                assert "ValueError: 23" in deserialized_repr
+            
+            # Verify the chain structure is preserved
+            assert hasattr(deserialized_report.longrepr, 'chain')
+            assert len(deserialized_report.longrepr.chain) == 3
+
 
 class TestHooks:
     """Test that the hooks are working correctly for plugins"""
