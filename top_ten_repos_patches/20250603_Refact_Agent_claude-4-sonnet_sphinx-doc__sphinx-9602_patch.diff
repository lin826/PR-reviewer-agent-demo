diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index 9875a9f4b..60311b3c3 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -107,15 +107,20 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr
                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)
 
 
+class LiteralText(nodes.Text):
+    """A Text node that represents a literal value and should not be converted to a cross-reference."""
+    pass
+
+
 def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Node]:
     """Parse type annotation."""
-    def unparse(node: ast.AST) -> List[Node]:
+    def unparse(node: ast.AST, in_literal: bool = False) -> List[Node]:
         if isinstance(node, ast.Attribute):
-            return [nodes.Text("%s.%s" % (unparse(node.value)[0], node.attr))]
+            return [nodes.Text("%s.%s" % (unparse(node.value, in_literal)[0], node.attr))]
         elif isinstance(node, ast.BinOp):
-            result: List[Node] = unparse(node.left)
-            result.extend(unparse(node.op))
-            result.extend(unparse(node.right))
+            result: List[Node] = unparse(node.left, in_literal)
+            result.extend(unparse(node.op, in_literal))
+            result.extend(unparse(node.right, in_literal))
             return result
         elif isinstance(node, ast.BitOr):
             return [nodes.Text(' '), addnodes.desc_sig_punctuation('', '|'), nodes.Text(' ')]
@@ -123,11 +128,15 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod
             if node.value is Ellipsis:
                 return [addnodes.desc_sig_punctuation('', "...")]
             else:
-                return [nodes.Text(node.value)]
+                # Use LiteralText for literal values inside Literal[] to avoid cross-referencing
+                if in_literal:
+                    return [LiteralText(node.value)]
+                else:
+                    return [nodes.Text(node.value)]
         elif isinstance(node, ast.Expr):
-            return unparse(node.value)
+            return unparse(node.value, in_literal)
         elif isinstance(node, ast.Index):
-            return unparse(node.value)
+            return unparse(node.value, in_literal)
         elif isinstance(node, ast.List):
             result = [addnodes.desc_sig_punctuation('', '[')]
             if node.elts:
@@ -135,26 +144,48 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod
                 # last element of result if the for-loop was run at least
                 # once
                 for elem in node.elts:
-                    result.extend(unparse(elem))
+                    result.extend(unparse(elem, in_literal))
                     result.append(addnodes.desc_sig_punctuation('', ', '))
                 result.pop()
             result.append(addnodes.desc_sig_punctuation('', ']'))
             return result
         elif isinstance(node, ast.Module):
-            return sum((unparse(e) for e in node.body), [])
+            return sum((unparse(e, in_literal) for e in node.body), [])
         elif isinstance(node, ast.Name):
-            return [nodes.Text(node.id)]
+            # Use LiteralText for literal values inside Literal[] to avoid cross-referencing
+            if in_literal:
+                return [LiteralText(node.id)]
+            else:
+                return [nodes.Text(node.id)]
         elif isinstance(node, ast.Subscript):
-            result = unparse(node.value)
+            # Check if this is a Literal type annotation
+            is_literal = False
+            if isinstance(node.value, ast.Name) and node.value.id == 'Literal':
+                is_literal = True
+            elif isinstance(node.value, ast.Attribute):
+                # Handle typing.Literal or other qualified names
+                attr_name = []
+                current = node.value
+                while isinstance(current, ast.Attribute):
+                    attr_name.insert(0, current.attr)
+                    current = current.value
+                if isinstance(current, ast.Name):
+                    attr_name.insert(0, current.id)
+                    full_name = '.'.join(attr_name)
+                    if full_name in ('typing.Literal', 'typing_extensions.Literal'):
+                        is_literal = True
+            
+            result = unparse(node.value, in_literal)
             result.append(addnodes.desc_sig_punctuation('', '['))
-            result.extend(unparse(node.slice))
+            # Pass the literal flag to the slice content
+            result.extend(unparse(node.slice, is_literal or in_literal))
             result.append(addnodes.desc_sig_punctuation('', ']'))
             return result
         elif isinstance(node, ast.Tuple):
             if node.elts:
                 result = []
                 for elem in node.elts:
-                    result.extend(unparse(elem))
+                    result.extend(unparse(elem, in_literal))
                     result.append(addnodes.desc_sig_punctuation('', ', '))
                 result.pop()
             else:
@@ -167,7 +198,11 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod
                 if isinstance(node, ast.Ellipsis):
                     return [addnodes.desc_sig_punctuation('', "...")]
                 elif isinstance(node, ast.NameConstant):
-                    return [nodes.Text(node.value)]
+                    # Use LiteralText for literal values inside Literal[] to avoid cross-referencing
+                    if in_literal:
+                        return [LiteralText(node.value)]
+                    else:
+                        return [nodes.Text(node.value)]
 
             raise SyntaxError  # unsupported syntax
 
@@ -179,7 +214,7 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod
         tree = ast_parse(annotation)
         result = unparse(tree)
         for i, node in enumerate(result):
-            if isinstance(node, nodes.Text) and node.strip():
+            if isinstance(node, nodes.Text) and node.strip() and not isinstance(node, LiteralText):
                 result[i] = type_to_xref(str(node), env)
         return result
     except SyntaxError:
diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py
index 067febcf4..e5b1a9943 100644
--- a/tests/test_domain_py.py
+++ b/tests/test_domain_py.py
@@ -342,6 +342,67 @@ def test_parse_annotation(app):
     assert_node(doctree[0], pending_xref, refdomain="py", reftype="obj", reftarget="None")
 
 
+def test_parse_annotation_literal(app):
+    from sphinx.domains.python import LiteralText
+    
+    # Test basic Literal with numeric values
+    doctree = _parse_annotation("Literal[42]", app.env)
+    assert_node(doctree, ([pending_xref, "Literal"],
+                          [desc_sig_punctuation, "["],
+                          LiteralText,
+                          [desc_sig_punctuation, "]"]))
+    assert doctree[2].astext() == "42"
+    
+    # Test Literal with string values
+    doctree = _parse_annotation("Literal['hello']", app.env)
+    assert_node(doctree, ([pending_xref, "Literal"],
+                          [desc_sig_punctuation, "["],
+                          LiteralText,
+                          [desc_sig_punctuation, "]"]))
+    assert doctree[2].astext() == "hello"
+    
+    # Test Literal with multiple values
+    doctree = _parse_annotation("Literal[42, 'hello']", app.env)
+    assert_node(doctree, ([pending_xref, "Literal"],
+                          [desc_sig_punctuation, "["],
+                          LiteralText,
+                          [desc_sig_punctuation, ", "],
+                          LiteralText,
+                          [desc_sig_punctuation, "]"]))
+    assert doctree[2].astext() == "42"
+    assert doctree[4].astext() == "hello"
+    
+    # Test qualified typing.Literal
+    doctree = _parse_annotation("typing.Literal[42]", app.env)
+    assert_node(doctree, ([pending_xref, "typing.Literal"],
+                          [desc_sig_punctuation, "["],
+                          LiteralText,
+                          [desc_sig_punctuation, "]"]))
+    assert doctree[2].astext() == "42"
+    
+    # Test Literal with boolean values
+    doctree = _parse_annotation("Literal[True, False]", app.env)
+    assert_node(doctree, ([pending_xref, "Literal"],
+                          [desc_sig_punctuation, "["],
+                          LiteralText,
+                          [desc_sig_punctuation, ", "],
+                          LiteralText,
+                          [desc_sig_punctuation, "]"]))
+    assert doctree[2].astext() == "True"
+    assert doctree[4].astext() == "False"
+    
+    # Test nested Literal in other types
+    doctree = _parse_annotation("List[Literal[42]]", app.env)
+    assert_node(doctree, ([pending_xref, "List"],
+                          [desc_sig_punctuation, "["],
+                          [pending_xref, "Literal"],
+                          [desc_sig_punctuation, "["],
+                          LiteralText,
+                          [desc_sig_punctuation, "]"],
+                          [desc_sig_punctuation, "]"]))
+    assert doctree[4].astext() == "42"
+
+
 def test_pyfunction_signature(app):
     text = ".. py:function:: hello(name: str) -> str"
     doctree = restructuredtext.parse(app, text)
