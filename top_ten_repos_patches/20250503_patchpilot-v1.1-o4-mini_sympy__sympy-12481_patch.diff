diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 136ed5a478..7bf9c70333 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -894,13 +894,34 @@ def __new__(cls, *args, **kwargs):
         # for convenience in case one wants to enter permutations where
         # counting starts from 1.
 
+
         temp = flatten(args)
-        if has_dups(temp):
-            if is_cycle:
-                raise ValueError('there were repeated elements; to resolve '
-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))
-            else:
+        if is_cycle:
+
+            # Reinstate cross‑cycle duplication checking while allowing
+            # the exact same cycle to appear more than once.
+            seen = {}
+            for ci in args:
+                # Still forbid duplicates *within* a single cycle.
+                if has_dups(ci):
+                    raise ValueError('duplicate elements within a single cycle are not permitted')
+                tci = tuple(ci)
+                for x in ci:
+                    if x in seen:
+                        # If the previously recorded cycle differs from the
+                        # current one, the cycles are non‑disjoint and not
+                        # identical – this is forbidden.
+                        if seen[x] != tci:
+                            raise ValueError(
+                                'duplicate elements found in different cycles; '
+                                'cycles must be disjoint or identical.')
+                    else:
+                        seen[x] = tci
+
+        else:
+            if has_dups(temp):
                 raise ValueError('there were repeated elements.')
+
         temp = set(temp)
 
         if not is_cycle and \
@@ -2832,4 +2853,4 @@ def _merge(arr, temp, left, mid, right):
     return inv_count
 
 Perm = Permutation
-_af_new = Perm._af_new
+_af_new = Perm._af_new
