diff --git a/sphinx/application.py b/sphinx/application.py
index b55eb76c1..af15bf789 100644
--- a/sphinx/application.py
+++ b/sphinx/application.py
@@ -1303,4 +1303,4 @@ class TemplateBridge:
         """Called by the builder to render a template given as a string with a
         specified context (a Python dictionary).
         """
-        raise NotImplementedError('must be implemented in subclasses')
+        raise NotImplementedError('must be implemented in subclasses')
diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index af4b47bb0..51811ca07 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -181,4 +181,4 @@ def setup(app: Sphinx) -> Dict[str, Any]:
         'version': 'builtin',
         'parallel_read_safe': True,
         'parallel_write_safe': True,
-    }
+    }
diff --git a/sphinx/roles.py b/sphinx/roles.py
index e194db5bc..4c3badfa3 100644
--- a/sphinx/roles.py
+++ b/sphinx/roles.py
@@ -372,4 +372,4 @@ def setup(app: "Sphinx") -> Dict[str, Any]:
         'version': 'builtin',
         'parallel_read_safe': True,
         'parallel_write_safe': True,
-    }
+    }
diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py
index cf4318cda..e0e917a93 100644
--- a/sphinx/util/typing.py
+++ b/sphinx/util/typing.py
@@ -176,8 +176,10 @@ def _restify_py37(cls: Optional[Type]) -> str:
         elif cls.__module__ == 'typing' and cls._name == 'Callable':
             args = ', '.join(restify(a) for a in cls.__args__[:-1])
             text += r"\ [[%s], %s]" % (args, restify(cls.__args__[-1]))
+
         elif cls.__module__ == 'typing' and getattr(origin, '_name', None) == 'Literal':
-            text += r"\ [%s]" % ', '.join(repr(a) for a in cls.__args__)
+            text += r"\ [%s]" % ', '.join(_format_literal_value(a) for a in cls.__args__)
+
         elif cls.__args__:
             text += r"\ [%s]" % ", ".join(restify(a) for a in cls.__args__)
 
@@ -332,8 +334,27 @@ def stringify(annotation: Any) -> str:
         return _stringify_py36(annotation)
 
 
+
+
+def _format_literal_value(value: Any) -> str:
+    """Return a representation for a typing.Literal argument.
+
+    For boolean literals (``True`` or ``False``), the value is wrapped in
+    inline‑code markers to avoid being interpreted as a cross‑reference.
+    For all other literal values, the plain ``repr`` is returned so that
+    the value is shown as‑is without any additional markup.
+    """
+    text = repr(value)
+    if isinstance(value, bool):
+        return f"``{text}``"
+    else:
+        return text
+
+
+
 def _stringify_py37(annotation: Any) -> str:
     """stringify() for py37+."""
+
     module = getattr(annotation, '__module__', None)
     if module == 'typing':
         if getattr(annotation, '_name', None):
@@ -380,9 +401,11 @@ def _stringify_py37(annotation: Any) -> str:
             args = ', '.join(stringify(a) for a in annotation.__args__[:-1])
             returns = stringify(annotation.__args__[-1])
             return '%s[[%s], %s]' % (qualname, args, returns)
+
         elif qualname == 'Literal':
-            args = ', '.join(repr(a) for a in annotation.__args__)
+            args = ', '.join(_format_literal_value(a) for a in annotation.__args__)
             return '%s[%s]' % (qualname, args)
+
         elif str(annotation).startswith('typing.Annotated'):  # for py39+
             return stringify(annotation.__args__[0])
         elif all(is_system_TypeVar(a) for a in annotation.__args__):
@@ -457,4 +480,4 @@ deprecated_alias('sphinx.util.typing',
                  {
                      'DirectiveOption': Callable[[str], Any],
                  },
-                 RemovedInSphinx60Warning)
+                 RemovedInSphinx60Warning)
