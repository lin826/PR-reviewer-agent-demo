diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index fdca700c9d..eeb618aa9f 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -137,10 +137,38 @@ def compile_json_path(key_transforms, include_root=True):
         else:
             path.append("[%s]" % num)
     return "".join(path)
 
 
+def compile_json_path_for_has_key(key_transforms, include_root=True):
+    """
+    Compile JSON path for has_key lookups, treating only the final key as an object key.
+    This is needed because has_key lookups should always check for object keys,
+    even when the key is numeric (e.g., '123' should be treated as an object key,
+    not as array index [123]). However, intermediate keys in the path should still
+    be treated normally (allowing array indices).
+    """
+    path = ["$"] if include_root else []
+    for i, key_transform in enumerate(key_transforms):
+        is_final_key = (i == len(key_transforms) - 1)
+        
+        if is_final_key:
+            # Final key in has_key lookup should always be treated as object key
+            path.append(".")
+            path.append(json.dumps(key_transform))
+        else:
+            # Intermediate keys should be treated normally (allow array indices)
+            try:
+                num = int(key_transform)
+            except ValueError:  # non-integer
+                path.append(".")
+                path.append(json.dumps(key_transform))
+            else:
+                path.append("[%s]" % num)
+    return "".join(path)
+
+
 class DataContains(PostgresOperatorLookup):
     lookup_name = "contains"
     postgres_operator = "@>"
 
     def as_sql(self, compiler, connection):
@@ -191,15 +219,21 @@ class HasKeyLookup(PostgresOperatorLookup):
         for key in rhs:
             if isinstance(key, KeyTransform):
                 *_, rhs_key_transforms = key.preprocess_lhs(compiler, connection)
             else:
                 rhs_key_transforms = [key]
+            # Use special path compilation for has_key lookups, but not for isnull lookups
+            if getattr(self, '_for_isnull', False):
+                path_func = compile_json_path
+            else:
+                path_func = compile_json_path_for_has_key
+            
             rhs_params.append(
                 "%s%s"
                 % (
                     lhs_json_path,
-                    compile_json_path(rhs_key_transforms, include_root=False),
+                    path_func(rhs_key_transforms, include_root=False),
                 )
             )
         # Add condition for each key.
         if self.logical_operator:
             sql = "(%s)" % self.logical_operator.join([sql] * len(rhs_params))
@@ -399,11 +433,14 @@ class KeyTransformIsNull(lookups.IsNull):
 
     def as_sqlite(self, compiler, connection):
         template = "JSON_TYPE(%s, %%s) IS NULL"
         if not self.rhs:
             template = "JSON_TYPE(%s, %%s) IS NOT NULL"
-        return HasKey(self.lhs.lhs, self.lhs.key_name).as_sql(
+        # Create a HasKey instance but mark it as being used for isnull lookup
+        has_key = HasKey(self.lhs.lhs, self.lhs.key_name)
+        has_key._for_isnull = True  # Mark this to avoid forcing object keys
+        return has_key.as_sql(
             compiler,
             connection,
             template=template,
         )
 
