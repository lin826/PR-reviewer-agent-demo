diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py
index 5b06482..9f7b672 100644
--- a/django/contrib/sessions/backends/base.py
+++ b/django/contrib/sessions/backends/base.py
@@ -106,13 +106,18 @@ class SessionBase:
         key_salt = "django.contrib.sessions" + self.__class__.__name__
         return salted_hmac(key_salt, value).hexdigest()
 
+
     def encode(self, session_dict):
         "Return the given session dictionary serialized and encoded as a string."
+        if getattr(settings, 'DEFAULT_HASHING_ALGORITHM', '') == 'sha1':
+            # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.
+            return self._legacy_encode(session_dict)
         return signing.dumps(
             session_dict, salt=self.key_salt, serializer=self.serializer,
             compress=True,
         )
 
+
     def decode(self, session_data):
         try:
             return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)
@@ -137,10 +142,21 @@ class SessionBase:
             # these happen, just return an empty dictionary (an empty session).
             if isinstance(e, SuspiciousOperation):
                 logger = logging.getLogger('django.security.%s' % e.__class__.__name__)
+
                 logger.warning(str(e))
             return {}
 
+    def _legacy_encode(self, session_dict):
+        # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.
+        serialized = self.serializer().dumps(session_dict)
+        if isinstance(serialized, str):
+            serialized = serialized.encode()
+        hash = self._hash(serialized)
+        encoded = base64.b64encode(hash.encode() + b':' + serialized).decode('ascii')
+        return encoded
+
     def update(self, dict_):
+
         self._session.update(dict_)
         self.modified = True
 
