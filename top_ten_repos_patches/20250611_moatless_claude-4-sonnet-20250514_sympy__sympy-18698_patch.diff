--- a/sympy/polys/polytools.py
+++ b/sympy/polys/polytools.py
@@ -5897,6 +5897,25 @@
 
 def _symbolic_factor_list(expr, opt, method):
     """Helper function for :func:`_symbolic_factor`. """
+    # For square-free factorization, check if we need to expand to get canonical form
+    if method == 'sqf' and isinstance(expr, Mul):
+        from collections import defaultdict
+        # Analyze the multiplicities in the factorized expression
+        multiplicities = defaultdict(int)
+        for arg in Mul.make_args(expr):
+            if arg.is_Pow and len(arg.args) == 2:
+                base, exp = arg.args
+                if exp.is_Integer and exp > 1:
+                    multiplicities[exp] += 1
+            elif not arg.is_Number:
+                multiplicities[1] += 1
+        
+        # If there are multiple factors with the same multiplicity > 1, expand
+        should_expand = any(count > 1 and mult > 1 for mult, count in multiplicities.items())
+        if should_expand:
+            from sympy import expand
+            expr = expand(expr)
+    
     coeff, factors = S.One, []
 
     args = [i._eval_factor() if hasattr(i, '_eval_factor') else i
@@ -5949,6 +5968,8 @@
                         other.append((f, k))
 
                 factors.append((_factors_product(other), exp))
+
+
 
     return coeff, factors
 
