diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py
index da85cb4b92..8f221038c2 100644
--- a/django/core/serializers/base.py
+++ b/django/core/serializers/base.py
@@ -336,14 +336,28 @@ def build_instance(Model, data, db):
         and hasattr(default_manager, "get_by_natural_key")
         and hasattr(Model, "natural_key")
     ):
-        natural_key = Model(**data).natural_key()
+
+
         try:
+            temp_instance = Model(**data)
+            # Bind the temporary instance to the target database so that any
+            # database access performed inside natural_key() uses the correct DB.
+            temp_instance._state.db = db
+            natural_key = temp_instance.natural_key()
             data[Model._meta.pk.attname] = Model._meta.pk.to_python(
                 default_manager.db_manager(db).get_by_natural_key(*natural_key).pk
             )
-        except Model.DoesNotExist:
+        except ObjectDoesNotExist:
+            # Either the related objects referenced by natural_key() or the
+            # instance itself are not yet present in the target database.
+            # Defer PK assignment and let normal save() logic create it later.
             pass
-    return Model(**data)
+
+    instance = Model(**data)
+    # Bind the final instance to the target database as well.
+    instance._state.db = db
+    return instance
+
 
 
 def deserialize_m2m_values(field, field_value, using, handle_forward_references):
@@ -405,4 +419,4 @@ def deserialize_fk_value(field, field_value, using, handle_forward_references):
         if model._meta.pk.remote_field:
             value = value.pk
         return value
-    return model._meta.get_field(field_name).to_python(field_value)
+    return model._meta.get_field(field_name).to_python(field_value)
diff --git a/django/core/serializers/python.py b/django/core/serializers/python.py
index a3918bf9d2..07a02aba02 100644
--- a/django/core/serializers/python.py
+++ b/django/core/serializers/python.py
@@ -182,4 +182,4 @@ def _get_model(model_identifier):
     except (LookupError, TypeError):
         raise base.DeserializationError(
             "Invalid model identifier: '%s'" % model_identifier
-        )
+        )
diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index f62a9170c0..ee234a896d 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -1414,4 +1414,4 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):
                     using=db,
                 )
 
-    return ManyRelatedManager
+    return ManyRelatedManager
diff --git a/django/db/models/query.py b/django/db/models/query.py
index 5c78c6e315..df46b1e6ec 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -2409,4 +2409,4 @@ def get_related_populators(klass_info, select, db):
     for rel_klass_info in related_klass_infos:
         rel_cls = RelatedPopulator(rel_klass_info, select, db)
         iterators.append(rel_cls)
-    return iterators
+    return iterators
