diff --git a/doc/whats-new.rst b/doc/whats-new.rst
index 488d8baa..282b675d 100644
--- a/doc/whats-new.rst
+++ b/doc/whats-new.rst
@@ -68,8 +68,10 @@ Bug fixes
   <https://github.com/spencerkclark>`_ and `Mark Harfouche <http://github.com/hmaarrfk>`_.
 - :py:meth:`DataArray.astype`, :py:meth:`Dataset.astype` and :py:meth:`Variable.astype` support
   the ``order`` and ``subok`` parameters again. This fixes a regression introduced in version 0.16.1
-  (:issue:`4644`, :pull:`4683`).
-  By `Richard Kleijn <https://github.com/rhkleijn>`_ .
+- Fixed inconsistency in :py:meth:`DataArray.integrate` which used parameter name ``dim`` while
+  :py:meth:`Dataset.integrate` and the differentiate methods used ``coord``. Now all methods consistently
+  use ``coord`` as the parameter name. The ``dim`` parameter in :py:meth:`DataArray.integrate` is now
+  deprecated.
 - Remove dictionary unpacking when using ``.loc`` to avoid collision with ``.sel`` parameters (:pull:`4695`).
   By `Anderson Banihirwe <https://github.com/andersy005>`_
 - Fix the legend created by :py:meth:`Dataset.plot.scatter` (:issue:`4641`, :pull:`4723`).
diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py
index 2fef3edb..f3a7f658 100644
--- a/xarray/core/dataarray.py
+++ b/xarray/core/dataarray.py
@@ -3481,21 +3481,23 @@ class DataArray(AbstractArray, DataWithCoords):
         return self._from_temp_dataset(ds)
 
     def integrate(
-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None
+        self, coord=None, datetime_unit: str = None, *, dim=None
     ) -> "DataArray":
         """ integrate the array with the trapezoidal rule.
 
         .. note::
-            This feature is limited to simple cartesian geometry, i.e. dim
+            This feature is limited to simple cartesian geometry, i.e. coord
             must be one dimensional.
 
         Parameters
         ----------
-        dim : hashable, or sequence of hashable
+        coord : hashable, or sequence of hashable
             Coordinate(s) used for the integration.
         datetime_unit : {"Y", "M", "W", "D", "h", "m", "s", "ms", "us", "ns", \
                          "ps", "fs", "as"}, optional
             Can be used to specify the unit if datetime coordinate is used.
+        dim : hashable, or sequence of hashable, optional
+            Deprecated parameter, use ``coord`` instead.
 
         Returns
         -------
@@ -3528,7 +3530,24 @@ class DataArray(AbstractArray, DataWithCoords):
         array([5.4, 6.6, 7.8])
         Dimensions without coordinates: y
         """
-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)
+        import warnings
+
+        if dim is not None:
+            if coord is not None:
+                raise TypeError(
+                    "Cannot specify both 'dim' and 'coord' parameters. 'dim' is "
+                    "deprecated, use 'coord' instead."
+                )
+            warnings.warn(
+                "'dim' parameter in DataArray.integrate has been deprecated and will "
+                "be removed in a future version. Use 'coord' instead.",
+                FutureWarning, stacklevel=2
+            )
+            coord = dim
+        elif coord is None:
+            raise TypeError("Either 'coord' or the deprecated 'dim' parameter must be provided.")
+
+        ds = self._to_temp_dataset().integrate(coord, datetime_unit)
         return self._from_temp_dataset(ds)
 
     def unify_chunks(self) -> "DataArray":

