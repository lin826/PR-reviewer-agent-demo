diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 967a91fdc8..fdd7a463a2 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -806,6 +806,41 @@ class IndexOperation(Operation):
     @cached_property
     def model_name_lower(self):
         return self.model_name.lower()
+    
+    def references_index(self, model_name, index_name):
+        """
+        Return True if this operation references the given index name on the given model.
+        Used by the optimizer to determine if an AddIndex/RemoveIndex pair can be eliminated.
+        """
+        if self.model_name_lower != model_name.lower():
+            return False
+            
+        # For AddIndex, check index.name
+        if hasattr(self, 'index'):
+            return self.index.name.lower() == index_name.lower()
+        # For RemoveIndex, check name directly
+        elif hasattr(self, 'name'):
+            return self.name.lower() == index_name.lower()
+        return False
+    
+    def can_reduce_through(self, operation, app_label):
+        """
+        Allow AddIndex/RemoveIndex operations to optimize through operations 
+        that don't affect the same model or index.
+        """
+        if hasattr(operation, 'model_name_lower'):
+            if self.model_name_lower != operation.model_name_lower:
+                return True
+            
+            # If operation is an IndexOperation, check if it affects the same index
+            if isinstance(operation, IndexOperation):
+                self_idx_name = self.index.name.lower() if hasattr(self, 'index') else self.name.lower()
+                op_idx_name = operation.index.name.lower() if hasattr(operation, 'index') else operation.name.lower()
+                # Can reduce through if different indexes
+                return self_idx_name != op_idx_name
+                
+        # For other operations, let them decide
+        return super().can_reduce_through(operation, app_label) if hasattr(super(), 'can_reduce_through') else False
 
 
 class AddIndex(IndexOperation):
@@ -860,6 +895,11 @@ class AddIndex(IndexOperation):
     @property
     def migration_name_fragment(self):
         return "%s_%s" % (self.model_name_lower, self.index.name.lower())
+        
+    def reduce(self, operation, app_label):
+        if isinstance(operation, RemoveIndex) and operation.references_index(self.model_name, self.index.name):
+            return []
+        return super().reduce(operation, app_label)
 
 
 class RemoveIndex(IndexOperation):
@@ -899,6 +939,10 @@ class RemoveIndex(IndexOperation):
 
     def describe(self):
         return "Remove index %s from %s" % (self.name, self.model_name)
+        
+    def reduce(self, operation, app_label):
+        # RemoveIndex operation can't optimize with operations that come after it
+        return super().reduce(operation, app_label)
 
     @property
     def migration_name_fragment(self):

