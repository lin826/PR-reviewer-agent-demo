diff --git a/django/utils/datastructures.py b/django/utils/datastructures.py
index 871b016715..721b0ee951 100644
--- a/django/utils/datastructures.py
+++ b/django/utils/datastructures.py
@@ -34,6 +34,9 @@ class OrderedSet:
     def __len__(self):
         return len(self.dict)
 
+    def __reversed__(self):
+        return reversed(self.dict)
+
 
 class MultiValueDictKeyError(KeyError):
     pass
diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py
index 45d172f984..949a594d34 100644
--- a/tests/utils_tests/test_datastructures.py
+++ b/tests/utils_tests/test_datastructures.py
@@ -55,6 +55,33 @@ class OrderedSetTests(SimpleTestCase):
         s.add(2)
         self.assertEqual(len(s), 2)
 
+    def test_reversed(self):
+        # Test basic reversed functionality
+        s = OrderedSet([1, 2, 3, 4, 5])
+        self.assertEqual(list(reversed(s)), [5, 4, 3, 2, 1])
+        
+        # Test empty set
+        s = OrderedSet()
+        self.assertEqual(list(reversed(s)), [])
+        
+        # Test single element
+        s = OrderedSet([42])
+        self.assertEqual(list(reversed(s)), [42])
+        
+        # Test with strings
+        s = OrderedSet(['a', 'b', 'c'])
+        self.assertEqual(list(reversed(s)), ['c', 'b', 'a'])
+        
+        # Test that duplicates are handled correctly
+        s = OrderedSet([1, 2, 2, 3, 1])
+        self.assertEqual(list(reversed(s)), [3, 2, 1])
+        
+        # Test after dynamic operations
+        s = OrderedSet([1, 2, 3])
+        s.add(4)
+        s.remove(2)
+        self.assertEqual(list(reversed(s)), [4, 3, 1])
+
 
 class MultiValueDictTests(SimpleTestCase):
 
