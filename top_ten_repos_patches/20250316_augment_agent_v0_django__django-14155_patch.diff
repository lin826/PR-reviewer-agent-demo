diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 9b00e24509..f3721d84af 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -29,11 +29,22 @@ from .exceptions import NoReverseMatch, Resolver404
 from .utils import get_callable
 
 
 class ResolverMatch:
     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):
-        self.func = func
+        # Check if func is a functools.partial
+        if isinstance(func, functools.partial):
+            # Store the original function and partial args/keywords
+            self.func = func.func
+            self.partial_args = func.args
+            self.partial_keywords = func.keywords
+        else:
+            # Regular function
+            self.func = func
+            self.partial_args = None
+            self.partial_keywords = None
+            
         self.args = args
         self.kwargs = kwargs
         self.url_name = url_name
         self.route = route
         self.tried = tried
@@ -43,26 +54,30 @@ class ResolverMatch:
         self.app_names = [x for x in app_names if x] if app_names else []
         self.app_name = ':'.join(self.app_names)
         self.namespaces = [x for x in namespaces if x] if namespaces else []
         self.namespace = ':'.join(self.namespaces)
 
-        if not hasattr(func, '__name__'):
+        if not hasattr(self.func, '__name__'):
             # A class-based view
-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__
+            self._func_path = self.func.__class__.__module__ + '.' + self.func.__class__.__name__
         else:
             # A function-based view
-            self._func_path = func.__module__ + '.' + func.__name__
+            self._func_path = self.func.__module__ + '.' + self.func.__name__
 
         view_path = url_name or self._func_path
         self.view_name = ':'.join(self.namespaces + [view_path])
 
     def __getitem__(self, index):
         return (self.func, self.args, self.kwargs)[index]
 
     def __repr__(self):
-        return "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)" % (
-            self._func_path, self.args, self.kwargs, self.url_name,
+        partial_info = ""
+        if self.partial_args is not None or self.partial_keywords is not None:
+            partial_info = " [partial with args=%s, keywords=%s]" % (self.partial_args, self.partial_keywords)
+        
+        return "ResolverMatch(func=%s%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)" % (
+            self._func_path, partial_info, self.args, self.kwargs, self.url_name,
             self.app_names, self.namespaces, self.route,
         )
 
 
 def get_resolver(urlconf=None):
