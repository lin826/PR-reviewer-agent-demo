diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index 92fe4affb9..3a462f1c4c 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -277,6 +277,7 @@ class Collector:
             if self.can_fast_delete(instance):
                 with transaction.mark_for_rollback_on_error():
                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)
+                setattr(instance, model._meta.pk.attname, None)
                 return count, {model._meta.label: count}
 
         with transaction.atomic(using=self.using, savepoint=False):
diff --git a/tests/delete/tests.py b/tests/delete/tests.py
index 55eeb226ea..4893b5611f 100644
--- a/tests/delete/tests.py
+++ b/tests/delete/tests.py
@@ -208,6 +208,48 @@ class DeletionTests(TestCase):
 
         models.signals.pre_delete.disconnect(pre_delete)
 
+    def test_delete_clears_pk_for_single_instance(self):
+        """
+        Test that delete() clears the primary key for single instances
+        without dependencies (fast delete path).
+        """
+        # Test simple model without dependencies
+        r = R.objects.create()
+        pk_before = r.pk
+        self.assertIsNotNone(pk_before)
+        
+        r.delete()
+        
+        # PK should be cleared after delete
+        self.assertIsNone(r.pk)
+        
+        # Verify object was actually deleted from database
+        self.assertFalse(R.objects.filter(pk=pk_before).exists())
+
+    def test_delete_clears_pk_for_multiple_instances(self):
+        """
+        Test that delete() clears the primary key for multiple instances
+        (regular delete path).
+        """
+        # Create multiple instances
+        r1 = R.objects.create()
+        r2 = R.objects.create()
+        pk1_before = r1.pk
+        pk2_before = r2.pk
+        
+        # Delete using collector (simulates multiple instance deletion)
+        from django.db.models.deletion import Collector
+        collector = Collector(using='default')
+        collector.collect([r1, r2])
+        collector.delete()
+        
+        # PKs should be cleared after delete
+        self.assertIsNone(r1.pk)
+        self.assertIsNone(r2.pk)
+        
+        # Verify objects were actually deleted from database
+        self.assertFalse(R.objects.filter(pk__in=[pk1_before, pk2_before]).exists())
+
     def test_deletion_order(self):
         pre_delete_order = []
         post_delete_order = []
