--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -598,11 +598,37 @@
             attr_docs = self.analyzer.find_attr_docs()
             if self.objpath:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
+                found_attr_doc = None
+                
                 if key in attr_docs:
+                    found_attr_doc = attr_docs[key]
+                elif (hasattr(self.options, 'inherited_members') and 
+                      self.options.inherited_members and 
+                      hasattr(self, 'parent') and self.parent and 
+                      inspect.isclass(self.parent)):
+                    # Check base classes for inherited attribute documentation
+                    attrname = self.objpath[-1]
+                    for cls in inspect.getmro(self.parent):
+                        if cls == self.parent:
+                            continue  # Skip the current class, already checked
+                        try:
+                            module = safe_getattr(cls, '__module__')
+                            qualname = safe_getattr(cls, '__qualname__')
+                            if module and qualname:
+                                base_analyzer = ModuleAnalyzer.for_module(module)
+                                base_attr_docs = base_analyzer.find_attr_docs()
+                                base_key = (qualname, attrname)
+                                if base_key in base_attr_docs:
+                                    found_attr_doc = base_attr_docs[base_key]
+                                    break
+                        except (AttributeError, PycodeError):
+                            continue
+                
+                if found_attr_doc:
                     no_docstring = True
                     # make a copy of docstring for attributes to avoid cache
                     # the change of autodoc-process-docstring event.
-                    docstrings = [list(attr_docs[key])]
+                    docstrings = [list(found_attr_doc)]
 
                     for i, line in enumerate(self.process_doc(docstrings)):
                         self.add_line(line, sourcename, i)
