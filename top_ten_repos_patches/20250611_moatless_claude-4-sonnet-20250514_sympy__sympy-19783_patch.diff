--- a/sympy/physics/quantum/operator.py
+++ b/sympy/physics/quantum/operator.py
@@ -310,7 +310,39 @@
         if isinstance(other, Operator):
             return other
 
+        # Handle multiplication with Dagger objects
+        if hasattr(other, 'args') and len(other.args) == 1:
+            from sympy.physics.quantum.dagger import Dagger
+            if isinstance(other, Dagger) and isinstance(other.args[0], Operator):
+                return other
+                
+        # Handle multiplication with powers of operators (e.g., U**(-1) from Dagger(UnitaryOperator))
+        if hasattr(other, 'base') and isinstance(other.base, Operator):
+            from sympy.core.power import Pow
+            if isinstance(other, Pow):
+                return other
+
         return Mul(self, other)
+
+    def __rmul__(self, other):
+        """Handle right multiplication: other * self where self is IdentityOperator"""
+        
+        if isinstance(other, Operator):
+            return other
+
+        # Handle multiplication with Dagger objects
+        if hasattr(other, 'args') and len(other.args) == 1:
+            from sympy.physics.quantum.dagger import Dagger
+            if isinstance(other, Dagger) and isinstance(other.args[0], Operator):
+                return other
+                
+        # Handle multiplication with powers of operators (e.g., U**(-1) from Dagger(UnitaryOperator))
+        if hasattr(other, 'base') and isinstance(other.base, Operator):
+            from sympy.core.power import Pow
+            if isinstance(other, Pow):
+                return other
+
+        return Mul(other, self)
 
     def _represent_default_basis(self, **options):
         if not self.N or self.N == oo:

--- a/sympy/physics/quantum/dagger.py
+++ b/sympy/physics/quantum/dagger.py
@@ -85,5 +85,12 @@
             return obj
         return Expr.__new__(cls, arg)
 
+    def __mul__(self, other):
+        from sympy.physics.quantum.operator import IdentityOperator
+        if isinstance(other, IdentityOperator):
+            return self
+        from sympy.core.mul import Mul
+        return Mul(self, other)
+
 adjoint.__name__ = "Dagger"
 adjoint._sympyrepr = lambda a, b: "Dagger(%s)" % b._print(a.args[0])
