diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py
index fff7da80ae..34010a665d 100644
--- a/sympy/stats/crv_types.py
+++ b/sympy/stats/crv_types.py
@@ -45,11 +45,11 @@
 
 from __future__ import print_function, division
 
 from sympy import (log, sqrt, pi, S, Dummy, Interval, sympify, gamma,
                    Piecewise, And, Eq, binomial, factorial, Sum, floor, Abs,
-                   Lambda, Basic, lowergamma, erf, erfc, I)
+                   Lambda, Basic, lowergamma, erf, erfc, I, asin, sign, uppergamma, hyper)
 from sympy import beta as beta_fn
 from sympy import cos, exp, besseli
 from sympy.stats.crv import (SingleContinuousPSpace, SingleContinuousDistribution,
         ContinuousDistributionHandmade)
 from sympy.stats.rv import _value_check
@@ -151,10 +151,18 @@ class ArcsinDistribution(SingleContinuousDistribution):
     _argnames = ('a', 'b')
 
     def pdf(self, x):
         return 1/(pi*sqrt((x - self.a)*(self.b - x)))
 
+    def _cdf(self, x):
+        a, b = self.a, self.b
+        return Piecewise(
+            (S.Zero, x < a),
+            (2/pi * asin(sqrt((x - a)/(b - a))), x <= b),
+            (S.One, True)
+        )
+
 def Arcsin(name, a=0, b=1):
     r"""
     Create a Continuous Random Variable with an arcsin distribution.
 
     The density of the arcsin distribution is given by
@@ -668,10 +676,17 @@ class DagumDistribution(SingleContinuousDistribution):
 
     def pdf(self, x):
         p, a, b = self.p, self.a, self.b
         return a*p/x*((x/b)**(a*p)/(((x/b)**a + 1)**(p + 1)))
 
+    def _cdf(self, x):
+        p, a, b = self.p, self.a, self.b
+        return Piecewise(
+            (S.Zero, x <= 0),
+            ((S.One + (x/b)**(-a))**(-p), True)
+        )
+
 
 def Dagum(name, p, a, b):
     r"""
     Create a continuous random variable with a Dagum distribution.
 
@@ -1040,10 +1055,17 @@ def __new__(cls, a, s=1, m=0):
 
     def pdf(self, x):
         a, s, m = self.a, self.s, self.m
         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))
 
+    def _cdf(self, x):
+        a, s, m = self.a, self.s, self.m
+        return Piecewise(
+            (S.Zero, x <= m),
+            (exp(-((x-m)/s)**(-a)), True)
+        )
+
 def Frechet(name, a, s=1, m=0):
     r"""
     Create a continuous random variable with a Frechet distribution.
 
     The density of the Frechet distribution is given by
@@ -1106,10 +1128,17 @@ def check(k, theta):
 
     def pdf(self, x):
         k, theta = self.k, self.theta
         return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)
 
+    def _cdf(self, x):
+        k, theta = self.k, self.theta
+        return Piecewise(
+            (lowergamma(k, x/theta)/gamma(k), x >= 0),
+            (S.Zero, True)
+        )
+
     def sample(self):
         return random.gammavariate(self.k, self.theta)
 
 
 def Gamma(name, k, theta):
@@ -1198,10 +1227,17 @@ def check(a, b):
 
     def pdf(self, x):
         a, b = self.a, self.b
         return b**a/gamma(a) * x**(-a-1) * exp(-b/x)
 
+    def _cdf(self, x):
+        a, b = self.a, self.b
+        return Piecewise(
+            (uppergamma(a, b/x)/gamma(a), x > 0),
+            (S.Zero, True)
+        )
+
 def GammaInverse(name, a, b):
     r"""
     Create a continuous random variable with an inverse Gamma distribution.
 
     The density of the inverse Gamma distribution is given by
@@ -1383,10 +1419,18 @@ def check(a, b):
 
     def pdf(self, x):
         a, b = self.a, self.b
         return a * b * x**(a-1) * (1-x**a)**(b-1)
 
+    def _cdf(self, x):
+        a, b = self.a, self.b
+        return Piecewise(
+            (S.Zero, x < 0),
+            (S.One - (S.One - x**a)**b, x <= 1),
+            (S.One, True)
+        )
+
 def Kumaraswamy(name, a, b):
     r"""
     Create a Continuous Random Variable with a Kumaraswamy distribution.
 
     The density of the Kumaraswamy distribution is given by
@@ -1443,10 +1487,17 @@ class LaplaceDistribution(SingleContinuousDistribution):
 
     def pdf(self, x):
         mu, b = self.mu, self.b
         return 1/(2*b)*exp(-Abs(x - mu)/b)
 
+    def _cdf(self, x):
+        mu, b = self.mu, self.b
+        return Piecewise(
+            (S.Half*exp((x - mu)/b), x < mu),
+            (S.One - S.Half*exp(-(x - mu)/b), True)
+        )
+
 
 def Laplace(name, mu, b):
     r"""
     Create a continuous random variable with a Laplace distribution.
 
@@ -1499,10 +1550,14 @@ class LogisticDistribution(SingleContinuousDistribution):
 
     def pdf(self, x):
         mu, s = self.mu, self.s
         return exp(-(x - mu)/s)/(s*(1 + exp(-(x - mu)/s))**2)
 
+    def _cdf(self, x):
+        mu, s = self.mu, self.s
+        return S.One/(S.One + exp(-(x - mu)/s))
+
 
 def Logistic(name, mu, s):
     r"""
     Create a continuous random variable with a logistic distribution.
 
@@ -1709,10 +1764,17 @@ class NakagamiDistribution(SingleContinuousDistribution):
 
     def pdf(self, x):
         mu, omega = self.mu, self.omega
         return 2*mu**mu/(gamma(mu)*omega**mu)*x**(2*mu - 1)*exp(-mu/omega*x**2)
 
+    def _cdf(self, x):
+        mu, omega = self.mu, self.omega
+        return Piecewise(
+            (S.Zero, x <= 0),
+            (lowergamma(mu, mu*x**2/omega)/gamma(mu), True)
+        )
+
 
 def Nakagami(name, mu, omega):
     r"""
     Create a continuous random variable with a Nakagami distribution.
 
@@ -2225,10 +2287,14 @@ class StudentTDistribution(SingleContinuousDistribution):
 
     def pdf(self, x):
         nu = self.nu
         return 1/(sqrt(nu)*beta_fn(S(1)/2, nu/2))*(1 + x**2/nu)**(-(nu + 1)/2)
 
+    def _cdf(self, x):
+        nu = self.nu
+        return S.Half + x*gamma((nu + 1)/2)/(sqrt(pi*nu)*gamma(nu/2)) * hyper([S.Half, (nu + 1)/2], [S(3)/2], -x**2/nu)
+
 
 def StudentT(name, nu):
     r"""
     Create a continuous random variable with a student's t distribution.
 
@@ -2552,10 +2618,19 @@ def pdf(self, x):
         n = self.n
         k = Dummy("k")
         return 1/factorial(
             n - 1)*Sum((-1)**k*binomial(n, k)*(x - k)**(n - 1), (k, 0, floor(x)))
 
+    def _cdf(self, x):
+        n = self.n
+        k = Dummy("k")
+        return Piecewise(
+            (S.Zero, x < 0),
+            (S.One/factorial(n)*Sum((-1)**k*binomial(n, k)*(x - k)**n, (k, 0, floor(x))), x <= n),
+            (S.One, True)
+        )
+
 
 
 def UniformSum(name, n):
     r"""
     Create a continuous random variable with an Irwin-Hall distribution.
