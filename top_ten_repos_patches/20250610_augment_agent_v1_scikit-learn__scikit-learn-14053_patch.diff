diff --git a/sklearn/tree/export.py b/sklearn/tree/export.py
index 1fe11e596..5b354a1fe 100644
--- a/sklearn/tree/export.py
+++ b/sklearn/tree/export.py
@@ -888,11 +888,12 @@ def export_text(decision_tree, feature_names=None, max_depth=10,
             value_fmt = "{}{}{}\n"
     else:
         value_fmt = "{}{} value: {}\n"
 
     if feature_names:
-        feature_names_ = [feature_names[i] for i in tree_.feature]
+        feature_names_ = [feature_names[i] if i != _tree.TREE_UNDEFINED else "undefined" 
+                          for i in tree_.feature]
     else:
         feature_names_ = ["feature_{}".format(i) for i in tree_.feature]
 
     export_text.report = ""
 
diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py
index 503431f45..9365f4aa8 100644
--- a/sklearn/tree/tests/test_export.py
+++ b/sklearn/tree/tests/test_export.py
@@ -395,10 +395,49 @@ def test_export_text():
     """).lstrip()
     assert export_text(reg, decimals=1) == expected_report
     assert export_text(reg, decimals=1, show_weights=True) == expected_report
 
 
+def test_export_text_single_feature():
+    """Test export_text with single feature and feature_names.
+    
+    This is a regression test for issue where export_text would raise
+    IndexError when the tree only has one feature and feature_names is provided.
+    """
+    from sklearn.datasets import load_iris
+    
+    # Create single feature dataset
+    X, y = load_iris(return_X_y=True)
+    X = X[:, 0].reshape(-1, 1)
+    
+    # Test with DecisionTreeClassifier
+    clf = DecisionTreeClassifier(random_state=0)
+    clf.fit(X, y)
+    
+    # This should not raise IndexError
+    result = export_text(clf, feature_names=['sepal_length'])
+    assert isinstance(result, str)
+    assert len(result) > 0
+    assert 'sepal_length' in result
+    
+    # Test without feature_names should also work
+    result_no_names = export_text(clf)
+    assert isinstance(result_no_names, str)
+    assert len(result_no_names) > 0
+    assert 'feature_0' in result_no_names
+    
+    # Test with DecisionTreeRegressor
+    from sklearn.tree import DecisionTreeRegressor
+    reg = DecisionTreeRegressor(random_state=0)
+    reg.fit(X, y.astype(float))
+    
+    result_reg = export_text(reg, feature_names=['sepal_length'])
+    assert isinstance(result_reg, str)
+    assert len(result_reg) > 0
+    assert 'sepal_length' in result_reg
+
+
 def test_plot_tree_entropy(pyplot):
     # mostly smoke tests
     # Check correctness of export_graphviz for criterion = entropy
     clf = DecisionTreeClassifier(max_depth=3,
                                  min_samples_split=2,
