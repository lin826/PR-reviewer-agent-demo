diff --git a/setup.py b/setup.py
index 8d40de1a8..03f325278 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index ddfd2b365..5c3335cd6 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -598,11 +598,43 @@ class Documenter:
             attr_docs = self.analyzer.find_attr_docs()
             if self.objpath:
                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])
+                found_docs = None
+                
+                # Check current class first
                 if key in attr_docs:
+                    found_docs = attr_docs[key]
+                
+                # For inherited members, also check base classes
+                elif (hasattr(self, 'options') and 
+                      getattr(self.options, 'inherited_members', None) and 
+                      hasattr(self, 'parent') and self.parent and 
+                      inspect.isclass(self.parent)):
+                    # Get the attribute name
+                    attr_name = self.objpath[-1]
+                    # Get the module path for constructing base class namespaces
+                    base_objpath = self.objpath[:-2] if len(self.objpath) > 2 else []
+                    current_namespace = '.'.join(self.objpath[:-1])
+                    
+                    for cls in self.parent.__mro__[1:]:  # Skip the current class (index 0)
+                        # For classes in the same module, use the class name as namespace
+                        # For classes in different modules, we need to construct the full path
+                        if hasattr(cls, '__module__') and cls.__module__ == self.modname:
+                            # Same module - use the class name as namespace
+                            base_namespace = cls.__name__
+                        else:
+                            # Different module - construct full namespace
+                            base_namespace = '.'.join(base_objpath + [cls.__name__])
+                        
+                        base_key = (base_namespace, attr_name)
+                        if base_key in attr_docs:
+                            found_docs = attr_docs[base_key]
+                            break
+                
+                if found_docs:
                     no_docstring = True
                     # make a copy of docstring for attributes to avoid cache
                     # the change of autodoc-process-docstring event.
-                    docstrings = [list(attr_docs[key])]
+                    docstrings = [list(found_docs)]
 
                     for i, line in enumerate(self.process_doc(docstrings)):
                         self.add_line(line, sourcename, i)
@@ -679,6 +711,34 @@ class Documenter:
 
             return False
 
+        def is_documented_attribute(name: str) -> bool:
+            """Check if an attribute is documented in current class or any base class."""
+            # Check current class first
+            if (namespace, name) in attr_docs:
+                return True
+            
+            # For inherited members, also check base classes
+            if self.options.inherited_members and inspect.isclass(self.object):
+                # Get the module path for constructing base class namespaces
+                if self.objpath and len(self.objpath) > 0:
+                    # Current class namespace parts (excluding the class name itself)
+                    base_objpath = self.objpath[:-1] if len(self.objpath) > 1 else []
+                    
+                    for cls in self.object.__mro__[1:]:  # Skip the current class (index 0)
+                        # For classes in the same module, use the class name as namespace
+                        # For classes in different modules, we need to construct the full path
+                        if hasattr(cls, '__module__') and cls.__module__ == self.modname:
+                            # Same module - use the class name as namespace
+                            base_namespace = cls.__name__
+                        else:
+                            # Different module - construct full namespace
+                            base_namespace = '.'.join(base_objpath + [cls.__name__])
+                        
+                        if (base_namespace, name) in attr_docs:
+                            return True
+            
+            return False
+
         ret = []
 
         # search for members in source code too
@@ -746,7 +806,7 @@ class Documenter:
                         keep = has_doc or self.options.undoc_members
                 else:
                     keep = False
-            elif (namespace, membername) in attr_docs:
+            elif is_documented_attribute(membername):
                 if want_all and isprivate:
                     if self.options.private_members is None:
                         keep = False
diff --git a/tox.ini b/tox.ini
index dbb705a3a..9f4fc3a32 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
