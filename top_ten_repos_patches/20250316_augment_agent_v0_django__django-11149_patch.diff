diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 880a2cc17b..50c38c72e8 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -2109,35 +2109,50 @@ class InlineModelAdmin(BaseModelAdmin):
         queryset = super().get_queryset(request)
         if not self.has_view_or_change_permission(request):
             queryset = queryset.none()
         return queryset
 
+    def _get_related_model_opts(self):
+        """
+        Get the options for the related model in an auto-created intermediate model.
+        """
+        opts = self.opts
+        # The model was auto-created as intermediary for a many-to-many
+        # relationship; find the target model.
+        for field in opts.fields:
+            if field.remote_field and field.remote_field.model != self.parent_model:
+                return field.remote_field.model._meta
+        return opts
+
     def has_add_permission(self, request, obj):
         if self.opts.auto_created:
             # We're checking the rights to an auto-created intermediate model,
             # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            # to have the add permission for the related model in order to
+            # be able to add the intermediate model.
+            opts = self._get_related_model_opts()
+            return request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('add', opts)))
         return super().has_add_permission(request)
 
     def has_change_permission(self, request, obj=None):
         if self.opts.auto_created:
             # We're checking the rights to an auto-created intermediate model,
             # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            # to have the change permission for the related model in order to
+            # be able to change the intermediate model.
+            opts = self._get_related_model_opts()
+            return request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))
         return super().has_change_permission(request)
 
     def has_delete_permission(self, request, obj=None):
         if self.opts.auto_created:
             # We're checking the rights to an auto-created intermediate model,
             # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            # to have the delete permission for the related model in order to
+            # be able to delete the intermediate model.
+            opts = self._get_related_model_opts()
+            return request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('delete', opts)))
         return super().has_delete_permission(request, obj)
 
     def has_view_permission(self, request, obj=None):
         if self.opts.auto_created:
             opts = self.opts
