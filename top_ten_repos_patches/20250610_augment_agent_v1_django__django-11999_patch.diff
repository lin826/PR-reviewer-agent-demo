diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index ee45bb941e..63ddbbf89c 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -761,12 +761,14 @@ class Field(RegisterLookupMixin):
             # if you have a classmethod and a field with the same name, then
             # such fields can't be deferred (we don't have a check for this).
             if not getattr(cls, self.attname, None):
                 setattr(cls, self.attname, self.descriptor_class(self))
         if self.choices is not None:
-            setattr(cls, 'get_%s_display' % self.name,
-                    partialmethod(cls._get_FIELD_display, field=self))
+            method_name = 'get_%s_display' % self.name
+            if method_name not in cls.__dict__:
+                setattr(cls, method_name,
+                        partialmethod(cls._get_FIELD_display, field=self))
 
     def get_filter_kwargs_for_object(self, obj):
         """
         Return a dict that when passed as kwargs to self.model.filter(), would
         yield all instances having the same value for this field as obj has.
diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py
index 0d6e930b06..2273d4add3 100644
--- a/tests/model_fields/tests.py
+++ b/tests/model_fields/tests.py
@@ -184,10 +184,37 @@ class GetFieldDisplayTests(SimpleTestCase):
         self.assertEqual(WhizIterEmpty(c="a").c, "a")      # A nested value
         self.assertEqual(WhizIterEmpty(c="b").c, "b")      # Invalid value
         self.assertIsNone(WhizIterEmpty(c=None).c)         # Blank value
         self.assertEqual(WhizIterEmpty(c='').c, '')        # Empty value
 
+    def test_get_FIELD_display_override(self):
+        """
+        Custom get_FIELD_display() methods can be defined to override the default behavior.
+        """
+        # Create a model with a custom get_FIELD_display method
+        class CustomDisplayModel(models.Model):
+            status = models.CharField(max_length=10, choices=[('A', 'Active'), ('I', 'Inactive')])
+            
+            def get_status_display(self):
+                return 'Custom Display'
+            
+            class Meta:
+                app_label = 'model_fields'
+        
+        # Test that the custom method is used
+        obj = CustomDisplayModel(status='A')
+        self.assertEqual(obj.get_status_display(), 'Custom Display')
+        
+        # Test with different value
+        obj2 = CustomDisplayModel(status='I')
+        self.assertEqual(obj2.get_status_display(), 'Custom Display')
+        
+        # Verify the method is the custom one, not Django's generated one
+        self.assertEqual(CustomDisplayModel.get_status_display.__name__, 'get_status_display')
+        self.assertNotEqual(str(type(CustomDisplayModel.get_status_display)), 
+                           "<class 'functools.partialmethod'>")
+
 
 class GetChoicesTests(SimpleTestCase):
 
     def test_empty_choices(self):
         choices = []
