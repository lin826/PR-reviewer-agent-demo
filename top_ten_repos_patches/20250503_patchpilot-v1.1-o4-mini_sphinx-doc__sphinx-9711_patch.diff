diff --git a/sphinx/application.py b/sphinx/application.py
index 7428f1b..f73eb9f 100644
--- a/sphinx/application.py
+++ b/sphinx/application.py
@@ -222,12 +222,15 @@ class Sphinx:
         # set up translation infrastructure
         self._init_i18n()
 
+
         # check the Sphinx version if requested
-        if self.config.needs_sphinx and self.config.needs_sphinx > sphinx.__display_version__:
+        from sphinx.util import version_gte
+        if self.config.needs_sphinx and not version_gte(sphinx.__display_version__, self.config.needs_sphinx):
             raise VersionRequirementError(
                 __('This project needs at least Sphinx v%s and therefore cannot '
                    'be built with this version.') % self.config.needs_sphinx)
 
+
         # load all built-in extension modules
         for extension in builtin_extensions:
             self.setup_extension(extension)
@@ -1323,4 +1326,4 @@ class TemplateBridge:
         """Called by the builder to render a template given as a string with a
         specified context (a Python dictionary).
         """
-        raise NotImplementedError('must be implemented in subclasses')
+        raise NotImplementedError('must be implemented in subclasses')
diff --git a/sphinx/extension.py b/sphinx/extension.py
index 6ac780b..a696706 100644
--- a/sphinx/extension.py
+++ b/sphinx/extension.py
@@ -13,7 +13,9 @@ from typing import TYPE_CHECKING, Any, Dict
 from sphinx.config import Config
 from sphinx.errors import VersionRequirementError
 from sphinx.locale import __
-from sphinx.util import logging
+
+from sphinx.util import logging, version_gte
+
 
 if TYPE_CHECKING:
     from sphinx.application import Sphinx
@@ -51,7 +53,9 @@ def verify_needs_extensions(app: "Sphinx", config: Config) -> None:
                               'but it is not loaded.'), extname)
             continue
 
-        if extension.version == 'unknown version' or reqversion > extension.version:
+
+        if extension.version == 'unknown version' or not version_gte(extension.version, reqversion):
+
             raise VersionRequirementError(__('This project needs the extension %s at least in '
                                              'version %s and therefore cannot be built with '
                                              'the loaded version (%s).') %
@@ -65,4 +69,4 @@ def setup(app: "Sphinx") -> Dict[str, Any]:
         'version': 'builtin',
         'parallel_read_safe': True,
         'parallel_write_safe': True,
-    }
+    }
diff --git a/sphinx/util/__init__.py b/sphinx/util/__init__.py
index fd64ed0..f38fb9b 100644
--- a/sphinx/util/__init__.py
+++ b/sphinx/util/__init__.py
@@ -168,10 +168,27 @@ def sha1(data=b'', **kwargs):
 
     try:
         return hashlib.sha1(data, **kwargs)  # type: ignore
+
     except ValueError:
         return hashlib.sha1(data, **kwargs, usedforsecurity=False)  # type: ignore
 
 
+def version_gte(actual: str, required: str) -> bool:
+    """
+    Return True if *actual* version is greater than or equal to *required*,
+    comparing them using PEPâ€¯440 semantics via ``packaging.version.parse``.
+    If either version string is invalid, or ``packaging`` is unavailable,
+    the function conservatively returns False.
+    """
+    try:
+        from packaging.version import parse as _v
+        return _v(actual) >= _v(required)
+    except Exception:
+        # Invalid version strings or packaging not installed
+        return False
+
+
+
 class DownloadFiles(dict):
     """A special dictionary for download files.
 
