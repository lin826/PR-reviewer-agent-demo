diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py
index 53345a6b1..f008ec3c3 100644
--- a/pylint/lint/pylinter.py
+++ b/pylint/lint/pylinter.py
@@ -31,7 +31,7 @@ from pylint.constants import (
 )
 from pylint.lint.base_options import _make_linter_options
 from pylint.lint.caching import load_results, save_results
-from pylint.lint.expand_modules import expand_modules
+from pylint.lint.expand_modules import expand_modules, _is_in_ignore_list_re
 from pylint.lint.message_state_handler import _MessageStateHandler
 from pylint.lint.parallel import check_parallel
 from pylint.lint.report_functions import (
@@ -564,13 +564,25 @@ class PyLinter(
             if not msg.may_be_emitted():
                 self._msgs_state[msg.msgid] = False
 
-    @staticmethod
-    def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:
+    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:
         """Discover python modules and packages in sub-directory.
 
         Returns iterator of paths to discovered modules and packages.
         """
         for something in files_or_modules:
+            # Check if the top-level item should be ignored
+            basename = os.path.basename(something)
+            # Normalize the path for ignore_paths matching
+            normalized_something = os.path.normpath(something)
+            if normalized_something.startswith('./'):
+                normalized_something = normalized_something[2:]
+            if (
+                basename in self.config.ignore
+                or _is_in_ignore_list_re(basename, self.config.ignore_patterns)
+                or _is_in_ignore_list_re(normalized_something, self.config.ignore_paths)
+            ):
+                continue
+                
             if os.path.isdir(something) and not os.path.isfile(
                 os.path.join(something, "__init__.py")
             ):
@@ -579,15 +591,59 @@ class PyLinter(
                     if any(root.startswith(s) for s in skip_subtrees):
                         # Skip subtree of already discovered package.
                         continue
+                    
+                    # Check if this directory should be ignored
+                    root_basename = os.path.basename(root)
+                    # Normalize the root path for ignore_paths matching
+                    normalized_root = os.path.normpath(root)
+                    if normalized_root.startswith('./'):
+                        normalized_root = normalized_root[2:]
+                    
+                    # Check if any part of the path should be ignored
+                    should_ignore = False
+                    
+                    # Check basename against ignore list and patterns
+                    if (root_basename in self.config.ignore
+                        or _is_in_ignore_list_re(root_basename, self.config.ignore_patterns)):
+                        should_ignore = True
+                    
+                    # Check full path against ignore_paths
+                    if _is_in_ignore_list_re(normalized_root, self.config.ignore_paths):
+                        should_ignore = True
+                    
+                    # Check if any parent directory is in the ignore list
+                    if not should_ignore:
+                        path_parts = normalized_root.split(os.sep)
+                        for part in path_parts:
+                            if (part in self.config.ignore
+                                or _is_in_ignore_list_re(part, self.config.ignore_patterns)):
+                                should_ignore = True
+                                break
+                    
+                    if should_ignore:
+                        continue
+                    
                     if "__init__.py" in files:
                         skip_subtrees.append(root)
                         yield root
                     else:
-                        yield from (
-                            os.path.join(root, file)
-                            for file in files
-                            if file.endswith(".py")
-                        )
+                        for file in files:
+                            if file.endswith(".py"):
+                                # Check if this file should be ignored
+                                file_basename = os.path.splitext(file)[0]  # Remove .py extension for basename check
+                                filepath = os.path.join(root, file)
+                                # Normalize the filepath for ignore_paths matching
+                                normalized_filepath = os.path.normpath(filepath)
+                                if normalized_filepath.startswith('./'):
+                                    normalized_filepath = normalized_filepath[2:]
+                                
+                                if (
+                                    file_basename in self.config.ignore
+                                    or _is_in_ignore_list_re(file_basename, self.config.ignore_patterns)
+                                    or _is_in_ignore_list_re(normalized_filepath, self.config.ignore_paths)
+                                ):
+                                    continue
+                                yield filepath
             else:
                 yield something
 
@@ -959,7 +1015,7 @@ class PyLinter(
                 self.config.extension_pkg_whitelist
             )
         self.stats.reset_message_count()
-        self._ignore_paths = self.linter.config.ignore_paths
+        self._ignore_paths = self.config.ignore_paths
 
     def generate_reports(self) -> int | None:
         """Close the whole package /module, it's time to make reports !
