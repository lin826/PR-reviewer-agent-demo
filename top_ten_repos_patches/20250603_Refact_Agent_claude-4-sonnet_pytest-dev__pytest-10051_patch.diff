diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py
index a4f4214b1..ee687690b 100644
--- a/src/_pytest/logging.py
+++ b/src/_pytest/logging.py
@@ -440,7 +440,23 @@ class LogCaptureFixture:
 
     def clear(self) -> None:
         """Reset the list of log records and the captured log text."""
+        # Find which phase currently points to handler.records before reset
+        current_phase = None
+        if caplog_records_key in self._item.stash:
+            for when, when_records in self._item.stash[caplog_records_key].items():
+                if when_records is self.handler.records:
+                    current_phase = when
+                    break
+        
         self.handler.reset()
+        
+        # Clear the stash records for all phases and update current phase
+        if caplog_records_key in self._item.stash:
+            for when, when_records in self._item.stash[caplog_records_key].items():
+                when_records.clear()
+                # Update the current phase to point to the new handler.records
+                if when == current_phase:
+                    self._item.stash[caplog_records_key][when] = self.handler.records
 
     def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> None:
         """Set the level of a logger for the duration of a test.
diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py
index bcb20de58..48f257c60 100644
--- a/testing/logging/test_fixture.py
+++ b/testing/logging/test_fixture.py
@@ -268,6 +268,42 @@ def test_caplog_captures_despite_exception(pytester: Pytester) -> None:
     assert result.ret == 1
 
 
+def test_caplog_get_records_clear_consistency(caplog):
+    """Test that caplog.clear() makes both caplog.records and caplog.get_records() consistent.
+    
+    This is a regression test for the issue where caplog.get_records() would get
+    decoupled from caplog.records when caplog.clear() was called.
+    """
+    
+    def verify_consistency():
+        """Helper to verify that both APIs return the same results."""
+        assert caplog.get_records("call") == caplog.records
+    
+    # Initial state - both should be empty
+    verify_consistency()
+    
+    # After logging - both should have the same record
+    logging.warning("test message")
+    verify_consistency()
+    
+    # After clear - both should be empty again (this was the bug)
+    caplog.clear()
+    verify_consistency()
+    
+    # After logging again - both should have the new record
+    logging.warning("second message")
+    verify_consistency()
+    
+    # Test multiple clears don't break functionality
+    caplog.clear()
+    caplog.clear()
+    verify_consistency()
+    
+    # Should still work after multiple clears
+    logging.warning("third message")
+    verify_consistency()
+
+
 def test_log_report_captures_according_to_config_option_upon_failure(
     pytester: Pytester,
 ) -> None:
