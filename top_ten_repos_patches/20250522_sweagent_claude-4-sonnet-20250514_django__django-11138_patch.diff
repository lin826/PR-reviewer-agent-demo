diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py
index 50f85e0621..5c6201dc0d 100644
--- a/django/db/backends/mysql/operations.py
+++ b/django/db/backends/mysql/operations.py
@@ -70,7 +70,11 @@ class DatabaseOperations(BaseDatabaseOperations):
 
     def _convert_field_to_tz(self, field_name, tzname):
         if settings.USE_TZ:
-            field_name = "CONVERT_TZ(%s, 'UTC', '%s')" % (field_name, tzname)
+            # Convert from the database timezone to the target timezone
+            # If no database timezone is set, assume UTC
+            from_tz = self.connection.timezone_name or 'UTC'
+            if from_tz != tzname:
+                field_name = "CONVERT_TZ(%s, '%s', '%s')" % (field_name, from_tz, tzname)
         return field_name
 
     def datetime_cast_date_sql(self, field_name, tzname):
diff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py
index c1afb2ed5e..9683e80a28 100644
--- a/django/db/backends/oracle/operations.py
+++ b/django/db/backends/oracle/operations.py
@@ -99,9 +99,20 @@ END;
             return field_name
         if not self._tzname_re.match(tzname):
             raise ValueError("Invalid time zone name: %s" % tzname)
-        # Convert from UTC to local time, returning TIMESTAMP WITH TIME ZONE
+        # Convert from the database timezone to the target timezone
+        # If no database timezone is set, assume UTC
+        from_tz = self.connection.timezone_name or 'UTC'
+        if from_tz == tzname:
+            # No conversion needed if source and target timezones are the same
+            return field_name
+        # Convert from database timezone to target timezone, returning TIMESTAMP WITH TIME ZONE
         # and cast it back to TIMESTAMP to strip the TIME ZONE details.
-        return "CAST((FROM_TZ(%s, '0:00') AT TIME ZONE '%s') AS TIMESTAMP)" % (field_name, tzname)
+        # Oracle's FROM_TZ expects timezone offset for UTC, timezone name for others
+        if from_tz == 'UTC':
+            from_tz_oracle = '0:00'
+        else:
+            from_tz_oracle = from_tz
+        return "CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)" % (field_name, from_tz_oracle, tzname)
 
     def datetime_cast_date_sql(self, field_name, tzname):
         field_name = self._convert_field_to_tz(field_name, tzname)
