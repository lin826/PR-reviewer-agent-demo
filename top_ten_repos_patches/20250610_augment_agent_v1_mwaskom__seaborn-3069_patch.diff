diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py
index 4f0290a4..ef54dbfe 100644
--- a/seaborn/_core/plot.py
+++ b/seaborn/_core/plot.py
@@ -1473,11 +1473,11 @@ class Plotter:
 
             for view in subplots:
 
                 axes_df = self._filter_subplot_data(df, view)
 
-                with pd.option_context("mode.use_inf_as_null", True):
+                with pd.option_context("mode.use_inf_as_na", True):
                     if keep_na:
                         # The simpler thing to do would be x.dropna().reindex(x.index).
                         # But that doesn't work with the way that the subset iteration
                         # is written below, which assumes data for grouping vars.
                         # Matplotlib (usually?) masks nan data, so this should "work".
@@ -1630,11 +1630,27 @@ class Plotter:
         for sub in self._subplots:
             ax = sub["ax"]
             for axis in "xy":
                 axis_key = sub[axis]
 
-                # Axis limits
+                # Apply categorical behavior for Nominal scales
+                if axis_key in self._scales:
+                    from seaborn._core.scales import Nominal
+                    scale = self._scales[axis_key]
+                    if isinstance(scale, Nominal) and hasattr(scale, '_n_categories'):
+                        # Set categorical limits: -0.5 to n_categories - 0.5
+                        n_categories = scale._n_categories
+                        ax.set(**{f"{axis}lim": (-0.5, n_categories - 0.5)})
+                        
+                        # Disable grid for categorical axis
+                        getattr(ax, f"{axis}axis").grid(False)
+                        
+                        # Invert y-axis for categorical y-axis (horizontal orientation)
+                        if axis == "y":
+                            ax.invert_yaxis()
+
+                # Axis limits (explicit limits override categorical behavior)
                 if axis_key in p._limits:
                     convert_units = getattr(ax, f"{axis}axis").convert_units
                     a, b = p._limits[axis_key]
                     lo = a if a is None else convert_units(a)
                     hi = b if b is None else convert_units(b)
diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py
index bbd71ec1..35e8e693 100644
--- a/seaborn/_core/scales.py
+++ b/seaborn/_core/scales.py
@@ -158,10 +158,13 @@ class Nominal(Scale):
 
         # TODO flexibility over format() which isn't great for numbers / dates
         stringify = np.vectorize(format)
 
         units_seed = categorical_order(data, new.order)
+        
+        # Store the number of categories for use in _finalize_figure
+        new._n_categories = len(units_seed)
 
         # TODO move to Nominal._get_scale?
         # TODO this needs some more complicated rethinking about how to pass
         # a unit dictionary down to these methods, along with how much we want
         # to invest in their API. What is it useful for tick() to do here?
diff --git a/seaborn/_oldcore.py b/seaborn/_oldcore.py
index 192af381..9f521a47 100644
--- a/seaborn/_oldcore.py
+++ b/seaborn/_oldcore.py
@@ -1114,11 +1114,11 @@ class VectorPlotter:
                     continue
 
                 parts = []
                 grouped = self.plot_data[var].groupby(self.converters[var], sort=False)
                 for converter, orig in grouped:
-                    with pd.option_context('mode.use_inf_as_null', True):
+                    with pd.option_context('mode.use_inf_as_na', True):
                         orig = orig.dropna()
                         if var in self.var_levels:
                             # TODO this should happen in some centralized location
                             # it is similar to GH2419, but more complicated because
                             # supporting `order` in categorical plots is tricky
diff --git a/seaborn/categorical.py b/seaborn/categorical.py
index 3394c9c7..cbdc6fb1 100644
--- a/seaborn/categorical.py
+++ b/seaborn/categorical.py
@@ -1788,11 +1788,11 @@ class _LVPlotter(_CategoricalPlotter):
         """Get the number of data points and calculate `depth` of
         letter-value plot."""
         vals = np.asarray(vals)
         # Remove infinite values while handling a 'object' dtype
         # that can come from pd.Float64Dtype() input
-        with pd.option_context('mode.use_inf_as_null', True):
+        with pd.option_context('mode.use_inf_as_na', True):
             vals = vals[~pd.isnull(vals)]
         n = len(vals)
         p = self.outlier_prop
 
         # Select the depth, i.e. number of boxes to draw, based on the method
