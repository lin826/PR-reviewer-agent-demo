diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py
index fef5532e58..2b9ee6e787 100644
--- a/django/core/servers/basehttp.py
+++ b/django/core/servers/basehttp.py
@@ -141,10 +141,31 @@ class ServerHandler(simple_server.ServerHandler):
         # Mark the connection for closing if it's set as such above or if the
         # application sent the header.
         if self.headers.get("Connection") == "close":
             self.request_handler.close_connection = True
 
+    def write(self, data):
+        """'write()' callable as specified by PEP 3333
+        
+        For HEAD requests, don't write response body to comply with RFC 2616.
+        """
+        if self.environ.get('REQUEST_METHOD') == 'HEAD':
+            # For HEAD requests, we still need to track bytes_sent for Content-Length
+            # but we don't actually write the data
+            if not self.status:
+                raise AssertionError("write() before start_response()")
+            elif not self.headers_sent:
+                self.bytes_sent = len(data)
+                self.send_headers()
+            else:
+                self.bytes_sent += len(data)
+            # Don't call self._write(data) for HEAD requests
+            return
+        
+        # For all other requests, use the parent implementation
+        super().write(data)
+
     def close(self):
         self.get_stdin().read()
         super().close()
 
 
diff --git a/tests/servers/test_basehttp.py b/tests/servers/test_basehttp.py
index a837505feb..a2ba7016e7 100644
--- a/tests/servers/test_basehttp.py
+++ b/tests/servers/test_basehttp.py
@@ -1,9 +1,9 @@
 from io import BytesIO
 
 from django.core.handlers.wsgi import WSGIRequest
-from django.core.servers.basehttp import WSGIRequestHandler, WSGIServer
+from django.core.servers.basehttp import ServerHandler, WSGIRequestHandler, WSGIServer
 from django.test import SimpleTestCase
 from django.test.client import RequestFactory
 from django.test.utils import captured_stderr
 
 
@@ -132,5 +132,73 @@ class WSGIServerTestCase(SimpleTestCase):
                                 server.handle_error(request, client_address)
                         self.assertEqual(err.getvalue(), "")
                         self.assertEqual(cm.records[0].getMessage(), msg)
                 finally:
                     server.server_close()
+
+
+class ServerHandlerTestCase(SimpleTestCase):
+    def test_head_request_write_method(self):
+        """ServerHandler.write() strips response body for HEAD requests (RFC 2616)."""
+        
+        # Test HEAD request
+        head_environ = {
+            "REQUEST_METHOD": "HEAD",
+            "PATH_INFO": "/",
+            "SERVER_NAME": "testserver",
+            "SERVER_PORT": "80",
+            "SERVER_PROTOCOL": "HTTP/1.1",
+        }
+        
+        stdin = BytesIO()
+        stdout = BytesIO()
+        stderr = BytesIO()
+        
+        handler = ServerHandler(stdin, stdout, stderr, head_environ)
+        handler.setup_environ()
+        # Mock request_handler to avoid AttributeError in cleanup_headers
+        handler.request_handler = Stub(server=Stub(), close_connection=False)
+        handler.start_response("200 OK", [("Content-Type", "text/plain")])
+        
+        # Write some data - should be ignored for HEAD requests
+        handler.write(b"This should not appear in HEAD response")
+        handler.write(b"Neither should this")
+        
+        # Get what was written to stdout
+        stdout.seek(0)
+        output = stdout.read()
+        
+        # For HEAD requests, no body should be written
+        # The output should only contain headers
+        self.assertNotIn(b"This should not appear", output)
+        self.assertNotIn(b"Neither should this", output)
+        
+        # Test GET request for comparison
+        get_environ = {
+            "REQUEST_METHOD": "GET",
+            "PATH_INFO": "/",
+            "SERVER_NAME": "testserver",
+            "SERVER_PORT": "80",
+            "SERVER_PROTOCOL": "HTTP/1.1",
+        }
+        
+        stdin = BytesIO()
+        stdout = BytesIO()
+        stderr = BytesIO()
+        
+        handler = ServerHandler(stdin, stdout, stderr, get_environ)
+        handler.setup_environ()
+        # Mock request_handler to avoid AttributeError in cleanup_headers
+        handler.request_handler = Stub(server=Stub(), close_connection=False)
+        handler.start_response("200 OK", [("Content-Type", "text/plain")])
+        
+        # Write the same data - should appear for GET requests
+        handler.write(b"This should appear in GET response")
+        handler.write(b"So should this")
+        
+        # Get what was written to stdout
+        stdout.seek(0)
+        output = stdout.read()
+        
+        # For GET requests, body should be written
+        self.assertIn(b"This should appear", output)
+        self.assertIn(b"So should this", output)
