diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 686e75c979..0c5e4ac584 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -432,6 +432,10 @@ class SQLCompiler:
 
     def get_combinator_sql(self, combinator, all):
         features = self.connection.features
+        # If this query was set to empty (e.g., by calling none()), then
+        # we should return an empty result regardless of the combined queries.
+        if self.query.is_empty():
+            raise EmptyResultSet
         compilers = [
             query.get_compiler(self.using, self.connection)
             for query in self.query.combined_queries if not query.is_empty()
diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py
index 9c6fd474ca..e73a704def 100644
--- a/tests/queries/test_qs_combinators.py
+++ b/tests/queries/test_qs_combinators.py
@@ -2,6 +2,7 @@ import operator
 
 from django.db import DatabaseError, NotSupportedError, connection
 from django.db.models import Exists, F, IntegerField, OuterRef, Value
+from django.db.models.query import EmptyQuerySet
 from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature
 
 from .models import Number, ReservedName
@@ -314,3 +315,50 @@ class QuerySetSetOperationTests(TestCase):
                         msg % (operation, combinator),
                     ):
                         getattr(getattr(qs, combinator)(qs), operation)()
+
+    def test_none_on_union(self):
+        """Test that calling none() on a union queryset returns an empty result."""
+        qs1 = Number.objects.filter(num__lte=1)
+        qs2 = Number.objects.filter(num__gte=8)
+        union_qs = qs1.union(qs2)
+        
+        # Verify union has results
+        self.assertEqual(union_qs.count(), 4)  # 0, 1, 8, 9
+        
+        # Verify none() returns empty queryset
+        none_qs = union_qs.none()
+        self.assertEqual(list(none_qs), [])
+        self.assertEqual(none_qs.count(), 0)
+        self.assertTrue(isinstance(none_qs, EmptyQuerySet))
+
+    @skipUnlessDBFeature('supports_select_intersection')
+    def test_none_on_intersection(self):
+        """Test that calling none() on an intersection queryset returns an empty result."""
+        qs1 = Number.objects.filter(num__lte=5)
+        qs2 = Number.objects.filter(num__gte=3)
+        intersection_qs = qs1.intersection(qs2)
+        
+        # Verify intersection has results
+        self.assertEqual(intersection_qs.count(), 3)  # 3, 4, 5
+        
+        # Verify none() returns empty queryset
+        none_qs = intersection_qs.none()
+        self.assertEqual(list(none_qs), [])
+        self.assertEqual(none_qs.count(), 0)
+        self.assertTrue(isinstance(none_qs, EmptyQuerySet))
+
+    @skipUnlessDBFeature('supports_select_difference')
+    def test_none_on_difference(self):
+        """Test that calling none() on a difference queryset returns an empty result."""
+        qs1 = Number.objects.filter(num__lte=5)
+        qs2 = Number.objects.filter(num__gte=3)
+        difference_qs = qs1.difference(qs2)
+        
+        # Verify difference has results
+        self.assertEqual(difference_qs.count(), 3)  # 0, 1, 2
+        
+        # Verify none() returns empty queryset
+        none_qs = difference_qs.none()
+        self.assertEqual(list(none_qs), [])
+        self.assertEqual(none_qs.count(), 0)
+        self.assertTrue(isinstance(none_qs, EmptyQuerySet))
