diff --git a/django/contrib/postgres/forms/array.py b/django/contrib/postgres/forms/array.py
index 2e19cd574a..fb1a836896 100644
--- a/django/contrib/postgres/forms/array.py
+++ b/django/contrib/postgres/forms/array.py
@@ -142,14 +142,15 @@ class SplitArrayWidget(forms.Widget):
         for i in range(max(len(value), self.size)):
             try:
                 widget_value = value[i]
             except IndexError:
                 widget_value = None
+            widget_attrs = final_attrs.copy()
             if id_:
-                final_attrs = {**final_attrs, 'id': '%s_%s' % (id_, i)}
+                widget_attrs['id'] = '%s_%s' % (id_, i)
             context['widget']['subwidgets'].append(
-                self.widget.get_context(name + '_%s' % i, widget_value, final_attrs)['widget']
+                self.widget.get_context(name + '_%s' % i, widget_value, widget_attrs)['widget']
             )
         return context
 
     @property
     def media(self):
diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py
index 481d93f830..7a1269d02b 100644
--- a/tests/postgres_tests/test_array.py
+++ b/tests/postgres_tests/test_array.py
@@ -1063,10 +1063,47 @@ class TestSplitFormField(PostgreSQLSimpleTestCase):
             with self.subTest(initial=initial, data=data):
                 obj = IntegerArrayModel(**initial)
                 form = Form(data, instance=obj)
                 self.assertIs(form.has_changed(), expected_result)
 
+    def test_splitarrayfield_boolean_checked_state(self):
+        """
+        Test that SplitArrayField with BooleanField correctly handles
+        the checked state for each widget independently.
+        Regression test for issue where CheckboxInput widgets would
+        all be checked after the first True value.
+        """
+        class SplitForm(forms.Form):
+            array = SplitArrayField(forms.BooleanField(required=False), size=5)
+
+        # Test case 1: Mixed True/False values
+        form = SplitForm(initial={'array': [True, False, False, True, False]})
+        widget_context = form['array'].field.widget.get_context(
+            'array', [True, False, False, True, False], {}
+        )
+        
+        expected_checked = [True, False, False, True, False]
+        for i, subwidget in enumerate(widget_context['widget']['subwidgets']):
+            is_checked = 'checked' in subwidget['attrs']
+            self.assertEqual(
+                is_checked, expected_checked[i],
+                f"Widget {i} should be {'checked' if expected_checked[i] else 'unchecked'}"
+            )
+
+        # Test case 2: Pattern starting with False
+        widget_context = form['array'].field.widget.get_context(
+            'array', [False, True, False, False, True], {}
+        )
+        
+        expected_checked = [False, True, False, False, True]
+        for i, subwidget in enumerate(widget_context['widget']['subwidgets']):
+            is_checked = 'checked' in subwidget['attrs']
+            self.assertEqual(
+                is_checked, expected_checked[i],
+                f"Widget {i} should be {'checked' if expected_checked[i] else 'unchecked'}"
+            )
+
 
 class TestSplitFormWidget(PostgreSQLWidgetTestCase):
 
     def test_get_context(self):
         self.assertEqual(
