--- a/django/core/management/__init__.py
+++ b/django/core/management/__init__.py
@@ -136,6 +136,35 @@
         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])
         for opt in parser_actions if opt.required and opt.dest in options
     ]
+    
+    # Handle required mutually exclusive groups by adding provided arguments
+    # from those groups to parse_args.
+    def get_mutually_exclusive_groups(parser):
+        # Parser mutually exclusive groups and groups from sub-parser choices.
+        for group in parser._mutually_exclusive_groups:
+            yield group
+        for opt in parser._actions:
+            if isinstance(opt, _SubParsersAction):
+                for sub_opt in opt.choices.values():
+                    yield from get_mutually_exclusive_groups(sub_opt)
+    
+    for group in get_mutually_exclusive_groups(parser):
+        provided_actions = []
+        for action in group._group_actions:
+            if action.dest in arg_options:
+                provided_actions.append(action)
+        
+        if provided_actions:
+            if len(provided_actions) > 1:
+                # Multiple arguments provided from mutually exclusive group
+                option_strings = [min(action.option_strings) for action in provided_actions]
+                raise CommandError(
+                    f"Cannot specify both {' and '.join(option_strings)} at the same time."
+                )
+            elif group.required:
+                # Add the single provided argument to parse_args for required groups only
+                action = provided_actions[0]
+                parse_args.append('{}={}'.format(min(action.option_strings), arg_options[action.dest]))
     defaults = parser.parse_args(args=parse_args)
     defaults = dict(defaults._get_kwargs(), **arg_options)
     # Raise an error if any unknown options were passed.
