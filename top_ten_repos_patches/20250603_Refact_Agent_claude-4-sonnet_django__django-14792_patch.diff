diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py
index 8d19872bea..96e0fe5b7e 100644
--- a/django/db/backends/postgresql/operations.py
+++ b/django/db/backends/postgresql/operations.py
@@ -44,6 +44,11 @@ class DatabaseOperations(BaseDatabaseOperations):
         return "DATE_TRUNC('%s', %s)" % (lookup_type, field_name)
 
     def _prepare_tzname_delta(self, tzname):
+        # Don't modify Etc/GMT timezones - they're already in the correct format
+        # for PostgreSQL and follow POSIX convention where Etc/GMT-10 = UTC+10
+        if tzname.startswith('Etc/GMT'):
+            return tzname
+        # For other timezone formats, flip the sign as before
         if '+' in tzname:
             return tzname.replace('+', '-')
         elif '-' in tzname:
diff --git a/tests/backends/postgresql/test_operations.py b/tests/backends/postgresql/test_operations.py
index 821bb29cee..85c3f8f241 100644
--- a/tests/backends/postgresql/test_operations.py
+++ b/tests/backends/postgresql/test_operations.py
@@ -48,3 +48,73 @@ class PostgreSQLOperationsTests(SimpleTestCase):
             ),
             ['TRUNCATE "backends_person", "backends_tag" RESTART IDENTITY CASCADE;'],
         )
+
+    def test_prepare_tzname_delta_etc_gmt_timezones(self):
+        """
+        Test that Etc/GMT timezones are not modified by _prepare_tzname_delta.
+        
+        Regression test for issue where Etc/GMT timezones were incorrectly
+        having their signs flipped, causing timezone conversions to use the
+        wrong UTC offset.
+        
+        Etc/GMT timezones follow POSIX convention:
+        - Etc/GMT-10 = UTC+10 (10 hours east of GMT)
+        - Etc/GMT+10 = UTC-10 (10 hours west of GMT)
+        
+        These should NOT be flipped by _prepare_tzname_delta.
+        """
+        test_cases = [
+            ('Etc/GMT-10', 'Etc/GMT-10'),  # UTC+10 should stay UTC+10
+            ('Etc/GMT+10', 'Etc/GMT+10'),  # UTC-10 should stay UTC-10
+            ('Etc/GMT-5', 'Etc/GMT-5'),    # UTC+5 should stay UTC+5
+            ('Etc/GMT+5', 'Etc/GMT+5'),    # UTC-5 should stay UTC-5
+            ('Etc/GMT-1', 'Etc/GMT-1'),    # UTC+1 should stay UTC+1
+            ('Etc/GMT+1', 'Etc/GMT+1'),    # UTC-1 should stay UTC-1
+            ('Etc/GMT', 'Etc/GMT'),        # GMT should stay GMT
+        ]
+        
+        for input_tz, expected_output in test_cases:
+            with self.subTest(timezone=input_tz):
+                actual_output = connection.ops._prepare_tzname_delta(input_tz)
+                self.assertEqual(
+                    actual_output, 
+                    expected_output,
+                    f"Etc/GMT timezone {input_tz} should not be modified, "
+                    f"but got {actual_output} instead of {expected_output}"
+                )
+
+    def test_prepare_tzname_delta_other_formats(self):
+        """
+        Test that non-Etc/GMT timezone formats are still flipped as before.
+        
+        This ensures we didn't break existing functionality for other timezone formats.
+        """
+        test_cases = [
+            # Numeric offsets should be flipped
+            ('+10', '-10'),
+            ('-10', '+10'),
+            ('+05', '-05'),
+            ('-05', '+05'),
+            
+            # UTC format should be flipped
+            ('UTC+10:00', 'UTC-10:00'),
+            ('UTC-10:00', 'UTC+10:00'),
+            ('UTC+05:30', 'UTC-05:30'),
+            ('UTC-05:30', 'UTC+05:30'),
+            
+            # Timezone names without + or - signs should be unchanged
+            ('America/New_York', 'America/New_York'),
+            ('Europe/London', 'Europe/London'),
+            ('UTC', 'UTC'),
+            ('GMT', 'GMT'),
+        ]
+        
+        for input_tz, expected_output in test_cases:
+            with self.subTest(timezone=input_tz):
+                actual_output = connection.ops._prepare_tzname_delta(input_tz)
+                self.assertEqual(
+                    actual_output, 
+                    expected_output,
+                    f"Timezone {input_tz} should be converted to {expected_output}, "
+                    f"but got {actual_output}"
+                )
