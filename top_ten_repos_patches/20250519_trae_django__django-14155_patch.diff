diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 9b00e24509..ea2b5cefc1 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -44,7 +44,26 @@ class ResolverMatch:
         self.app_name = ':'.join(self.app_names)
         self.namespaces = [x for x in namespaces if x] if namespaces else []
         self.namespace = ':'.join(self.namespaces)
-
+        
+        # Handle functools.partial - store partial arguments for better representation
+        self.partial_args = getattr(func, 'args', ())
+        self.partial_keywords = getattr(func, 'keywords', {})
+        
+        # Unwrap functools.partial to get the original function for better representation
+        if hasattr(func, 'func') and hasattr(func, 'args') and hasattr(func, 'keywords'):
+            # This looks like a functools.partial
+            original_func = func.func
+            
+            # Recursively unwrap nested partials
+            while hasattr(original_func, 'func') and hasattr(original_func, 'args') and hasattr(original_func, 'keywords'):
+                original_func = original_func.func
+                
+            # Check if the original function has a name attribute
+            if hasattr(original_func, '__name__'):
+                # A function-based view wrapped in partial
+                self._func_path = original_func.__module__ + '.' + original_func.__name__
+                return
+        
         if not hasattr(func, '__name__'):
             # A class-based view
             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__
@@ -59,10 +78,21 @@ class ResolverMatch:
         return (self.func, self.args, self.kwargs)[index]
 
     def __repr__(self):
-        return "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)" % (
+        base_repr = "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)" % (
             self._func_path, self.args, self.kwargs, self.url_name,
             self.app_names, self.namespaces, self.route,
         )
+        
+        # Add partial information if available
+        if hasattr(self, 'partial_args') and hasattr(self, 'partial_keywords') and (self.partial_args or self.partial_keywords):
+            base_repr = base_repr[:-1]  # Remove the closing parenthesis
+            if self.partial_args:
+                base_repr += ", partial_args=%s" % (self.partial_args,)
+            if self.partial_keywords:
+                base_repr += ", partial_keywords=%s" % (self.partial_keywords,)
+            base_repr += ")"
+            
+        return base_repr
 
 
 def get_resolver(urlconf=None):

