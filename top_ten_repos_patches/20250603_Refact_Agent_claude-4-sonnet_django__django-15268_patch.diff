diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index c120f5d32d..6a95b5027c 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -480,6 +480,21 @@ class AlterTogetherOptionOperation(ModelOptionOperation):
     def option_value(self):
         return getattr(self, self.option_name)
 
+    def reduce(self, operation, app_label):
+        # First try the parent's reduce method for same-class operations
+        result = super().reduce(operation, app_label)
+        if result is not False:
+            return result
+        
+        # Allow optimization between different AlterTogetherOptionOperation subclasses
+        # (AlterUniqueTogether, AlterIndexTogether) on the same model
+        if (isinstance(operation, AlterTogetherOptionOperation) and 
+            self.name_lower == operation.name_lower):
+            # Allow these operations to be optimized through each other
+            return True
+        
+        return False
+
     def deconstruct(self):
         kwargs = {
             'name': self.name,
diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py
index d25b14cedb..bb37af24e3 100644
--- a/tests/migrations/test_autodetector.py
+++ b/tests/migrations/test_autodetector.py
@@ -1573,21 +1573,13 @@ class AutodetectorTests(TestCase):
         self.assertOperationTypes(changes, 'otherapp', 0, [
             'AlterUniqueTogether',
             'AlterIndexTogether',
-            'AlterUniqueTogether',
-            'AlterIndexTogether',
         ])
         self.assertOperationAttributes(
-            changes, 'otherapp', 0, 0, name='book', unique_together=set(),
-        )
-        self.assertOperationAttributes(
-            changes, 'otherapp', 0, 1, name='book', index_together=set(),
-        )
-        self.assertOperationAttributes(
-            changes, 'otherapp', 0, 2, name='book',
+            changes, 'otherapp', 0, 0, name='book',
             unique_together={('title', 'author')},
         )
         self.assertOperationAttributes(
-            changes, 'otherapp', 0, 3, name='book',
+            changes, 'otherapp', 0, 1, name='book',
             index_together={('title', 'author')},
         )
 
@@ -1637,28 +1629,20 @@ class AutodetectorTests(TestCase):
         # Right number/type of migrations?
         self.assertNumberMigrations(changes, "otherapp", 1)
         self.assertOperationTypes(changes, 'otherapp', 0, [
-            'AlterUniqueTogether',
-            'AlterIndexTogether',
             'AlterUniqueTogether',
             'AlterIndexTogether',
             'RemoveField',
         ])
         self.assertOperationAttributes(
-            changes, 'otherapp', 0, 0, name='book', unique_together=set(),
-        )
-        self.assertOperationAttributes(
-            changes, 'otherapp', 0, 1, name='book', index_together=set(),
-        )
-        self.assertOperationAttributes(
-            changes, 'otherapp', 0, 2, name='book',
+            changes, 'otherapp', 0, 0, name='book',
             unique_together={('author', 'title')},
         )
         self.assertOperationAttributes(
-            changes, 'otherapp', 0, 3, name='book',
+            changes, 'otherapp', 0, 1, name='book',
             index_together={('author', 'title')},
         )
         self.assertOperationAttributes(
-            changes, 'otherapp', 0, 4, model_name='book', name='newfield',
+            changes, 'otherapp', 0, 2, model_name='book', name='newfield',
         )
 
     def test_alter_field_and_foo_together(self):
@@ -1744,21 +1728,13 @@ class AutodetectorTests(TestCase):
             'RenameField',
             'AlterUniqueTogether',
             'AlterIndexTogether',
-            'AlterUniqueTogether',
-            'AlterIndexTogether',
         ])
         self.assertOperationAttributes(
-            changes, 'otherapp', 0, 1, name='book', unique_together=set(),
-        )
-        self.assertOperationAttributes(
-            changes, 'otherapp', 0, 2, name='book', index_together=set(),
-        )
-        self.assertOperationAttributes(
-            changes, 'otherapp', 0, 3, name='book',
+            changes, 'otherapp', 0, 1, name='book',
             unique_together={('title', 'newfield2')},
         )
         self.assertOperationAttributes(
-            changes, 'otherapp', 0, 4, name='book',
+            changes, 'otherapp', 0, 2, name='book',
             index_together={('title', 'newfield2')},
         )
 
diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py
index 0caaf66f9e..c8a7986eff 100644
--- a/tests/migrations/test_optimizer.py
+++ b/tests/migrations/test_optimizer.py
@@ -883,3 +883,108 @@ class OptimizerTests(SimpleTestCase):
                 migrations.CreateModel("Phou", [("name", models.CharField(max_length=255))]),
             ],
         )
+
+    def test_optimize_alter_foo_together_operations(self):
+        """
+        Multiple AlterFooTogether operations should be optimized.
+        
+        When we have operations that first clear constraints (set to empty)
+        and then add new constraints, they should be optimized into a single
+        operation that just sets the final constraint value.
+        """
+        # Test mixed AlterUniqueTogether and AlterIndexTogether operations
+        self.assertOptimizesTo(
+            [
+                migrations.AlterUniqueTogether(
+                    name='MyModel',
+                    unique_together=set(),
+                ),
+                migrations.AlterIndexTogether(
+                    name='MyModel',
+                    index_together=set(),
+                ),
+                migrations.AlterUniqueTogether(
+                    name='MyModel',
+                    unique_together={("col",)},
+                ),
+                migrations.AlterIndexTogether(
+                    name='MyModel',
+                    index_together={("col",)},
+                ),
+            ],
+            [
+                migrations.AlterUniqueTogether(
+                    name='MyModel',
+                    unique_together={("col",)},
+                ),
+                migrations.AlterIndexTogether(
+                    name='MyModel',
+                    index_together={("col",)},
+                ),
+            ],
+        )
+
+        # Test more complex case with multiple constraint changes
+        self.assertOptimizesTo(
+            [
+                migrations.AlterUniqueTogether(
+                    name='MyModel',
+                    unique_together=set(),
+                ),
+                migrations.AlterIndexTogether(
+                    name='MyModel',
+                    index_together=set(),
+                ),
+                migrations.AlterUniqueTogether(
+                    name='MyModel',
+                    unique_together={("col1", "col2")},
+                ),
+                migrations.AlterIndexTogether(
+                    name='MyModel',
+                    index_together={("col1", "col2"), ("col3",)},
+                ),
+            ],
+            [
+                migrations.AlterUniqueTogether(
+                    name='MyModel',
+                    unique_together={("col1", "col2")},
+                ),
+                migrations.AlterIndexTogether(
+                    name='MyModel',
+                    index_together={("col1", "col2"), ("col3",)},
+                ),
+            ],
+        )
+
+        # Test that operations on different models are optimized correctly
+        # (each model's operations should be optimized separately)
+        self.assertOptimizesTo(
+            [
+                migrations.AlterUniqueTogether(
+                    name='MyModel',
+                    unique_together=set(),
+                ),
+                migrations.AlterIndexTogether(
+                    name='OtherModel',
+                    index_together=set(),
+                ),
+                migrations.AlterUniqueTogether(
+                    name='MyModel',
+                    unique_together={("col",)},
+                ),
+                migrations.AlterIndexTogether(
+                    name='OtherModel',
+                    index_together={("col",)},
+                ),
+            ],
+            [
+                migrations.AlterUniqueTogether(
+                    name='MyModel',
+                    unique_together={("col",)},
+                ),
+                migrations.AlterIndexTogether(
+                    name='OtherModel',
+                    index_together={("col",)},
+                ),
+            ],
+        )
