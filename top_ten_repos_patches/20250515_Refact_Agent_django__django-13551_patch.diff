diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py
index 93e2d71af2..f1a0190d70 100644
--- a/django/contrib/auth/tokens.py
+++ b/django/contrib/auth/tokens.py
@@ -93,8 +93,27 @@ class PasswordResetTokenGenerator:
         """
         # Truncate microseconds so that tokens are consistent even if the
         # database doesn't support microseconds.
-        login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)
-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)
+        login_timestamp = (
+            '' if user.last_login is None
+            else user.last_login.replace(microsecond=0, tzinfo=None)
+        )
+
+        # Include a stable representation of the email address so that a change
+        # to the delivery address immediately invalidates previously-generated
+        # tokens. Not every custom user model has an "email" attribute, so fall
+        # back to the empty string if it isn't present.
+        #
+        # Using lower() makes the hash independent of e-mail case differences on
+        # case-insensitive back-ends.
+        email = getattr(user, 'email', '') or ''
+
+        return (
+            str(user.pk)
+            + user.password
+            + str(login_timestamp)
+            + str(timestamp)
+            + email.lower()
+        )
 
     def _num_seconds(self, dt):
         return int((dt - datetime(2001, 1, 1)).total_seconds())
