diff --git a/sphinx/domains/std.py b/sphinx/domains/std.py
index d820cfe5c..61f432541 100644
--- a/sphinx/domains/std.py
+++ b/sphinx/domains/std.py
@@ -305,7 +305,7 @@ def make_glossary_term(env: "BuildEnvironment", textnodes: Iterable[Node], index
         term['ids'].append(node_id)
 
     std = cast(StandardDomain, env.get_domain('std'))
-    std.note_object('term', termtext.lower(), node_id, location=term)
+    std.note_object('term', termtext, node_id, location=term)
 
     # add an index entry too
     indexnode = addnodes.index()
@@ -652,11 +652,17 @@ class StandardDomain(Domain):
 
         .. versionadded:: 3.0
         """
-        if (objtype, name) in self.objects:
-            docname = self.objects[objtype, name][0]
+        if objtype == 'term':
+            # For glossary terms, also store the original case version to avoid false duplicates
+            key = (objtype, name, name.lower() == name)
+        else:
+            key = (objtype, name)
+            
+        if key in self.objects:
+            docname = self.objects[key][0]
             logger.warning(__('duplicate %s description of %s, other instance in %s'),
                            objtype, name, docname, location=location)
-        self.objects[objtype, name] = (self.env.docname, labelid)
+        self.objects[key] = (self.env.docname, labelid)
 
     def add_object(self, objtype: str, name: str, docname: str, labelid: str) -> None:
         warnings.warn('StandardDomain.add_object() is deprecated.',
@@ -928,9 +934,23 @@ class StandardDomain(Domain):
                           node: pending_xref, contnode: Element) -> Element:
         objtypes = self.objtypes_for_role(typ) or []
         for objtype in objtypes:
-            if (objtype, target) in self.objects:
-                docname, labelid = self.objects[objtype, target]
-                break
+            if objtype == 'term':
+                # First try exact match with preserved case
+                key = (objtype, target, target.lower() == target)
+                if key in self.objects:
+                    docname, labelid = self.objects[key]
+                    break
+                
+                # Then fall back to lowercase version for backward compatibility
+                key = (objtype, target.lower(), True)
+                if key in self.objects:
+                    docname, labelid = self.objects[key]
+                    break
+            else:
+                # Standard behavior for non-term types
+                if (objtype, target) in self.objects:
+                    docname, labelid = self.objects[objtype, target]
+                    break
         else:
             docname, labelid = '', ''
         if not docname:
@@ -951,14 +971,30 @@ class StandardDomain(Domain):
                 results.append(('std:' + role, res))
         # all others
         for objtype in self.object_types:
-            key = (objtype, target)
             if objtype == 'term':
-                key = (objtype, ltarget)
-            if key in self.objects:
-                docname, labelid = self.objects[key]
-                results.append(('std:' + self.role_for_objtype(objtype),
-                                make_refnode(builder, fromdocname, docname,
+                # Try exact match with preserved case first
+                key = (objtype, target, target.lower() == target)
+                if key in self.objects:
+                    docname, labelid = self.objects[key]
+                    results.append(('std:' + self.role_for_objtype(objtype),
+                                   make_refnode(builder, fromdocname, docname,
                                              labelid, contnode)))
+                    continue
+                
+                # Try lowercase version for backwards compatibility
+                key = (objtype, ltarget, True)
+                if key in self.objects:
+                    docname, labelid = self.objects[key]
+                    results.append(('std:' + self.role_for_objtype(objtype),
+                                   make_refnode(builder, fromdocname, docname,
+                                             labelid, contnode)))
+            else:
+                key = (objtype, target)
+                if key in self.objects:
+                    docname, labelid = self.objects[key]
+                    results.append(('std:' + self.role_for_objtype(objtype),
+                                    make_refnode(builder, fromdocname, docname,
+                                                 labelid, contnode)))
         return results
 
     def get_objects(self) -> Iterator[Tuple[str, str, str, str, str, int]]:
@@ -971,9 +1007,17 @@ class StandardDomain(Domain):
                 yield (fullname, fullname, 'cmdoption', info[0], info[1], 1)
             else:
                 yield (option, option, 'cmdoption', info[0], info[1], 1)
-        for (type, name), info in self.objects.items():
-            yield (name, name, type, info[0], info[1],
-                   self.object_types[type].attrs['searchprio'])
+        for key, info in self.objects.items():
+            if isinstance(key, tuple) and len(key) == 3 and key[0] == 'term':
+                # Case-sensitive term format (type, name, is_lowercase)
+                type_name, name, _ = key
+                yield (name, name, type_name, info[0], info[1],
+                      self.object_types[type_name].attrs['searchprio'])
+            elif isinstance(key, tuple) and len(key) == 2:
+                # Standard format (type, name)
+                type_name, name = key
+                yield (name, name, type_name, info[0], info[1],
+                      self.object_types[type_name].attrs['searchprio'])
         for name, (docname, labelid, sectionname) in self.labels.items():
             yield (name, sectionname, 'label', docname, labelid, -1)
         # add anonymous-only labels as well

