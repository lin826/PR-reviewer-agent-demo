diff --git a/sympy/physics/quantum/dagger.py b/sympy/physics/quantum/dagger.py
index 17da3cfd2c..0c6653a66b 100644
--- a/sympy/physics/quantum/dagger.py
+++ b/sympy/physics/quantum/dagger.py
@@ -82,8 +82,22 @@ def __new__(cls, arg):
         elif hasattr(arg, 'conjugate') and hasattr(arg, 'transpose'):
             obj = arg.conjugate().transpose()
         if obj is not None:
             return obj
         return Expr.__new__(cls, arg)
+        
+    def __mul__(self, other):
+        """Handle multiplication with IdentityOperator.
+        
+        When a Dagger object is multiplied by an IdentityOperator,
+        it returns the Dagger object unchanged.
+        """
+        from sympy.physics.quantum.operator import IdentityOperator
+        from sympy.core import Mul
+        
+        if isinstance(other, IdentityOperator):
+            return self
+            
+        return Mul(self, other)
 
 adjoint.__name__ = "Dagger"
 adjoint._sympyrepr = lambda a, b: "Dagger(%s)" % b._print(a.args[0])
diff --git a/sympy/physics/quantum/operator.py b/sympy/physics/quantum/operator.py
index 306bfee64f..d8fe6410c5 100644
--- a/sympy/physics/quantum/operator.py
+++ b/sympy/physics/quantum/operator.py
@@ -304,15 +304,40 @@ def _print_contents_pretty(self, printer, *args):
 
     def _print_contents_latex(self, printer, *args):
         return r'{\mathcal{I}}'
 
     def __mul__(self, other):
+        """Handle multiplication with Operator and Dagger objects.
+        
+        When an IdentityOperator is multiplied by an Operator or a Dagger
+        of an Operator, it returns the Operator or Dagger object unchanged.
+        """
+        from sympy.physics.quantum.dagger import Dagger
 
         if isinstance(other, Operator):
             return other
+        
+        if isinstance(other, Dagger) and isinstance(other.args[0], Operator):
+            return other
 
         return Mul(self, other)
+        
+    def __rmul__(self, other):
+        """Handle right multiplication with Operator and Dagger objects.
+        
+        When an IdentityOperator is right-multiplied by an Operator or a Dagger
+        of an Operator, it returns the Operator or Dagger object unchanged.
+        """
+        from sympy.physics.quantum.dagger import Dagger
+        
+        if isinstance(other, Operator):
+            return other
+            
+        if isinstance(other, Dagger) and isinstance(other.args[0], Operator):
+            return other
+            
+        return Mul(other, self)
 
     def _represent_default_basis(self, **options):
         if not self.N or self.N == oo:
             raise NotImplementedError('Cannot represent infinite dimensional' +
                                       ' identity operator as a matrix')
