diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index 64d3207d09..483626941a 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -665,18 +665,34 @@ def _helper_print_standard_power(self, expr, template):
         # issue #12886: add parentheses around superscripts raised
         # to powers
         base = self.parenthesize(expr.base, PRECEDENCE['Pow'])
         if expr.base.is_Symbol:
             base = self.parenthesize_super(base)
+        elif self._is_second_quant_creator(expr.base):
+            # Handle second quantization creation operators which have superscripts
+            # Always use braces for these operators as they are more appropriate
+            if "^" in base:
+                base = "{{{}}}".format(base)
         elif (isinstance(expr.base, Derivative)
             and base.startswith(r'\left(')
             and re.match(r'\\left\(\\d?d?dot', base)
             and base.endswith(r'\right)')):
             # don't use parentheses around dotted derivative
             base = base[6: -7]  # remove outermost added parens
         return template % (base, exp)
 
+    def _is_second_quant_creator(self, expr):
+        """
+        Check if expr is a second quantization creation operator that has
+        superscripts in its LaTeX representation.
+        """
+        try:
+            from sympy.physics.secondquant import CreateBoson, CreateFermion
+            return isinstance(expr, (CreateBoson, CreateFermion))
+        except ImportError:
+            return False
+
     def _print_UnevaluatedExpr(self, expr):
         return self._print(expr.args[0])
 
     def _print_Sum(self, expr):
         if len(expr.limits) == 1:
