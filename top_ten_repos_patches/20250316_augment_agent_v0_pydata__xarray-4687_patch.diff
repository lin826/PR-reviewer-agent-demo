diff --git a/xarray/core/computation.py b/xarray/core/computation.py
index 9fe93c88..94af911f 100644
--- a/xarray/core/computation.py
+++ b/xarray/core/computation.py
@@ -1725,11 +1725,11 @@ def dot(*arrays, dims=None, **kwargs):
         dask="allowed",
     )
     return result.transpose(*all_dims, missing_dims="ignore")
 
 
-def where(cond, x, y):
+def where(cond, x, y, keep_attrs=None):
     """Return elements from `x` or `y` depending on `cond`.
 
     Performs xarray-like broadcasting across input arguments.
 
     All dimension coordinates on `x` and `y`  must be aligned with each
@@ -1741,10 +1741,14 @@ def where(cond, x, y):
         When True, return values from `x`, otherwise returns values from `y`.
     x : scalar, array, Variable, DataArray or Dataset
         values to choose from where `cond` is True
     y : scalar, array, Variable, DataArray or Dataset
         values to choose from where `cond` is False
+    keep_attrs : bool, optional
+        Whether to copy attributes from `x` or `y` to the output.
+        If `x` has attributes, they are copied. Otherwise, if `y` has attributes,
+        they are copied. If None, use the value from xarray's global option.
 
     Returns
     -------
     Dataset, DataArray, Variable or array
         In priority order: Dataset, DataArray, Variable or array, whichever
@@ -1807,19 +1811,44 @@ def where(cond, x, y):
     numpy.where : corresponding numpy function
     Dataset.where, DataArray.where :
         equivalent methods
     """
     # alignment for three arguments is complicated, so don't support it yet
-    return apply_ufunc(
+    from .dataarray import DataArray
+    from .dataset import Dataset
+    
+    if keep_attrs is None:
+        keep_attrs = _get_keep_attrs(default=False)
+    
+    result = apply_ufunc(
         duck_array_ops.where,
         cond,
         x,
         y,
         join="exact",
         dataset_join="exact",
         dask="allowed",
     )
+    
+    # Manually copy attributes from x or y to the result
+    if keep_attrs:
+        if hasattr(x, "attrs"):
+            if isinstance(result, DataArray):
+                result.attrs = x.attrs.copy()
+            elif isinstance(result, Dataset):
+                for k in result.data_vars:
+                    if k in x.data_vars:
+                        result[k].attrs = x[k].attrs.copy()
+        elif hasattr(y, "attrs"):
+            if isinstance(result, DataArray):
+                result.attrs = y.attrs.copy()
+            elif isinstance(result, Dataset):
+                for k in result.data_vars:
+                    if k in y.data_vars:
+                        result[k].attrs = y[k].attrs.copy()
+    
+    return result
 
 
 def polyval(coord, coeffs, degree_dim="degree"):
     """Evaluate a polynomial at specific values
 
