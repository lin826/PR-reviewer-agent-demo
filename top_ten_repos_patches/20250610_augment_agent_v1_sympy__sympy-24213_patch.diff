diff --git a/sympy/physics/units/tests/test_unitsystem.py b/sympy/physics/units/tests/test_unitsystem.py
index a04f3aabb6..13a3cd4634 100644
--- a/sympy/physics/units/tests/test_unitsystem.py
+++ b/sympy/physics/units/tests/test_unitsystem.py
@@ -82,5 +82,46 @@ def test_derived_units_must_exist_in_unit_system():
     for unit_system in UnitSystem._unit_systems.values():
         for preferred_unit in unit_system.derived_units.values():
             units = preferred_unit.atoms(Quantity)
             for unit in units:
                 assert unit in unit_system._units, f"Unit {unit} is not in unit system {unit_system}"
+
+
+def test_collect_factor_and_dimension_equivalent_dims():
+    """Test that _collect_factor_and_dimension recognizes equivalent dimensions in addition."""
+    from sympy.physics import units
+    from sympy.physics.units.systems.si import SI
+    
+    # Create quantities with equivalent dimensions
+    v1 = units.Quantity('v1')
+    SI.set_quantity_dimension(v1, units.velocity)
+    SI.set_quantity_scale_factor(v1, 2 * units.meter / units.second)
+
+    a1 = units.Quantity('a1')
+    SI.set_quantity_dimension(a1, units.acceleration)
+    SI.set_quantity_scale_factor(a1, -9.8 * units.meter / units.second**2)
+
+    t1 = units.Quantity('t1')
+    SI.set_quantity_dimension(t1, units.time)
+    SI.set_quantity_scale_factor(t1, 5 * units.second)
+
+    # Test that acceleration*time + velocity works (equivalent dimensions)
+    expr1 = a1*t1 + v1
+    factor1, dim1 = SI._collect_factor_and_dimension(expr1)
+    assert factor1 == -47.0  # -9.8 * 5 + 2 = -47
+    
+    # Test reverse order
+    expr2 = v1 + a1*t1
+    factor2, dim2 = SI._collect_factor_and_dimension(expr2)
+    assert factor2 == -47.0
+    
+    # Test that incompatible dimensions still raise an error
+    l1 = units.Quantity('l1')
+    SI.set_quantity_dimension(l1, units.length)
+    SI.set_quantity_scale_factor(l1, 10 * units.meter)
+    
+    expr3 = v1 + l1  # velocity + length should fail
+    try:
+        SI._collect_factor_and_dimension(expr3)
+        assert False, "Should have raised ValueError for incompatible dimensions"
+    except ValueError:
+        pass  # Expected behavior
diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index a436880c4b..5705c821c2 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -173,11 +173,11 @@ def _collect_factor_and_dimension(self, expr):
         elif isinstance(expr, Add):
             factor, dim = self._collect_factor_and_dimension(expr.args[0])
             for addend in expr.args[1:]:
                 addend_factor, addend_dim = \
                     self._collect_factor_and_dimension(addend)
-                if dim != addend_dim:
+                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):
                     raise ValueError(
                         'Dimension of "{}" is {}, '
                         'but it should be {}'.format(
                             addend, addend_dim, dim))
                 factor += addend_factor
