diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py
index 7a99b12691..6f596ddbcd 100644
--- a/django/db/models/fields/files.py
+++ b/django/db/models/fields/files.py
@@ -295,7 +295,7 @@ class FileField(Field):
         if kwargs.get("max_length") == 100:
             del kwargs["max_length"]
         kwargs["upload_to"] = self.upload_to
-        if self.storage is not default_storage:
+        if self.storage is not default_storage or hasattr(self, "_storage_callable"):
             kwargs["storage"] = getattr(self, "_storage_callable", self.storage)
         return name, path, args, kwargs
 
diff --git a/tests/field_deconstruction/tests.py b/tests/field_deconstruction/tests.py
index c78ed62876..dc00aa8eca 100644
--- a/tests/field_deconstruction/tests.py
+++ b/tests/field_deconstruction/tests.py
@@ -176,6 +176,26 @@ class FieldDeconstructionTests(SimpleTestCase):
         self.assertEqual(args, [])
         self.assertEqual(kwargs, {"upload_to": "foo/bar", "max_length": 200})
 
+    def test_file_field_callable_storage_default_storage(self):
+        """
+        Test that callable storage is included in deconstruct even when it returns default_storage.
+        Regression test for issue where callable storage returning default_storage was
+        incorrectly omitted from the deconstructed form.
+        """
+        from django.core.files.storage import default_storage
+
+        def get_default_storage():
+            return default_storage
+
+        field = models.FileField(storage=get_default_storage, upload_to="test")
+        name, path, args, kwargs = field.deconstruct()
+        self.assertEqual(path, "django.db.models.FileField")
+        self.assertEqual(args, [])
+        # Storage should be present in kwargs even though it returns default_storage
+        self.assertIn('storage', kwargs)
+        self.assertIs(kwargs['storage'], get_default_storage)
+        self.assertEqual(kwargs['upload_to'], "test")
+
     def test_file_path_field(self):
         field = models.FilePathField(match=r".*\.txt$")
         name, path, args, kwargs = field.deconstruct()
