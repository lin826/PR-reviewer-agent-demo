--- a/requests/models.py
+++ b/requests/models.py
@@ -359,7 +359,12 @@
                 raise NotImplementedError('Streamed bodies and files are mutually exclusive.')
 
             if length:
-                self.headers['Content-Length'] = length
+                # For GET, HEAD, DELETE, and OPTIONS methods with empty body,
+                # don't set Content-Length header as some servers reject it
+                if length == '0' and self.method in ('GET', 'HEAD', 'DELETE', 'OPTIONS'):
+                    pass  # Don't set Content-Length for these methods with empty body
+                else:
+                    self.headers['Content-Length'] = length
             else:
                 self.headers['Transfer-Encoding'] = 'chunked'
         # Check if file, fo, generator, iterator.
@@ -386,13 +391,20 @@
         self.body = body
 
     def prepare_content_length(self, body):
-        self.headers['Content-Length'] = '0'
+        # For GET, HEAD, DELETE, and OPTIONS methods with no meaningful body,
+        # don't set Content-Length header as some servers reject it
+        if not body and self.method in ('GET', 'HEAD', 'DELETE', 'OPTIONS'):
+            return
+            
         if hasattr(body, 'seek') and hasattr(body, 'tell'):
             body.seek(0, 2)
             self.headers['Content-Length'] = str(body.tell())
             body.seek(0, 0)
-        elif body is not None:
+        elif body:
             self.headers['Content-Length'] = str(len(body))
+        else:
+            # For other methods (POST, PUT, PATCH) with no body, set Content-Length to 0
+            self.headers['Content-Length'] = '0'
 
     def prepare_auth(self, auth):
         """Prepares the given HTTP auth data."""
