--- a/sphinx/util/docfields.py
+++ b/sphinx/util/docfields.py
@@ -33,6 +33,52 @@
     if isinstance(node[0], nodes.paragraph):
         return True
     return False
+
+
+def _split_type_and_name(fieldarg: str) -> Tuple[str, str]:
+    """Split a field argument into type and name, respecting parentheses.
+    
+    This function handles cases like "dict(str, str) param_name" by properly
+    parsing the type specification that contains parentheses and commas.
+    
+    :param fieldarg: The field argument string like "dict(str, str) param_name"
+    :return: A tuple of (type, name)
+    :raises ValueError: If the argument cannot be split into type and name
+    """
+    if not fieldarg.strip():
+        raise ValueError("Empty field argument")
+    
+    # Track parentheses depth to find the correct split point
+    paren_depth = 0
+    bracket_depth = 0
+    i = 0
+    
+    # Scan through the string to find where the type ends
+    while i < len(fieldarg):
+        char = fieldarg[i]
+        if char == '(':
+            paren_depth += 1
+        elif char == ')':
+            paren_depth -= 1
+        elif char == '[':
+            bracket_depth += 1
+        elif char == ']':
+            bracket_depth -= 1
+        elif char.isspace() and paren_depth == 0 and bracket_depth == 0:
+            # Found a space outside of any parentheses or brackets
+            # This should be the split point
+            argtype = fieldarg[:i].strip()
+            argname = fieldarg[i:].strip()
+            if argtype and argname:
+                return argtype, argname
+        i += 1
+    
+    # If we get here, there was no valid split point
+    # Fall back to the original simple split for backward compatibility
+    parts = fieldarg.split(None, 1)
+    if len(parts) != 2:
+        raise ValueError("Cannot split field argument into type and name")
+    return parts[0], parts[1]
 
 
 class Field:
@@ -298,7 +344,7 @@
             # also support syntax like ``:param type name:``
             if typedesc.is_typed:
                 try:
-                    argtype, argname = fieldarg.split(None, 1)
+                    argtype, argname = _split_type_and_name(fieldarg)
                 except ValueError:
                     pass
                 else:
