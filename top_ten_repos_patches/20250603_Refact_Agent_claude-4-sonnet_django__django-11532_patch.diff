diff --git a/django/core/mail/message.py b/django/core/mail/message.py
index e393b4cf5c..4c69217176 100644
--- a/django/core/mail/message.py
+++ b/django/core/mail/message.py
@@ -257,7 +257,13 @@ class EmailMessage:
             msg['Date'] = formatdate(localtime=settings.EMAIL_USE_LOCALTIME)
         if 'message-id' not in header_names:
             # Use cached DNS_NAME for performance
-            msg['Message-ID'] = make_msgid(domain=DNS_NAME)
+            # Convert domain to ASCII-compatible format to handle non-ASCII hostnames
+            try:
+                domain = str(DNS_NAME).encode('ascii').decode('ascii')
+            except UnicodeEncodeError:
+                # Convert to punycode for non-ASCII domains
+                domain = str(DNS_NAME).encode('idna').decode('ascii')
+            msg['Message-ID'] = make_msgid(domain=domain)
         for name, value in self.extra_headers.items():
             if name.lower() != 'from':  # From is already handled
                 msg[name] = value
diff --git a/tests/mail/tests.py b/tests/mail/tests.py
index 15593dc3f7..4aa65a7991 100644
--- a/tests/mail/tests.py
+++ b/tests/mail/tests.py
@@ -403,6 +403,35 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):
             payload1.as_bytes().endswith(b'\n\n<p>Firstname S=FCrname is a <strong>great</strong> guy.</p>')
         )
 
+    def test_unicode_dns_name(self):
+        """
+        Test that non-ASCII DNS names are properly handled when generating Message-ID.
+        Regression test for issue where unicode hostnames caused UnicodeEncodeError
+        with non-unicode email encodings.
+        """
+        from unittest.mock import patch
+        from django.core.mail.utils import DNS_NAME
+        
+        # Test with unicode DNS name and restrictive encoding
+        with patch.object(DNS_NAME, 'get_fqdn', return_value='漢字'):
+            email = EmailMessage('subject', '', 'from@example.com', ['to@example.com'])
+            email.encoding = 'iso-8859-1'
+            message = email.message()
+            message_id = message['Message-ID']
+            
+            # Should contain punycode representation of unicode domain
+            self.assertIn('xn--p8s937b', message_id)
+            
+        # Test with unicode DNS name and utf-8 encoding (should also work)
+        with patch.object(DNS_NAME, 'get_fqdn', return_value='正宗'):
+            email = EmailMessage('subject', '', 'from@example.com', ['to@example.com'])
+            email.encoding = 'utf-8'
+            message = email.message()
+            message_id = message['Message-ID']
+            
+            # Should contain punycode representation
+            self.assertIn('xn--jbt908a', message_id)
+
     def test_attachments(self):
         """Regression test for #9367"""
         headers = {"Date": "Fri, 09 Nov 2001 01:08:47 -0000", "Message-ID": "foo"}
