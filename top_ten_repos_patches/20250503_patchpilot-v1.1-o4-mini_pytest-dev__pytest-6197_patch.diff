diff --git a/src/_pytest/main.py b/src/_pytest/main.py
index 3c205027d..76e7faf11 100644
--- a/src/_pytest/main.py
+++ b/src/_pytest/main.py
@@ -577,10 +577,18 @@ class Session(nodes.FSCollector):
     def _collectfile(self, path, handle_dupes=True):
         assert (
             path.isfile()
+
         ), "{!r} is not a file (isdir={!r}, exists={!r}, islink={!r})".format(
             path, path.isdir(), path.exists(), path.islink()
         )
+        # Skip ordinary package __init__.py files unless they were explicitly
+        # requested on the command line or are matched by the 'python_files' config option.
+        if path.basename == "__init__.py" and not self.isinitpath(path):
+            patterns = self.config.getini("python_files")
+            if not any(fnmatch.fnmatch(path.basename, pat) for pat in patterns):
+                return ()
         ihook = self.gethookproxy(path)
+
         if not self.isinitpath(path):
             if ihook.pytest_ignore_collect(path=path, config=self.config):
                 return ()
@@ -602,10 +610,22 @@ class Session(nodes.FSCollector):
         ihook = self.gethookproxy(dirpath.dirpath())
         if ihook.pytest_ignore_collect(path=dirpath, config=self.config):
             return False
+
         for pat in self._norecursepatterns:
             if dirpath.check(fnmatch=pat):
                 return False
+
+        # Skip creating a Package collector for ordinary packages that were not
+        # requested explicitly and are not matched by 'python_files'.
+        pkginit = dirpath.join("__init__.py")
+        if pkginit.exists() and not self.isinitpath(pkginit):
+            patterns = self.config.getini("python_files")
+            if not any(fnmatch.fnmatch(pkginit.basename, p) for p in patterns):
+                # Keep recursing into the directory but suppress Package collector creation.
+                return True
+
         ihook = self.gethookproxy(dirpath)
+
         ihook.pytest_collect_directory(path=dirpath, parent=self)
         return True
 
@@ -704,4 +724,4 @@ class Session(nodes.FSCollector):
             if rep.passed:
                 for subnode in rep.result:
                     yield from self.genitems(subnode)
-            node.ihook.pytest_collectreport(report=rep)
+            node.ihook.pytest_collectreport(report=rep)
diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py
index e6dee1547..474f0e4db 100644
--- a/src/_pytest/nodes.py
+++ b/src/_pytest/nodes.py
@@ -438,4 +438,4 @@ class Item(Node):
             fspath = self.session._node_location_to_relpath(location[0])
             location = (fspath, location[1], str(location[2]))
             self._location = location
-            return location
+            return location
diff --git a/testing/test_collection.py b/testing/test_collection.py
index dee07d5c7..96d002e55 100644
--- a/testing/test_collection.py
+++ b/testing/test_collection.py
@@ -1256,4 +1256,4 @@ def test_collector_respects_tbstyle(testdir):
             "*! Interrupted: 1 errors during collection !*",
             "*= 1 error in *",
         ]
-    )
+    )
