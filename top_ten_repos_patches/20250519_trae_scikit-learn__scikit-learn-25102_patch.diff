diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py
index 335773c6a..5790ad5f1 100644
--- a/sklearn/utils/_set_output.py
+++ b/sklearn/utils/_set_output.py
@@ -12,6 +12,7 @@ def _wrap_in_pandas_container(
     *,
     columns,
     index=None,
+    dtypes=None,
 ):
     """Create a Pandas DataFrame.
 
@@ -35,6 +36,11 @@ def _wrap_in_pandas_container(
 
     index : array-like, default=None
         Index for data.
+        
+    dtypes : dict or None, default=None
+        If not None, contains the dtypes to set for the output DataFrame columns.
+        Keys should be column names or indices, values should be the desired dtypes.
+        This helps preserve the original dtypes from the input DataFrame.
 
     Returns
     -------
@@ -57,9 +63,14 @@ def _wrap_in_pandas_container(
             data_to_wrap.columns = columns
         if index is not None:
             data_to_wrap.index = index
+        if dtypes is not None:
+            data_to_wrap = data_to_wrap.astype(dtypes)
         return data_to_wrap
 
-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)
+    df = pd.DataFrame(data_to_wrap, index=index, columns=columns)
+    if dtypes is not None:
+        df = df.astype(dtypes)
+    return df
 
 
 def _get_output_config(method, estimator=None):
@@ -127,10 +138,33 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):
         return data_to_wrap
 
     # dense_config == "pandas"
+    # Get the dtypes from the original input if it's a DataFrame
+    dtypes = None
+    preserve_dtypes = getattr(estimator, "_preserve_dtypes", False)
+    
+    if preserve_dtypes and hasattr(original_input, "dtypes"):
+        # Get the mask of feature selection
+        if hasattr(estimator, "get_support"):
+            support_mask = estimator.get_support()
+            # Create a dictionary mapping column names to their dtypes from the original DataFrame
+            # but only for selected features
+            column_names = estimator.get_feature_names_out()
+            original_columns = original_input.columns
+            dtypes = {}
+            for i, keep in enumerate(support_mask):
+                if keep and i < len(original_columns):
+                    col_name = original_columns[i]
+                    # Find the corresponding name in the output
+                    for out_name in column_names:
+                        if out_name == col_name or out_name.endswith("__" + col_name):
+                            dtypes[out_name] = original_input.dtypes[col_name]
+                            break
+                    
     return _wrap_in_pandas_container(
         data_to_wrap=data_to_wrap,
         index=getattr(original_input, "index", None),
         columns=estimator.get_feature_names_out,
+        dtypes=dtypes,
     )
 
 
@@ -208,7 +242,7 @@ class _SetOutputMixin:
             setattr(cls, method, wrapped_method)
 
     @available_if(_auto_wrap_is_configured)
-    def set_output(self, *, transform=None):
+    def set_output(self, *, transform=None, preserve_dtypes=None):
         """Set output container.
 
         See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`
@@ -223,22 +257,37 @@ class _SetOutputMixin:
             - `"pandas"`: DataFrame output
             - `None`: Transform configuration is unchanged
 
+        preserve_dtypes : bool, default=None
+            Whether to preserve the original dtypes from the input DataFrame
+            when outputting pandas DataFrames.
+            
+            - `True`: Preserve dtypes from the input DataFrame
+            - `False`: Use default dtype conversion determined by pandas
+            - `None`: Preserve dtypes configuration is unchanged
+            
+            Only applicable when `transform="pandas"`.
+
         Returns
         -------
         self : estimator instance
             Estimator instance.
         """
-        if transform is None:
+        if transform is None and preserve_dtypes is None:
             return self
 
         if not hasattr(self, "_sklearn_output_config"):
             self._sklearn_output_config = {}
 
-        self._sklearn_output_config["transform"] = transform
+        if transform is not None:
+            self._sklearn_output_config["transform"] = transform
+        
+        if preserve_dtypes is not None:
+            self._preserve_dtypes = preserve_dtypes
+            
         return self
 
 
-def _safe_set_output(estimator, *, transform=None):
+def _safe_set_output(estimator, *, transform=None, preserve_dtypes=None):
     """Safely call estimator.set_output and error if it not available.
 
     This is used by meta-estimators to set the output for child estimators.
@@ -256,6 +305,12 @@ def _safe_set_output(estimator, *, transform=None):
 
         If `None`, this operation is a no-op.
 
+    preserve_dtypes : bool, default=None
+        Whether to preserve the original dtypes from the input DataFrame
+        when outputting pandas DataFrames.
+
+        If `None`, this operation is a no-op.
+
     Returns
     -------
     estimator : estimator instance
@@ -264,7 +319,7 @@ def _safe_set_output(estimator, *, transform=None):
     set_output_for_transform = (
         hasattr(estimator, "transform")
         or hasattr(estimator, "fit_transform")
-        and transform is not None
+        and (transform is not None or preserve_dtypes is not None)
     )
     if not set_output_for_transform:
         # If estimator can not transform, then `set_output` does not need to be
@@ -276,4 +331,4 @@ def _safe_set_output(estimator, *, transform=None):
             f"Unable to configure output for {estimator} because `set_output` "
             "is not available."
         )
-    return estimator.set_output(transform=transform)
+    return estimator.set_output(transform=transform, preserve_dtypes=preserve_dtypes)

