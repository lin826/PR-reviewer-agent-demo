diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py
index 2e97d9064b..307c0cd471 100644
--- a/django/core/management/commands/makemigrations.py
+++ b/django/core/management/commands/makemigrations.py
@@ -186,10 +186,12 @@ class Command(BaseCommand):
             return
 
         # If they want to merge and there is something to merge, then
         # divert into the merge code
         if self.merge and conflicts:
+            if check_changes:
+                sys.exit(1)
             return self.handle_merge(loader, conflicts)
 
         if self.interactive:
             questioner = InteractiveMigrationQuestioner(
                 specified_apps=app_labels,
@@ -221,10 +223,12 @@ class Command(BaseCommand):
             changes = autodetector.arrange_for_graph(
                 changes=changes,
                 graph=loader.graph,
                 migration_name=self.migration_name,
             )
+            if check_changes:
+                sys.exit(1)
             self.write_migration_files(changes)
             return
 
         # Detect changes
         changes = autodetector.changes(
@@ -246,16 +250,16 @@ class Command(BaseCommand):
                             % ("', '".join(app_labels))
                         )
                 else:
                     self.log("No changes detected")
         else:
+            if check_changes:
+                sys.exit(1)
             if self.update:
                 self.write_to_last_migration_files(changes)
             else:
                 self.write_migration_files(changes)
-            if check_changes:
-                sys.exit(1)
 
     def write_to_last_migration_files(self, changes):
         loader = MigrationLoader(connections[DEFAULT_DB_ALIAS])
         new_changes = {}
         update_previous_migration_paths = {}
