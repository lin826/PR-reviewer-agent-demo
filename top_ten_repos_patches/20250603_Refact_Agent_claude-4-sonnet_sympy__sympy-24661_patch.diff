diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py
index 52711d1324..b2190ac6e2 100644
--- a/sympy/parsing/sympy_parser.py
+++ b/sympy/parsing/sympy_parser.py
@@ -1110,6 +1110,14 @@ class EvaluateFalseTransformer(ast.NodeTransformer):
         ast.BitAnd: 'And',
         ast.BitXor: 'Not',
     }
+    compare_operators = {
+        ast.Lt: 'Lt',
+        ast.LtE: 'Le', 
+        ast.Gt: 'Gt',
+        ast.GtE: 'Ge',
+        ast.Eq: 'Eq',
+        ast.NotEq: 'Ne',
+    }
     functions = (
         'Abs', 'im', 're', 'sign', 'arg', 'conjugate',
         'acos', 'acot', 'acsc', 'asec', 'asin', 'atan',
@@ -1118,6 +1126,14 @@ class EvaluateFalseTransformer(ast.NodeTransformer):
         'cosh', 'coth', 'csch', 'sech', 'sinh', 'tanh',
         'exp', 'ln', 'log', 'sqrt', 'cbrt',
     )
+    compare_operators = {
+        ast.Lt: 'Lt',
+        ast.LtE: 'Le', 
+        ast.Gt: 'Gt',
+        ast.GtE: 'Ge',
+        ast.Eq: 'Eq',
+        ast.NotEq: 'Ne'
+    }
 
     def flatten(self, args, func):
         result = []
@@ -1192,6 +1208,55 @@ def visit_Call(self, node):
             new_node.keywords.append(ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load())))
         return new_node
 
+    def visit_Compare(self, node):
+        # Handle relational operators like <, >, <=, >=, ==, !=
+        # Note: Python allows chained comparisons like 1 < x < 3, but for now
+        # we'll handle the common case of single comparisons
+        if len(node.ops) == 1 and len(node.comparators) == 1:
+            op = node.ops[0]
+            if op.__class__ in self.compare_operators:
+                sympy_class = self.compare_operators[op.__class__]
+                left = self.visit(node.left)
+                right = self.visit(node.comparators[0])
+                
+                new_node = ast.Call(
+                    func=ast.Name(id=sympy_class, ctx=ast.Load()),
+                    args=[left, right],
+                    keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],
+                    starargs=None,
+                    kwargs=None
+                )
+                return new_node
+        
+        # For chained comparisons or unsupported operators, fall back to default behavior
+        # This preserves the original behavior for complex cases
+        return node
+    
+    def visit_Compare(self, node):
+        """Handle comparison operators like <, >, ==, etc."""
+        # Visit left operand
+        left = self.visit(node.left)
+        
+        # For now, only handle single comparison (not chained like 1 < x < 3)
+        if len(node.ops) == 1 and len(node.comparators) == 1:
+            op = node.ops[0]
+            right = self.visit(node.comparators[0])
+            
+            if op.__class__ in self.compare_operators:
+                sympy_class = self.compare_operators[op.__class__]
+                
+                new_node = ast.Call(
+                    func=ast.Name(id=sympy_class, ctx=ast.Load()),
+                    args=[left, right],
+                    keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],
+                    starargs=None,
+                    kwargs=None
+                )
+                return new_node
+        
+        # If we can't handle it, return as-is 
+        return self.generic_visit(node)
+
 
 _transformation = {  # items can be added but never re-ordered
 0: lambda_notation,
diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py
index 7c43e1fce3..d2f72ee655 100644
--- a/sympy/parsing/tests/test_sympy_parser.py
+++ b/sympy/parsing/tests/test_sympy_parser.py
@@ -209,6 +209,48 @@ def test_function_evaluate_false():
     assert str(parse_expr('cbrt(0)', evaluate=False)) == '0**(1/3)'
 
 
+def test_relational_evaluate_false():
+    # Test for issue where parse_expr ignored evaluate=False for relationals
+    from sympy import Lt, Gt, Le, Ge, Eq, Ne
+    
+    # Test basic relational operators with numbers - should not evaluate to boolean
+    test_cases = [
+        ('1 < 2', Lt),
+        ('1 > 2', Gt), 
+        ('1 <= 2', Le),
+        ('1 >= 2', Ge),
+        ('1 == 2', Eq),
+        ('1 != 2', Ne),
+    ]
+    
+    for expr_str, expected_class in test_cases:
+        result = parse_expr(expr_str, evaluate=False)
+        # Should be a relational object, not a boolean
+        assert isinstance(result, expected_class), f"Expected {expected_class}, got {type(result)} for '{expr_str}'"
+        # Should not be evaluated to True/False
+        assert not isinstance(result, (bool, type(True), type(False))), f"Should not be boolean: {result}"
+    
+    # Test with variables (these already worked before the fix)
+    x, y = Symbol('x'), Symbol('y')
+    var_cases = [
+        ('x < y', Lt),
+        ('x > y', Gt),
+        ('x <= y', Le), 
+        ('x >= y', Ge),
+        ('x == y', Eq),
+        ('x != y', Ne),
+    ]
+    
+    for expr_str, expected_class in var_cases:
+        result = parse_expr(expr_str, evaluate=False)
+        assert isinstance(result, expected_class), f"Expected {expected_class}, got {type(result)} for '{expr_str}'"
+    
+    # Test that evaluate=True still works (default behavior)
+    assert parse_expr('1 < 2', evaluate=True) == True
+    assert parse_expr('1 > 2', evaluate=True) == False
+    assert parse_expr('1 < 2') == True  # default should be evaluate=True
+
+
 def test_issue_10773():
     inputs = {
     '-10/5': '(-10)/5',
