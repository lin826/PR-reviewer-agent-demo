diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py
index aaab1730b7..3ea0428e1e 100644
--- a/django/db/models/sql/where.py
+++ b/django/db/models/sql/where.py
@@ -129,14 +129,21 @@ class WhereNode(tree.Node):
             # Convert if the database doesn't support XOR:
             #   a XOR b XOR c XOR ...
             # to:
-            #   (a OR b OR c OR ...) AND (a + b + c + ...) == 1
-            lhs = self.__class__(self.children, OR)
+            #   (a + b + c + ...) % 2 == 1
+            # This is true when an odd number of conditions are true.
+            from django.db.models.functions.math import Mod
+            
+            if not self.children:
+                # Empty XOR should raise FullResultSet (matches original behavior)
+                raise FullResultSet
+            
             rhs_sum = reduce(
                 operator.add,
                 (Case(When(c, then=1), default=0) for c in self.children),
             )
-            rhs = Exact(1, rhs_sum)
-            return self.__class__([lhs, rhs], AND, self.negated).as_sql(
+            rhs_mod = Mod(rhs_sum, 2)
+            rhs = Exact(1, rhs_mod)
+            return self.__class__([rhs], AND, self.negated).as_sql(
                 compiler, connection
             )
 
