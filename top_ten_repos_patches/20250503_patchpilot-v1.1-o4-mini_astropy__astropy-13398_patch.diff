diff --git a/astropy/coordinates/builtin_frames/altaz.py b/astropy/coordinates/builtin_frames/altaz.py
index fce6324..209dcc2 100644
--- a/astropy/coordinates/builtin_frames/altaz.py
+++ b/astropy/coordinates/builtin_frames/altaz.py
@@ -5,10 +5,16 @@ import numpy as np
 from astropy import units as u
 from astropy.utils.decorators import format_doc
 from astropy.coordinates import representation as r
-from astropy.coordinates.baseframe import BaseCoordinateFrame, RepresentationMapping, base_doc
+
+from astropy.coordinates.baseframe import BaseCoordinateFrame, RepresentationMapping, base_doc, frame_transform_graph
 from astropy.coordinates.attributes import (TimeAttribute,
                                             QuantityAttribute,
                                             EarthLocationAttribute)
+from astropy.coordinates.transformations import FunctionTransformWithFiniteDifference
+from .itrs import ITRS
+from .hadec import HADec
+from astropy.coordinates.matrix_utilities import rotation_matrix, matrix_transpose
+
 
 __all__ = ['AltAz']
 
@@ -123,4 +129,45 @@ class AltAz(BaseCoordinateFrame):
         return _90DEG.to(self.alt.unit) - self.alt
 
 
-# self-transform defined in icrs_observed_transforms.py
+
+def itrs_to_observed_mat(observed_frame):
+    lon, lat, height = observed_frame.location.to_geodetic('WGS84')
+    elong = lon.to_value(u.radian)
+    if isinstance(observed_frame, AltAz):
+        elat = lat.to_value(u.radian)
+        minus_x = np.eye(3)
+        minus_x[0][0] = -1.0
+        mat = (minus_x
+               @ rotation_matrix(np.pi/2 - elat, 'y', unit=u.radian)
+               @ rotation_matrix(elong, 'z', unit=u.radian))
+    else:
+        minus_y = np.eye(3)
+        minus_y[1][1] = -1.0
+        mat = (minus_y
+               @ rotation_matrix(elong, 'z', unit=u.radian))
+
+    return mat
+
+# Register direct ITRS<->AltAz and ITRS<->HADec transforms
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, HADec)
+def itrs_to_observed(itrs_coo, observed_frame):
+    # form the Topocentric ITRS position (treat ITRS as time invariant)
+    topocentric_itrs_repr = (itrs_coo.cartesian
+                             - observed_frame.location.get_itrs().cartesian)
+    rep = topocentric_itrs_repr.transform(itrs_to_observed_mat(observed_frame))
+    return observed_frame.realize_frame(rep)
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ITRS)
+def observed_to_itrs(observed_coo, itrs_frame):
+    # form the Topocentric ITRS position
+    topocentric_itrs_repr = observed_coo.cartesian.transform(matrix_transpose(
+                            itrs_to_observed_mat(observed_coo)))
+    # form the Geocentric ITRS position
+    rep = topocentric_itrs_repr + observed_coo.location.get_itrs().cartesian
+    return itrs_frame.realize_frame(rep)
+
+# self-transform defined in icrs_observed_transforms.py
+
+
