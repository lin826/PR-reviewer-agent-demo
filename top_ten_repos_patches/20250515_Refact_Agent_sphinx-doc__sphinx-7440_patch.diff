diff --git a/sphinx/domains/std.py b/sphinx/domains/std.py
index d820cfe5c..d38c4d151 100644
--- a/sphinx/domains/std.py
+++ b/sphinx/domains/std.py
@@ -305,7 +305,32 @@ def make_glossary_term(env: "BuildEnvironment", textnodes: Iterable[Node], index
         term['ids'].append(node_id)
 
     std = cast(StandardDomain, env.get_domain('std'))
-    std.note_object('term', termtext.lower(), node_id, location=term)
+    
+    # ------------------------------------------------------------------
+    # Register the term in our environment
+    #
+    # We keep a lower-cased key for cross-references (case-insensitive
+    # search) but *duplicate* detection must be done case-sensitively so
+    # that ``mysql`` and ``MySQL`` can coexist.  We therefore:
+    #   1. look-up duplicates with the original spelling;
+    #   2. store both the original spelling (for warnings) *and*
+    #      the lower-cased variant (for x-refs).
+    # ------------------------------------------------------------------
+
+    # We need to handle the case where 'mysql' and 'MySQL' are different terms
+    # but still allow case-insensitive cross-references
+    
+    # First, check if the exact same term (case-sensitive) already exists
+    if ('term', termtext) in std.objects:
+        docname = std.objects['term', termtext][0]
+        logger.warning(__('duplicate %s description of %s, other instance in %s'),
+                      'term', termtext, docname, location=term)
+    
+    # Store the term with its original case
+    std.objects[('term', termtext)] = (env.docname, node_id)
+    
+    # We don't store the lowercase version anymore to avoid duplicate detection
+    # Cross-references will be handled by the XRefRole's lowercase=True parameter
 
     # add an index entry too
     indexnode = addnodes.index()
@@ -928,9 +953,27 @@ class StandardDomain(Domain):
                           node: pending_xref, contnode: Element) -> Element:
         objtypes = self.objtypes_for_role(typ) or []
         for objtype in objtypes:
-            if (objtype, target) in self.objects:
-                docname, labelid = self.objects[objtype, target]
-                break
+            # Special handling for terms to support case-insensitive lookups
+            if objtype == 'term':
+                # First try exact match
+                if (objtype, target) in self.objects:
+                    docname, labelid = self.objects[objtype, target]
+                    break
+                
+                # Then try case-insensitive match by checking all keys
+                target_lower = target.lower()
+                for key, value in self.objects.items():
+                    if key[0] == 'term' and key[1].lower() == target_lower:
+                        docname, labelid = value
+                        break
+                else:
+                    continue  # No match found, try next objtype
+                break  # Match found
+            else:
+                # Standard behavior for other object types
+                if (objtype, target) in self.objects:
+                    docname, labelid = self.objects[objtype, target]
+                    break
         else:
             docname, labelid = '', ''
         if not docname:
