diff --git a/django/db/models/query.py b/django/db/models/query.py
index d9c9b0db04..9febbeada9 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -682,6 +682,47 @@ class QuerySet:
         for obj in (self.reverse() if self.ordered else self.order_by('-pk'))[:1]:
             return obj
 
+    def _is_field_unique(self, field_name):
+        """
+        Check if a field is unique through any of the following mechanisms:
+        - Field has unique=True
+        - Field is the only field in a UniqueConstraint
+        - Field is the only field in a unique_together constraint
+        """
+        if field_name == 'pk':
+            return True
+            
+        model = self.model
+        field = model._meta.get_field(field_name)
+        
+        # Check if the field itself is marked as unique
+        if field.unique:
+            return True
+            
+        # Check if there's a UniqueConstraint that contains only this field
+        # Use total_unique_constraints which already filters for condition=None
+        if hasattr(model._meta, 'total_unique_constraints'):
+            for constraint in model._meta.total_unique_constraints:
+                if len(constraint.fields) == 1 and field_name in constraint.fields:
+                    return True
+        else:
+            # Fallback for older Django versions or if total_unique_constraints is not available
+            for constraint in model._meta.constraints:
+                if (hasattr(constraint, 'fields') and 
+                    len(constraint.fields) == 1 and 
+                    field_name in constraint.fields and
+                    getattr(constraint, 'condition', None) is None):
+                    return True
+                
+        # Check if there's a unique_together that contains only this field
+        unique_together = getattr(model._meta, 'unique_together', None)
+        if unique_together:
+            for fields in unique_together:
+                if len(fields) == 1 and field_name in fields:
+                    return True
+                    
+        return False
+        
     def in_bulk(self, id_list=None, *, field_name='pk'):
         """
         Return a dictionary mapping each of the given IDs to the object with
@@ -689,7 +730,7 @@ class QuerySet:
         """
         assert not self.query.is_sliced, \
             "Cannot use 'limit' or 'offset' with in_bulk"
-        if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:
+        if field_name != 'pk' and not self._is_field_unique(field_name):
             raise ValueError("in_bulk()'s field_name must be a unique field but %r isn't." % field_name)
         if id_list is not None:
             if not id_list:
