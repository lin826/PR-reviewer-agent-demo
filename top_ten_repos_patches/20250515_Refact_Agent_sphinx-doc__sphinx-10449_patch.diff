diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index 06768168e..98afac68f 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -24,6 +24,7 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
         if callable(obj):
             annotations = app.env.temp_data.setdefault('annotations', {})
             annotation = annotations.setdefault(name, OrderedDict())
+
             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)
             for param in sig.parameters.values():
                 if param.annotation is not param.empty:
@@ -52,6 +53,7 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element
 
     annotations = app.env.temp_data.get('annotations', {})
     if annotations.get(fullname, {}):
+
         field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]
         if field_lists == []:
             field_list = insert_field_list(contentnode)
@@ -59,14 +61,20 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element
 
         for field_list in field_lists:
             if app.config.autodoc_typehints_description_target == "all":
-                modify_field_list(field_list, annotations[fullname])
+                modify_field_list(field_list, annotations[fullname], objtype=objtype)
             elif app.config.autodoc_typehints_description_target == "documented_params":
                 augment_descriptions_with_types(
-                    field_list, annotations[fullname], force_rtype=True
+                    field_list,
+                    annotations[fullname],
+                    force_rtype=True,
+                    objtype=objtype
                 )
             else:
                 augment_descriptions_with_types(
-                    field_list, annotations[fullname], force_rtype=False
+                    field_list,
+                    annotations[fullname],
+                    force_rtype=False,
+                    objtype=objtype
                 )
 
 
@@ -83,7 +91,7 @@ def insert_field_list(node: Element) -> nodes.field_list:
     return field_list
 
 
-def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:
+def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], *, objtype: str = None) -> None:
     arguments: Dict[str, Dict[str, bool]] = {}
     fields = cast(Iterable[nodes.field], node)
     for field in fields:
@@ -123,7 +131,8 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No
             field += nodes.field_body('', nodes.paragraph('', ''))
             node += field
 
-    if 'return' in annotations and 'return' not in arguments:
+    # A class itself has no return value â€“ skip for objtype == 'class'
+    if 'return' in annotations and 'return' not in arguments and objtype != 'class':
         field = nodes.field()
         field += nodes.field_name('', 'rtype')
         field += nodes.field_body('', nodes.paragraph('', annotation))
@@ -133,7 +142,9 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No
 def augment_descriptions_with_types(
     node: nodes.field_list,
     annotations: Dict[str, str],
-    force_rtype: bool
+    force_rtype: bool,
+    *,
+    objtype: str = None
 ) -> None:
     fields = cast(Iterable[nodes.field], node)
     has_description = set()  # type: Set[str]
@@ -169,7 +180,8 @@ def augment_descriptions_with_types(
             node += field
 
     # Add 'rtype' if 'return' is present and 'rtype' isn't.
-    if 'return' in annotations:
+    # Skip adding return type for class objects
+    if 'return' in annotations and objtype != 'class':
         rtype = annotations['return']
         if 'return' not in has_type and ('return' in has_description or
                                          (force_rtype and rtype != "None")):
