diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py
index a02714b174..b393be0138 100644
--- a/sympy/codegen/ast.py
+++ b/sympy/codegen/ast.py
@@ -895,14 +895,33 @@ class String(Token):
 
     """
     __slots__ = ('text',)
-    not_in_args = ['text']
+    not_in_args = []  # Allow text to be included in args for argument invariance
     is_Atom = True
 
-    @classmethod
-    def _construct_text(cls, text):
-        if not isinstance(text, str):
+    def __new__(cls, text):
+        # Pass through existing instances when given as sole argument
+        if isinstance(text, cls):
+            return text
+        
+        # Handle case where we get a Symbol (from args reconstruction)
+        from sympy.core.symbol import Symbol
+        if isinstance(text, Symbol):
+            text_str = str(text)
+        elif isinstance(text, str):
+            text_str = text
+        else:
             raise TypeError("Argument text is not a string type.")
-        return text
+        
+        # Create a Symbol to represent the text in args (for SymPy compatibility)
+        text_symbol = Symbol(text_str)
+        
+        # Create the object with the Symbol in args
+        obj = CodegenAST.__new__(cls, text_symbol)
+        
+        # Set the text attribute to the raw string
+        obj.text = text_str
+        
+        return obj
 
     def _sympystr(self, printer, *args, **kwargs):
         return self.text
diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py
index 00c5d4cf28..c2f6a8c152 100644
--- a/sympy/codegen/tests/test_ast.py
+++ b/sympy/codegen/tests/test_ast.py
@@ -267,6 +267,8 @@ def test_String():
     assert st == String('foobar')
     assert st.text == 'foobar'
     assert st.func(**st.kwargs()) == st
+    # Test argument invariance - this should work for all Basic subclasses
+    assert st.func(*st.args) == st
 
 
     class Signifier(String):
@@ -275,14 +277,26 @@ class Signifier(String):
     si = Signifier('foobar')
     assert si != st
     assert si.text == st.text
+    # Test argument invariance for subclass too
+    assert si.func(*si.args) == si
     s = String('foo')
     assert str(s) == 'foo'
     assert repr(s) == "String('foo')"
+    assert s.func(*s.args) == s
 
 def test_Comment():
     c = Comment('foobar')
     assert c.text == 'foobar'
     assert str(c) == 'foobar'
+    # Test argument invariance
+    assert c.func(*c.args) == c
+
+def test_QuotedString():
+    qs = QuotedString('quoted text')
+    assert qs.text == 'quoted text'
+    assert str(qs) == 'quoted text'
+    # Test argument invariance
+    assert qs.func(*qs.args) == qs
 
 def test_Node():
     n = Node()
