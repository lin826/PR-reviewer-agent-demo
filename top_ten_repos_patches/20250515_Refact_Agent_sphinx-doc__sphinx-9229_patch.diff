diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 1f4c98284..2231fb67e 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1798,10 +1798,32 @@ class GenericAliasMixin(DataDocumenterMixinBase):
 
     def update_content(self, more_content: StringList) -> None:
         if inspect.isgenericalias(self.object):
-            more_content.append(_('alias of %s') % restify(self.object), '')
-            more_content.append('', '')
+            # Check if there's a docstring
+            has_docstring = False
+            if hasattr(self, "get_doc"):
+                docstrings = self.get_doc()
+                has_docstring = docstrings and docstrings[0]
+            
+            # Only add the "alias of..." text if there's no docstring
+            if not has_docstring:
+                more_content.append(_('alias of %s') % restify(self.object), '')
+                more_content.append('', '')
 
         super().update_content(more_content)
+    def should_suppress_directive_header(self) -> bool:
+        return (inspect.isNewType(self.object) or
+                super().should_suppress_directive_header())
+
+    def update_content(self, more_content: StringList) -> None:
+        if inspect.isNewType(self.object):
+            # Only add the "alias of..." text if there's no content yet
+            if not more_content:
+                supertype = restify(self.object.__supertype__)
+                more_content.append(_('alias of %s') % supertype, '')
+                more_content.append('', '')
+
+        super().update_content(more_content)
+
 
 
 class NewTypeMixin(DataDocumenterMixinBase):
@@ -1816,13 +1838,19 @@ class NewTypeMixin(DataDocumenterMixinBase):
 
     def update_content(self, more_content: StringList) -> None:
         if inspect.isNewType(self.object):
-            supertype = restify(self.object.__supertype__)
-            more_content.append(_('alias of %s') % supertype, '')
-            more_content.append('', '')
+            # Check if there's a docstring
+            has_docstring = False
+            if hasattr(self, "get_doc"):
+                docstrings = self.get_doc()
+                has_docstring = docstrings and docstrings[0]
+            
+            # Only add the "alias of..." text if there's no docstring
+            if not has_docstring:
+                supertype = restify(self.object.__supertype__)
+                more_content.append(_('alias of %s') % supertype, '')
+                more_content.append('', '')
 
         super().update_content(more_content)
-
-
 class TypeVarMixin(DataDocumenterMixinBase):
     """
     Mixin for DataDocumenter and AttributeDocumenter to provide the feature for
@@ -1849,18 +1877,20 @@ class TypeVarMixin(DataDocumenterMixinBase):
 
     def update_content(self, more_content: StringList) -> None:
         if isinstance(self.object, TypeVar):
-            attrs = [repr(self.object.__name__)]
-            for constraint in self.object.__constraints__:
-                attrs.append(stringify_typehint(constraint))
-            if self.object.__bound__:
-                attrs.append(r"bound=\ " + restify(self.object.__bound__))
-            if self.object.__covariant__:
-                attrs.append("covariant=True")
-            if self.object.__contravariant__:
-                attrs.append("contravariant=True")
-
-            more_content.append(_('alias of TypeVar(%s)') % ", ".join(attrs), '')
-            more_content.append('', '')
+            # Only add the "alias of..." text if there's no content yet
+            if not more_content or (hasattr(self.object, '__doc__') and self.object.__doc__ == TypeVar.__doc__):
+                attrs = [repr(self.object.__name__)]
+                for constraint in self.object.__constraints__:
+                    attrs.append(stringify_typehint(constraint))
+                if self.object.__bound__:
+                    attrs.append(r"bound=\ " + restify(self.object.__bound__))
+                if self.object.__covariant__:
+                    attrs.append("covariant=True")
+                if self.object.__contravariant__:
+                    attrs.append("contravariant=True")
+
+                more_content.append(_('alias of TypeVar(%s)') % ", ".join(attrs), '')
+                more_content.append('', '')
 
         super().update_content(more_content)
 
