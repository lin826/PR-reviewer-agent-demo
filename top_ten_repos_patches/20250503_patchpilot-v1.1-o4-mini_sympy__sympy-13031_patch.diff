diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py
index 79b3d5e..08bff84 100644
--- a/sympy/matrices/common.py
+++ b/sympy/matrices/common.py
@@ -374,11 +374,24 @@ class MatrixShaping(MatrixRequired):
         [1, 0, 2, 0],
         [0, 1, 0, 2]])
         """
+
         if len(args) == 0:
             return cls._new()
 
         kls = type(args[0])
-        return reduce(kls.row_join, args)
+
+        # Keep only matrices that have a non‑zero number of columns
+        non_empty = [a for a in args if a.cols != 0]
+
+        if non_empty:
+            return reduce(kls.row_join, non_empty)
+
+        # At this point every argument has zero columns.
+        rows = args[0].rows
+        if any(a.rows != rows for a in args):
+            raise ShapeError("Matrices must have the same number of rows.")
+        return kls._new(rows, 0, lambda *x: S.Zero)
+
 
     def reshape(self, rows, cols):
         """Reshape the matrix. Total number of elements must remain the same.
@@ -597,11 +610,24 @@ class MatrixShaping(MatrixRequired):
         [2, 0],
         [0, 2]])
         """
+
         if len(args) == 0:
             return cls._new()
 
         kls = type(args[0])
-        return reduce(kls.col_join, args)
+
+        # Keep only matrices that have a non‑zero number of rows
+        non_empty = [a for a in args if a.rows != 0]
+
+        if non_empty:
+            return reduce(kls.col_join, non_empty)
+
+        # At this point every argument has zero rows.
+        cols = args[0].cols
+        if any(a.cols != cols for a in args):
+            raise ShapeError("Matrices must have the same number of columns.")
+        return kls._new(0, cols, lambda *x: S.Zero)
+
 
 
 class MatrixSpecial(MatrixRequired):
