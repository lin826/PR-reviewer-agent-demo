diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index 0dc1c77c53..b38cb1f186 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -963,6 +963,10 @@ class MigrationAutodetector:
                             preserve_default = False
                     else:
                         field = new_field
+                    # Handle dependencies for foreign key fields
+                    dependencies = []
+                    if field.remote_field and field.remote_field.model:
+                        dependencies.extend(self._get_dependencies_for_foreign_key(field))
                     self.add_operation(
                         app_label,
                         operations.AlterField(
@@ -970,7 +974,8 @@ class MigrationAutodetector:
                             name=field_name,
                             field=field,
                             preserve_default=preserve_default,
-                        )
+                        ),
+                        dependencies=dependencies,
                     )
                 else:
                     # We cannot alter between m2m and concrete fields
diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py
index e9926ba3bf..e1af01b686 100644
--- a/tests/migrations/test_autodetector.py
+++ b/tests/migrations/test_autodetector.py
@@ -352,6 +352,28 @@ class AutodetectorTests(TestCase):
         ("author", models.ForeignKey("migrations.UnmigratedModel", models.CASCADE)),
         ("title", models.CharField(max_length=200)),
     ])
+    # Model states for UUID to FK dependency test
+    author_with_uuid_field = ModelState("testapp", "Author", [
+        ("id", models.AutoField(primary_key=True)),
+        ("name", models.CharField(max_length=200)),
+        ("publisher_id", models.UUIDField(null=True, blank=True)),
+    ])
+    author_with_fk_field = ModelState("testapp", "Author", [
+        ("id", models.AutoField(primary_key=True)),
+        ("name", models.CharField(max_length=200)),
+        ("publisher_id", models.ForeignKey("testapp.Publisher", models.SET_NULL, null=True, blank=True)),
+    ])
+    # Cross-app dependency test
+    author_with_uuid_field_cross_app = ModelState("testapp", "Author", [
+        ("id", models.AutoField(primary_key=True)),
+        ("name", models.CharField(max_length=200)),
+        ("book_id", models.UUIDField(null=True, blank=True)),
+    ])
+    author_with_fk_field_cross_app = ModelState("testapp", "Author", [
+        ("id", models.AutoField(primary_key=True)),
+        ("name", models.CharField(max_length=200)),
+        ("book_id", models.ForeignKey("otherapp.Book", models.SET_NULL, null=True, blank=True)),
+    ])
     book_with_no_author = ModelState("otherapp", "Book", [
         ("id", models.AutoField(primary_key=True)),
         ("title", models.CharField(max_length=200)),
@@ -831,6 +853,29 @@ class AutodetectorTests(TestCase):
         self.assertOperationTypes(changes, 'testapp', 0, ["RenameField"])
         self.assertOperationAttributes(changes, 'testapp', 0, 0, old_name="name", new_name="names")
 
+    def test_alter_field_uuid_to_fk_cross_app_dependency(self):
+        """
+        Tests that changing a UUID field to a cross-app ForeignKey creates proper dependencies.
+        This addresses the issue where migrations would fail with 'Related model cannot be resolved'.
+        """
+        changes = self.get_changes(
+            [self.author_with_uuid_field_cross_app, self.book], 
+            [self.author_with_fk_field_cross_app, self.book]
+        )
+        # Right number/type of migrations?
+        self.assertNumberMigrations(changes, 'testapp', 1)
+        self.assertOperationTypes(changes, 'testapp', 0, ["AlterField"])
+        self.assertOperationAttributes(changes, "testapp", 0, 0, name="book_id")
+        
+        # Check that the migration has a dependency on the Book model in otherapp
+        migration = changes['testapp'][0]
+        
+        # Should have a dependency on otherapp
+        self.assertTrue(
+            any(dep[0] == 'otherapp' for dep in migration.dependencies),
+            f"Migration should have dependency on otherapp. Dependencies: {migration.dependencies}"
+        )
+
     def test_rename_field_foreign_key_to_field(self):
         before = [
             ModelState('app', 'Foo', [
