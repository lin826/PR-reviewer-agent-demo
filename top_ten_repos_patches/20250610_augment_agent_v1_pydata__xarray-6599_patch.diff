diff --git a/xarray/core/computation.py b/xarray/core/computation.py
index 823cbe02..c00dd7d0 100644
--- a/xarray/core/computation.py
+++ b/xarray/core/computation.py
@@ -1905,13 +1905,31 @@ def polyval(
     coeffs = coeffs.reindex(
         {degree_dim: np.arange(max_deg + 1)}, fill_value=0, copy=False
     )
     coord = _ensure_numeric(coord)  # type: ignore # https://github.com/python/mypy/issues/1533 ?
 
+    # Special case: if the original coord data was datetime64 and there's a timedelta64 coordinate
+    # with the same name, use the coordinate values instead of the data values for polynomial evaluation
+    use_coord_for_datetime = False
+    if hasattr(coord, 'name') and coord.name in coord.coords:
+        coord_var = coord.coords[coord.name]
+        if (coord.dtype.kind == 'f' and  # data was converted from datetime64 to float64
+            coord_var.dtype.kind == 'm'):  # coordinate is timedelta64
+            # Use the coordinate values instead of the data values
+            coord_values = _ensure_numeric(coord_var)
+            coord = coord.copy(data=coord_values.data)
+            use_coord_for_datetime = True
+
     # using Horner's method
     # https://en.wikipedia.org/wiki/Horner%27s_method
-    res = coeffs.isel({degree_dim: max_deg}, drop=True) + zeros_like(coord)
+    if use_coord_for_datetime:
+        # For the datetime/timedelta special case, preserve the original dimension order
+        res = zeros_like(coord) + coeffs.isel({degree_dim: max_deg}, drop=True)
+    else:
+        # For normal cases, use the original dimension order
+        res = coeffs.isel({degree_dim: max_deg}, drop=True) + zeros_like(coord)
+    
     for deg in range(max_deg - 1, -1, -1):
         res *= coord
         res += coeffs.isel({degree_dim: deg}, drop=True)
 
     return res
@@ -1932,14 +1950,19 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:
     """
     from .dataset import Dataset
 
     def to_floatable(x: DataArray) -> DataArray:
         if x.dtype.kind in "mM":
+            if x.dtype.kind == "M":  # datetime64
+                offset = np.datetime64("1970-01-01")
+            else:  # timedelta64 (kind == "m")
+                offset = None
+            
             return x.copy(
                 data=datetime_to_numeric(
                     x.data,
-                    offset=np.datetime64("1970-01-01"),
+                    offset=offset,
                     datetime_unit="ns",
                 ),
             )
         return x
 
