diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index 92fe4affb9..3a462f1c4c 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -275,10 +275,11 @@ class Collector:
         if len(self.data) == 1 and len(instances) == 1:
             instance = list(instances)[0]
             if self.can_fast_delete(instance):
                 with transaction.mark_for_rollback_on_error():
                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)
+                setattr(instance, model._meta.pk.attname, None)
                 return count, {model._meta.label: count}
 
         with transaction.atomic(using=self.using, savepoint=False):
             # send pre_delete signals
             for model, obj in self.instances_with_model():
diff --git a/tests/delete/tests.py b/tests/delete/tests.py
index 55eeb226ea..dca47507a8 100644
--- a/tests/delete/tests.py
+++ b/tests/delete/tests.py
@@ -520,5 +520,21 @@ class FastDeleteTests(TestCase):
         with self.assertNumQueries(1):
             self.assertEqual(
                 User.objects.filter(avatar__desc='missing').delete(),
                 (0, {'delete.User': 0})
             )
+
+    def test_fast_delete_instance_pk_clearing(self):
+        """
+        Test that delete() on instances of models without any dependencies
+        clears PKs (fast delete path).
+        """
+        # Create a simple model instance with no dependencies
+        avatar = Avatar.objects.create(desc='test')
+        original_pk = avatar.pk
+        self.assertIsNotNone(original_pk)
+        
+        # Delete the instance - this should use the fast delete path
+        avatar.delete()
+        
+        # Check that the PK is cleared
+        self.assertIsNone(avatar.pk)
