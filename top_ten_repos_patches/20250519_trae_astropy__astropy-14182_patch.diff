diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py
index abdeba8ef..1e424325d 100644
--- a/astropy/io/ascii/rst.py
+++ b/astropy/io/ascii/rst.py
@@ -31,6 +31,59 @@ class SimpleRSTData(FixedWidthData):
     end_line = -1
     splitter_class = FixedWidthTwoLineDataSplitter
 
+    def write(self, lines):
+        default_header_rows = [] if self.header.start_line is None else ["name"]
+        header_rows = getattr(self, "header_rows", default_header_rows)
+        
+        # First part is getting the widths of each column.
+        vals_list = []
+        col_str_iters = self.str_vals()
+        for vals in zip(*col_str_iters):
+            vals_list.append(vals)
+
+        # List of header column values
+        hdrs_list = []
+        for col_attr in header_rows:
+            vals = [
+                "" if (val := getattr(col.info, col_attr)) is None else str(val)
+                for col in self.cols
+            ]
+            hdrs_list.append(vals)
+
+        # Widths for data columns
+        widths = [
+            max(len(vals[i_col]) for vals in vals_list)
+            for i_col in range(len(self.cols))
+        ]
+        # Incorporate widths for header columns
+        if hdrs_list:
+            for i_col in range(len(self.cols)):
+                widths[i_col] = max(
+                    widths[i_col], max(len(vals[i_col]) for vals in hdrs_list)
+                )
+
+        # Generate the separator line (===== =====)
+        separator_vals = [self.header.position_char * width for width in widths]
+        separator_line = self.splitter.join(separator_vals, widths)
+        
+        # Start with the top separator
+        lines.append(separator_line)
+        
+        # Add header rows
+        for vals in hdrs_list:
+            lines.append(self.splitter.join(vals, widths))
+            
+        # Add separator after headers
+        lines.append(separator_line)
+        
+        # Add data rows
+        for vals in vals_list:
+            lines.append(self.splitter.join(vals, widths))
+            
+        # The final separator will be added by the RST.write() method
+        
+        return lines
+
 
 class RST(FixedWidth):
     """reStructuredText simple format table.
@@ -57,10 +110,16 @@ class RST(FixedWidth):
     data_class = SimpleRSTData
     header_class = SimpleRSTHeader
 
-    def __init__(self):
-        super().__init__(delimiter_pad=None, bookend=False)
+    def __init__(self, header_rows=None):
+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)
 
     def write(self, lines):
+        """Add the final separator line at the bottom of the table"""
         lines = super().write(lines)
-        lines = [lines[1]] + lines + [lines[1]]
+        
+        # Add the final separator line at the bottom
+        # The first line is our separator pattern
+        if lines:
+            lines.append(lines[0])
+        
         return lines
