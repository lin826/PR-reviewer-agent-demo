diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py
index 2c6f2d7..2a3c6af 100644
--- a/django/contrib/admin/checks.py
+++ b/django/contrib/admin/checks.py
@@ -715,38 +715,78 @@ class ModelAdminChecks(BaseModelAdminChecks):
                 for index, item in enumerate(obj.list_display)
             ))
 
+
     def _check_list_display_item(self, obj, item, label):
-        if callable(item):
-            return []
-        elif hasattr(obj, item):
+        """
+        Validate a single element of `list_display`.
+
+        The validation order is:
+        1. Allow callables or attributes on the ModelAdmin instance.
+        2. Attempt to retrieve a real model field via `_meta.get_field()`.
+           • If the field exists and is a ManyToManyField, return admin.E109.
+           • Otherwise, it's valid.
+        3. If the field doesn't exist, fall back to `getattr(model, item)`.
+           • AttributeError or a value of None triggers admin.E108.
+           • A ManyToManyField triggers admin.E109.
+        """
+        # 1. Fast exit for callables or ModelAdmin attributes.
+        if callable(item) or hasattr(obj, item):
             return []
-        elif hasattr(obj.model, item):
+
+        # 2. Try to locate a concrete model field.
+        try:
+            field = obj.model._meta.get_field(item)
+        except FieldDoesNotExist:
+            # 3. Fallback to model attribute/descriptor.
             try:
-                field = obj.model._meta.get_field(item)
-            except FieldDoesNotExist:
-                return []
-            else:
-                if isinstance(field, models.ManyToManyField):
-                    return [
-                        checks.Error(
-                            "The value of '%s' must not be a ManyToManyField." % label,
-                            obj=obj.__class__,
-                            id='admin.E109',
-                        )
-                    ]
-                return []
+                field = getattr(obj.model, item)
+            except AttributeError:
+                return [
+                    checks.Error(
+                        "The value of '%s' refers to '%s', which is not a callable, "
+                        "an attribute of '%s', or an attribute or method on '%s.%s'." % (
+                            label, item, obj.__class__.__name__,
+                            obj.model._meta.app_label, obj.model._meta.object_name,
+                        ),
+                        obj=obj.__class__,
+                        id='admin.E108',
+                    )
+                ]
+
+            # getattr() may return None which is also invalid.
+            if field is None:
+                return [
+                    checks.Error(
+                        "The value of '%s' refers to '%s', which is not a callable, "
+                        "an attribute of '%s', or an attribute or method on '%s.%s'." % (
+                            label, item, obj.__class__.__name__,
+                            obj.model._meta.app_label, obj.model._meta.object_name,
+                        ),
+                        obj=obj.__class__,
+                        id='admin.E108',
+                    )
+                ]
+
+            if isinstance(field, models.ManyToManyField):
+                return [
+                    checks.Error(
+                        "The value of '%s' must not be a ManyToManyField." % label,
+                        obj=obj.__class__,
+                        id='admin.E109',
+                    )
+                ]
+            return []
         else:
-            return [
-                checks.Error(
-                    "The value of '%s' refers to '%s', which is not a callable, "
-                    "an attribute of '%s', or an attribute or method on '%s.%s'." % (
-                        label, item, obj.__class__.__name__,
-                        obj.model._meta.app_label, obj.model._meta.object_name,
-                    ),
-                    obj=obj.__class__,
-                    id='admin.E108',
-                )
-            ]
+            if isinstance(field, models.ManyToManyField):
+                return [
+                    checks.Error(
+                        "The value of '%s' must not be a ManyToManyField." % label,
+                        obj=obj.__class__,
+                        id='admin.E109',
+                    )
+                ]
+            return []
+
 
     def _check_list_display_links(self, obj):
         """ Check that list_display_links is a unique subset of list_display.
