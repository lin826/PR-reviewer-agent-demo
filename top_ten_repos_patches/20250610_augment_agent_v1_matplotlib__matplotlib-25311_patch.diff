diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py
index 1dee8a23d9..25ca08cee1 100644
--- a/lib/matplotlib/offsetbox.py
+++ b/lib/matplotlib/offsetbox.py
@@ -1513,10 +1513,11 @@ class DraggableBase:
             self.canvas.callbacks._connect_picklable(
                 'button_release_event', self.on_release),
         ]
 
     def on_motion(self, evt):
+        self._ensure_canvas_restored()
         if self._check_still_parented() and self.got_artist:
             dx = evt.x - self.mouse_x
             dy = evt.y - self.mouse_y
             self.update_offset(dx, dy)
             if self._use_blit:
@@ -1526,10 +1527,11 @@ class DraggableBase:
                 self.canvas.blit()
             else:
                 self.canvas.draw()
 
     def on_pick(self, evt):
+        self._ensure_canvas_restored()
         if self._check_still_parented() and evt.artist == self.ref_artist:
             self.mouse_x = evt.mouseevent.x
             self.mouse_y = evt.mouseevent.y
             self.got_artist = True
             if self._use_blit:
@@ -1543,10 +1545,11 @@ class DraggableBase:
             self._c1 = self.canvas.callbacks._connect_picklable(
                 "motion_notify_event", self.on_motion)
             self.save_offset()
 
     def on_release(self, event):
+        self._ensure_canvas_restored()
         if self._check_still_parented() and self.got_artist:
             self.finalize_offset()
             self.got_artist = False
             self.canvas.mpl_disconnect(self._c1)
 
@@ -1560,19 +1563,77 @@ class DraggableBase:
         else:
             return True
 
     def disconnect(self):
         """Disconnect the callbacks."""
+        self._ensure_canvas_restored()
         for cid in self.cids:
             self.canvas.mpl_disconnect(cid)
         try:
             c1 = self._c1
         except AttributeError:
             pass
         else:
             self.canvas.mpl_disconnect(c1)
 
+    def __getstate__(self):
+        """
+        Custom pickle method to handle unpicklable canvas reference.
+        """
+        state = self.__dict__.copy()
+        # Remove the unpicklable canvas reference
+        state.pop('canvas', None)
+        # Remove callback IDs as they will be invalid after unpickling
+        state.pop('cids', None)
+        # Remove any active motion callback ID
+        state.pop('_c1', None)
+        return state
+
+    def __setstate__(self, state):
+        """
+        Custom unpickle method to restore canvas reference and reconnect callbacks.
+        """
+        self.__dict__.update(state)
+        # Mark that we need to restore the canvas connection
+        self._canvas_restored = False
+        self.canvas = None
+        self.cids = []
+
+    def _ensure_canvas_restored(self):
+        """
+        Ensure that the canvas reference and callbacks are restored after unpickling.
+        This is called lazily when the canvas is first needed.
+        """
+        if getattr(self, '_canvas_restored', True):
+            return
+            
+        # Restore canvas reference from the ref_artist's figure
+        figure = None
+        if hasattr(self.ref_artist, 'figure') and self.ref_artist.figure is not None:
+            figure = self.ref_artist.figure
+        elif hasattr(self.ref_artist, 'axes') and self.ref_artist.axes is not None:
+            figure = self.ref_artist.axes.figure
+        
+        if figure is not None:
+            self.canvas = figure.canvas
+            # Update _use_blit based on current canvas capabilities
+            self._use_blit = getattr(self, '_use_blit', False) and self.canvas.supports_blit
+            # Reconnect the callbacks
+            self.cids = [
+                self.canvas.callbacks._connect_picklable(
+                    'pick_event', self.on_pick),
+                self.canvas.callbacks._connect_picklable(
+                    'button_release_event', self.on_release),
+            ]
+        else:
+            # If we can't find the figure, set up minimal state
+            self.canvas = None
+            self._use_blit = False
+            self.cids = []
+            
+        self._canvas_restored = True
+
     def save_offset(self):
         pass
 
     def update_offset(self, dx, dy):
         pass
