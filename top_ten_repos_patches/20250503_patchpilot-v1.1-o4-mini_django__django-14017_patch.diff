diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index ffc3a7fda5..c757b1f699 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1439,4 +1439,4 @@ class ValueRange(WindowFrame):
     frame_type = 'RANGE'
 
     def window_frame_start_end(self, connection, start, end):
-        return connection.ops.window_frame_range_start_end(start, end)
+        return connection.ops.window_frame_range_start_end(start, end)
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index c957ffa564..d3563a9f35 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -39,9 +39,15 @@ class Q(tree.Node):
     def __init__(self, *args, _connector=None, _negated=False, **kwargs):
         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)
 
+
     def _combine(self, other, conn):
         if not isinstance(other, Q):
-            raise TypeError(other)
+            # Allow any expression that can act as a condition.
+            if getattr(other, 'conditional', False):
+                other = type(self)(other)  # wrap in Q()
+            else:
+                raise TypeError(other)
+
 
         # If the other Q() is empty, ignore it and just use `self`.
         if not other:
@@ -84,14 +90,21 @@ class Q(tree.Node):
         path = '%s.%s' % (self.__class__.__module__, self.__class__.__name__)
         if path.startswith('django.db.models.query_utils'):
             path = path.replace('django.db.models.query_utils', 'django.db.models')
+
         args, kwargs = (), {}
         if len(self.children) == 1 and not isinstance(self.children[0], Q):
             child = self.children[0]
-            kwargs = {child[0]: child[1]}
+            if isinstance(child, (list, tuple)) and len(child) == 2:
+                kwargs = {child[0]: child[1]}
+            else:
+                args = (child,)
+                if self.connector != self.default:
+                    kwargs = {'_connector': self.connector}
         else:
             args = tuple(self.children)
             if self.connector != self.default:
                 kwargs = {'_connector': self.connector}
+
         if self.negated:
             kwargs['_negated'] = True
         return path, args, kwargs
@@ -321,4 +334,4 @@ class FilteredRelation:
         # Resolve the condition in Join.filtered_relation.
         query = compiler.query
         where = query.build_filtered_relation_q(self.condition, reuse=set(self.path))
-        return compiler.compile(where)
+        return compiler.compile(where)
