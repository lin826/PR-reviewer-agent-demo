diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py
index 24394f869..344deef65 100644
--- a/sklearn/model_selection/_split.py
+++ b/sklearn/model_selection/_split.py
@@ -618,11 +618,11 @@ class StratifiedKFold(_BaseKFold):
             warnings.warn(NSPLIT_WARNING, FutureWarning)
             n_splits = 3
         super().__init__(n_splits, shuffle, random_state)
 
     def _make_test_folds(self, X, y=None):
-        rng = self.random_state
+        rng = check_random_state(self.random_state)
         y = np.asarray(y)
         type_of_target_y = type_of_target(y)
         allowed_target_types = ('binary', 'multiclass')
         if type_of_target_y not in allowed_target_types:
             raise ValueError(
@@ -643,33 +643,34 @@ class StratifiedKFold(_BaseKFold):
                            " members, which is too few. The minimum"
                            " number of members in any class cannot"
                            " be less than n_splits=%d."
                            % (min_groups, self.n_splits)), Warning)
 
-        # pre-assign each sample to a test fold index using individual KFold
-        # splitting strategies for each class so as to respect the balance of
-        # classes
-        # NOTE: Passing the data corresponding to ith class say X[y==class_i]
-        # will break when the data is not 100% stratifiable for all classes.
-        # So we pass np.zeroes(max(c, n_splits)) as data to the KFold
-        per_cls_cvs = [
-            KFold(self.n_splits, shuffle=self.shuffle,
-                  random_state=rng).split(np.zeros(max(count, self.n_splits)))
-            for count in y_counts]
-
+        # pre-assign each sample to a test fold index using stratified
+        # splitting within each class
         test_folds = np.zeros(n_samples, dtype=np.int)
-        for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):
-            for cls, (_, test_split) in zip(unique_y, per_cls_splits):
-                cls_test_folds = test_folds[y == cls]
-                # the test split can be too big because we used
-                # KFold(...).split(X[:max(c, n_splits)]) when data is not 100%
-                # stratifiable for all the classes
-                # (we use a warning instead of raising an exception)
-                # If this is the case, let's trim it:
-                test_split = test_split[test_split < len(cls_test_folds)]
-                cls_test_folds[test_split] = test_fold_indices
-                test_folds[y == cls] = cls_test_folds
+        
+        for cls_idx, cls in enumerate(unique_y):
+            # Get indices of samples belonging to this class
+            cls_indices = np.where(y == cls)[0]
+            n_cls_samples = len(cls_indices)
+            
+            # If shuffle is True, shuffle the indices within this class
+            if self.shuffle:
+                rng.shuffle(cls_indices)
+            
+            # Split indices into folds using the same logic as KFold
+            fold_sizes = np.full(self.n_splits, n_cls_samples // self.n_splits, dtype=np.int)
+            fold_sizes[:n_cls_samples % self.n_splits] += 1
+            
+            current = 0
+            for fold_idx in range(self.n_splits):
+                start, stop = current, current + fold_sizes[fold_idx]
+                if start < n_cls_samples:  # Handle edge case where class has fewer samples than n_splits
+                    test_indices = cls_indices[start:min(stop, n_cls_samples)]
+                    test_folds[test_indices] = fold_idx
+                current = stop
 
         return test_folds
 
     def _iter_test_masks(self, X, y=None, groups=None):
         test_folds = self._make_test_folds(X, y)
