diff --git a/lib/matplotlib/patches.py b/lib/matplotlib/patches.py
index e062249589..0c893aac3a 100644
--- a/lib/matplotlib/patches.py
+++ b/lib/matplotlib/patches.py
@@ -586,10 +586,7 @@ class Patch(artist.Artist):
         # docstring inherited
         if not self.get_visible():
             return
-        # Patch has traditionally ignored the dashoffset.
-        with cbook._setattr_cm(
-                 self, _dash_pattern=(0, self._dash_pattern[1])), \
-             self._bind_draw_path_function(renderer) as draw_path:
+        with self._bind_draw_path_function(renderer) as draw_path:
             path = self.get_path()
             transform = self.get_transform()
             tpath = transform.transform_path_non_affine(path)
diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py
index 7064d0dd3b..b7577c3565 100644
--- a/lib/matplotlib/tests/test_patches.py
+++ b/lib/matplotlib/tests/test_patches.py
@@ -808,3 +808,84 @@ def test_default_capstyle():
 def test_default_joinstyle():
     patch = Patch()
     assert patch.get_joinstyle() == 'miter'
+
+
+def test_patch_dash_offset():
+    """Test that patch objects respect dash offset in linestyle tuples."""
+    from matplotlib.backends.backend_agg import RendererAgg
+    import matplotlib as mpl
+    
+    # Create patches with different dash offsets
+    rect1 = mpatches.Rectangle((0, 0), 1, 1, fill=False, 
+                               edgecolor='red', linewidth=2,
+                               linestyle=(0, (5, 5)))  # offset=0
+    
+    rect2 = mpatches.Rectangle((0, 0), 1, 1, fill=False,
+                               edgecolor='blue', linewidth=2, 
+                               linestyle=(5, (5, 5)))  # offset=5
+    
+    # Check that the dash patterns are stored correctly
+    assert rect1._dash_pattern[0] == 0.0  # offset should be 0
+    # The offset should be scaled by linewidth if lines.scale_dashes is True
+    expected_offset = 5 * rect2._linewidth if mpl.rcParams['lines.scale_dashes'] else 5
+    assert rect2._dash_pattern[0] == expected_offset
+    
+    # Check that dash sequences are the same
+    assert rect1._dash_pattern[1] == rect2._dash_pattern[1]
+    
+    # Create a renderer for testing draw
+    renderer = RendererAgg(100, 100, 72)
+    
+    # Store original patterns
+    orig_pattern1 = rect1._dash_pattern
+    orig_pattern2 = rect2._dash_pattern
+    
+    # Draw the patches
+    rect1.draw(renderer)
+    rect2.draw(renderer)
+    
+    # Verify that dash patterns are preserved after drawing
+    assert rect1._dash_pattern == orig_pattern1, "Dash pattern should be preserved after draw"
+    assert rect2._dash_pattern == orig_pattern2, "Dash pattern should be preserved after draw"
+    
+    # Verify that offsets are different
+    assert rect1._dash_pattern[0] != rect2._dash_pattern[0], "Offsets should be different"
+
+
+def test_patch_dash_offset_various_shapes():
+    """Test dash offset with various patch shapes."""
+    from matplotlib.backends.backend_agg import RendererAgg
+    import matplotlib as mpl
+    
+    shapes = [
+        mpatches.Rectangle((0, 0), 1, 1, fill=False, linestyle=(0, (3, 3))),
+        mpatches.Circle((0.5, 0.5), 0.5, fill=False, linestyle=(0, (3, 3))),
+        mpatches.Ellipse((0.5, 0.5), 1, 0.5, fill=False, linestyle=(0, (3, 3))),
+    ]
+    
+    shapes_offset = [
+        mpatches.Rectangle((0, 0), 1, 1, fill=False, linestyle=(3, (3, 3))),
+        mpatches.Circle((0.5, 0.5), 0.5, fill=False, linestyle=(3, (3, 3))),
+        mpatches.Ellipse((0.5, 0.5), 1, 0.5, fill=False, linestyle=(3, (3, 3))),
+    ]
+    
+    renderer = RendererAgg(100, 100, 72)
+    
+    for shape, shape_offset in zip(shapes, shapes_offset):
+        # Check initial patterns
+        assert shape._dash_pattern[0] == 0.0
+        # The offset should be scaled by linewidth if lines.scale_dashes is True
+        expected_offset = 3 * shape_offset._linewidth if mpl.rcParams['lines.scale_dashes'] else 3
+        assert shape_offset._dash_pattern[0] == expected_offset
+        
+        # Store original patterns
+        orig_pattern = shape._dash_pattern
+        orig_pattern_offset = shape_offset._dash_pattern
+        
+        # Draw
+        shape.draw(renderer)
+        shape_offset.draw(renderer)
+        
+        # Verify preservation
+        assert shape._dash_pattern == orig_pattern
+        assert shape_offset._dash_pattern == orig_pattern_offset
