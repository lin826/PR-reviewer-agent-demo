--- a/sympy/combinatorics/homomorphisms.py
+++ b/sympy/combinatorics/homomorphisms.py
@@ -311,8 +311,9 @@
     if hasattr(domain, 'relators'):
         rels = domain.relators
     else:
-        gens = domain.presentation().generators
-        rels = domain.presentation().relators
+        presentation = domain.presentation()
+        gens = presentation.generators
+        rels = presentation.relators
     identity = codomain.identity
 
     def _image(r):
@@ -320,29 +321,39 @@
             return identity
         else:
             w = identity
-            r_arr = r.array_form
-            i = 0
-            j = 0
-            # i is the index for r and j is for
-            # r_arr. r_arr[j] is the tuple (sym, p)
-            # where sym is the generator symbol
-            # and p is the power to which it is
-            # raised while r[i] is a generator
-            # (not just its symbol) or the inverse of
-            # a generator - hence the need for
-            # both indices
-            while i < len(r):
-                power = r_arr[j][1]
-                if isinstance(domain, PermutationGroup) and r[i] in gens:
-                    s = domain.generators[gens.index(r[i])]
-                else:
+            if isinstance(domain, PermutationGroup):
+                # For PermutationGroups, use the simplified approach with array_form
+                # Map symbols from the free group to domain generators
+                symbol_to_gen = {}
+                free_group = domain.presentation().free_group
+                for i, symbol in enumerate(free_group.symbols):
+                    symbol_to_gen[symbol] = domain.generators[i]
+                
+                # Evaluate using array_form directly
+                for symbol, power in r.array_form:
+                    domain_gen = symbol_to_gen[symbol]
+                    # Map to the corresponding codomain element
+                    if domain_gen in images:
+                        w = w * images[domain_gen]**power
+                    elif domain_gen**-1 in images:
+                        w = w * images[domain_gen**-1]**(-power)
+                    else:
+                        # This shouldn't happen if images is properly constructed
+                        raise ValueError(f"Generator {domain_gen} not found in images")
+            else:
+                # For other group types, use the original logic
+                r_arr = r.array_form
+                i = 0
+                j = 0
+                while i < len(r):
+                    power = r_arr[j][1]
                     s = r[i]
-                if s in images:
-                    w = w*images[s]**power
-                elif s**-1 in images:
-                    w = w*images[s**-1]**power
-                i += abs(power)
-                j += 1
+                    if s in images:
+                        w = w*images[s]**power
+                    elif s**-1 in images:
+                        w = w*images[s**-1]**power
+                    i += abs(power)
+                    j += 1
             return w
 
     for r in rels:
