diff --git a/lib/matplotlib/backend_bases.py b/lib/matplotlib/backend_bases.py
index 9ae2982c62..4d2654b35b 100644
--- a/lib/matplotlib/backend_bases.py
+++ b/lib/matplotlib/backend_bases.py
@@ -1653,7 +1653,9 @@ class FigureCanvasBase:
         self.toolbar = None  # NavigationToolbar2 will set me
         self._is_idle_drawing = False
         # We don't want to scale up the figure DPI more than once.
-        figure._original_dpi = figure.dpi
+        # Only set _original_dpi if it doesn't exist already (could be set during unpickling)
+        if not hasattr(figure, '_original_dpi'):
+            figure._original_dpi = figure.dpi
         self._device_pixel_ratio = 1
         super().__init__()  # Typically the GUI widget init (if any).
 
diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py
index c55864243a..631eb35187 100644
--- a/lib/matplotlib/figure.py
+++ b/lib/matplotlib/figure.py
@@ -3026,6 +3026,10 @@ class Figure(FigureBase):
         # add version information to the state
         state['__mpl_version__'] = mpl.__version__
 
+        # Explicitly save original_dpi to ensure it's preserved during unpickling
+        if hasattr(self, '_original_dpi'):
+            state['_pickled_original_dpi'] = self._original_dpi
+
         # check whether the figure manager (if any) is registered with pyplot
         from matplotlib import _pylab_helpers
         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():
@@ -3035,16 +3039,27 @@ class Figure(FigureBase):
     def __setstate__(self, state):
         version = state.pop('__mpl_version__')
         restore_to_pylab = state.pop('_restore_to_pylab', False)
+        
+        # Extract pickled_original_dpi before restoring state dictionary
+        pickled_original_dpi = state.pop('_pickled_original_dpi', None)
 
         if version != mpl.__version__:
             _api.warn_external(
                 f"This figure was saved with matplotlib version {version} and "
                 f"is unlikely to function correctly.")
 
+        # Save original dpi value before restoring state
+        original_dpi = state.get('_dpi', None)
         self.__dict__ = state
 
         # re-initialise some of the unstored state information
         FigureCanvasBase(self)  # Set self.canvas.
+        
+        # Restore the original_dpi with priority to explicitly saved value
+        if pickled_original_dpi is not None:
+            self._original_dpi = pickled_original_dpi
+        elif original_dpi is not None:
+            self._original_dpi = original_dpi
 
         if restore_to_pylab:
             # lazy import to avoid circularity

