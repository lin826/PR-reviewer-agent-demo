diff --git a/django/db/models/base.py b/django/db/models/base.py
index 6c9e9d3707..124db6eed0 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1747,7 +1747,7 @@ class Model(metaclass=ModelBase):
                     else:
                         _cls = None
                 except (FieldDoesNotExist, AttributeError):
-                    if fld is None or fld.get_transform(part) is None:
+                    if fld is None or (fld.get_transform(part) is None and fld.get_lookup(part) is None):
                         errors.append(
                             checks.Error(
                                 "'ordering' refers to the nonexistent field, "
diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py
index 6bfdf2e736..566b15bb6c 100644
--- a/tests/invalid_models_tests/test_models.py
+++ b/tests/invalid_models_tests/test_models.py
@@ -893,6 +893,42 @@ class OtherModelTests(SimpleTestCase):
         with register_lookup(models.CharField, Lower):
             self.assertEqual(Model.check(), [])
 
+    def test_ordering_allows_builtin_lookups(self):
+        """Test that ordering with builtin lookups like isnull doesn't raise E015."""
+        class Parent(models.Model):
+            name = models.CharField(max_length=100)
+
+        class Child(models.Model):
+            parent = models.ForeignKey(Parent, models.CASCADE, null=True)
+
+            class Meta:
+                ordering = ('parent__isnull',)
+
+        # Should not raise any E015 errors
+        errors = Child.check()
+        e015_errors = [e for e in errors if e.id == 'models.E015']
+        self.assertEqual(e015_errors, [])
+
+    def test_ordering_allows_related_field_builtin_lookups(self):
+        """Test that ordering with builtin lookups on related fields doesn't raise E015."""
+        class Product(models.Model):
+            name = models.CharField(max_length=100)
+            parent = models.ForeignKey('self', models.CASCADE, null=True)
+
+        class Supply(models.Model):
+            product = models.ForeignKey(Product, models.CASCADE)
+
+        class Stock(models.Model):
+            supply = models.ForeignKey(Supply, models.CASCADE)
+
+            class Meta:
+                ordering = ('supply__product__parent__isnull',)
+
+        # Should not raise any E015 errors
+        errors = Stock.check()
+        e015_errors = [e for e in errors if e.id == 'models.E015']
+        self.assertEqual(e015_errors, [])
+
     def test_ordering_pointing_to_related_model_pk(self):
         class Parent(models.Model):
             pass
