diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py
index 83a4f004aa..83ea51f66a 100644
--- a/astropy/io/ascii/qdp.py
+++ b/astropy/io/ascii/qdp.py
@@ -34,6 +34,8 @@ def _line_type(line, delimiter=None):
     --------
     >>> _line_type("READ SERR 3")
     'command'
+    >>> _line_type("read serr 3")
+    'command'
     >>> _line_type(" \\n    !some gibberish")
     'comment'
     >>> _line_type("   ")
@@ -68,7 +70,7 @@ def _line_type(line, delimiter=None):
     _new_re = rf"NO({sep}NO)+"
     _data_re = rf"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)"
     _type_re = rf"^\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\s*(\!(?P<comment>.*))?\s*$"
-    _line_type_re = re.compile(_type_re)
+    _line_type_re = re.compile(_type_re, re.IGNORECASE)
     line = line.strip()
     if not line:
         return "comment"
diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py
index ef24e6f6a3..6462197fc8 100644
--- a/astropy/io/ascii/tests/test_qdp.py
+++ b/astropy/io/ascii/tests/test_qdp.py
@@ -245,3 +245,43 @@ def test_get_lines_from_qdp(tmp_path):
         assert file_output[i] == line
         assert list_output[i] == line
         assert text_output[i] == line
+
+
+def test_case_insensitive_commands(tmp_path):
+    """Test that QDP commands are case-insensitive."""
+    
+    # Test various case combinations for SERR and TERR commands
+    test_cases = [
+        ("read serr 1 2", "lowercase serr"),
+        ("READ SERR 1 2", "uppercase serr"),
+        ("Read Serr 1 2", "title case serr"),
+        ("rEaD sErR 1 2", "mixed case serr"),
+        ("read terr 1", "lowercase terr"),
+        ("READ TERR 1", "uppercase terr"),
+        ("Read Terr 1", "title case terr"),
+        ("rEaD tErR 1", "mixed case terr"),
+    ]
+    
+    for command, description in test_cases:
+        # Create QDP content with the command
+        qdp_content = f"{command}\n1 0.5 1 0.5\n"
+        
+        test_file = tmp_path / f"test_{description.replace(' ', '_')}.qdp"
+        with open(test_file, "w") as f:
+            f.write(qdp_content)
+        
+        # Should not raise an exception
+        table = Table.read(test_file, format="ascii.qdp", table_id=0)
+        
+        # Verify the table was read correctly
+        assert len(table) == 1
+        assert len(table.colnames) >= 2  # At least 2 columns (data + error columns)
+        
+        # For SERR commands, we expect error columns
+        if "serr" in command.lower():
+            assert any("_err" in col for col in table.colnames)
+        
+        # For TERR commands, we expect positive and negative error columns  
+        if "terr" in command.lower():
+            assert any("_perr" in col for col in table.colnames)
+            assert any("_nerr" in col for col in table.colnames)
