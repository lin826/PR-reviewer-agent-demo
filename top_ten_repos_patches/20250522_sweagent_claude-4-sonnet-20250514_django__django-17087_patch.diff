diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index d88cda6e20..06657ebaab 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -168,7 +168,7 @@ class FunctionTypeSerializer(BaseSerializer):
         ):
             klass = self.value.__self__
             module = klass.__module__
-            return "%s.%s.%s" % (module, klass.__name__, self.value.__name__), {
+            return "%s.%s.%s" % (module, klass.__qualname__, self.value.__name__), {
                 "import %s" % module
             }
         # Further error checking
diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py
index bef8f64061..21b23ac0ee 100644
--- a/tests/migrations/test_writer.py
+++ b/tests/migrations/test_writer.py
@@ -52,6 +52,18 @@ class TestModel1:
     thing = models.FileField(upload_to=upload_to)
 
 
+class TestModel3:
+    class NestedClass:
+        @classmethod
+        def nested_method(cls):
+            return "nested"
+        
+        class DeeplyNestedClass:
+            @classmethod
+            def deeply_nested_method(cls):
+                return "deeply_nested"
+
+
 class TextEnum(enum.Enum):
     A = "a-value"
     B = "value-b"
@@ -753,6 +765,19 @@ class WriterTests(SimpleTestCase):
         ):
             self.serialize_round_trip(TestModel2.thing)
 
+    def test_serialize_nested_class_method(self):
+        """Nested class methods should use __qualname__ for correct serialization."""
+        
+        # Test nested class method
+        string, imports = MigrationWriter.serialize(TestModel3.NestedClass.nested_method)
+        self.assertEqual(string, "migrations.test_writer.TestModel3.NestedClass.nested_method")
+        self.assertEqual(imports, {"import migrations.test_writer"})
+        
+        # Test deeply nested class method
+        string, imports = MigrationWriter.serialize(TestModel3.NestedClass.DeeplyNestedClass.deeply_nested_method)
+        self.assertEqual(string, "migrations.test_writer.TestModel3.NestedClass.DeeplyNestedClass.deeply_nested_method")
+        self.assertEqual(imports, {"import migrations.test_writer"})
+
     def test_serialize_managers(self):
         self.assertSerializedEqual(models.Manager())
         self.assertSerializedResultEqual(
