diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index ea51912e8b..682adb4a27 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1056,7 +1056,7 @@ class Query(BaseExpression):
             if isinstance(value, F):
                 kwargs['simple_col'] = simple_col
             value = value.resolve_expression(self, **kwargs)
-        elif isinstance(value, (list, tuple)):
+        elif hasattr(value, '__iter__') and not isinstance(value, (str, bytes, dict)):
             # The items of the iterable may be expressions and therefore need
             # to be resolved independently.
             resolved_values = []
@@ -1073,7 +1073,21 @@ class Query(BaseExpression):
                         ))
                 else:
                     resolved_values.append(sub_value)
-            value = tuple(resolved_values)
+            # Recreate the RHS with the *original* container type so that
+            # look-ups whose semantics depend on the concrete type (e.g.
+            # PickledField, JSONField) continue to work.
+            value_type = type(value)
+            if value_type is list:
+                value = list(resolved_values)
+            elif value_type is tuple:
+                value = tuple(resolved_values)
+            else:
+                # For other iterable types, try to instantiate with the resolved values
+                # but fall back to tuple if that fails
+                try:
+                    value = value_type(resolved_values)
+                except (TypeError, ValueError):
+                    value = tuple(resolved_values)
         return value
 
     def solve_lookup_type(self, lookup):
