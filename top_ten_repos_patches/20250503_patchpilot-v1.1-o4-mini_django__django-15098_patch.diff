diff --git a/django/middleware/locale.py b/django/middleware/locale.py
index d90fc84152..8312ed2fa6 100644
--- a/django/middleware/locale.py
+++ b/django/middleware/locale.py
@@ -63,4 +63,4 @@ class LocaleMiddleware(MiddlewareMixin):
         if not (i18n_patterns_used and language_from_path):
             patch_vary_headers(response, ('Accept-Language',))
         response.headers.setdefault('Content-Language', language)
-        return response
+        return response
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 6ea18dd22f..5afd5e48e4 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -320,11 +320,28 @@ class LocalePrefixPattern:
         else:
             return '%s/' % language_code
 
+
     def match(self, path):
-        language_prefix = self.language_prefix
-        if path.startswith(language_prefix):
-            return path[len(language_prefix):], (), {}
-        return None
+        # Attempt to match a supported language prefix (e.g. "en-Latn-US")
+        # at the start of the path.
+        if '/' not in path:
+            return None
+        candidate, rest = path.split('/', 1)
+        from django.utils.translation.trans_real import get_supported_language_variant
+        try:
+            supported_code = get_supported_language_variant(candidate, strict=True)
+            # Skip explicit prefix when it's the default language and prefixes
+            # for the default language are disabled.
+            if not self.prefix_default_language and supported_code == settings.LANGUAGE_CODE:
+                return None
+        except LookupError:
+            # Treat URL as unprefixed when no language prefix is found and
+            # prefixes for the default language are disabled.
+            if not self.prefix_default_language:
+                return path, (), {}
+            return None
+        return rest, (), {}
+
 
     def check(self):
         return []
@@ -722,4 +739,4 @@ class URLResolver:
                 "Reverse for '%(view)s' not found. '%(view)s' is not "
                 "a valid view function or pattern name." % {'view': lookup_view_s}
             )
-        raise NoReverseMatch(msg)
+        raise NoReverseMatch(msg)
diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py
index 7dcc77b46c..79d31259cc 100644
--- a/django/utils/translation/trans_real.py
+++ b/django/utils/translation/trans_real.py
@@ -487,9 +487,11 @@ def get_supported_language_variant(lang_code, strict=False):
         generic_lang_code = possible_lang_codes[-1]
         supported_lang_codes = get_languages()
 
+
         for code in possible_lang_codes:
-            if code in supported_lang_codes and check_for_language(code):
+            if code in supported_lang_codes:
                 return code
+
         if not strict:
             # if fr-fr is not supported, try fr-ca.
             for supported_code in supported_lang_codes:
@@ -580,4 +582,4 @@ def parse_accept_lang_header(lang_string):
             priority = 1.0
         result.append((lang, priority))
     result.sort(key=lambda k: k[1], reverse=True)
-    return tuple(result)
+    return tuple(result)
