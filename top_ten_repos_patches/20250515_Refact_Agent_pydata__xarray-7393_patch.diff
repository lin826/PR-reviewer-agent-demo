diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py
index ba937183..eb3fdf35 100644
--- a/xarray/core/indexing.py
+++ b/xarray/core/indexing.py
@@ -1490,7 +1490,11 @@ class PandasIndexingAdapter(ExplicitlyIndexedNDArrayMixin):
         if isinstance(result, pd.Index):
             return type(self)(result, dtype=self.dtype)
         else:
-            return self._convert_scalar(result)
+            result = self._convert_scalar(result)
+            # Cast to the original dtype if needed
+            if hasattr(result, 'dtype') and self.dtype is not None and result.dtype != self.dtype:
+                result = result.astype(self.dtype, copy=False)
+            return result
 
     def transpose(self, order) -> pd.Index:
         return self.array  # self.array should be always one-dimensional
diff --git a/xarray/core/variable.py b/xarray/core/variable.py
index 118e7c48..20e17b76 100644
--- a/xarray/core/variable.py
+++ b/xarray/core/variable.py
@@ -604,7 +604,11 @@ class Variable(AbstractArray, NdimSizeLenMixin, VariableArithmetic):
     @property
     def values(self):
         """The variable's data as a numpy.ndarray"""
-        return _as_array_or_item(self._data)
+        data = _as_array_or_item(self._data)
+        # If the data comes from a PandasIndexingAdapter, respect its dtype
+        if hasattr(self._data, 'dtype') and hasattr(data, 'dtype') and data.dtype != self._data.dtype:
+            data = data.astype(self._data.dtype, copy=False)
+        return data
 
     @values.setter
     def values(self, values):
