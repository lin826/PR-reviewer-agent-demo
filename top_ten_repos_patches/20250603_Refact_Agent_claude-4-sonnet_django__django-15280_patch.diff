diff --git a/django/db/models/query.py b/django/db/models/query.py
index fb6639793a..a98de24fe5 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1944,11 +1944,33 @@ def prefetch_one_level(instances, prefetcher, lookup, level):
                 # cache_name points to a field name in obj.
                 # This field is a descriptor for a related object.
                 setattr(obj, cache_name, val)
+                
+                # Check if val represents the same object as obj (same primary key)
+                # This happens when prefetching back to the "parent" object with different field sets
+                if val is not None and val.pk == obj.pk and val is not obj:
+                    # Same logical object, different instances - merge field data
+                    # Copy any fields from val that are missing in obj
+                    for field_name, field_value in val.__dict__.items():
+                        if (field_name not in obj.__dict__ and 
+                            not field_name.startswith('_') and
+                            field_name != 'id'):  # Don't overwrite the id field
+                            obj.__dict__[field_name] = field_value
             else:
                 # No to_attr has been given for this prefetch operation and the
                 # cache_name does not point to a descriptor. Store the value of
                 # the field in the object's field cache.
                 obj._state.fields_cache[cache_name] = val
+                
+                # Check if val represents the same object as obj (same primary key)
+                # This happens when prefetching back to the "parent" object with different field sets
+                if val is not None and val.pk == obj.pk and val is not obj:
+                    # Same logical object, different instances - merge field data
+                    # Copy any fields from val that are missing in obj
+                    for field_name, field_value in val.__dict__.items():
+                        if (field_name not in obj.__dict__ and 
+                            not field_name.startswith('_') and
+                            field_name != 'id'):  # Don't overwrite the id field
+                            obj.__dict__[field_name] = field_value
         else:
             if as_attr:
                 setattr(obj, to_attr, vals)
