--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -2003,6 +2003,8 @@
 
     def get_extra(self, request, obj=None, **kwargs):
         """Hook for customizing the number of extra inline forms."""
+        if request and not self.has_add_permission(request, obj):
+            return 0
         return self.extra
 
     def get_min_num(self, request, obj=None, **kwargs):
@@ -2011,6 +2013,8 @@
 
     def get_max_num(self, request, obj=None, **kwargs):
         """Hook for customizing the max number of extra inline forms."""
+        if request and not self.has_add_permission(request, obj):
+            return 0
         return self.max_num
 
     def get_formset(self, request, obj=None, **kwargs):
@@ -2115,27 +2119,48 @@
         if self.opts.auto_created:
             # We're checking the rights to an auto-created intermediate model,
             # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            # to have the change permission for the related model in order to
+            # be able to add to the intermediate model.
+            opts = self.opts
+            # The model was auto-created as intermediary for a many-to-many
+            # Many-relationship; find the target model.
+            for field in opts.fields:
+                if field.remote_field and field.remote_field.model != self.parent_model:
+                    opts = field.remote_field.model._meta
+                    break
+            return request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))
         return super().has_add_permission(request)
 
     def has_change_permission(self, request, obj=None):
         if self.opts.auto_created:
             # We're checking the rights to an auto-created intermediate model,
             # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            # to have the change permission for the related model in order to
+            # be able to change the intermediate model.
+            opts = self.opts
+            # The model was auto-created as intermediary for a many-to-many
+            # Many-relationship; find the target model.
+            for field in opts.fields:
+                if field.remote_field and field.remote_field.model != self.parent_model:
+                    opts = field.remote_field.model._meta
+                    break
+            return request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))
         return super().has_change_permission(request)
 
     def has_delete_permission(self, request, obj=None):
         if self.opts.auto_created:
             # We're checking the rights to an auto-created intermediate model,
             # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            # to have the change permission for the related model in order to
+            # be able to delete from the intermediate model.
+            opts = self.opts
+            # The model was auto-created as intermediary for a many-to-many
+            # Many-relationship; find the target model.
+            for field in opts.fields:
+                if field.remote_field and field.remote_field.model != self.parent_model:
+                    opts = field.remote_field.model._meta
+                    break
+            return request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))
         return super().has_delete_permission(request, obj)
 
     def has_view_permission(self, request, obj=None):

--- a/django/contrib/admin/helpers.py
+++ b/django/contrib/admin/helpers.py
@@ -300,15 +300,18 @@
 
     def inline_formset_data(self):
         verbose_name = self.opts.verbose_name
+        options = {
+            'prefix': self.formset.prefix,
+            'deleteText': gettext('Remove'),
+        }
+        # Only include addText if the user has add permission
+        if self.has_add_permission:
+            options['addText'] = gettext('Add another %(verbose_name)s') % {
+                'verbose_name': capfirst(verbose_name),
+            }
         return json.dumps({
             'name': '#%s' % self.formset.prefix,
-            'options': {
-                'prefix': self.formset.prefix,
-                'addText': gettext('Add another %(verbose_name)s') % {
-                    'verbose_name': capfirst(verbose_name),
-                },
-                'deleteText': gettext('Remove'),
-            }
+            'options': options
         })
 
     @property
