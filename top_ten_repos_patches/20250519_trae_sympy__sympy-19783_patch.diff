diff --git a/sympy/physics/quantum/dagger.py b/sympy/physics/quantum/dagger.py
index 17da3cfd2c..1c3d4cc368 100644
--- a/sympy/physics/quantum/dagger.py
+++ b/sympy/physics/quantum/dagger.py
@@ -4,6 +4,7 @@
 
 from sympy.core import Expr
 from sympy.functions.elementary.complexes import adjoint
+from sympy.core.mul import Mul
 
 __all__ = [
     'Dagger'
@@ -84,6 +85,13 @@ def __new__(cls, arg):
         if obj is not None:
             return obj
         return Expr.__new__(cls, arg)
+    
+    def __mul__(self, other):
+        # Handle multiplication with Identity operator
+        from sympy.physics.quantum.operator import IdentityOperator
+        if isinstance(other, IdentityOperator) and hasattr(self.args[0], '__class__') and self.args[0].__class__.__name__ == 'Operator':
+            return self
+        return Mul(self, other)
 
 adjoint.__name__ = "Dagger"
 adjoint._sympyrepr = lambda a, b: "Dagger(%s)" % b._print(a.args[0])
diff --git a/sympy/physics/quantum/operator.py b/sympy/physics/quantum/operator.py
index 306bfee64f..2ca67aada4 100644
--- a/sympy/physics/quantum/operator.py
+++ b/sympy/physics/quantum/operator.py
@@ -309,6 +309,11 @@ def __mul__(self, other):
 
         if isinstance(other, Operator):
             return other
+        
+        # Handle Dagger objects
+        from sympy.physics.quantum.dagger import Dagger
+        if isinstance(other, Dagger) and isinstance(other.args[0], Operator):
+            return other
 
         return Mul(self, other)
 

