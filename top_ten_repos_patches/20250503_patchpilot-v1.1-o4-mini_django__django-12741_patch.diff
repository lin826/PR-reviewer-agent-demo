diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py
index 5fc53dc..18810b2 100644
--- a/django/db/backends/base/operations.py
+++ b/django/db/backends/base/operations.py
@@ -400,13 +400,44 @@ class BaseDatabaseOperations:
         """
         raise NotImplementedError('subclasses of BaseDatabaseOperations must provide a sql_flush() method')
 
-    def execute_sql_flush(self, using, sql_list):
-        """Execute a list of SQL statements to flush the database."""
+
+    def execute_sql_flush(self, *args, **kwargs):
+        """
+        Execute a list of SQL statements to flush the database.
+
+        This method supports both the legacy signature
+            execute_sql_flush(using, sql_list)
+        and the simplified signature
+            execute_sql_flush(sql_list, *, using=<alias>)
+        for backward‑compatibility.
+        """
+        # Resolve arguments depending on how the method was called.
+        if len(args) == 1:
+            # New style: only sql_list provided positionally.
+            sql_list = args[0]
+            using = kwargs.pop('using', self.connection.alias)
+        elif len(args) == 2:
+            # Legacy style: (using, sql_list)
+            using, sql_list = args
+        elif len(args) == 0:
+            # Keyword‑only usage.
+            sql_list = kwargs.pop('sql_list', None)
+            using = kwargs.pop('using', self.connection.alias)
+        else:
+            raise TypeError(
+                'execute_sql_flush() accepts (sql_list), (using, sql_list), '
+                'or keyword arguments "sql_list" (required) and optional "using".'
+            )
+
+        if sql_list is None:
+            raise TypeError('execute_sql_flush() missing required argument: "sql_list"')
+
         with transaction.atomic(using=using, savepoint=self.connection.features.can_rollback_ddl):
             with self.connection.cursor() as cursor:
                 for sql in sql_list:
                     cursor.execute(sql)
 
+
     def sequence_reset_by_name_sql(self, style, sequences):
         """
         Return a list of the SQL statements required to reset sequences
