diff --git a/django/db/models/query.py b/django/db/models/query.py
index 07d6ffd4ca..cfa418b4e8 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -758,10 +758,12 @@ class QuerySet:
         Delete objects found from the given queryset in single direct SQL
         query. No signals are sent and there is no protection for cascades.
         """
         query = self.query.clone()
         query.__class__ = sql.DeleteQuery
+        # Make sure the query is properly initialized
+        query.get_initial_alias()
         cursor = query.get_compiler(using).execute_sql(CURSOR)
         if cursor:
             with cursor:
                 return cursor.rowcount
         return 0
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 29e33c075f..65a90dba30 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -1408,10 +1408,14 @@ class SQLDeleteCompiler(SQLCompiler):
     @cached_property
     def single_alias(self):
         return sum(self.query.alias_refcount[t] > 0 for t in self.query.alias_map) == 1
 
     def _as_sql(self, query):
+        # Make sure we have a base table
+        if not hasattr(query, 'base_table') or query.base_table is None:
+            query.get_initial_alias()
+            
         result = [
             'DELETE FROM %s' % self.quote_name_unless_alias(query.base_table)
         ]
         where, params = self.compile(query.where)
         if where:
@@ -1421,11 +1425,15 @@ class SQLDeleteCompiler(SQLCompiler):
     def as_sql(self):
         """
         Create the SQL for this query. Return the SQL string and list of
         parameters.
         """
-        if self.single_alias:
+        # Use a direct DELETE without a subquery when:
+        # - We have a single alias (single table)
+        # - There's no where clause (we're deleting all rows)
+        # - We're not dealing with inherited models (which would require a subquery)
+        if self.single_alias or (not self.query.where and not self.query.model._meta.parents):
             return self._as_sql(self.query)
         innerq = self.query.clone()
         innerq.__class__ = Query
         innerq.clear_select_clause()
         pk = self.query.model._meta.pk
