diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py
index c1830ba5f7..d7323be236 100644
--- a/sympy/physics/units/tests/test_quantities.py
+++ b/sympy/physics/units/tests/test_quantities.py
@@ -377,6 +377,66 @@ def test_factor_and_dimension():
         assert (3000, Dimension(1)) == Quantity._collect_factor_and_dimension(3000)
 
 
+def test_collect_factor_and_dimension_equivalent_dims():
+    """Test that _collect_factor_and_dimension handles equivalent dimensions correctly."""
+    from sympy.physics.units import velocity, acceleration, time, force, mass
+    
+    # Test the original issue: acceleration*time + velocity should work
+    v_equiv = Quantity('v_equiv')
+    SI.set_quantity_dimension(v_equiv, velocity)
+    SI.set_quantity_scale_factor(v_equiv, 2 * meter / second)
+    
+    a_equiv = Quantity('a_equiv')
+    SI.set_quantity_dimension(a_equiv, acceleration)
+    SI.set_quantity_scale_factor(a_equiv, -9.8 * meter / second**2)
+    
+    t_equiv = Quantity('t_equiv')
+    SI.set_quantity_dimension(t_equiv, time)
+    SI.set_quantity_scale_factor(t_equiv, 5 * second)
+    
+    # This should work: acceleration*time + velocity are equivalent dimensions
+    expr1 = a_equiv*t_equiv + v_equiv
+    factor, dimension = SI._collect_factor_and_dimension(expr1)
+    
+    # Check that we get the expected result
+    # Factor should be: a_equiv_factor * t_equiv_factor + v_equiv_factor = -9.8 * 5 + 2 = -47
+    assert abs(float(factor) - (-47.0)) < 1e-10
+    
+    # The dimension should be equivalent to velocity
+    assert SI.get_dimension_system().equivalent_dims(dimension, velocity)
+    
+    # Test force + mass*acceleration (should work)
+    f_equiv = Quantity('f_equiv')
+    SI.set_quantity_dimension(f_equiv, force)
+    SI.set_quantity_scale_factor(f_equiv, 10 * kilogram * meter / second**2)
+    
+    m_equiv = Quantity('m_equiv')
+    SI.set_quantity_dimension(m_equiv, mass)
+    SI.set_quantity_scale_factor(m_equiv, 2 * kilogram)
+    
+    a2_equiv = Quantity('a2_equiv')
+    SI.set_quantity_dimension(a2_equiv, acceleration)
+    SI.set_quantity_scale_factor(a2_equiv, 5 * meter / second**2)
+    
+    # This should work: force and mass*acceleration are equivalent
+    expr2 = f_equiv + m_equiv*a2_equiv
+    factor2, dimension2 = SI._collect_factor_and_dimension(expr2)
+    
+    # Factor should be: 10*1000 + 2*1000*5 = 10000 + 10000 = 20000 (in base SI units)
+    assert abs(float(factor2) - 20000.0) < 1e-10
+    
+    # The dimension should be equivalent to force
+    assert SI.get_dimension_system().equivalent_dims(dimension2, force)
+    
+    # Test that non-equivalent dimensions still raise errors
+    mass_equiv = Quantity('mass_equiv')
+    SI.set_quantity_dimension(mass_equiv, mass)
+    SI.set_quantity_scale_factor(mass_equiv, 3 * kilogram)
+    
+    # This should still raise an error: velocity + mass are not equivalent
+    raises(ValueError, lambda: SI._collect_factor_and_dimension(v_equiv + mass_equiv))
+
+
 @XFAIL
 def test_factor_and_dimension_with_Abs():
     with warns_deprecated_sympy():
diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index a436880c4b..5705c821c2 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -175,7 +175,7 @@ def _collect_factor_and_dimension(self, expr):
             for addend in expr.args[1:]:
                 addend_factor, addend_dim = \
                     self._collect_factor_and_dimension(addend)
-                if dim != addend_dim:
+                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):
                     raise ValueError(
                         'Dimension of "{}" is {}, '
                         'but it should be {}'.format(
