diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py
index 8c308621d2..a46974f7bf 100644
--- a/django/db/migrations/loader.py
+++ b/django/db/migrations/loader.py
@@ -82,15 +82,10 @@ class MigrationLoader:
                         not explicit and "No module named" in str(e) and MIGRATIONS_MODULE_NAME in str(e))):
                     self.unmigrated_apps.add(app_config.label)
                     continue
                 raise
             else:
-                # Empty directories are namespaces.
-                # getattr() needed on PY36 and older (replace w/attribute access).
-                if getattr(module, '__file__', None) is None:
-                    self.unmigrated_apps.add(app_config.label)
-                    continue
                 # Module is not a package (e.g. migrations.py).
                 if not hasattr(module, '__path__'):
                     self.unmigrated_apps.add(app_config.label)
                     continue
                 # Force a reload if it's already loaded (tests need this)
@@ -99,10 +94,18 @@ class MigrationLoader:
             self.migrated_apps.add(app_config.label)
             migration_names = {
                 name for _, name, is_pkg in pkgutil.iter_modules(module.__path__)
                 if not is_pkg and name[0] not in '_~'
             }
+            # Check if this is an empty namespace package with no migration files.
+            # Both regular packages and namespace packages can contain migrations,
+            # but empty namespace packages should be treated as unmigrated.
+            if not migration_names and getattr(module, '__file__', None) is None:
+                # Empty namespace package - move to unmigrated
+                self.migrated_apps.remove(app_config.label)
+                self.unmigrated_apps.add(app_config.label)
+                continue
             # Load migrations
             for migration_name in migration_names:
                 migration_path = '%s.%s' % (module_name, migration_name)
                 try:
                     migration_module = import_module(migration_path)
