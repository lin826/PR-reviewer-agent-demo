diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py
index 98a3a3a96..56b00ab99 100644
--- a/sphinx/ext/autodoc/mock.py
+++ b/sphinx/ext/autodoc/mock.py
@@ -68,12 +68,45 @@ class _MockObject:
         return self.__display_name__
 
 
-def _make_subclass(name: str, module: str, superclass: Any = _MockObject,
+def _make_subclass(name: Any, module: str, superclass: Any = _MockObject,
                    attributes: Any = None) -> Any:
-    attrs = {'__module__': module, '__display_name__': module + '.' + name}
+    """
+    Build a mock subclass that pretends to live in *module*.
+
+    ``name`` is *usually* a string coming from normal attribute access
+    (``mock.foo``) but, when Sphinx is asked to inspect generically-typed
+    objects (``mock[T]``, ``mock[int]`` …), Python forwards whatever object
+    is inside the square brackets – a ``TypeVar``, a class, a
+    ``typing._GenericAlias`` – straight to our :pycode:`__getitem__`, hence
+    to this helper.
+
+    Such objects do not support ``str`` concatenation, nor are they always
+    valid identifiers, so we first coerce them to a sensible, purely
+    *string* representation before using them as a class name or for
+    display.
+    """
+    # Normalise *module* first (defensive, should already be str).
+    module = str(module)
+
+    # Derive a usable *string* for the new type's name.
+    if isinstance(name, str):
+        type_name = name
+    else:
+        # Prefer the real identifier if present (e.g. ``__name__`` of a class
+        # or a ``TypeVar``); fall back to ``str(obj)`` otherwise.
+        type_name = getattr(name, '__name__', None) \
+                    or getattr(name, '_name', None) \
+                    or str(name)
+
+    display_name = f'{module}.{type_name}'
+
+    attrs = {
+        '__module__': module,
+        '__display_name__': display_name,
+    }
     attrs.update(attributes or {})
 
-    return type(name, (superclass,), attrs)
+    return type(type_name, (superclass,), attrs)
 
 
 class _MockModule(ModuleType):
