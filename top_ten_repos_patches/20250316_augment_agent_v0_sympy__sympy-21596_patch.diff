diff --git a/sympy/sets/handlers/intersection.py b/sympy/sets/handlers/intersection.py
index c54dc8f72a..32c249e979 100644
--- a/sympy/sets/handlers/intersection.py
+++ b/sympy/sets/handlers/intersection.py
@@ -302,23 +302,23 @@ def intersection_sets(self, other): # noqa:F811
             return S.EmptySet
         elif ifree != {n}:
             return None
         else:
             # univarite imaginary part in same variable
-            x, xis = zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols])
-            if x and all(i == n for i in x):
-                base_set -= FiniteSet(xis)
+            from sympy.solvers.solveset import solveset
+            solutions = solveset(im, n, S.Integers)
+            if solutions.is_FiniteSet:
+                base_set = solutions
             else:
                 base_set -= ConditionSet(n, Eq(im, 0), S.Integers)
         # exclude values that make denominators 0
         for i in denoms(f):
             if i.has(n):
-                sol = list(zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols]))
-                if sol != []:
-                    x, xis = sol
-                    if x and all(i == n for i in x):
-                        base_set -= FiniteSet(xis)
+                from sympy.solvers.solveset import solveset
+                denom_solutions = solveset(i, n, S.Integers)
+                if denom_solutions.is_FiniteSet:
+                    base_set -= denom_solutions
                 else:
                     base_set -= ConditionSet(n, Eq(i, 0), S.Integers)
         return imageset(lam, base_set)
 
     elif isinstance(other, Interval):
