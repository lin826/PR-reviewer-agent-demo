diff --git a/django/contrib/auth/__init__.py b/django/contrib/auth/__init__.py
index 155330c596..d010751a20 100644
--- a/django/contrib/auth/__init__.py
+++ b/django/contrib/auth/__init__.py
@@ -5,7 +5,7 @@ from django.apps import apps as django_apps
 from django.conf import settings
 from django.core.exceptions import ImproperlyConfigured, PermissionDenied
 from django.middleware.csrf import rotate_token
-from django.utils.crypto import constant_time_compare
+from django.utils.crypto import constant_time_compare, salted_hmac
 from django.utils.module_loading import import_string
 from django.views.decorators.debug import sensitive_variables
 
@@ -199,9 +199,28 @@ def get_user(request):
             # Verify the session
             if hasattr(user, "get_session_auth_hash"):
                 session_hash = request.session.get(HASH_SESSION_KEY)
+                current_hash = user.get_session_auth_hash()
                 session_hash_verified = session_hash and constant_time_compare(
-                    session_hash, user.get_session_auth_hash()
+                    session_hash, current_hash
                 )
+                
+                # If verification with current SECRET_KEY fails, try with fallbacks
+                if not session_hash_verified and hasattr(settings, 'SECRET_KEY_FALLBACKS') and settings.SECRET_KEY_FALLBACKS:
+                    key_salt = "django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash"
+                    for fallback_key in settings.SECRET_KEY_FALLBACKS:
+                        fallback_hash = salted_hmac(
+                            key_salt,
+                            user.password,
+                            secret=fallback_key,
+                            algorithm="sha256",
+                        ).hexdigest()
+                        
+                        if constant_time_compare(session_hash, fallback_hash):
+                            session_hash_verified = True
+                            # Update session with current hash to migrate to new key
+                            request.session[HASH_SESSION_KEY] = current_hash
+                            break
+                
                 if not session_hash_verified:
                     request.session.flush()
                     user = None
