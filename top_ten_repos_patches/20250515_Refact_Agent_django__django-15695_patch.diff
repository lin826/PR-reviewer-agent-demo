diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index d17232e4ec..3ca8abe1f3 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -966,8 +966,33 @@ class RenameIndex(IndexOperation):
         schema_editor.rename_index(model, old_index, new_index)
 
     def database_backwards(self, app_label, schema_editor, from_state, to_state):
+        # When the index was unnamed (old_fields is set) we renamed the
+        # auto-generated index to `self.new_name` in the forward direction.
+        # Reversing must rename it back to the name Django would auto-generate
+        # for the `index_together/unique_together` definition that re-appears
+        # in `to_state`.
         if self.old_fields:
-            # Backward operation with unnamed index is a no-op.
+            model = from_state.apps.get_model(app_label, self.model_name)
+            if not self.allow_migrate_model(schema_editor.connection.alias, model):
+                return
+
+            # Columns that make up the (re-appearing) composite index.
+            columns = [model._meta.get_field(f).column for f in self.old_fields]
+
+            # Current (renamed) index = new_name.
+            old_index = models.Index(fields=self.old_fields, name=self.new_name)
+
+            # Derive the original auto-generated name exactly as the
+            # corresponding SchemaEditor would have done when creating the
+            # implicit index for index_together/unique_together.  Use the same
+            # helper so the name is identical on every backend.
+            auto_name = schema_editor._create_index_name(
+                model._meta.db_table, columns, suffix="_idx"
+            )
+            new_index = models.Index(fields=self.old_fields, name=auto_name)
+
+            # Rename it back.
+            schema_editor.rename_index(model, old_index, new_index)
             return
 
         self.new_name_lower, self.old_name_lower = (
