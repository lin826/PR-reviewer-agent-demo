diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py
index 66aafde2d6..ced53cb328 100644
--- a/sympy/concrete/products.py
+++ b/sympy/concrete/products.py
@@ -275,14 +275,32 @@ def _eval_product(self, term, limits):
             return poly.LC()**(n - a + 1) * A * B
 
         elif term.is_Add:
+            # Special case for expressions with terms including 1/b**k where b > 1
+            special_case = False
+            if len(term.args) == 2:
+                for arg in term.args:
+                    if arg.is_Pow and arg.base.is_Number and arg.base > 1:
+                        if arg.exp.is_negative or (arg.exp.has(k) and -arg.exp.has(k)):
+                            special_case = True
+                            break
+                            
+            # Direct evaluation for integer range
+            dif = n - a
+            if dif.is_Integer:
+                # Direct evaluation by multiplying all terms
+                return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])
+            
+            # For symbolic range with special case, don't try to evaluate directly
+            if special_case:
+                return None  # Return None to let the caller handle it
+            
+            # Standard handling for general Add expressions
             p, q = term.as_numer_denom()
             q = self._eval_product(q, (k, a, n))
             if q.is_Number:
-
                 # There is expression, which couldn't change by
                 # as_numer_denom(). E.g. n**(2/3) + 1 --> (n**(2/3) + 1, 1).
                 # We have to catch this case.
-
                 p = sum([self._eval_product(i, (k, a, n)) for i in p.as_coeff_Add()])
             else:
                 p = self._eval_product(p, (k, a, n))

