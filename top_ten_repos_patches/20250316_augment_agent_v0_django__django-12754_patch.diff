diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index 30616c0172..d3b393ce64 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -350,10 +350,36 @@ class MigrationAutodetector:
                     if dep[0] == app_label:
                         for op2 in ops:
                             if self.check_dependency(op2, dep):
                                 dependency_graph[op].add(op2)
 
+            # Add dependencies for CreateModel operations on models that inherit from
+            # other models where fields are being moved from parent to child
+            for i, op1 in enumerate(ops):
+                if isinstance(op1, operations.CreateModel):
+                    # Check if this model inherits from another model
+                    bases = []
+                    for base in op1.bases:
+                        if isinstance(base, str) and "." in base:
+                            base_app_label, base_name = base.split(".", 1)
+                            bases.append((base_app_label, base_name))
+                    
+                    # For each base, check if there are RemoveField operations
+                    # for fields that are being added to the child model
+                    for base_app_label, base_name in bases:
+                        if base_app_label == app_label:  # Only handle intra-app dependencies
+                            # Get the fields being added to the child model
+                            child_fields = {name for name, _ in op1.fields}
+                            
+                            # Check for RemoveField operations on the parent model
+                            for op2 in ops:
+                                if (isinstance(op2, operations.RemoveField) and 
+                                        op2.model_name_lower == base_name.lower() and
+                                        op2.name_lower in child_fields):
+                                    # Add a dependency from CreateModel to RemoveField
+                                    dependency_graph[op1].add(op2)
+
             # we use a stable sort for deterministic tests & general behavior
             self.generated_operations[app_label] = stable_topological_sort(ops, dependency_graph)
 
     def _optimize_migrations(self):
         # Add in internal dependencies among the migrations
