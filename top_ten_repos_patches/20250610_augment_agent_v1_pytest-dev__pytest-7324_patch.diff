diff --git a/src/_pytest/mark/expression.py b/src/_pytest/mark/expression.py
index 04c73411a..f4aece74d 100644
--- a/src/_pytest/mark/expression.py
+++ b/src/_pytest/mark/expression.py
@@ -159,22 +159,40 @@ def not_expr(s: Scanner) -> ast.expr:
         ret = expr(s)
         s.accept(TokenType.RPAREN, reject=True)
         return ret
     ident = s.accept(TokenType.IDENT)
     if ident:
-        return ast.Name(ident.value, ast.Load())
+        # Handle reserved constants that cannot be used as names in Python 3.8+
+        # by using alternative names that will be mapped back in MatcherAdapter
+        if ident.value == "True":
+            return ast.Name("_pytest_True", ast.Load())
+        elif ident.value == "False":
+            return ast.Name("_pytest_False", ast.Load())
+        elif ident.value == "None":
+            return ast.Name("_pytest_None", ast.Load())
+        else:
+            return ast.Name(ident.value, ast.Load())
     s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.IDENT))
 
 
 class MatcherAdapter(Mapping[str, bool]):
     """Adapts a matcher function to a locals mapping as required by eval()."""
 
     def __init__(self, matcher: Callable[[str], bool]) -> None:
         self.matcher = matcher
 
     def __getitem__(self, key: str) -> bool:
-        return self.matcher(key)
+        # Handle special cases for reserved constants that were renamed to avoid
+        # Python 3.8+ compilation issues
+        if key == "_pytest_True":
+            return self.matcher("True")
+        elif key == "_pytest_False":
+            return self.matcher("False")
+        elif key == "_pytest_None":
+            return self.matcher("None")
+        else:
+            return self.matcher(key)
 
     def __iter__(self) -> Iterator[str]:
         raise NotImplementedError()
 
     def __len__(self) -> int:
