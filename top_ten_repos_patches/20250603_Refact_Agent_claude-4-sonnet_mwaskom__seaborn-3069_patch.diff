diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py
index 4f0290a4..11cc6e83 100644
--- a/seaborn/_core/plot.py
+++ b/seaborn/_core/plot.py
@@ -1475,7 +1475,7 @@ class Plotter:
 
                 axes_df = self._filter_subplot_data(df, view)
 
-                with pd.option_context("mode.use_inf_as_null", True):
+                with pd.option_context("mode.use_inf_as_na", True):
                     if keep_na:
                         # The simpler thing to do would be x.dropna().reindex(x.index).
                         # But that doesn't work with the way that the subset iteration
@@ -1632,6 +1632,12 @@ class Plotter:
             for axis in "xy":
                 axis_key = sub[axis]
 
+                # Handle Nominal scales like categorical scales
+                if axis_key in self._scales:
+                    scale = self._scales[axis_key]
+                    if hasattr(scale, '__class__') and scale.__class__.__name__ == "Nominal":
+                        self._adjust_nominal_axis(ax, axis)
+
                 # Axis limits
                 if axis_key in p._limits:
                     convert_units = getattr(ax, f"{axis}axis").convert_units
@@ -1647,3 +1653,26 @@ class Plotter:
         engine_default = None if p._target is not None else "tight"
         layout_engine = p._layout_spec.get("engine", engine_default)
         set_layout_engine(self._figure, layout_engine)
+
+    def _adjust_nominal_axis(self, ax: Axes, axis: str) -> None:
+        """Set ticks, limits, and grid for a nominal (categorical) axis.
+        
+        This method implements the same behavior as categorical plots:
+        1. Sets axis limits to +/- 0.5 from first and last tick
+        2. Disables grid on the categorical axis  
+        3. Inverts y-axis when it's categorical
+        """
+        # Get the number of categories from the ticks
+        # This follows the same logic as _adjust_cat_axis in categorical.py
+        n = len(getattr(ax, f"get_{axis}ticks")())
+        
+        if n == 0:
+            return
+            
+        if axis == "x":
+            ax.xaxis.grid(False)
+            ax.set_xlim(-.5, n - .5, auto=None)
+        else:
+            ax.yaxis.grid(False)
+            # Note limits that correspond to inverted y axis (like categorical plots)
+            ax.set_ylim(n - .5, -.5, auto=None)
diff --git a/seaborn/_oldcore.py b/seaborn/_oldcore.py
index 192af381..9f521a47 100644
--- a/seaborn/_oldcore.py
+++ b/seaborn/_oldcore.py
@@ -1116,7 +1116,7 @@ class VectorPlotter:
                 parts = []
                 grouped = self.plot_data[var].groupby(self.converters[var], sort=False)
                 for converter, orig in grouped:
-                    with pd.option_context('mode.use_inf_as_null', True):
+                    with pd.option_context('mode.use_inf_as_na', True):
                         orig = orig.dropna()
                         if var in self.var_levels:
                             # TODO this should happen in some centralized location
diff --git a/seaborn/categorical.py b/seaborn/categorical.py
index 3394c9c7..cbdc6fb1 100644
--- a/seaborn/categorical.py
+++ b/seaborn/categorical.py
@@ -1790,7 +1790,7 @@ class _LVPlotter(_CategoricalPlotter):
         vals = np.asarray(vals)
         # Remove infinite values while handling a 'object' dtype
         # that can come from pd.Float64Dtype() input
-        with pd.option_context('mode.use_inf_as_null', True):
+        with pd.option_context('mode.use_inf_as_na', True):
             vals = vals[~pd.isnull(vals)]
         n = len(vals)
         p = self.outlier_prop
