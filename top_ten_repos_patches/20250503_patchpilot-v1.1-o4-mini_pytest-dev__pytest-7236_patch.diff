diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py
index 28ce115..df03eed 100644
--- a/src/_pytest/unittest.py
+++ b/src/_pytest/unittest.py
@@ -120,13 +120,16 @@ class TestCaseFunction(Function):
         if hasattr(self, "_request"):
             self._request._fillfixtures()
 
+
     def teardown(self):
         if self._explicit_tearDown is not None:
-            self._explicit_tearDown()
+            if getattr(self._testcase, "_pdb_tearDown_called", False):
+                self._explicit_tearDown()
             self._explicit_tearDown = None
         self._testcase = None
         self._obj = None
 
+
     def startTest(self, testcase):
         pass
 
@@ -221,8 +224,19 @@ class TestCaseFunction(Function):
             # TestCase instance interacts with the results object, so better to only do it
             # when absolutely needed
             if self.config.getoption("usepdb"):
+
                 self._explicit_tearDown = self._testcase.tearDown
-                setattr(self._testcase, "tearDown", lambda *args: None)
+                def _pytest_unittest_pdb_noop_teardown(*args, **kwargs):
+                    # Record that tearDown() was invoked; the real one will be executed later.
+                    try:
+                        testcase = args[0]
+                    except Exception:
+                        testcase = None
+                    if testcase is not None:
+                        setattr(testcase, "_pdb_tearDown_called", True)
+                    return None
+                setattr(self._testcase, "tearDown", _pytest_unittest_pdb_noop_teardown)
+
 
             # we need to update the actual bound method with self.obj, because
             # wrap_pytest_function_for_tracing replaces self.obj by a wrapper
@@ -300,4 +314,4 @@ def check_testcase_implements_trial_reporter(done=[]):
     from twisted.trial.itrial import IReporter
 
     classImplements(TestCaseFunction, IReporter)
-    done.append(1)
+    done.append(1)
