diff --git a/sympy/polys/polyfuncs.py b/sympy/polys/polyfuncs.py
index d77dc062f5..435fb8f7d1 100644
--- a/sympy/polys/polyfuncs.py
+++ b/sympy/polys/polyfuncs.py
@@ -380,4 +380,4 @@ def viete(f, roots=None, *gens, **args):
         result.append((poly, coeff))
         sign = -sign
 
-    return result
+    return result
diff --git a/sympy/polys/polyroots.py b/sympy/polys/polyroots.py
index d3bf7e06e4..7285f54947 100644
--- a/sympy/polys/polyroots.py
+++ b/sympy/polys/polyroots.py
@@ -1117,4 +1117,4 @@ def root_factors(f, *gens, **args):
     if not isinstance(f, Poly):
         factors = [ f.as_expr() for f in factors ]
 
-    return factors
+    return factors
diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py
index c9e77a901f..c64bdfee68 100644
--- a/sympy/polys/polytools.py
+++ b/sympy/polys/polytools.py
@@ -7148,4 +7148,4 @@ def _poly(expr, opt):
 
     opt = options.build_options(gens, args)
 
-    return _poly(expr, opt)
+    return _poly(expr, opt)
diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py
index 1783a7744a..d24d5c1137 100644
--- a/sympy/polys/sqfreetools.py
+++ b/sympy/polys/sqfreetools.py
@@ -330,11 +330,26 @@ def dup_sqf_list(f, K, all=False):
         if all or dup_degree(g) > 0:
             result.append((g, i))
 
+
         i += 1
 
+    # Combine factors with identical multiplicities to avoid duplicate exponents
+    grouped = {}
+    for g, k in result:
+
+        if k in grouped:
+            gcd = dup_gcd(grouped[k], g, K)
+            prod = dup_mul(grouped[k], g, K)
+            grouped[k] = dup_quo(prod, gcd, K)
+        else:
+            grouped[k] = g
+
+    result = [(grouped[k], k) for k in sorted(grouped)]
+
     return coeff, result
 
 
+
 def dup_sqf_list_include(f, K, all=False):
     """
     Return square-free decomposition of a polynomial in ``K[x]``.
@@ -505,4 +520,4 @@ def dmp_gff_list(f, u, K):
     if not u:
         return dup_gff_list(f, K)
     else:
-        raise MultivariatePolynomialError(f)
+        raise MultivariatePolynomialError(f)
