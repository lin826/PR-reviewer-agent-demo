diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py
index 2ec3cf6..1eca179 100644
--- a/sympy/parsing/sympy_parser.py
+++ b/sympy/parsing/sympy_parser.py
@@ -1107,10 +1107,20 @@ class EvaluateFalseTransformer(ast.NodeTransformer):
         ast.Sub: 'Add',
         ast.Div: 'Mul',
         ast.BitOr: 'Or',
+
         ast.BitAnd: 'And',
         ast.BitXor: 'Not',
     }
+    comparators = {
+        ast.Lt: 'Lt',
+        ast.Gt: 'Gt',
+        ast.LtE: 'Le',
+        ast.GtE: 'Ge',
+        ast.Eq: 'Eq',
+        ast.NotEq: 'Ne',
+    }
     functions = (
+
         'Abs', 'im', 're', 'sign', 'arg', 'conjugate',
         'acos', 'acot', 'acsc', 'asec', 'asin', 'atan',
         'acosh', 'acoth', 'acsch', 'asech', 'asinh', 'atanh',
@@ -1186,12 +1196,54 @@ class EvaluateFalseTransformer(ast.NodeTransformer):
             return new_node
         return node
 
+
     def visit_Call(self, node):
         new_node = self.generic_visit(node)
         if isinstance(node.func, ast.Name) and node.func.id in self.functions:
             new_node.keywords.append(ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load())))
         return new_node
 
+    def visit_Compare(self, node):
+        """
+        Convert comparison expressions into SymPy relational objects
+        with evaluate=False.  Chained comparisons are converted into
+        an And(...) with each individual relational as an argument.
+        """
+        # Recursively transform operands first
+        left = self.visit(node.left)
+        comparators = [self.visit(comp) for comp in node.comparators]
+        ops = node.ops
+
+        calls = []
+        current_left = left
+        for op, right in zip(ops, comparators):
+            sympy_class = self.comparators.get(op.__class__)
+            if sympy_class is None:
+                # Unsupported comparator, leave unmodified
+                return node
+            call = ast.Call(
+                func=ast.Name(id=sympy_class, ctx=ast.Load()),
+                args=[current_left, right],
+                keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],
+                starargs=None,
+                kwargs=None
+            )
+            calls.append(call)
+            current_left = right  # For chained comparisons
+
+        if len(calls) == 1:
+            return calls[0]
+
+        # Wrap chained comparisons in And with evaluate=False
+        return ast.Call(
+            func=ast.Name(id='And', ctx=ast.Load()),
+            args=calls,
+            keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],
+            starargs=None,
+            kwargs=None
+        )
+
+
 
 _transformation = {  # items can be added but never re-ordered
 0: lambda_notation,
