diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index d41513e564..fb22fb75ba 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -1834,6 +1834,10 @@ def pretty_negative(pform, index):
 
     def _print_Mul(self, product):
         from sympy.physics.units import Quantity
+        from sympy.printing.pretty.pretty_symbology import greek_unicode
+        from sympy import Symbol
+        from sympy.core.numbers import Number
+        from sympy.core.singleton import S
 
         # Check for unevaluated Mul. In this case we need to make sure the
         # identities are visible, multiple Rational factors are not combined
@@ -1860,6 +1864,50 @@ def _print_Mul(self, product):
             args = product.as_ordered_factors()
         else:
             args = list(product.args)
+            
+        # Additional handling to ensure consistent display of Greek letters with subscripts
+        # This ensures they appear in the same position as their Latin counterparts
+        from sympy.printing.pretty.pretty_symbology import greek_unicode
+        from sympy import Symbol
+        from sympy.core.numbers import Number
+        
+        # Look for a specific pattern: multiplication between a number/coefficient, a Greek letter with subscript, and other terms
+        greek_symbol_index = None
+        has_greek = False
+        has_neg = False
+        
+        # First pass: identify if we have a Greek letter symbol and negative sign
+        for i, arg in enumerate(args):
+            if arg == -1:
+                has_neg = True
+            elif isinstance(arg, Symbol):
+                # Check if this symbol is a Greek letter
+                name = arg.name
+                for greek_name in greek_unicode:
+                    if (name.startswith(greek_name.lower()) or name.startswith(greek_name)) and '_' in name:
+                        has_greek = True
+                        greek_symbol_index = i
+                        break
+            
+            if greek_symbol_index is not None:
+                break
+        
+        # If we have a Greek letter with subscript in multiplication, ensure consistent ordering
+        if has_greek and greek_symbol_index is not None:
+            # We want to reorder the factors to move the Greek letter to match
+            # what we'd get with a Latin letter (put it after other terms)
+            if len(args) > 1:
+                # Extract the Greek symbol
+                greek_sym = args[greek_symbol_index]
+                # Remove it from args
+                modified_args = [a for i, a in enumerate(args) if i != greek_symbol_index]
+                
+                # Put non-Greek symbols first, then the Greek symbol
+                if has_neg and modified_args and modified_args[0] == -1:
+                    # Keep the negative sign at the front
+                    args = [modified_args[0]] + modified_args[1:] + [greek_sym]
+                else:
+                    args = modified_args + [greek_sym]
 
         # If quantities are present append them at the back
         args = sorted(args, key=lambda x: isinstance(x, Quantity) or
diff --git a/sympy/printing/pretty/pretty_symbology.py b/sympy/printing/pretty/pretty_symbology.py
index 3f7c4a2dc7..2f0e8602a8 100644
--- a/sympy/printing/pretty/pretty_symbology.py
+++ b/sympy/printing/pretty/pretty_symbology.py
@@ -555,7 +555,16 @@ def pretty_list(l, mapping):
 
     # glue the results into one string
     if pretty_subs is None:  # nice formatting of sups/subs did not work
+        # Instead of adding plain _0, try using unicode subscripts directly
         if subs:
+            try:
+                # For numbers, we can use unicode subscripts regardless of symbol type
+                if all(s.isdigit() for s in subs):
+                    subs_result = ''.join([sub.get(s, s) for s in ''.join(subs)])
+                    return name + subs_result
+            except (TypeError, KeyError):
+                pass
+            # Fall back to the old behavior
             name += '_'+'_'.join([translate(s, bold_name) for s in subs])
         if sups:
             name += '__'+'__'.join([translate(s, bold_name) for s in sups])

