diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py
index 1877c3f92a..82dcb1eeaf 100644
--- a/sympy/printing/pycode.py
+++ b/sympy/printing/pycode.py
@@ -541,6 +541,15 @@ def _print_Indexed(self, expr):
         index = expr.args[1:]
         return "{}[{}]".format(str(base), ", ".join([self._print(ind) for ind in index]))
 
+    def _print_tuple(self, expr):
+        if len(expr) == 1:
+            return "(%s,)" % self._print(expr[0])
+        else:
+            return "(%s)" % ", ".join([self._print(arg) for arg in expr])
+
+    def _print_Tuple(self, expr):
+        return self._print_tuple(expr)
+
     def _print_Pow(self, expr, rational=False):
         return self._hprint_Pow(expr, rational=rational)
 
diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py
index da67263b19..82f5414a88 100644
--- a/sympy/utilities/lambdify.py
+++ b/sympy/utilities/lambdify.py
@@ -957,11 +957,14 @@ def _recursive_to_string(doprint, arg):
     elif iterable(arg):
         if isinstance(arg, list):
             left, right = "[]"
+            return left + ', '.join(_recursive_to_string(doprint, e) for e in arg) + right
         elif isinstance(arg, tuple):
-            left, right = "()"
+            if len(arg) == 1:  # Special case for single-element tuples
+                return "(" + _recursive_to_string(doprint, arg[0]) + ",)"
+            else:
+                return "(" + ', '.join(_recursive_to_string(doprint, e) for e in arg) + ")"
         else:
             raise NotImplementedError("unhandled type: %s, %s" % (type(arg), arg))
-        return left +', '.join(_recursive_to_string(doprint, e) for e in arg) + right
     elif isinstance(arg, str):
         return arg
     else:

