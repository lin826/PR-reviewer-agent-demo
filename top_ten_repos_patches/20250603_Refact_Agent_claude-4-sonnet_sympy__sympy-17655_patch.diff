diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py
index c82993e2b0..4331b4cb21 100644
--- a/sympy/core/numbers.py
+++ b/sympy/core/numbers.py
@@ -1310,6 +1310,9 @@ def __mul__(self, other):
         if isinstance(other, Number) and global_evaluate[0]:
             rhs, prec = other._as_mpf_op(self._prec)
             return Float._new(mlib.mpf_mul(self._mpf_, rhs, prec, rnd), prec)
+        # Return NotImplemented for Point objects to allow Point.__rmul__ to handle it
+        if hasattr(other, 'is_Point') and other.is_Point:
+            return NotImplemented
         return Number.__mul__(self, other)
 
     @_sympifyit('other', NotImplemented)
@@ -1744,6 +1747,9 @@ def __mul__(self, other):
                 return Rational(self.p*other.p, self.q*other.q, igcd(self.p, other.q)*igcd(self.q, other.p))
             elif isinstance(other, Float):
                 return other*self
+            # Return NotImplemented for Point objects to allow Point.__rmul__ to handle it
+            elif hasattr(other, 'is_Point') and other.is_Point:
+                return NotImplemented
             else:
                 return Number.__mul__(self, other)
         return Number.__mul__(self, other)
@@ -2210,6 +2216,9 @@ def __mul__(self, other):
                 return Integer(self.p*other.p)
             elif isinstance(other, Rational):
                 return Rational(self.p*other.p, other.q, igcd(self.p, other.q))
+            # Return NotImplemented for Point objects to allow Point.__rmul__ to handle it
+            elif hasattr(other, 'is_Point') and other.is_Point:
+                return NotImplemented
             return Rational.__mul__(self, other)
         return Rational.__mul__(self, other)
 
@@ -2219,6 +2228,9 @@ def __rmul__(self, other):
                 return Integer(other*self.p)
             elif isinstance(other, Rational):
                 return Rational(other.p*self.p, other.q, igcd(self.p, other.q))
+            # Return NotImplemented for Point objects to allow Point.__rmul__ to handle it
+            elif hasattr(other, 'is_Point') and other.is_Point:
+                return NotImplemented
             return Rational.__rmul__(self, other)
         return Rational.__rmul__(self, other)
 
diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 7c978c47be..43fcb776ba 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -278,6 +278,13 @@ def __mul__(self, factor):
         coords = [simplify(x*factor) for x in self.args]
         return Point(coords, evaluate=False)
 
+    def __rmul__(self, factor):
+        """Multiply point's coordinates by a factor (reverse multiplication).
+        
+        This method handles cases like `2 * point` by delegating to `__mul__`.
+        """
+        return self.__mul__(factor)
+
     def __neg__(self):
         """Negate the point."""
         coords = [-x for x in self.args]
