diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 9d6952df21..85d53e3b1a 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -1378,6 +1378,7 @@ class BaseDatabaseSchemaEditor:
         # - adding only a db_column and the column name is not changed
         non_database_attrs = [
             "blank",
+            "choices",
             "db_column",
             "editable",
             "error_messages",
diff --git a/tests/schema/tests.py b/tests/schema/tests.py
index d9e59d32dc..a2e5a86247 100644
--- a/tests/schema/tests.py
+++ b/tests/schema/tests.py
@@ -3961,6 +3961,20 @@ class SchemaTests(TransactionTestCase):
         with connection.schema_editor() as editor, self.assertNumQueries(0):
             editor.alter_field(Book, new_field, old_field, strict=True)
 
+    def test_alter_field_choices_noop(self):
+        """
+        No queries are performed when changing only field choices.
+        """
+        with connection.schema_editor() as editor:
+            editor.create_model(Author)
+        old_field = Author._meta.get_field("name")
+        new_field = CharField(max_length=255, choices=[('A', 'Active'), ('I', 'Inactive')])
+        new_field.set_attributes_from_name("name")
+        with connection.schema_editor() as editor, self.assertNumQueries(0):
+            editor.alter_field(Author, old_field, new_field, strict=True)
+        with connection.schema_editor() as editor, self.assertNumQueries(0):
+            editor.alter_field(Author, new_field, old_field, strict=True)
+
     def test_add_textfield_unhashable_default(self):
         # Create the table
         with connection.schema_editor() as editor:
