diff --git a/setup.py b/setup.py
index 5e822fe9b..77b63df38 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index f8e4be999..582fa3001 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1037,39 +1037,62 @@ class DocstringSignatureMixin:
     feature of reading the signature from the docstring.
     """
 
-    def _find_signature(self, encoding: str = None) -> Tuple[str, str]:
+    def _find_signature(self, encoding: str = None) -> Optional[Tuple[str, str]]:
         if encoding is not None:
             warnings.warn("The 'encoding' argument to autodoc.%s._find_signature() is "
                           "deprecated." % self.__class__.__name__,
                           RemovedInSphinx40Warning, stacklevel=2)
         docstrings = self.get_doc()
         self._new_docstrings = docstrings[:]
-        result = None
+        signatures = []
+        
         for i, doclines in enumerate(docstrings):
             # no lines in docstring, no match
             if not doclines:
                 continue
-            # match first line of docstring against signature RE
-            match = py_ext_sig_re.match(doclines[0])
-            if not match:
-                continue
-            exmod, path, base, args, retann = match.groups()
-            # the base name must match ours
-            valid_names = [self.objpath[-1]]  # type: ignore
-            if isinstance(self, ClassDocumenter):
-                valid_names.append('__init__')
-                if hasattr(self.object, '__mro__'):
-                    valid_names.extend(cls.__name__ for cls in self.object.__mro__)
-            if base not in valid_names:
-                continue
-            # re-prepare docstring to ignore more leading indentation
-            tab_width = self.directive.state.document.settings.tab_width  # type: ignore
-            self._new_docstrings[i] = prepare_docstring('\n'.join(doclines[1:]),
-                                                        tabsize=tab_width)
-            result = args, retann
-            # don't look any further
-            break
-        return result
+            
+            # Look for all signatures in this docstring, not just the first line
+            remaining_lines = []
+            found_any_signature = False
+            
+            for line_idx, line in enumerate(doclines):
+                match = py_ext_sig_re.match(line)
+                if match:
+                    exmod, path, base, args, retann = match.groups()
+                    # the base name must match ours
+                    valid_names = [self.objpath[-1]]  # type: ignore
+                    if isinstance(self, ClassDocumenter):
+                        valid_names.append('__init__')
+                        if hasattr(self.object, '__mro__'):
+                            valid_names.extend(cls.__name__ for cls in self.object.__mro__)
+                    if base in valid_names:
+                        signatures.append((args, retann))
+                        found_any_signature = True
+                        continue
+                
+                # If we've found any signatures and this line doesn't match, 
+                # it's part of the remaining docstring
+                if found_any_signature:
+                    remaining_lines.append(line)
+                elif not signatures:
+                    # If we haven't found any signatures yet, keep looking
+                    remaining_lines.append(line)
+            
+            # If we found signatures in this docstring, update it and break
+            if signatures:
+                # re-prepare docstring to ignore more leading indentation
+                tab_width = self.directive.state.document.settings.tab_width  # type: ignore
+                self._new_docstrings[i] = prepare_docstring('\n'.join(remaining_lines),
+                                                            tabsize=tab_width)
+                break
+        
+        if signatures:
+            # Store all signatures for use in format_signature
+            self._all_signatures = signatures
+            # Return the first signature for backward compatibility
+            return signatures[0]
+        
+        return None
 
     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:
         if encoding is not None:
@@ -1085,9 +1108,31 @@ class DocstringSignatureMixin:
         if self.args is None and self.env.config.autodoc_docstring_signature:  # type: ignore
             # only act if a signature is not explicitly given already, and if
             # the feature is enabled
-            result = self._find_signature()
-            if result is not None:
+            
+            # Check if we already found signatures (cached result)
+            all_signatures = getattr(self, '_all_signatures', None)
+            if all_signatures is None:
+                # First time - find signatures
+                result = self._find_signature()
+                all_signatures = getattr(self, '_all_signatures', None)
+            else:
+                # Use cached result
+                result = all_signatures[0] if all_signatures else None
+            
+            if result is not None and all_signatures and len(all_signatures) > 1:
+                # Format multiple signatures
+                formatted_sigs = []
+                for args, retann in all_signatures:
+                    sig = f"({args})"
+                    if retann:
+                        sig += f" -> {retann}"
+                    formatted_sigs.append(sig)
+                # Return multiple signatures separated by newlines
+                return "\n".join(formatted_sigs)
+            elif result is not None:
+                # Single signature - use original behavior
                 self.args, self.retann = result
+        
         return super().format_signature(**kwargs)  # type: ignore
 
 
@@ -1100,12 +1145,30 @@ class DocstringStripSignatureMixin(DocstringSignatureMixin):
         if self.args is None and self.env.config.autodoc_docstring_signature:  # type: ignore
             # only act if a signature is not explicitly given already, and if
             # the feature is enabled
-            result = self._find_signature()
+            
+            # Check if we already found signatures (cached result)
+            all_signatures = getattr(self, '_all_signatures', None)
+            if all_signatures is None:
+                # First time - find signatures
+                result = self._find_signature()
+                all_signatures = getattr(self, '_all_signatures', None)
+            else:
+                # Use cached result
+                result = all_signatures[0] if all_signatures else None
+            
             if result is not None:
-                # Discarding _args is a only difference with
-                # DocstringSignatureMixin.format_signature.
-                # Documenter.format_signature use self.args value to format.
-                _args, self.retann = result
+                # Check if we found multiple signatures
+                if all_signatures and len(all_signatures) > 1:
+                    # For strip signature mixin, we don't want to show any signature
+                    # but we still want to process the docstring
+                    return ""
+                else:
+                    # Discarding _args is a only difference with
+                    # DocstringSignatureMixin.format_signature.
+                    # Documenter.format_signature use self.args value to format.
+                    _args, self.retann = result
+                    # Skip DocstringSignatureMixin and go directly to base class
+                    return super(DocstringSignatureMixin, self).format_signature(**kwargs)
         return super().format_signature(**kwargs)
 
 
diff --git a/tox.ini b/tox.ini
index d9f040544..bf39854b6 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ extras =
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
