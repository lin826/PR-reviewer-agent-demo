diff --git a/django/contrib/auth/backends.py b/django/contrib/auth/backends.py
index f4b1722757..1c1cec8b33 100644
--- a/django/contrib/auth/backends.py
+++ b/django/contrib/auth/backends.py
@@ -39,6 +39,8 @@ class ModelBackend(BaseBackend):
     def authenticate(self, request, username=None, password=None, **kwargs):
         if username is None:
             username = kwargs.get(UserModel.USERNAME_FIELD)
+        if username is None or password is None:
+            return None
         try:
             user = UserModel._default_manager.get_by_natural_key(username)
         except UserModel.DoesNotExist:
diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py
index 6447edefc9..148ec86420 100644
--- a/tests/auth_tests/test_auth_backends.py
+++ b/tests/auth_tests/test_auth_backends.py
@@ -226,6 +226,27 @@ class BaseModelBackendTest:
         authenticate(username='no_such_user', password='test')
         self.assertEqual(CountingMD5PasswordHasher.calls, 1)
 
+    def test_authenticate_with_none_username_no_queries(self):
+        """authenticate() with username=None should not make any database queries."""
+        backend = ModelBackend()
+        with self.assertNumQueries(0):
+            result = backend.authenticate(request=None, username=None, password='somepass')
+        self.assertIsNone(result)
+
+    def test_authenticate_with_none_password_no_queries(self):
+        """authenticate() with password=None should not make any database queries."""
+        backend = ModelBackend()
+        with self.assertNumQueries(0):
+            result = backend.authenticate(request=None, username='testuser', password=None)
+        self.assertIsNone(result)
+
+    def test_authenticate_with_both_none_no_queries(self):
+        """authenticate() with both username=None and password=None should not make any database queries."""
+        backend = ModelBackend()
+        with self.assertNumQueries(0):
+            result = backend.authenticate(request=None, username=None, password=None)
+        self.assertIsNone(result)
+
 
 class ModelBackendTest(BaseModelBackendTest, TestCase):
     """
