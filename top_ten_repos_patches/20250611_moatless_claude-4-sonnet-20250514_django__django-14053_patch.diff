--- a/django/contrib/staticfiles/storage.py
+++ b/django/contrib/staticfiles/storage.py
@@ -226,24 +226,41 @@
             path for path in paths
             if matches_patterns(path, self._patterns)
         ]
+        
+        # Track the final result for each file to avoid yielding duplicates
+        final_results = {}
+        
         # Do a single pass first. Post-process all files once, then repeat for
         # adjustable files.
         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):
-            yield name, hashed_name, processed
+            # If there's an exception, yield it immediately
+            if isinstance(processed, Exception):
+                yield name, hashed_name, processed
+            else:
+                final_results[name] = (name, hashed_name, processed)
 
         paths = {path: paths[path] for path in adjustable_paths}
 
         for i in range(self.max_post_process_passes):
             substitutions = False
             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
-                yield name, hashed_name, processed
-                substitutions = substitutions or subst
+                # If there's an exception, yield it immediately
+                if isinstance(processed, Exception):
+                    yield name, hashed_name, processed
+                else:
+                    # Update the final result for this file
+                    final_results[name] = (name, hashed_name, processed)
+                    substitutions = substitutions or subst
 
             if not substitutions:
                 break
 
         if substitutions:
             yield 'All', None, RuntimeError('Max post-process passes exceeded.')
+        else:
+            # Yield each file only once with its final result
+            for name, hashed_name, processed in final_results.values():
+                yield name, hashed_name, processed
 
         # Store the processed paths
         self.hashed_files.update(hashed_files)
