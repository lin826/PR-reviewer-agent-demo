diff --git a/xarray/coding/variables.py b/xarray/coding/variables.py
index b035ff82..9606cfc5 100644
--- a/xarray/coding/variables.py
+++ b/xarray/coding/variables.py
@@ -299,6 +299,15 @@ class UnsignedIntegerCoder(VariableCoder):
                 new_fill = signed_dtype.type(attrs["_FillValue"])
                 attrs["_FillValue"] = new_fill
             data = duck_array_ops.around(data).astype(signed_dtype)
+        # OPeNDAP hack for signed bytes
+        # https://github.com/Unidata/netcdf-c/pull/1317
+        elif encoding.get("_Unsigned", "true") == "false" and data.dtype.kind == "u":
+            pop_to(encoding, attrs, "_Unsigned")
+            signed_dtype = np.dtype("i%s" % data.dtype.itemsize)
+            if "_FillValue" in attrs:
+                new_fill = signed_dtype.type(attrs["_FillValue"])
+                attrs["_FillValue"] = new_fill
+            data = duck_array_ops.around(data).astype(signed_dtype)
 
         return Variable(dims, data, attrs, encoding)
 
@@ -316,10 +325,37 @@ class UnsignedIntegerCoder(VariableCoder):
                     if "_FillValue" in attrs:
                         new_fill = unsigned_dtype.type(attrs["_FillValue"])
                         attrs["_FillValue"] = new_fill
+            elif data.dtype.kind == "u":
+                if unsigned == "false":
+                    signed_dtype = np.dtype("i%s" % data.dtype.itemsize)
+                    transform = partial(np.asarray, dtype=signed_dtype)
+                    data = lazy_elemwise_func(data, transform, signed_dtype)
+                    if "_FillValue" in attrs:
+                        new_fill = signed_dtype.type(attrs["_FillValue"])
+                        attrs["_FillValue"] = new_fill
+            elif data.dtype.kind == "f":
+                # Handle float arrays from pydap that represent byte data
+                if unsigned == "false":
+                    # Create a transformation function to convert values in uint8 range to int8
+                    def transform_unsigned_floats(values):
+                        # Convert to numpy array first to ensure we can work with it
+                        values = np.asarray(values)
+                        result = values.copy()
+                        # Only transform non-NaN values in the uint8 range
+                        mask = (values >= 128) & (values <= 255) & ~np.isnan(values)
+                        # Convert to int8 values by interpreting as uint8 first, then as int8
+                        if np.any(mask):
+                            # Intermediate step using uint8 then int8 to properly handle the conversion
+                            result[mask] = np.array(values[mask], dtype=np.uint8).astype(np.int8)
+                        return result
+                    
+                    # Apply our transformation
+                    data = lazy_elemwise_func(data, transform_unsigned_floats, data.dtype)
+                    # No need to modify _FillValue as we preserve NaN values
             else:
                 warnings.warn(
                     "variable %r has _Unsigned attribute but is not "
-                    "of integer type. Ignoring attribute." % name,
+                    "of integer or float type. Ignoring attribute." % name,
                     SerializationWarning,
                     stacklevel=3,
                 )

