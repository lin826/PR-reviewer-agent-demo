--- a/sphinx/domains/cpp.py
+++ b/sphinx/domains/cpp.py
@@ -35,7 +35,7 @@
     BaseParser, DefinitionError, UnsupportedMultiCharacterCharLiteral,
     identifier_re, anon_identifier_re, integer_literal_re, octal_literal_re,
     hex_literal_re, binary_literal_re, float_literal_re,
-    char_literal_re
+    char_literal_re, udl_suffix_re
 )
 from sphinx.util.docfields import Field, GroupedField
 from sphinx.util.docutils import SphinxDirective
@@ -882,6 +882,24 @@
         signode.append(nodes.Text(txt, txt))
 
 
+class ASTUserDefinedLiteral(ASTLiteral):
+    def __init__(self, literal: ASTLiteral, suffix: str) -> None:
+        self.literal = literal
+        self.suffix = suffix
+
+    def _stringify(self, transform: StringifyTransform) -> str:
+        return str(self.literal) + self.suffix
+
+    def get_id(self, version: int) -> str:
+        # Use the base literal's ID with a suffix marker
+        return self.literal.get_id(version) + "_UDL" + self.suffix
+
+    def describe_signature(self, signode: TextElement, mode: str,
+                           env: "BuildEnvironment", symbol: "Symbol") -> None:
+        txt = str(self)
+        signode.append(nodes.Text(txt, txt))
+
+
 class ASTThisLiteral(ASTExpression):
     def _stringify(self, transform: StringifyTransform) -> str:
         return "this"
@@ -4664,25 +4682,43 @@
             if self.match(regex):
                 while self.current_char in 'uUlLfF':
                     self.pos += 1
-                return ASTNumberLiteral(self.definition[pos:self.pos])
+                base_literal = ASTNumberLiteral(self.definition[pos:self.pos])
+                
+                # Check for user-defined literal suffix
+                if self.match(udl_suffix_re):
+                    suffix = self.matched_text
+                    return ASTUserDefinedLiteral(base_literal, suffix)
+                else:
+                    return base_literal
 
         string = self._parse_string()
         if string is not None:
-            return ASTStringLiteral(string)
+            base_literal = ASTStringLiteral(string)
+            # Check for user-defined literal suffix
+            if self.match(udl_suffix_re):
+                suffix = self.matched_text
+                return ASTUserDefinedLiteral(base_literal, suffix)
+            else:
+                return base_literal
 
         # character-literal
         if self.match(char_literal_re):
             prefix = self.last_match.group(1)  # may be None when no prefix
             data = self.last_match.group(2)
             try:
-                return ASTCharLiteral(prefix, data)
+                base_literal = ASTCharLiteral(prefix, data)
+                # Check for user-defined literal suffix
+                if self.match(udl_suffix_re):
+                    suffix = self.matched_text
+                    return ASTUserDefinedLiteral(base_literal, suffix)
+                else:
+                    return base_literal
             except UnicodeDecodeError as e:
                 self.fail("Can not handle character literal. Internal error was: %s" % e)
             except UnsupportedMultiCharacterCharLiteral:
                 self.fail("Can not handle character literal"
                           " resulting in multiple decoded characters.")
 
-        # TODO: user-defined lit
         return None
 
     def _parse_fold_or_paren_expression(self) -> ASTExpression:

--- a/sphinx/util/cfamily.py
+++ b/sphinx/util/cfamily.py
@@ -66,6 +66,7 @@
       ))
     )'
 ''')
+udl_suffix_re = re.compile(r'[a-zA-Z_][a-zA-Z0-9_]*')
 
 
 def verify_description_mode(mode: str) -> None:
