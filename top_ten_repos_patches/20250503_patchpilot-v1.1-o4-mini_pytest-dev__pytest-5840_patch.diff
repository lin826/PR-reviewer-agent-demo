diff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py
index 5ced206..8729efd 100644
--- a/src/_pytest/config/__init__.py
+++ b/src/_pytest/config/__init__.py
@@ -401,27 +401,30 @@ class PytestPluginManager(PluginManager):
         if self._noconftest:
             return []
 
+
         if path.isfile():
-            directory = path.dirpath()
+            directory_orig = path.dirpath()
         else:
-            directory = path
+            directory_orig = path
 
-        directory = unique_path(directory)
+        # Preserve original directory casing for scanning (case-insensitive file systems)
+        directory_norm = unique_path(directory_orig)
 
         # XXX these days we may rather want to use config.rootdir
         # and allow users to opt into looking into the rootdir parent
         # directories instead of requiring to specify confcutdir
         clist = []
-        for parent in directory.parts():
+        for parent in directory_orig.parts():
             if self._confcutdir and self._confcutdir.relto(parent):
                 continue
             conftestpath = parent.join("conftest.py")
             if conftestpath.isfile():
                 mod = self._importconftest(conftestpath)
                 clist.append(mod)
-        self._dirpath2confmods[directory] = clist
+        self._dirpath2confmods[directory_norm] = clist
         return clist
 
+
     def _rget_with_confmod(self, name, path):
         modules = self._getconftestmodules(path)
         for mod in reversed(modules):
@@ -435,27 +438,32 @@ class PytestPluginManager(PluginManager):
         # Use realpath to avoid loading the same conftest twice
         # with build systems that create build directories containing
         # symlinks to actual files.
-        conftestpath = unique_path(conftestpath)
+
+        # Keep a reference to the original path (with its original casing) for importing,
+        # but use a normalized, caseâ€‘insensitive path for internal caching/deduplication.
+        orig_path = conftestpath
+        norm_path = unique_path(orig_path)
         try:
-            return self._conftestpath2mod[conftestpath]
+            return self._conftestpath2mod[norm_path]
         except KeyError:
-            pkgpath = conftestpath.pypkgpath()
+            pkgpath = orig_path.pypkgpath()
             if pkgpath is None:
-                _ensure_removed_sysmodule(conftestpath.purebasename)
+                _ensure_removed_sysmodule(orig_path.purebasename)
             try:
-                mod = conftestpath.pyimport()
+                mod = orig_path.pyimport()
                 if (
                     hasattr(mod, "pytest_plugins")
                     and self._configured
                     and not self._using_pyargs
                 ):
-                    _fail_on_non_top_pytest_plugins(conftestpath, self._confcutdir)
+                    _fail_on_non_top_pytest_plugins(orig_path, self._confcutdir)
             except Exception:
-                raise ConftestImportFailure(conftestpath, sys.exc_info())
+                raise ConftestImportFailure(orig_path, sys.exc_info())
 
             self._conftest_plugins.add(mod)
-            self._conftestpath2mod[conftestpath] = mod
-            dirpath = conftestpath.dirpath()
+            self._conftestpath2mod[norm_path] = mod
+            dirpath = norm_path.dirpath()
+
             if dirpath in self._dirpath2confmods:
                 for path, mods in self._dirpath2confmods.items():
                     if path and path.relto(dirpath) or path == dirpath:
