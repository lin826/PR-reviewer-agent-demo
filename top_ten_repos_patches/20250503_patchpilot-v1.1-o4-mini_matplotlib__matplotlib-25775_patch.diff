diff --git a/lib/matplotlib/backends/backend_agg.py b/lib/matplotlib/backends/backend_agg.py
index 5d9b9b4..0a44a90 100644
--- a/lib/matplotlib/backends/backend_agg.py
+++ b/lib/matplotlib/backends/backend_agg.py
@@ -204,9 +204,11 @@ class RendererAgg(RendererBase):
         font = self._prepare_font(prop)
         # We pass '0' for angle here, since it will be rotated (in raster
         # space) in the following call to draw_text_image).
+
         font.set_text(s, 0, flags=get_hinting_flag())
-        font.draw_glyphs_to_bitmap(
-            antialiased=mpl.rcParams['text.antialiased'])
+        antialiased = gc.get_antialiased() if gc.get_antialiased() is not None else mpl.rcParams['text.antialiased']
+        font.draw_glyphs_to_bitmap(antialiased=antialiased)
+
         d = font.get_descent() / 64.0
         # The descent needs to be adjusted for the angle.
         xo, yo = font.get_bitmap_offset()
diff --git a/lib/matplotlib/backends/backend_cairo.py b/lib/matplotlib/backends/backend_cairo.py
index abc25a9..26c8291 100644
--- a/lib/matplotlib/backends/backend_cairo.py
+++ b/lib/matplotlib/backends/backend_cairo.py
@@ -204,9 +204,10 @@ class RendererCairo(RendererBase):
             ctx.select_font_face(*_cairo_font_args_from_font_prop(prop))
             ctx.set_font_size(self.points_to_pixels(prop.get_size_in_points()))
             opts = cairo.FontOptions()
-            opts.set_antialias(
-                cairo.ANTIALIAS_DEFAULT if mpl.rcParams["text.antialiased"]
-                else cairo.ANTIALIAS_NONE)
+
+            antialiased = gc.get_antialiased() if gc.get_antialiased() is not None else mpl.rcParams["text.antialiased"]
+            opts.set_antialias(cairo.ANTIALIAS_DEFAULT if antialiased else cairo.ANTIALIAS_NONE)
+
             ctx.set_font_options(opts)
             if angle:
                 ctx.rotate(np.deg2rad(-angle))
diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py
index c2b18d4..6068048 100644
--- a/lib/matplotlib/text.py
+++ b/lib/matplotlib/text.py
@@ -179,9 +179,12 @@ class Text(Artist):
         self.set_verticalalignment(verticalalignment)
         self.set_horizontalalignment(horizontalalignment)
         self._multialignment = multialignment
+
         self.set_rotation(rotation)
         self._transform_rotates_text = transform_rotates_text
+        self._antialiased = None  # Per-artist antialiasing flag
         self._bbox_patch = None  # a FancyBboxPatch instance
+
         self._renderer = None
         if linespacing is None:
             linespacing = 1.2  # Maybe use rcParam later.
@@ -319,8 +322,11 @@ class Text(Artist):
         self._fontproperties = other._fontproperties.copy()
         self._usetex = other._usetex
         self._rotation = other._rotation
+
         self._transform_rotates_text = other._transform_rotates_text
+        self._antialiased = other._antialiased
         self._picker = other._picker
+
         self._linespacing = other._linespacing
         self.stale = True
 
@@ -735,8 +741,11 @@ class Text(Artist):
 
             gc = renderer.new_gc()
             gc.set_foreground(self.get_color())
+
             gc.set_alpha(self.get_alpha())
             gc.set_url(self._url)
+            gc.set_antialiased(self.get_antialiased())
+
             self._set_gc_clip(gc)
 
             angle = self.get_rotation()
@@ -770,10 +779,32 @@ class Text(Artist):
         renderer.close_group('text')
         self.stale = False
 
+
     def get_color(self):
         """Return the color of the text."""
         return self._color
 
+    def set_antialiased(self, aa):
+        """
+        Set per-artist antialiasing.
+
+        Parameters
+        ----------
+        aa : bool or None
+            Whether to use antialiasing.  If None, defer to
+            rcParams['text.antialiased'].
+        """
+        self._antialiased = None if aa is None else bool(aa)
+        self.stale = True
+
+    def get_antialiased(self):
+        """
+        Return whether antialiasing should be applied when drawing this
+        Text artist.
+        """
+        return mpl.rcParams["text.antialiased"] if self._antialiased is None else self._antialiased
+
+
     def get_fontproperties(self):
         """Return the `.font_manager.FontProperties`."""
         return self._fontproperties
