diff --git b/sphinx/ext/autodoc/__init__.py a/sphinx/ext/autodoc/__init__.py
index bba0d71f1..f8e4be999 100644
--- b/sphinx/ext/autodoc/__init__.py
+++ a/sphinx/ext/autodoc/__init__.py
@@ -1043,50 +1043,34 @@ class DocstringSignatureMixin:
                           "deprecated." % self.__class__.__name__,
                           RemovedInSphinx40Warning, stacklevel=2)
         docstrings = self.get_doc()
         self._new_docstrings = docstrings[:]
         result = None
-        signatures = []  # Collect all signatures
         for i, doclines in enumerate(docstrings):
             # no lines in docstring, no match
             if not doclines:
                 continue
-            
-            # Look for signatures in all lines, not just the first one
-            signature_lines = []
-            
-            for line_idx, line in enumerate(doclines):
-                # Strip leading whitespace to handle indented signature lines
-                stripped_line = line.strip()
-                match = py_ext_sig_re.match(stripped_line)
-                if match:
-                    exmod, path, base, args, retann = match.groups()
-                    # the base name must match ours
-                    valid_names = [self.objpath[-1]]  # type: ignore
-                    if isinstance(self, ClassDocumenter):
-                        valid_names.append('__init__')
-                        if hasattr(self.object, '__mro__'):
-                            valid_names.extend(cls.__name__ for cls in self.object.__mro__)
-                    if base in valid_names:
-                        signatures.append((args, retann))
-                        signature_lines.append(line_idx)
-            
-            if signatures:
-                # re-prepare docstring to ignore signature lines and leading indentation
-                tab_width = self.directive.state.document.settings.tab_width  # type: ignore
-                remaining_lines = [doclines[j] for j in range(len(doclines)) 
-                                 if j not in signature_lines]
-                self._new_docstrings[i] = prepare_docstring('\n'.join(remaining_lines),
-                                                            tabsize=tab_width)
-                break
-        
-        if signatures:
-            # Store all signatures for later use in format_signature
-            self._multiple_signatures = signatures
-            # Return the first signature for backward compatibility
-            result = signatures[0]
-        
+            # match first line of docstring against signature RE
+            match = py_ext_sig_re.match(doclines[0])
+            if not match:
+                continue
+            exmod, path, base, args, retann = match.groups()
+            # the base name must match ours
+            valid_names = [self.objpath[-1]]  # type: ignore
+            if isinstance(self, ClassDocumenter):
+                valid_names.append('__init__')
+                if hasattr(self.object, '__mro__'):
+                    valid_names.extend(cls.__name__ for cls in self.object.__mro__)
+            if base not in valid_names:
+                continue
+            # re-prepare docstring to ignore more leading indentation
+            tab_width = self.directive.state.document.settings.tab_width  # type: ignore
+            self._new_docstrings[i] = prepare_docstring('\n'.join(doclines[1:]),
+                                                        tabsize=tab_width)
+            result = args, retann
+            # don't look any further
+            break
         return result
 
     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:
         if encoding is not None:
             warnings.warn("The 'encoding' argument to autodoc.%s.get_doc() is deprecated."
@@ -1102,23 +1086,10 @@ class DocstringSignatureMixin:
             # only act if a signature is not explicitly given already, and if
             # the feature is enabled
             result = self._find_signature()
             if result is not None:
                 self.args, self.retann = result
-                
-                # Check if we have multiple signatures
-                if hasattr(self, '_multiple_signatures') and len(self._multiple_signatures) > 1:
-                    # Format multiple signatures
-                    sigs = []
-                    for args, retann in self._multiple_signatures:
-                        if args is not None:
-                            sig = "(%s)" % args
-                            if retann:
-                                sig += " -> %s" % retann
-                            sigs.append(sig)
-                    return "\n".join(sigs)
-        
         return super().format_signature(**kwargs)  # type: ignore
 
 
 class DocstringStripSignatureMixin(DocstringSignatureMixin):
     """
