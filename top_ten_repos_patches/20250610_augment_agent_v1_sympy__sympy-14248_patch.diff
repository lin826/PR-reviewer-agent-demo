diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index 8253b2f682..84ae878a1c 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -1475,22 +1475,86 @@ def _print_Adjoint(self, expr):
             return r"\left(%s\right)^\dagger" % self._print(mat)
         else:
             return r"%s^\dagger" % self._print(mat)
 
     def _print_MatAdd(self, expr):
-        terms = list(expr.args)
-        tex = " + ".join(map(self._print, terms))
+        from sympy.core.function import _coeff_isneg
+        from sympy import sympify
+        
+        tex = ""
+        for i, term in enumerate(expr.args):
+            # Check if this is a negative term by looking at coefficient
+            coeff, mmul = term.as_coeff_mmul()
+            coeff = sympify(coeff)
+            
+            if i == 0:
+                pass
+            elif _coeff_isneg(coeff):
+                tex += " - "
+                # Print the positive version of the term
+                if coeff == -1:
+                    # Just print the matrix part
+                    term_tex = self._print(mmul)
+                else:
+                    # Print positive coefficient with matrix part
+                    pos_coeff = -coeff
+                    if pos_coeff == 1:
+                        term_tex = self._print(mmul)
+                    else:
+                        term_tex = self._print(pos_coeff) + ' ' + self._print(mmul)
+                if self._needs_add_brackets(term):
+                    term_tex = r"\left(%s\right)" % term_tex
+                tex += term_tex
+                continue
+            else:
+                tex += " + "
+            
+            # Handle positive terms (including first term)
+            if _coeff_isneg(coeff) and i == 0:
+                # First term is negative
+                if coeff == -1:
+                    term_tex = self._print(mmul)
+                else:
+                    pos_coeff = -coeff
+                    if pos_coeff == 1:
+                        term_tex = self._print(mmul)
+                    else:
+                        term_tex = self._print(pos_coeff) + ' ' + self._print(mmul)
+                tex += "-" + term_tex
+            else:
+                # Regular positive term
+                term_tex = self._print(term)
+                if self._needs_add_brackets(term):
+                    term_tex = r"\left(%s\right)" % term_tex
+                tex += term_tex
+
         return tex
 
     def _print_MatMul(self, expr):
         from sympy import Add, MatAdd, HadamardProduct
-
-        def parens(x):
-            if isinstance(x, (Add, MatAdd, HadamardProduct)):
-                return r"\left(%s\right)" % self._print(x)
-            return self._print(x)
-        return ' '.join(map(parens, expr.args))
+        
+        # Handle the special case of negative coefficient
+        if len(expr.args) >= 2 and expr.args[0] == -1:
+            # This is a negative term like (-1)*A
+            if len(expr.args) == 2:
+                # Simple case: (-1)*A -> -A
+                return '-' + self._print(expr.args[1])
+            else:
+                # Multiple terms: (-1)*A*B -> -(A*B)
+                def parens(x):
+                    if isinstance(x, (Add, MatAdd, HadamardProduct)):
+                        return r"\left(%s\right)" % self._print(x)
+                    return self._print(x)
+                rest = ' '.join(map(parens, expr.args[1:]))
+                return '-' + rest
+        else:
+            # Regular MatMul printing
+            def parens(x):
+                if isinstance(x, (Add, MatAdd, HadamardProduct)):
+                    return r"\left(%s\right)" % self._print(x)
+                return self._print(x)
+            return ' '.join(map(parens, expr.args))
 
     def _print_Mod(self, expr, exp=None):
         if exp is not None:
             return r'\left(%s\bmod{%s}\right)^{%s}' % (self.parenthesize(expr.args[0],
                     PRECEDENCE['Mul'], strict=True), self._print(expr.args[1]), self._print(exp))
diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index db24f4c612..ac2f080a64 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -817,23 +817,103 @@ def _print_BlockMatrix(self, B):
         if B.blocks.shape == (1, 1):
             return self._print(B.blocks[0, 0])
         return self._print(B.blocks)
 
     def _print_MatAdd(self, expr):
-        return self._print_seq(expr.args, None, None, ' + ')
+        from sympy.core.function import _coeff_isneg
+        from sympy import sympify
+        
+        pforms = []
+        
+        def pretty_negative(pform, index):
+            """Prepend a minus sign to a pretty form. """
+            if index == 0:
+                if pform.height() > 1:
+                    pform_neg = '- '
+                else:
+                    pform_neg = '-'
+            else:
+                pform_neg = ' - '
+
+            if (pform.binding > prettyForm.NEG
+                or pform.binding == prettyForm.ADD):
+                p = stringPict(*pform.parens())
+            else:
+                p = pform
+            p = stringPict.next(pform_neg, p)
+            # Lower the binding to NEG, even if it was higher. Otherwise, it
+            # will print as a + ( - (b)), instead of a - (b).
+            return prettyForm(binding=prettyForm.NEG, *p)
+        
+        for i, term in enumerate(expr.args):
+            # Check if this is a negative term by looking at coefficient
+            coeff, mmul = term.as_coeff_mmul()
+            coeff = sympify(coeff)
+            
+            if _coeff_isneg(coeff):
+                # This is a negative term
+                if coeff == -1:
+                    # Just print the matrix part
+                    pform = self._print(mmul)
+                else:
+                    # Print positive coefficient with matrix part
+                    pos_coeff = -coeff
+                    if pos_coeff == 1:
+                        pform = self._print(mmul)
+                    else:
+                        coeff_pform = self._print(pos_coeff)
+                        mmul_pform = self._print(mmul)
+                        pform = prettyForm(*stringPict.next(coeff_pform, 'â‹…', mmul_pform))
+                pforms.append(pretty_negative(pform, i))
+            else:
+                # This is a positive term
+                pform = self._print(term)
+                if i > 0:
+                    pform = prettyForm(*stringPict.next(' + ', pform))
+                pforms.append(pform)
+        
+        if not pforms:
+            return prettyForm('0')
+        
+        # Combine all forms
+        result = pforms[0]
+        for pform in pforms[1:]:
+            result = prettyForm(*stringPict.next(result, pform))
+        
+        return result
 
     def _print_MatMul(self, expr):
-        args = list(expr.args)
-        from sympy import Add, MatAdd, HadamardProduct
-        for i, a in enumerate(args):
-            if (isinstance(a, (Add, MatAdd, HadamardProduct))
-                    and len(expr.args) > 1):
-                args[i] = prettyForm(*self._print(a).parens())
+        # Handle the special case of negative coefficient
+        if len(expr.args) >= 2 and expr.args[0] == -1:
+            # This is a negative term like (-1)*A
+            if len(expr.args) == 2:
+                # Simple case: (-1)*A -> -A
+                return prettyForm(*stringPict.next('-', self._print(expr.args[1])))
             else:
-                args[i] = self._print(a)
+                # Multiple terms: (-1)*A*B -> -(A*B)
+                rest_args = list(expr.args[1:])
+                from sympy import Add, MatAdd, HadamardProduct
+                for i, a in enumerate(rest_args):
+                    if (isinstance(a, (Add, MatAdd, HadamardProduct))
+                            and len(rest_args) > 1):
+                        rest_args[i] = prettyForm(*self._print(a).parens())
+                    else:
+                        rest_args[i] = self._print(a)
+                rest_form = prettyForm.__mul__(*rest_args)
+                return prettyForm(*stringPict.next('-', rest_form))
+        else:
+            # Regular MatMul printing
+            args = list(expr.args)
+            from sympy import Add, MatAdd, HadamardProduct
+            for i, a in enumerate(args):
+                if (isinstance(a, (Add, MatAdd, HadamardProduct))
+                        and len(expr.args) > 1):
+                    args[i] = prettyForm(*self._print(a).parens())
+                else:
+                    args[i] = self._print(a)
 
-        return prettyForm.__mul__(*args)
+            return prettyForm.__mul__(*args)
 
     def _print_DotProduct(self, expr):
         args = list(expr.args)
 
         for i, a in enumerate(args):
diff --git a/sympy/printing/str.py b/sympy/printing/str.py
index 0baefe0f7f..b094e19271 100644
--- a/sympy/printing/str.py
+++ b/sympy/printing/str.py
@@ -302,20 +302,104 @@ def _print_Mul(self, expr):
             return sign + '*'.join(a_str) + "/" + b_str[0]
         else:
             return sign + '*'.join(a_str) + "/(%s)" % '*'.join(b_str)
 
     def _print_MatMul(self, expr):
-        return '*'.join([self.parenthesize(arg, precedence(expr))
-            for arg in expr.args])
+        # Handle the special case of negative coefficient
+        if len(expr.args) >= 2 and expr.args[0] == -1:
+            # This is a negative term like (-1)*A
+            if len(expr.args) == 2:
+                # Simple case: (-1)*A -> -A
+                return '-' + self._print(expr.args[1])
+            else:
+                # Multiple terms: (-1)*A*B -> -(A*B)
+                rest = '*'.join([self.parenthesize(arg, precedence(expr))
+                               for arg in expr.args[1:]])
+                return '-(' + rest + ')'
+        else:
+            # Regular MatMul printing
+            # Special handling for coefficient * simple_matrix to avoid unnecessary parentheses
+            if (len(expr.args) == 2 and 
+                expr.args[0].is_number and 
+                hasattr(expr.args[1], 'is_Matrix') and expr.args[1].is_Matrix and
+                not expr.args[1].is_MatAdd and not expr.args[1].is_MatMul):
+                # This is a simple coefficient * matrix_symbol case (not MatAdd or MatMul)
+                coeff_str = self._print(expr.args[0])
+                matrix_str = self._print(expr.args[1])
+                if expr.args[0] == 1:
+                    return matrix_str
+                elif expr.args[0] == -1:
+                    return '-' + matrix_str
+                else:
+                    return coeff_str + '*' + matrix_str
+            else:
+                return '*'.join([self.parenthesize(arg, precedence(expr))
+                    for arg in expr.args])
 
     def _print_HadamardProduct(self, expr):
         return '.*'.join([self.parenthesize(arg, precedence(expr))
             for arg in expr.args])
 
     def _print_MatAdd(self, expr):
-        return ' + '.join([self.parenthesize(arg, precedence(expr))
-            for arg in expr.args])
+        from sympy.core.function import _coeff_isneg
+        
+        PREC = precedence(expr)
+        l = []
+        for i, term in enumerate(expr.args):
+            # Check if this is a negative term by looking at coefficient
+            coeff, mmul = term.as_coeff_mmul()
+            # Convert coeff to SymPy object if it's a plain number
+            from sympy import sympify
+            coeff = sympify(coeff)
+            
+            if _coeff_isneg(coeff):
+                # This is a negative term
+                if i == 0:
+                    # First term: use "-" prefix
+                    sign = "-"
+                else:
+                    # Later terms: use " - " 
+                    sign = " - "
+                # Print the positive version of the term
+                if coeff == -1:
+                    # Just print the matrix part
+                    t = self._print(mmul)
+                else:
+                    # Print positive coefficient with matrix part
+                    pos_coeff = -coeff
+                    if pos_coeff == 1:
+                        t = self._print(mmul)
+                    else:
+                        t = self._print(pos_coeff) + '*' + self._print(mmul)
+            else:
+                # This is a positive term
+                if i == 0:
+                    sign = ""
+                else:
+                    sign = " + "
+                t = self._print(term)
+            
+            # For negative terms, we need to check the precedence of the positive version
+            if _coeff_isneg(coeff):
+                # For negative terms, check precedence of the positive part
+                if coeff == -1:
+                    check_term = mmul
+                else:
+                    from sympy.matrices.expressions.matmul import MatMul
+                    check_term = MatMul(-coeff, mmul)
+                if precedence(check_term) < PREC:
+                    l.append(sign + "(%s)" % t)
+                else:
+                    l.append(sign + t)
+            else:
+                # For positive terms, check precedence normally
+                if precedence(term) < PREC:
+                    l.append(sign + "(%s)" % t)
+                else:
+                    l.append(sign + t)
+        
+        return ''.join(l)
 
     def _print_NaN(self, expr):
         return 'nan'
 
     def _print_NegativeInfinity(self, expr):
diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py
index 0f07d5e3a9..414357384f 100644
--- a/sympy/printing/tests/test_latex.py
+++ b/sympy/printing/tests/test_latex.py
@@ -1708,11 +1708,11 @@ def test_MatrixElement_printing():
 
     assert latex(A[0, 0]) == r"A_{0, 0}"
     assert latex(3 * A[0, 0]) == r"3 A_{0, 0}"
 
     F = C[0, 0].subs(C, A - B)
-    assert latex(F) == r"\left(-1 B + A\right)_{0, 0}"
+    assert latex(F) == r"\left(-B + A\right)_{0, 0}"
 
 
 def test_Quaternion_latex_printing():
     q = Quaternion(x, y, z, t)
     assert latex(q) == "x + y i + z j + t k"
diff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py
index 884c09d941..a65dc1d34e 100644
--- a/sympy/printing/tests/test_str.py
+++ b/sympy/printing/tests/test_str.py
@@ -782,6 +782,6 @@ def test_MatrixElement_printing():
 
     assert(str(A[0, 0]) == "A[0, 0]")
     assert(str(3 * A[0, 0]) == "3*A[0, 0]")
 
     F = C[0, 0].subs(C, A - B)
-    assert str(F) == "((-1)*B + A)[0, 0]"
+    assert str(F) == "(-B + A)[0, 0]"
