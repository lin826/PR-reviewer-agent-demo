diff --git a/django/http/response.py b/django/http/response.py
index 6a84e193ba..5cc277d100 100644
--- a/django/http/response.py
+++ b/django/http/response.py
@@ -220,6 +220,14 @@ class HttpResponseBase:
 
     # Common methods used by subclasses
 
+    def _supports_buffer_protocol(self, value):
+        """Check if an object supports the buffer protocol."""
+        try:
+            memoryview(value)
+            return True
+        except TypeError:
+            return False
+
     def make_bytes(self, value):
         """Turn a value into a bytestring encoded in the output charset."""
         # Per PEP 3333, this response body must be bytes. To avoid returning
@@ -233,7 +241,16 @@ class HttpResponseBase:
             return bytes(value)
         if isinstance(value, str):
             return bytes(value.encode(self.charset))
-        # Handle non-string types.
+        
+        # Handle objects that support the buffer protocol (memoryview, bytearray, etc.)
+        # but exclude integers which also work with bytes() but create zero-filled arrays
+        if not isinstance(value, int):
+            try:
+                return bytes(value)
+            except TypeError:
+                pass
+        
+        # Handle non-string types that don't support buffer protocol
         return str(value).encode(self.charset)
 
     # These methods partially implement the file-like object interface.
@@ -309,7 +326,10 @@ class HttpResponse(HttpResponseBase):
     @content.setter
     def content(self, value):
         # Consume iterators upon assignment to allow repeated iteration.
-        if hasattr(value, '__iter__') and not isinstance(value, (bytes, str)):
+        # Prioritize buffer protocol objects (memoryview, bytearray) over iteration
+        # since they should be converted as single units, not iterated over.
+        if (hasattr(value, '__iter__') and not isinstance(value, (bytes, str)) and 
+            not self._supports_buffer_protocol(value)):
             content = b''.join(self.make_bytes(chunk) for chunk in value)
             if hasattr(value, 'close'):
                 try:
