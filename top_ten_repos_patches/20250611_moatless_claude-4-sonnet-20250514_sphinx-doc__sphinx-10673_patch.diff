--- a/sphinx/directives/other.py
+++ b/sphinx/directives/other.py
@@ -51,6 +51,11 @@
         'titlesonly': directives.flag,
         'reversed': directives.flag,
     }
+
+    def _is_special_standard_page(self, docname: str) -> bool:
+        """Check if docname refers to a special standard page (genindex, modindex, search)."""
+        std_domain = self.env.get_domain('std')
+        return docname in std_domain.initial_data['labels']
 
     def run(self) -> List[Node]:
         subnode = addnodes.toctree()
@@ -114,30 +119,35 @@
                     if docname.endswith(suffix):
                         docname = docname[:-len(suffix)]
                         break
-                # absolutize filenames
-                docname = docname_join(self.env.docname, docname)
-                if url_re.match(ref) or ref == 'self':
-                    toctree['entries'].append((title, ref))
-                elif docname not in self.env.found_docs:
-                    if excluded(self.env.doc2path(docname, False)):
-                        message = __('toctree contains reference to excluded document %r')
-                        subtype = 'excluded'
+                # Check for special standard pages before absolutizing filenames
+                if self._is_special_standard_page(docname):
+                    # Allow special standard pages (genindex, modindex, search)
+                    toctree['entries'].append((title, docname))
+                else:
+                    # absolutize filenames
+                    docname = docname_join(self.env.docname, docname)
+                    if url_re.match(ref) or ref == 'self':
+                        toctree['entries'].append((title, ref))
+                    elif docname not in self.env.found_docs:
+                        if excluded(self.env.doc2path(docname, False)):
+                            message = __('toctree contains reference to excluded document %r')
+                            subtype = 'excluded'
+                        else:
+                            message = __('toctree contains reference to nonexisting document %r')
+                            subtype = 'not_readable'
+
+                        logger.warning(message, docname, type='toc', subtype=subtype,
+                                       location=toctree)
+                        self.env.note_reread()
                     else:
-                        message = __('toctree contains reference to nonexisting document %r')
-                        subtype = 'not_readable'
-
-                    logger.warning(message, docname, type='toc', subtype=subtype,
-                                   location=toctree)
-                    self.env.note_reread()
-                else:
-                    if docname in all_docnames:
-                        all_docnames.remove(docname)
-                    else:
-                        logger.warning(__('duplicated entry found in toctree: %s'), docname,
-                                       location=toctree)
-
-                    toctree['entries'].append((title, docname))
-                    toctree['includefiles'].append(docname)
+                        if docname in all_docnames:
+                            all_docnames.remove(docname)
+                        else:
+                            logger.warning(__('duplicated entry found in toctree: %s'), docname,
+                                           location=toctree)
+
+                        toctree['entries'].append((title, docname))
+                        toctree['includefiles'].append(docname)
 
         # entries contains all entries (self references, external links etc.)
         if 'reversed' in self.options:

--- a/sphinx/environment/adapters/toctree.py
+++ b/sphinx/environment/adapters/toctree.py
@@ -22,6 +22,11 @@
 class TocTree:
     def __init__(self, env: "BuildEnvironment") -> None:
         self.env = env
+
+    def _is_special_standard_page(self, docname: str) -> bool:
+        """Check if docname refers to a special standard page (genindex, modindex, search)."""
+        std_domain = self.env.get_domain('std')
+        return docname in std_domain.initial_data['labels']
 
     def note(self, docname: str, toctreenode: addnodes.toctree) -> None:
         """Note a TOC tree directive in a document and gather information about
@@ -138,6 +143,20 @@
                         para = addnodes.compact_paragraph('', '', reference)
                         item = nodes.list_item('', para)
                         # don't show subitems
+                        toc = nodes.bullet_list('', item)
+                    elif self._is_special_standard_page(ref):
+                        # Handle special standard pages (genindex, modindex, search)
+                        if not title:
+                            # Get the default title from the std domain
+                            std_domain = self.env.get_domain('std')
+                            title = std_domain.initial_data['labels'][ref][2]
+                        reference = nodes.reference('', '', internal=True,
+                                                    refuri=ref,
+                                                    anchorname='',
+                                                    *[nodes.Text(title)])
+                        para = addnodes.compact_paragraph('', '', reference)
+                        item = nodes.list_item('', para)
+                        # don't show subitems for special pages
                         toc = nodes.bullet_list('', item)
                     else:
                         if ref in parents:
