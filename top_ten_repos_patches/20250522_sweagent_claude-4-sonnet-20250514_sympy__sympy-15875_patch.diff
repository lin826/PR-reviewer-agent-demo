diff --git a/sympy/core/add.py b/sympy/core/add.py
index 83a5f2aedc..3f461453bb 100644
--- a/sympy/core/add.py
+++ b/sympy/core/add.py
@@ -535,35 +535,38 @@ def _eval_is_zero(self):
             # is zero or not
             return
         nz = []
-        z = 0
-        im_or_z = False
-        im = False
+        im_I = []
         for a in self.args:
             if a.is_real:
                 if a.is_zero:
-                    z += 1
+                    pass
                 elif a.is_zero is False:
                     nz.append(a)
                 else:
                     return
             elif a.is_imaginary:
-                im = True
+                im_I.append(a*S.ImaginaryUnit)
             elif (S.ImaginaryUnit*a).is_real:
-                im_or_z = True
+                im_I.append(a*S.ImaginaryUnit)
             else:
                 return
-        if z == len(self.args):
-            return True
-        if len(nz) == len(self.args):
-            return None
-        b = self.func(*nz)
-        if b.is_zero:
-            if not im_or_z and not im:
-                return True
-            if im and not im_or_z:
-                return False
-        if b.is_zero is False:
+        
+        # Check if real parts sum to zero
+        real_part = self.func(*nz)
+        if real_part.is_zero is False:
             return False
+        
+        # Check if imaginary parts sum to zero
+        imag_part = self.func(*im_I)
+        if imag_part.is_zero is False:
+            return False
+        
+        # If both real and imaginary parts are zero, the whole expression is zero
+        if real_part.is_zero and imag_part.is_zero:
+            return True
+        
+        # If we can't determine if either part is zero, we can't determine the result
+        return None
 
     def _eval_is_odd(self):
         l = [f for f in self.args if not (f.is_even is True)]
