diff --git a/xarray/core/variable.py b/xarray/core/variable.py
index 5827b90a..c03c4c36 100644
--- a/xarray/core/variable.py
+++ b/xarray/core/variable.py
@@ -2881,7 +2881,7 @@ class IndexVariable(Variable):
 
     def to_index_variable(self):
         """Return this variable as an xarray.IndexVariable"""
-        return self
+        return self.copy()
 
     to_coord = utils.alias(to_index_variable, "to_coord")
 
diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py
index 9ea47163..923deedd 100644
--- a/xarray/tests/test_dataset.py
+++ b/xarray/tests/test_dataset.py
@@ -2995,6 +2995,47 @@ class TestDataset:
         assert isinstance(actual.variables["x"], Variable)
         assert actual.xindexes["y"].equals(expected.xindexes["y"])
 
+    def test_swap_dims_no_mutation(self) -> None:
+        """Test that swap_dims does not mutate the original object."""
+        # Regression test for issue where swap_dims could mutate original variables
+        nz = 11
+        ds = Dataset(
+            data_vars={
+                "y": ("z", np.random.rand(nz)),
+                "lev": ("z", np.arange(nz) * 10),
+            },
+        )
+        
+        # Create ds2 through the problematic sequence that triggered the bug
+        ds2 = (
+            ds.swap_dims(z="lev")
+            .rename_dims(lev="z")
+            .reset_index("lev")
+            .reset_coords()
+        )
+        
+        # Capture reference to the lev variable before swap_dims
+        lev_var_before = ds2.variables['lev']
+        lev_dims_before = lev_var_before.dims
+        lev_id_before = id(lev_var_before)
+        
+        # This should not mutate ds2
+        result = ds2.swap_dims(z='lev')
+        
+        # Check that the original ds2.variables['lev'] was not mutated
+        assert ds2.variables['lev'].dims == lev_dims_before, \
+            f"Original variable was mutated! Expected {lev_dims_before}, got {ds2.variables['lev'].dims}"
+        assert id(ds2.variables['lev']) == lev_id_before, \
+            "Original variable reference changed unexpectedly"
+        
+        # Check that the result is correct
+        assert result.variables['lev'].dims == ('lev',), \
+            f"Result should have lev dims as ('lev',), got {result.variables['lev'].dims}"
+        assert 'lev' in result.coords, "Result should have lev as a coordinate"
+        
+        # Ensure ds2 and result are different objects
+        assert ds2 is not result, "swap_dims should return a new object"
+
     def test_expand_dims_error(self) -> None:
         original = Dataset(
             {
