diff --git a/django/__main__.py b/django/__main__.py
index 8b96e91ea8..7415143848 100644
--- a/django/__main__.py
+++ b/django/__main__.py
@@ -3,6 +3,7 @@ Invokes django-admin when the django module is run as a script.
 
 Example: python -m django check
 """
+
 from django.core import management
 
 if __name__ == "__main__":
diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py
index dd6954a065..695fbba2d6 100644
--- a/django/contrib/admin/filters.py
+++ b/django/contrib/admin/filters.py
@@ -5,6 +5,7 @@ Filters are specified in models with the "list_filter" option.
 Each filter subclass knows how to display a filter for a field that passes a
 certain test -- e.g. being a DateField or ForeignKey.
 """
+
 import datetime
 
 from django.contrib.admin.options import IncorrectLookupParameters
diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 4761144c7b..9c21e91cb1 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -982,7 +982,7 @@ class ModelAdmin(BaseModelAdmin):
         base_action_names = {name for _, name, _ in base_actions}
 
         # Gather actions from the admin site first
-        for (name, func) in self.admin_site.actions:
+        for name, func in self.admin_site.actions:
             if name in base_action_names:
                 continue
             description = self._get_action_description(func, name)
@@ -1106,6 +1106,7 @@ class ModelAdmin(BaseModelAdmin):
         Return a tuple containing a queryset to implement the search
         and a boolean indicating if the results may contain duplicates.
         """
+
         # Apply keyword searches.
         def construct_search(field_name):
             if field_name.startswith("^"):
@@ -1691,9 +1692,9 @@ class ModelAdmin(BaseModelAdmin):
                 has_delete_permission = inline.has_delete_permission(request, obj)
             else:
                 # Disable all edit-permissions, and override formset settings.
-                has_add_permission = (
-                    has_change_permission
-                ) = has_delete_permission = False
+                has_add_permission = has_change_permission = has_delete_permission = (
+                    False
+                )
                 formset.extra = formset.max_num = 0
             has_view_permission = inline.has_view_permission(request, obj)
             prepopulated = dict(inline.get_prepopulated_fields(request, obj))
@@ -1828,9 +1829,11 @@ class ModelAdmin(BaseModelAdmin):
             form,
             list(fieldsets),
             # Clear prepopulated fields on a view-only form to avoid a crash.
-            self.get_prepopulated_fields(request, obj)
-            if add or self.has_change_permission(request, obj)
-            else {},
+            (
+                self.get_prepopulated_fields(request, obj)
+                if add or self.has_change_permission(request, obj)
+                else {}
+            ),
             readonly_fields,
             model_admin=self,
         )
diff --git a/django/contrib/admin/templatetags/admin_list.py b/django/contrib/admin/templatetags/admin_list.py
index ee6f3a7666..8cafa12f0e 100644
--- a/django/contrib/admin/templatetags/admin_list.py
+++ b/django/contrib/admin/templatetags/admin_list.py
@@ -166,9 +166,9 @@ def result_headers(cl):
             "url_primary": cl.get_query_string({ORDER_VAR: ".".join(o_list_primary)}),
             "url_remove": cl.get_query_string({ORDER_VAR: ".".join(o_list_remove)}),
             "url_toggle": cl.get_query_string({ORDER_VAR: ".".join(o_list_toggle)}),
-            "class_attrib": format_html(' class="{}"', " ".join(th_classes))
-            if th_classes
-            else "",
+            "class_attrib": (
+                format_html(' class="{}"', " ".join(th_classes)) if th_classes else ""
+            ),
         }
 
 
@@ -262,9 +262,11 @@ def items_for_result(cl, result, form):
                 link_or_text = format_html(
                     '<a href="{}"{}>{}</a>',
                     url,
-                    format_html(' data-popup-opener="{}"', value)
-                    if cl.is_popup
-                    else "",
+                    (
+                        format_html(' data-popup-opener="{}"', value)
+                        if cl.is_popup
+                        else ""
+                    ),
                     result_repr,
                 )
 
diff --git a/django/contrib/admin/widgets.py b/django/contrib/admin/widgets.py
index c7d5db209e..38ef10d65b 100644
--- a/django/contrib/admin/widgets.py
+++ b/django/contrib/admin/widgets.py
@@ -1,6 +1,7 @@
 """
 Form Widget classes specific to the Django admin site.
 """
+
 import copy
 import json
 
diff --git a/django/contrib/admindocs/views.py b/django/contrib/admindocs/views.py
index 1d08541057..a5e710835e 100644
--- a/django/contrib/admindocs/views.py
+++ b/django/contrib/admindocs/views.py
@@ -148,7 +148,7 @@ class ViewIndexView(BaseAdminDocsView):
             view_functions = extract_views_from_urlpatterns(url_resolver.url_patterns)
         except ImproperlyConfigured:
             view_functions = []
-        for (func, regex, namespace, name) in view_functions:
+        for func, regex, namespace, name in view_functions:
             views.append(
                 {
                     "full_name": get_view_name(func),
diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py
index 5ee30bf59c..ddcfec18f2 100644
--- a/django/contrib/auth/base_user.py
+++ b/django/contrib/auth/base_user.py
@@ -2,6 +2,7 @@
 This module allows importing AbstractBaseUser even when django.contrib.auth is
 not in INSTALLED_APPS.
 """
+
 import unicodedata
 import warnings
 
diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py
index ad31a6e68f..b29a980cb2 100644
--- a/django/contrib/auth/management/__init__.py
+++ b/django/contrib/auth/management/__init__.py
@@ -1,6 +1,7 @@
 """
 Creates permissions for all installed apps that need permissions.
 """
+
 import getpass
 import unicodedata
 
diff --git a/django/contrib/auth/management/commands/createsuperuser.py b/django/contrib/auth/management/commands/createsuperuser.py
index 48994e5371..050c0b334d 100644
--- a/django/contrib/auth/management/commands/createsuperuser.py
+++ b/django/contrib/auth/management/commands/createsuperuser.py
@@ -1,6 +1,7 @@
 """
 Management utility to create superusers.
 """
+
 import getpass
 import os
 import sys
@@ -267,15 +268,19 @@ class Command(BaseCommand):
         return "%s%s%s: " % (
             capfirst(field.verbose_name),
             " (leave blank to use '%s')" % default if default else "",
-            " (%s.%s)"
-            % (
-                field.remote_field.model._meta.object_name,
-                field.m2m_target_field_name()
-                if field.many_to_many
-                else field.remote_field.field_name,
-            )
-            if field.remote_field
-            else "",
+            (
+                " (%s.%s)"
+                % (
+                    field.remote_field.model._meta.object_name,
+                    (
+                        field.m2m_target_field_name()
+                        if field.many_to_many
+                        else field.remote_field.field_name
+                    ),
+                )
+                if field.remote_field
+                else ""
+            ),
         )
 
     @cached_property
diff --git a/django/contrib/gis/db/backends/oracle/models.py b/django/contrib/gis/db/backends/oracle/models.py
index f06f73148e..af749c3435 100644
--- a/django/contrib/gis/db/backends/oracle/models.py
+++ b/django/contrib/gis/db/backends/oracle/models.py
@@ -7,6 +7,7 @@
  For example, the `USER_SDO_GEOM_METADATA` is used for the GeometryColumns
  model and the `SDO_COORD_REF_SYS` is used for the SpatialRefSys model.
 """
+
 from django.contrib.gis.db import models
 from django.contrib.gis.db.backends.base.models import SpatialRefSysMixin
 
diff --git a/django/contrib/gis/db/backends/oracle/operations.py b/django/contrib/gis/db/backends/oracle/operations.py
index b58af886de..cf039962b0 100644
--- a/django/contrib/gis/db/backends/oracle/operations.py
+++ b/django/contrib/gis/db/backends/oracle/operations.py
@@ -7,6 +7,7 @@
  support for an internal JVM, and Java libraries are required to use
  the WKT constructors.
 """
+
 import re
 
 from django.contrib.gis.db import models
diff --git a/django/contrib/gis/db/backends/postgis/adapter.py b/django/contrib/gis/db/backends/postgis/adapter.py
index c95f903253..c9715e1756 100644
--- a/django/contrib/gis/db/backends/postgis/adapter.py
+++ b/django/contrib/gis/db/backends/postgis/adapter.py
@@ -1,6 +1,7 @@
 """
  This object provides quoting for GEOS geometries into PostgreSQL/PostGIS.
 """
+
 from django.contrib.gis.db.backends.postgis.pgraster import to_pgraster
 from django.contrib.gis.geos import GEOSGeometry
 from django.db.backends.postgresql.psycopg_any import sql
diff --git a/django/contrib/gis/db/backends/postgis/const.py b/django/contrib/gis/db/backends/postgis/const.py
index 2f4393d25e..8bc16a1abb 100644
--- a/django/contrib/gis/db/backends/postgis/const.py
+++ b/django/contrib/gis/db/backends/postgis/const.py
@@ -1,6 +1,7 @@
 """
 PostGIS to GDAL conversion constant definitions
 """
+
 # Lookup to convert pixel type values from GDAL to PostGIS
 GDAL_TO_POSTGIS = [None, 4, 6, 5, 8, 7, 10, 11, None, None, None, None]
 
diff --git a/django/contrib/gis/db/backends/postgis/models.py b/django/contrib/gis/db/backends/postgis/models.py
index b7b568274a..e35ef75ce9 100644
--- a/django/contrib/gis/db/backends/postgis/models.py
+++ b/django/contrib/gis/db/backends/postgis/models.py
@@ -1,6 +1,7 @@
 """
  The GeometryColumns and SpatialRefSys models for the PostGIS backend.
 """
+
 from django.contrib.gis.db.backends.base.models import SpatialRefSysMixin
 from django.db import models
 
diff --git a/django/contrib/gis/db/backends/spatialite/models.py b/django/contrib/gis/db/backends/spatialite/models.py
index 7cc98ae126..0f5f7b55ef 100644
--- a/django/contrib/gis/db/backends/spatialite/models.py
+++ b/django/contrib/gis/db/backends/spatialite/models.py
@@ -1,6 +1,7 @@
 """
  The GeometryColumns and SpatialRefSys models for the SpatiaLite backend.
 """
+
 from django.contrib.gis.db.backends.base.models import SpatialRefSysMixin
 from django.db import models
 
diff --git a/django/contrib/gis/db/backends/spatialite/operations.py b/django/contrib/gis/db/backends/spatialite/operations.py
index 0b8b26ab6f..d39f7a9e0d 100644
--- a/django/contrib/gis/db/backends/spatialite/operations.py
+++ b/django/contrib/gis/db/backends/spatialite/operations.py
@@ -2,6 +2,7 @@
 SQL functions reference lists:
 https://www.gaia-gis.it/gaia-sins/spatialite-sql-4.3.0.html
 """
+
 from django.contrib.gis.db import models
 from django.contrib.gis.db.backends.base.operations import BaseSpatialOperations
 from django.contrib.gis.db.backends.spatialite.adapter import SpatiaLiteAdapter
diff --git a/django/contrib/gis/db/models/functions.py b/django/contrib/gis/db/models/functions.py
index 19da355d28..3f26f4c6bc 100644
--- a/django/contrib/gis/db/models/functions.py
+++ b/django/contrib/gis/db/models/functions.py
@@ -127,9 +127,11 @@ class SQLiteDecimalToFloatMixin:
         copy = self.copy()
         copy.set_source_expressions(
             [
-                Value(float(expr.value))
-                if hasattr(expr, "value") and isinstance(expr.value, Decimal)
-                else expr
+                (
+                    Value(float(expr.value))
+                    if hasattr(expr, "value") and isinstance(expr.value, Decimal)
+                    else expr
+                )
                 for expr in copy.get_source_expressions()
             ]
         )
@@ -343,9 +345,9 @@ class Distance(DistanceResultMixin, OracleToleranceMixin, GeoFunc):
     def as_sqlite(self, compiler, connection, **extra_context):
         if self.geo_field.geodetic(connection):
             # SpatiaLite returns NULL instead of zero on geodetic coordinates
-            extra_context[
-                "template"
-            ] = "COALESCE(%(function)s(%(expressions)s, %(spheroid)s), 0)"
+            extra_context["template"] = (
+                "COALESCE(%(function)s(%(expressions)s, %(spheroid)s), 0)"
+            )
             extra_context["spheroid"] = int(bool(self.spheroid))
         return super().as_sql(compiler, connection, **extra_context)
 
diff --git a/django/contrib/gis/db/models/proxy.py b/django/contrib/gis/db/models/proxy.py
index 4db365dc16..b415e147fc 100644
--- a/django/contrib/gis/db/models/proxy.py
+++ b/django/contrib/gis/db/models/proxy.py
@@ -5,6 +5,7 @@ objects corresponding to geographic model fields.
 
 Thanks to Robert Coup for providing this functionality (see #4322).
 """
+
 from django.db.models.query_utils import DeferredAttribute
 
 
diff --git a/django/contrib/gis/db/models/sql/conversion.py b/django/contrib/gis/db/models/sql/conversion.py
index be712319fb..7802b2dd1e 100644
--- a/django/contrib/gis/db/models/sql/conversion.py
+++ b/django/contrib/gis/db/models/sql/conversion.py
@@ -2,6 +2,7 @@
 This module holds simple classes to convert geospatial values from the
 database.
 """
+
 from decimal import Decimal
 
 from django.contrib.gis.measure import Area, Distance
diff --git a/django/contrib/gis/gdal/__init__.py b/django/contrib/gis/gdal/__init__.py
index 9ed6e31156..e63808d39d 100644
--- a/django/contrib/gis/gdal/__init__.py
+++ b/django/contrib/gis/gdal/__init__.py
@@ -25,6 +25,7 @@
  by setting `GDAL_LIBRARY_PATH` in your settings with the path to the GDAL C
  library on your system.
 """
+
 from django.contrib.gis.gdal.datasource import DataSource
 from django.contrib.gis.gdal.driver import Driver
 from django.contrib.gis.gdal.envelope import Envelope
diff --git a/django/contrib/gis/gdal/datasource.py b/django/contrib/gis/gdal/datasource.py
index dfd043ab0c..c7ff48b8f1 100644
--- a/django/contrib/gis/gdal/datasource.py
+++ b/django/contrib/gis/gdal/datasource.py
@@ -33,6 +33,7 @@
               #  OFTReal returns floats, all else returns string.
               val = field.value
 """
+
 from ctypes import byref
 from pathlib import Path
 
diff --git a/django/contrib/gis/gdal/envelope.py b/django/contrib/gis/gdal/envelope.py
index 4c2c1e4a1a..05832bd7cc 100644
--- a/django/contrib/gis/gdal/envelope.py
+++ b/django/contrib/gis/gdal/envelope.py
@@ -10,6 +10,7 @@
                            |          |
  Lower left (min_x, min_y) o----------+
 """
+
 from ctypes import Structure, c_double
 
 from django.contrib.gis.gdal.error import GDALException
diff --git a/django/contrib/gis/gdal/geometries.py b/django/contrib/gis/gdal/geometries.py
index f74dc688b3..8ea6b5ffc4 100644
--- a/django/contrib/gis/gdal/geometries.py
+++ b/django/contrib/gis/gdal/geometries.py
@@ -38,6 +38,7 @@
   >>> print(gt1 == 3, gt1 == 'Polygon') # Equivalence works w/non-OGRGeomType objects
   True True
 """
+
 import sys
 from binascii import b2a_hex
 from ctypes import byref, c_char_p, c_double, c_ubyte, c_void_p, string_at
diff --git a/django/contrib/gis/gdal/prototypes/ds.py b/django/contrib/gis/gdal/prototypes/ds.py
index bc5250e2db..b6e9d4a0b8 100644
--- a/django/contrib/gis/gdal/prototypes/ds.py
+++ b/django/contrib/gis/gdal/prototypes/ds.py
@@ -3,6 +3,7 @@
  related data structures. OGR_Dr_*, OGR_DS_*, OGR_L_*, OGR_F_*,
  OGR_Fld_* routines are relevant here.
 """
+
 from ctypes import POINTER, c_char_p, c_double, c_int, c_long, c_void_p
 
 from django.contrib.gis.gdal.envelope import OGREnvelope
diff --git a/django/contrib/gis/gdal/prototypes/errcheck.py b/django/contrib/gis/gdal/prototypes/errcheck.py
index 52bb7cb083..d37e81cdf6 100644
--- a/django/contrib/gis/gdal/prototypes/errcheck.py
+++ b/django/contrib/gis/gdal/prototypes/errcheck.py
@@ -2,6 +2,7 @@
  This module houses the error-checking routines used by the GDAL
  ctypes prototypes.
 """
+
 from ctypes import c_void_p, string_at
 
 from django.contrib.gis.gdal.error import GDALException, SRSException, check_err
diff --git a/django/contrib/gis/gdal/prototypes/generation.py b/django/contrib/gis/gdal/prototypes/generation.py
index 230e56f665..4d34a96e70 100644
--- a/django/contrib/gis/gdal/prototypes/generation.py
+++ b/django/contrib/gis/gdal/prototypes/generation.py
@@ -2,6 +2,7 @@
  This module contains functions that generate ctypes prototypes for the
  GDAL routines.
 """
+
 from ctypes import POINTER, c_bool, c_char_p, c_double, c_int, c_int64, c_void_p
 from functools import partial
 
diff --git a/django/contrib/gis/gdal/prototypes/raster.py b/django/contrib/gis/gdal/prototypes/raster.py
index 59b930cb02..b7871d1969 100644
--- a/django/contrib/gis/gdal/prototypes/raster.py
+++ b/django/contrib/gis/gdal/prototypes/raster.py
@@ -2,6 +2,7 @@
 This module houses the ctypes function prototypes for GDAL DataSource (raster)
 related data structures.
 """
+
 from ctypes import POINTER, c_bool, c_char_p, c_double, c_int, c_void_p
 from functools import partial
 
diff --git a/django/contrib/gis/gdal/raster/const.py b/django/contrib/gis/gdal/raster/const.py
index 6d3761d9fb..87670facec 100644
--- a/django/contrib/gis/gdal/raster/const.py
+++ b/django/contrib/gis/gdal/raster/const.py
@@ -1,6 +1,7 @@
 """
 GDAL - Constant definitions
 """
+
 from ctypes import c_double, c_float, c_int16, c_int32, c_ubyte, c_uint16, c_uint32
 
 # See https://gdal.org/api/raster_c_api.html#_CPPv412GDALDataType
diff --git a/django/contrib/gis/gdal/srs.py b/django/contrib/gis/gdal/srs.py
index c8877753fd..f54ab04692 100644
--- a/django/contrib/gis/gdal/srs.py
+++ b/django/contrib/gis/gdal/srs.py
@@ -26,6 +26,7 @@
   >>> print(srs.name)
   NAD83 / Texas South Central
 """
+
 from ctypes import byref, c_char_p, c_int
 from enum import IntEnum
 from types import NoneType
diff --git a/django/contrib/gis/geoip2/__init__.py b/django/contrib/gis/geoip2/__init__.py
index 71b71f68db..0df5827c25 100644
--- a/django/contrib/gis/geoip2/__init__.py
+++ b/django/contrib/gis/geoip2/__init__.py
@@ -11,6 +11,7 @@ downloaded from MaxMind at https://dev.maxmind.com/geoip/geoip2/geolite2/.
 Grab GeoLite2-Country.mmdb.gz and GeoLite2-City.mmdb.gz, and unzip them in the
 directory corresponding to settings.GEOIP_PATH.
 """
+
 __all__ = ["HAS_GEOIP2"]
 
 try:
diff --git a/django/contrib/gis/geos/__init__.py b/django/contrib/gis/geos/__init__.py
index 27de1ca8e6..f50cd19856 100644
--- a/django/contrib/gis/geos/__init__.py
+++ b/django/contrib/gis/geos/__init__.py
@@ -2,6 +2,7 @@
 The GeoDjango GEOS module.  Please consult the GeoDjango documentation
 for more details: https://docs.djangoproject.com/en/dev/ref/contrib/gis/geos/
 """
+
 from .collections import (  # NOQA
     GeometryCollection,
     MultiLineString,
diff --git a/django/contrib/gis/geos/collections.py b/django/contrib/gis/geos/collections.py
index abfec8af3d..35262a5622 100644
--- a/django/contrib/gis/geos/collections.py
+++ b/django/contrib/gis/geos/collections.py
@@ -2,6 +2,7 @@
  This module houses the Geometry Collection objects:
  GeometryCollection, MultiPoint, MultiLineString, and MultiPolygon
 """
+
 from django.contrib.gis.geos import prototypes as capi
 from django.contrib.gis.geos.geometry import GEOSGeometry, LinearGeometryMixin
 from django.contrib.gis.geos.libgeos import GEOM_PTR
diff --git a/django/contrib/gis/geos/coordseq.py b/django/contrib/gis/geos/coordseq.py
index 07a3b7d213..671b1b0c95 100644
--- a/django/contrib/gis/geos/coordseq.py
+++ b/django/contrib/gis/geos/coordseq.py
@@ -3,6 +3,7 @@
  by GEOSGeometry to house the actual coordinates of the Point,
  LineString, and LinearRing geometries.
 """
+
 from ctypes import byref, c_byte, c_double, c_uint
 
 from django.contrib.gis.geos import prototypes as capi
diff --git a/django/contrib/gis/geos/geometry.py b/django/contrib/gis/geos/geometry.py
index f030b7fc1d..d7e34e47f0 100644
--- a/django/contrib/gis/geos/geometry.py
+++ b/django/contrib/gis/geos/geometry.py
@@ -2,6 +2,7 @@
  This module contains the 'base' GEOSGeometry object -- all GEOS Geometries
  inherit from this object.
 """
+
 import re
 from ctypes import addressof, byref, c_double
 
diff --git a/django/contrib/gis/geos/io.py b/django/contrib/gis/geos/io.py
index d7898065f0..8dd3f289e6 100644
--- a/django/contrib/gis/geos/io.py
+++ b/django/contrib/gis/geos/io.py
@@ -3,6 +3,7 @@ Module that holds classes for performing I/O operations on GEOS geometry
 objects.  Specifically, this has Python implementations of WKB/WKT
 reader and writer classes.
 """
+
 from django.contrib.gis.geos.geometry import GEOSGeometry
 from django.contrib.gis.geos.prototypes.io import (
     WKBWriter,
diff --git a/django/contrib/gis/geos/libgeos.py b/django/contrib/gis/geos/libgeos.py
index 1121b4f715..b883c6c090 100644
--- a/django/contrib/gis/geos/libgeos.py
+++ b/django/contrib/gis/geos/libgeos.py
@@ -6,6 +6,7 @@
  This module also houses GEOS Pointer utilities, including
  get_pointer_arr(), and GEOM_PTR.
 """
+
 import logging
 import os
 from ctypes import CDLL, CFUNCTYPE, POINTER, Structure, c_char_p
diff --git a/django/contrib/gis/geos/prototypes/errcheck.py b/django/contrib/gis/geos/prototypes/errcheck.py
index a527f513a7..42b24c2891 100644
--- a/django/contrib/gis/geos/prototypes/errcheck.py
+++ b/django/contrib/gis/geos/prototypes/errcheck.py
@@ -1,6 +1,7 @@
 """
  Error checking functions for GEOS ctypes prototype functions.
 """
+
 from ctypes import c_void_p, string_at
 
 from django.contrib.gis.geos.error import GEOSException
diff --git a/django/contrib/gis/geos/prototypes/misc.py b/django/contrib/gis/geos/prototypes/misc.py
index fccd0ecc9e..bd5859e79b 100644
--- a/django/contrib/gis/geos/prototypes/misc.py
+++ b/django/contrib/gis/geos/prototypes/misc.py
@@ -2,6 +2,7 @@
  This module is for the miscellaneous GEOS routines, particularly the
  ones that return the area, distance, and length.
 """
+
 from ctypes import POINTER, c_double, c_int
 
 from django.contrib.gis.geos.libgeos import GEOM_PTR, GEOSFuncFactory
diff --git a/django/contrib/gis/geos/prototypes/predicates.py b/django/contrib/gis/geos/prototypes/predicates.py
index d2e113a734..a79d4e3187 100644
--- a/django/contrib/gis/geos/prototypes/predicates.py
+++ b/django/contrib/gis/geos/prototypes/predicates.py
@@ -2,6 +2,7 @@
  This module houses the GEOS ctypes prototype functions for the
  unary and binary predicate operations on geometries.
 """
+
 from ctypes import c_byte, c_char_p, c_double
 
 from django.contrib.gis.geos.libgeos import GEOM_PTR, GEOSFuncFactory
diff --git a/django/contrib/gis/geos/prototypes/topology.py b/django/contrib/gis/geos/prototypes/topology.py
index e61eae964a..9323bb2d16 100644
--- a/django/contrib/gis/geos/prototypes/topology.py
+++ b/django/contrib/gis/geos/prototypes/topology.py
@@ -2,6 +2,7 @@
  This module houses the GEOS ctypes prototype functions for the
  topological operations on geometries.
 """
+
 from ctypes import c_double, c_int
 
 from django.contrib.gis.geos.libgeos import GEOM_PTR, GEOSFuncFactory
diff --git a/django/contrib/gis/utils/__init__.py b/django/contrib/gis/utils/__init__.py
index 26334fb6a4..c88f789fb7 100644
--- a/django/contrib/gis/utils/__init__.py
+++ b/django/contrib/gis/utils/__init__.py
@@ -1,6 +1,7 @@
 """
  This module contains useful utilities for GeoDjango.
 """
+
 from django.contrib.gis.utils.ogrinfo import ogrinfo  # NOQA
 from django.contrib.gis.utils.ogrinspect import mapping, ogrinspect  # NOQA
 from django.contrib.gis.utils.srs import add_srs_entry  # NOQA
diff --git a/django/contrib/gis/utils/ogrinspect.py b/django/contrib/gis/utils/ogrinspect.py
index 40ca0cb461..76c8bfbcfa 100644
--- a/django/contrib/gis/utils/ogrinspect.py
+++ b/django/contrib/gis/utils/ogrinspect.py
@@ -3,6 +3,7 @@ This module is for inspecting OGR data sources and generating either
 models for GeoDjango and/or mapping dictionaries for use with the
 `LayerMapping` utility.
 """
+
 from django.contrib.gis.gdal import DataSource
 from django.contrib.gis.gdal.field import (
     OFTDate,
diff --git a/django/contrib/postgres/search.py b/django/contrib/postgres/search.py
index 4e370aa167..e0fcd84132 100644
--- a/django/contrib/postgres/search.py
+++ b/django/contrib/postgres/search.py
@@ -116,9 +116,11 @@ class SearchVector(SearchVectorCombinable, Func):
         clone.set_source_expressions(
             [
                 Coalesce(
-                    expression
-                    if isinstance(expression.output_field, (CharField, TextField))
-                    else Cast(expression, TextField()),
+                    (
+                        expression
+                        if isinstance(expression.output_field, (CharField, TextField))
+                        else Cast(expression, TextField())
+                    ),
                     Value(""),
                 )
                 for expression in clone.get_source_expressions()
diff --git a/django/contrib/sessions/base_session.py b/django/contrib/sessions/base_session.py
index 603d2fe12c..8809dd36f7 100644
--- a/django/contrib/sessions/base_session.py
+++ b/django/contrib/sessions/base_session.py
@@ -2,6 +2,7 @@
 This module allows importing AbstractBaseSession even
 when django.contrib.sessions is not in INSTALLED_APPS.
 """
+
 from django.db import models
 from django.utils.translation import gettext_lazy as _
 
diff --git a/django/contrib/staticfiles/views.py b/django/contrib/staticfiles/views.py
index 83d04d4cec..3fb2677322 100644
--- a/django/contrib/staticfiles/views.py
+++ b/django/contrib/staticfiles/views.py
@@ -3,6 +3,7 @@ Views and functions for serving static files. These are only to be used during
 development, and SHOULD NOT be used in a production setting.
 
 """
+
 import os
 import posixpath
 
diff --git a/django/core/cache/__init__.py b/django/core/cache/__init__.py
index eb7fa5b2e9..444d958e68 100644
--- a/django/core/cache/__init__.py
+++ b/django/core/cache/__init__.py
@@ -12,6 +12,7 @@ object.
 
 See docs/topics/cache.txt for information on the public API.
 """
+
 from django.core import signals
 from django.core.cache.backends.base import (
     BaseCache,
diff --git a/django/core/exceptions.py b/django/core/exceptions.py
index 646644f3e0..0a4d34463e 100644
--- a/django/core/exceptions.py
+++ b/django/core/exceptions.py
@@ -1,6 +1,7 @@
 """
 Global Django exception and warning classes.
 """
+
 import operator
 
 from django.utils.hashable import make_hashable
diff --git a/django/core/files/images.py b/django/core/files/images.py
index 6a603f24fc..7c1532ac8f 100644
--- a/django/core/files/images.py
+++ b/django/core/files/images.py
@@ -3,6 +3,7 @@ Utility functions for handling images.
 
 Requires Pillow as you might imagine.
 """
+
 import struct
 import zlib
 
diff --git a/django/core/files/locks.py b/django/core/files/locks.py
index c0f471f87d..a7a7a22dce 100644
--- a/django/core/files/locks.py
+++ b/django/core/files/locks.py
@@ -16,6 +16,7 @@ Example Usage::
     ...     locks.lock(f, locks.LOCK_EX)
     ...     f.write('Django')
 """
+
 import os
 
 __all__ = ("LOCK_EX", "LOCK_SH", "LOCK_NB", "lock", "unlock")
diff --git a/django/core/files/uploadhandler.py b/django/core/files/uploadhandler.py
index b6c185e8fc..ab86f7fede 100644
--- a/django/core/files/uploadhandler.py
+++ b/django/core/files/uploadhandler.py
@@ -1,6 +1,7 @@
 """
 Base file upload handler classes, and the built-in concrete subclasses
 """
+
 import os
 from io import BytesIO
 
diff --git a/django/core/mail/__init__.py b/django/core/mail/__init__.py
index dc63e8702c..676326697b 100644
--- a/django/core/mail/__init__.py
+++ b/django/core/mail/__init__.py
@@ -1,6 +1,7 @@
 """
 Tools for sending email.
 """
+
 from django.conf import settings
 
 # Imported for backwards compatibility and for the sake
diff --git a/django/core/mail/backends/console.py b/django/core/mail/backends/console.py
index ee5dd28504..2d7c778cc1 100644
--- a/django/core/mail/backends/console.py
+++ b/django/core/mail/backends/console.py
@@ -1,6 +1,7 @@
 """
 Email backend that writes messages to console instead of sending them.
 """
+
 import sys
 import threading
 
diff --git a/django/core/mail/backends/smtp.py b/django/core/mail/backends/smtp.py
index 7ce29d27fd..04b6ee3246 100644
--- a/django/core/mail/backends/smtp.py
+++ b/django/core/mail/backends/smtp.py
@@ -1,4 +1,5 @@
 """SMTP email backend class."""
+
 import smtplib
 import ssl
 import threading
diff --git a/django/core/management/base.py b/django/core/management/base.py
index abc6f79a15..9776f89ef6 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -2,6 +2,7 @@
 Base classes for writing management commands (named commands which can
 be executed through ``django-admin`` or ``manage.py``).
 """
+
 import argparse
 import os
 import sys
@@ -518,9 +519,11 @@ class BaseCommand:
                 if issues:
                     visible_issue_count += len(issues)
                     formatted = (
-                        self.style.ERROR(str(e))
-                        if e.is_serious()
-                        else self.style.WARNING(str(e))
+                        (
+                            self.style.ERROR(str(e))
+                            if e.is_serious()
+                            else self.style.WARNING(str(e))
+                        )
                         for e in issues
                     )
                     formatted = "\n".join(sorted(formatted))
@@ -533,11 +536,15 @@ class BaseCommand:
             if visible_issue_count:
                 footer += "\n"
             footer += "System check identified %s (%s silenced)." % (
-                "no issues"
-                if visible_issue_count == 0
-                else "1 issue"
-                if visible_issue_count == 1
-                else "%s issues" % visible_issue_count,
+                (
+                    "no issues"
+                    if visible_issue_count == 0
+                    else (
+                        "1 issue"
+                        if visible_issue_count == 1
+                        else "%s issues" % visible_issue_count
+                    )
+                ),
                 len(all_issues) - visible_issue_count,
             )
 
diff --git a/django/core/management/commands/dumpdata.py b/django/core/management/commands/dumpdata.py
index 038b82698d..cc183517e3 100644
--- a/django/core/management/commands/dumpdata.py
+++ b/django/core/management/commands/dumpdata.py
@@ -193,7 +193,7 @@ class Command(BaseCommand):
                 # There is no need to sort dependencies when natural foreign
                 # keys are not used.
                 models = []
-                for (app_config, model_list) in app_list.items():
+                for app_config, model_list in app_list.items():
                     if model_list is None:
                         models.extend(app_config.get_models())
                     else:
diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py
index 20dffac05f..1fbca9244b 100644
--- a/django/core/serializers/base.py
+++ b/django/core/serializers/base.py
@@ -1,6 +1,7 @@
 """
 Module for abstract serializer/unserializer base classes.
 """
+
 from io import StringIO
 
 from django.core.exceptions import ObjectDoesNotExist
diff --git a/django/core/serializers/python.py b/django/core/serializers/python.py
index fa3bce2948..9769d647f8 100644
--- a/django/core/serializers/python.py
+++ b/django/core/serializers/python.py
@@ -128,7 +128,7 @@ def Deserializer(
         field_names = field_names_cache[Model]
 
         # Handle each field
-        for (field_name, field_value) in d["fields"].items():
+        for field_name, field_value in d["fields"].items():
 
             if ignorenonexistent and field_name not in field_names:
                 # skip fields no longer on model
diff --git a/django/core/serializers/xml_serializer.py b/django/core/serializers/xml_serializer.py
index 1d3269c41a..e2b9aa0949 100644
--- a/django/core/serializers/xml_serializer.py
+++ b/django/core/serializers/xml_serializer.py
@@ -1,6 +1,7 @@
 """
 XML serializer.
 """
+
 import json
 from xml.dom import pulldom
 from xml.sax import handler
diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py
index fef5532e58..ae1c762f2a 100644
--- a/django/core/servers/basehttp.py
+++ b/django/core/servers/basehttp.py
@@ -143,6 +143,38 @@ class ServerHandler(simple_server.ServerHandler):
         if self.headers.get("Connection") == "close":
             self.request_handler.close_connection = True
 
+    def write(self, data):
+        """
+        Wrapper around the original write method that suppresses sending
+        of the response body for HEAD requests.
+        """
+        if self.environ.get("REQUEST_METHOD") == "HEAD":
+            # For HEAD requests, skip actually writing the response body
+            if not self.headers_sent:
+                self.send_headers()
+        else:
+            # For non-HEAD requests, perform the standard write operation
+            super().write(data)
+
+    def finish_response(self):
+        """
+        Override finish_response to skip iterating over the response body
+        for HEAD requests, as per RFC 2616.
+        """
+        if self.environ.get("REQUEST_METHOD") == "HEAD" and not self.headers_sent:
+            self.send_headers()
+        elif not self.result_is_file() or not self.sendfile():
+            # For non-HEAD requests or when the headers haven't been sent,
+            # perform the standard response handling
+            for data in self.result:
+                self.write(data)
+            self.finish_content()
+
+        # Call close() to clean up resources
+        if hasattr(self.result, "close"):
+            self.result.close()
+        self.close()
+
     def close(self):
         self.get_stdin().read()
         super().close()
diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py
index 8a54f4061a..cbac8a7f76 100644
--- a/django/db/backends/base/creation.py
+++ b/django/db/backends/base/creation.py
@@ -116,6 +116,7 @@ class BaseDatabaseCreation:
         Designed only for test runner usage; will not handle large
         amounts of data.
         """
+
         # Iteratively return every object for all models to serialize.
         def get_objects():
             from django.db.migrations.loader import MigrationLoader
diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py
index 4ee73c0734..d2bc336dd8 100644
--- a/django/db/backends/base/operations.py
+++ b/django/db/backends/base/operations.py
@@ -269,6 +269,7 @@ class BaseDatabaseOperations:
         exists for database backends to provide a better implementation
         according to their own quoting schemes.
         """
+
         # Convert params to contain string values.
         def to_string(s):
             return force_str(s, strings_only=True, errors="replace")
diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 3a83e14be9..35d6541691 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -690,9 +690,9 @@ class BaseDatabaseSchemaEditor:
                 namespace, _ = split_identifier(model._meta.db_table)
                 definition += " " + self.sql_create_column_inline_fk % {
                     "name": self._fk_constraint_name(model, field, constraint_suffix),
-                    "namespace": "%s." % self.quote_name(namespace)
-                    if namespace
-                    else "",
+                    "namespace": (
+                        "%s." % self.quote_name(namespace) if namespace else ""
+                    ),
                     "column": self.quote_name(field.column),
                     "to_table": self.quote_name(to_table),
                     "to_column": self.quote_name(to_column),
diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py
index 412d07a993..75787ef8ab 100644
--- a/django/db/backends/ddl_references.py
+++ b/django/db/backends/ddl_references.py
@@ -2,6 +2,7 @@
 Helpers to manipulate deferred DDL statements that might need to be adjusted or
 discarded within when executing a migration.
 """
+
 from copy import deepcopy
 
 
diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py
index 6811b10abb..521187d2d4 100644
--- a/django/db/backends/mysql/base.py
+++ b/django/db/backends/mysql/base.py
@@ -3,6 +3,7 @@ MySQL database backend for Django.
 
 Requires mysqlclient: https://pypi.org/project/mysqlclient/
 """
+
 from django.core.exceptions import ImproperlyConfigured
 from django.db import IntegrityError
 from django.db.backends import utils as backend_utils
diff --git a/django/db/backends/oracle/base.py b/django/db/backends/oracle/base.py
index 845ab8ccf5..611a3ea75a 100644
--- a/django/db/backends/oracle/base.py
+++ b/django/db/backends/oracle/base.py
@@ -3,6 +3,7 @@ Oracle database backend for Django.
 
 Requires cx_Oracle: https://oracle.github.io/python-cx_Oracle/
 """
+
 import datetime
 import decimal
 import os
diff --git a/django/db/backends/oracle/creation.py b/django/db/backends/oracle/creation.py
index df773bff8c..b0a5177728 100644
--- a/django/db/backends/oracle/creation.py
+++ b/django/db/backends/oracle/creation.py
@@ -133,20 +133,20 @@ class DatabaseCreation(BaseDatabaseCreation):
         credentials in the SAVED_USER/SAVED_PASSWORD key in the settings dict.
         """
         real_settings = settings.DATABASES[self.connection.alias]
-        real_settings["SAVED_USER"] = self.connection.settings_dict[
-            "SAVED_USER"
-        ] = self.connection.settings_dict["USER"]
+        real_settings["SAVED_USER"] = self.connection.settings_dict["SAVED_USER"] = (
+            self.connection.settings_dict["USER"]
+        )
         real_settings["SAVED_PASSWORD"] = self.connection.settings_dict[
             "SAVED_PASSWORD"
         ] = self.connection.settings_dict["PASSWORD"]
         real_test_settings = real_settings["TEST"]
         test_settings = self.connection.settings_dict["TEST"]
-        real_test_settings["USER"] = real_settings["USER"] = test_settings[
-            "USER"
-        ] = self.connection.settings_dict["USER"] = parameters["user"]
-        real_settings["PASSWORD"] = self.connection.settings_dict[
-            "PASSWORD"
-        ] = parameters["password"]
+        real_test_settings["USER"] = real_settings["USER"] = test_settings["USER"] = (
+            self.connection.settings_dict["USER"]
+        ) = parameters["user"]
+        real_settings["PASSWORD"] = self.connection.settings_dict["PASSWORD"] = (
+            parameters["password"]
+        )
 
     def set_as_test_mirror(self, primary_settings_dict):
         """
diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py
index 2887071254..404ba998be 100644
--- a/django/db/backends/postgresql/schema.py
+++ b/django/db/backends/postgresql/schema.py
@@ -267,9 +267,9 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
             % {
                 "column": self.quote_name(new_field.column),
                 "type": new_type,
-                "collation": " " + self._collate_sql(new_collation)
-                if new_collation
-                else "",
+                "collation": (
+                    " " + self._collate_sql(new_collation) if new_collation else ""
+                ),
             },
             [],
         )
diff --git a/django/db/backends/sqlite3/_functions.py b/django/db/backends/sqlite3/_functions.py
index 7e86950f7d..0171b60f38 100644
--- a/django/db/backends/sqlite3/_functions.py
+++ b/django/db/backends/sqlite3/_functions.py
@@ -1,6 +1,7 @@
 """
 Implementations of SQL functions for SQLite.
 """
+
 import functools
 import random
 import statistics
diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index a3a382a56b..e7205cefc9 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -1,6 +1,7 @@
 """
 SQLite backend for the sqlite3 module in the standard library.
 """
+
 import datetime
 import decimal
 import warnings
diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py
index c9e924b182..7512cdf8e6 100644
--- a/django/db/backends/sqlite3/schema.py
+++ b/django/db/backends/sqlite3/schema.py
@@ -191,6 +191,7 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
           4. Rename the "new__app_model" table to "app_model"
           5. Restore any index of the previous "app_model" table.
         """
+
         # Self-referential fields must be recreated rather than copied from
         # the old model to ensure their remote_field.field_name doesn't refer
         # to an altered field.
diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index 5a5f5a14fb..d9a8ed16ed 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -566,11 +566,12 @@ class MigrationAutodetector:
                                 rem_model_state.app_label,
                                 rem_model_state.name_lower,
                             )
-                            self.renamed_models_rel[
-                                renamed_models_rel_key
-                            ] = "%s.%s" % (
-                                model_state.app_label,
-                                model_state.name_lower,
+                            self.renamed_models_rel[renamed_models_rel_key] = (
+                                "%s.%s"
+                                % (
+                                    model_state.app_label,
+                                    model_state.name_lower,
+                                )
                             )
                             self.old_model_keys.remove((rem_app_label, rem_model_name))
                             self.old_model_keys.add((app_label, model_name))
@@ -971,9 +972,9 @@ class MigrationAutodetector:
                                 (rem_app_label, rem_model_name, rem_field_name)
                             )
                             old_field_keys.add((app_label, model_name, field_name))
-                            self.renamed_fields[
-                                app_label, model_name, field_name
-                            ] = rem_field_name
+                            self.renamed_fields[app_label, model_name, field_name] = (
+                                rem_field_name
+                            )
                             break
 
     def generate_renamed_fields(self):
diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py
index 81dcd06e04..50445f3101 100644
--- a/django/db/migrations/loader.py
+++ b/django/db/migrations/loader.py
@@ -131,11 +131,11 @@ class MigrationLoader:
                         "Migration %s in app %s has no Migration class"
                         % (migration_name, app_config.label)
                     )
-                self.disk_migrations[
-                    app_config.label, migration_name
-                ] = migration_module.Migration(
-                    migration_name,
-                    app_config.label,
+                self.disk_migrations[app_config.label, migration_name] = (
+                    migration_module.Migration(
+                        migration_name,
+                        app_config.label,
+                    )
                 )
 
     def get_migration(self, app_label, name_prefix):
diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index a243aba0b6..ee9d0d6117 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -55,11 +55,11 @@ class CreateModel(ModelOperation):
         _check_for_duplicates(
             "bases",
             (
-                base._meta.label_lower
-                if hasattr(base, "_meta")
-                else base.lower()
-                if isinstance(base, str)
-                else base
+                (
+                    base._meta.label_lower
+                    if hasattr(base, "_meta")
+                    else base.lower() if isinstance(base, str) else base
+                )
                 for base in self.bases
             ),
         )
@@ -400,7 +400,7 @@ class RenameModel(ModelOperation):
             fields = zip(
                 old_model._meta.local_many_to_many, new_model._meta.local_many_to_many
             )
-            for (old_field, new_field) in fields:
+            for old_field, new_field in fields:
                 # Skip self-referential fields as these are renamed above.
                 if (
                     new_field.model == new_field.related_model
@@ -505,7 +505,7 @@ class AlterModelTable(ModelOptionOperation):
                 new_model._meta.db_table,
             )
             # Rename M2M fields whose name is based on this model's db_table
-            for (old_field, new_field) in zip(
+            for old_field, new_field in zip(
                 old_model._meta.local_many_to_many, new_model._meta.local_many_to_many
             ):
                 if new_field.remote_field.through._meta.auto_created:
diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py
index ae55967383..bb2a19edbb 100644
--- a/django/db/migrations/state.py
+++ b/django/db/migrations/state.py
@@ -525,11 +525,11 @@ class ProjectState:
             if model_state.options.get("proxy"):
                 proxy_models[model_key] = model_state
                 # Find a concrete model for the proxy.
-                concrete_models_mapping[
-                    model_key
-                ] = self._find_concrete_model_from_proxy(
-                    proxy_models,
-                    model_state,
+                concrete_models_mapping[model_key] = (
+                    self._find_concrete_model_from_proxy(
+                        proxy_models,
+                        model_state,
+                    )
                 )
             else:
                 concrete_models_mapping[model_key] = model_key
diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index e672f0aeb0..c0cb2d6f1a 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -1,6 +1,7 @@
 """
 Classes to represent the definitions of aggregate functions.
 """
+
 from django.core.exceptions import FieldError, FullResultSet
 from django.db.models.expressions import Case, Func, Star, Value, When
 from django.db.models.fields import IntegerField
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 06bab385a3..4441b76ecc 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -2161,9 +2161,11 @@ class Model(AltersData, metaclass=ModelBase):
         opts = cls._meta
         valid_fields = set(
             chain.from_iterable(
-                (f.name, f.attname)
-                if not (f.auto_created and not f.concrete)
-                else (f.field.related_query_name(),)
+                (
+                    (f.name, f.attname)
+                    if not (f.auto_created and not f.concrete)
+                    else (f.field.related_query_name(),)
+                )
                 for f in chain(opts.fields, opts.related_objects)
             )
         )
diff --git a/django/db/models/constants.py b/django/db/models/constants.py
index a0c99c95fc..cec1b9b90f 100644
--- a/django/db/models/constants.py
+++ b/django/db/models/constants.py
@@ -1,6 +1,7 @@
 """
 Constants used across the ORM in general.
 """
+
 from enum import Enum
 
 # Separator used to split filter strings apart.
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 21a49bc229..9897fd2bbe 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -201,9 +201,11 @@ class BaseExpression:
 
     def _parse_expressions(self, *expressions):
         return [
-            arg
-            if hasattr(arg, "resolve_expression")
-            else (F(arg) if isinstance(arg, str) else Value(arg))
+            (
+                arg
+                if hasattr(arg, "resolve_expression")
+                else (F(arg) if isinstance(arg, str) else Value(arg))
+            )
             for arg in expressions
         ]
 
@@ -275,9 +277,11 @@ class BaseExpression:
         c.is_summary = summarize
         c.set_source_expressions(
             [
-                expr.resolve_expression(query, allow_joins, reuse, summarize)
-                if expr
-                else None
+                (
+                    expr.resolve_expression(query, allow_joins, reuse, summarize)
+                    if expr
+                    else None
+                )
                 for expr in c.get_source_expressions()
             ]
         )
@@ -356,22 +360,16 @@ class BaseExpression:
         field = self.output_field
         internal_type = field.get_internal_type()
         if internal_type == "FloatField":
-            return (
-                lambda value, expression, connection: None
-                if value is None
-                else float(value)
+            return lambda value, expression, connection: (
+                None if value is None else float(value)
             )
         elif internal_type.endswith("IntegerField"):
-            return (
-                lambda value, expression, connection: None
-                if value is None
-                else int(value)
+            return lambda value, expression, connection: (
+                None if value is None else int(value)
             )
         elif internal_type == "DecimalField":
-            return (
-                lambda value, expression, connection: None
-                if value is None
-                else Decimal(value)
+            return lambda value, expression, connection: (
+                None if value is None else Decimal(value)
             )
         return self._convert_value_noop
 
@@ -417,9 +415,11 @@ class BaseExpression:
         clone = self.copy()
         clone.set_source_expressions(
             [
-                F(f"{prefix}{expr.name}")
-                if isinstance(expr, F)
-                else expr.prefix_references(prefix)
+                (
+                    F(f"{prefix}{expr.name}")
+                    if isinstance(expr, F)
+                    else expr.prefix_references(prefix)
+                )
                 for expr in self.get_source_expressions()
             ]
         )
diff --git a/django/db/models/functions/comparison.py b/django/db/models/functions/comparison.py
index de7eef4cdc..0bf1416215 100644
--- a/django/db/models/functions/comparison.py
+++ b/django/db/models/functions/comparison.py
@@ -1,4 +1,5 @@
 """Database functions that do comparisons or type conversions."""
+
 from django.db import NotSupportedError
 from django.db.models.expressions import Func, Value
 from django.db.models.fields import TextField
diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py
index baed94227a..5e5019e63a 100644
--- a/django/db/models/functions/datetime.py
+++ b/django/db/models/functions/datetime.py
@@ -313,9 +313,11 @@ class TruncBase(TimezoneMixin, Transform):
                 "Cannot truncate DateField '%s' to %s."
                 % (
                     field.name,
-                    output_field.__class__.__name__
-                    if has_explicit_output_field
-                    else "DateTimeField",
+                    (
+                        output_field.__class__.__name__
+                        if has_explicit_output_field
+                        else "DateTimeField"
+                    ),
                 )
             )
         elif isinstance(field, TimeField) and (
@@ -326,9 +328,11 @@ class TruncBase(TimezoneMixin, Transform):
                 "Cannot truncate TimeField '%s' to %s."
                 % (
                     field.name,
-                    output_field.__class__.__name__
-                    if has_explicit_output_field
-                    else "DateTimeField",
+                    (
+                        output_field.__class__.__name__
+                        if has_explicit_output_field
+                        else "DateTimeField"
+                    ),
                 )
             )
         return copy
diff --git a/django/db/models/functions/math.py b/django/db/models/functions/math.py
index 460143ba5a..5fa4654a84 100644
--- a/django/db/models/functions/math.py
+++ b/django/db/models/functions/math.py
@@ -47,9 +47,11 @@ class ATan2(NumericOutputFieldMixin, Func):
         clone = self.copy()
         clone.set_source_expressions(
             [
-                Cast(expression, FloatField())
-                if isinstance(expression.output_field, IntegerField)
-                else expression
+                (
+                    Cast(expression, FloatField())
+                    if isinstance(expression.output_field, IntegerField)
+                    else expression
+                )
                 for expression in self.get_source_expressions()[::-1]
             ]
         )
diff --git a/django/db/models/functions/mixins.py b/django/db/models/functions/mixins.py
index caf20e131d..d983df7725 100644
--- a/django/db/models/functions/mixins.py
+++ b/django/db/models/functions/mixins.py
@@ -14,9 +14,11 @@ class FixDecimalInputMixin:
         clone = self.copy()
         clone.set_source_expressions(
             [
-                Cast(expression, output_field)
-                if isinstance(expression.output_field, FloatField)
-                else expression
+                (
+                    Cast(expression, output_field)
+                    if isinstance(expression.output_field, FloatField)
+                    else expression
+                )
                 for expression in self.get_source_expressions()
             ]
         )
diff --git a/django/db/models/indexes.py b/django/db/models/indexes.py
index b5451f9e24..0ddfefec38 100644
--- a/django/db/models/indexes.py
+++ b/django/db/models/indexes.py
@@ -196,9 +196,11 @@ class Index:
             "" if not self.fields else " fields=%s" % repr(self.fields),
             "" if not self.expressions else " expressions=%s" % repr(self.expressions),
             "" if not self.name else " name=%s" % repr(self.name),
-            ""
-            if self.db_tablespace is None
-            else " db_tablespace=%s" % repr(self.db_tablespace),
+            (
+                ""
+                if self.db_tablespace is None
+                else " db_tablespace=%s" % repr(self.db_tablespace)
+            ),
             "" if self.condition is None else " condition=%s" % self.condition,
             "" if not self.include else " include=%s" % repr(self.include),
             "" if not self.opclasses else " opclasses=%s" % repr(self.opclasses),
diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index 9e2d9373e6..21d9fa7f26 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -249,9 +249,11 @@ class FieldGetDbPrepValueMixin:
         )
         return (
             "%s",
-            [get_db_prep_value(v, connection, prepared=True) for v in value]
-            if self.get_db_prep_lookup_value_is_iterable
-            else [get_db_prep_value(value, connection, prepared=True)],
+            (
+                [get_db_prep_value(v, connection, prepared=True) for v in value]
+                if self.get_db_prep_lookup_value_is_iterable
+                else [get_db_prep_value(value, connection, prepared=True)]
+            ),
         )
 
 
diff --git a/django/db/models/options.py b/django/db/models/options.py
index 607b19fb8a..be3d68f390 100644
--- a/django/db/models/options.py
+++ b/django/db/models/options.py
@@ -528,6 +528,7 @@ class Options:
         combined with filtering of field properties is the public API for
         obtaining this field list.
         """
+
         # For legacy reasons, the fields property should only contain forward
         # fields that are not private or with a m2m cardinality. Therefore we
         # pass these three filters as filters to the generator.
diff --git a/django/db/models/query.py b/django/db/models/query.py
index f88662de12..0a9d72d7b9 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -108,9 +108,11 @@ class ModelIterable(BaseIterable):
                 related_objs,
                 operator.attrgetter(
                     *[
-                        field.attname
-                        if from_field == "self"
-                        else queryset.model._meta.get_field(from_field).attname
+                        (
+                            field.attname
+                            if from_field == "self"
+                            else queryset.model._meta.get_field(from_field).attname
+                        )
                         for from_field in field.from_fields
                     ]
                 ),
@@ -1338,9 +1340,7 @@ class QuerySet(AltersData):
         clone._iterable_class = (
             NamedValuesListIterable
             if named
-            else FlatValuesListIterable
-            if flat
-            else ValuesListIterable
+            else FlatValuesListIterable if flat else ValuesListIterable
         )
         return clone
 
@@ -1606,9 +1606,11 @@ class QuerySet(AltersData):
         if names is None:
             names = set(
                 chain.from_iterable(
-                    (field.name, field.attname)
-                    if hasattr(field, "attname")
-                    else (field.name,)
+                    (
+                        (field.name, field.attname)
+                        if hasattr(field, "attname")
+                        else (field.name,)
+                    )
                     for field in self.model._meta.get_fields()
                 )
             )
@@ -2110,7 +2112,7 @@ class RawQuerySet:
         """
         columns = self.query.get_columns()
         # Adjust any column names which don't match field names
-        for (query_name, model_name) in self.translations.items():
+        for query_name, model_name in self.translations.items():
             # Ignore translations for nonexistent column names
             try:
                 index = columns.index(query_name)
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index a82ed23dbb..f50c755bec 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -5,6 +5,7 @@ Factored out from django.db.models.query to avoid making the main module very
 large and/or so that they can be used by other modules without getting into
 circular import difficulties.
 """
+
 import functools
 import inspect
 import logging
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index c07076d54a..7939c59356 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -1185,9 +1185,9 @@ class SQLCompiler:
                 "field": f,
                 "reverse": False,
                 "local_setter": f.set_cached_value,
-                "remote_setter": f.remote_field.set_cached_value
-                if f.unique
-                else lambda x, y: None,
+                "remote_setter": (
+                    f.remote_field.set_cached_value if f.unique else lambda x, y: None
+                ),
                 "from_parent": False,
             }
             related_klass_infos.append(klass_info)
diff --git a/django/db/models/sql/datastructures.py b/django/db/models/sql/datastructures.py
index 069eb1a301..3b3b306c74 100644
--- a/django/db/models/sql/datastructures.py
+++ b/django/db/models/sql/datastructures.py
@@ -2,6 +2,7 @@
 Useful auxiliary data structures for query construction. Not useful outside
 the SQL domain.
 """
+
 from django.core.exceptions import FullResultSet
 from django.db.models.sql.constants import INNER, LOUTER
 
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 0aa07e0b99..bca78171b7 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -6,6 +6,7 @@ themselves do not have to (and could be backed by things other than SQL
 databases). The abstraction barrier only works one way: this module has to know
 all about the internals of models in order to get the information it needs.
 """
+
 import copy
 import difflib
 import functools
diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py
index aaab1730b7..3b159233a0 100644
--- a/django/db/models/sql/where.py
+++ b/django/db/models/sql/where.py
@@ -1,6 +1,7 @@
 """
 Code to manage the creation and SQL rendering of 'where' constraints.
 """
+
 import operator
 from functools import reduce
 
diff --git a/django/forms/models.py b/django/forms/models.py
index 35ecdc1c0d..b45622b31b 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -2,6 +2,7 @@
 Helper functions for creating Form classes from Django models
 and database field objects.
 """
+
 from itertools import chain
 
 from django.core.exceptions import (
@@ -821,9 +822,12 @@ class BaseModelFormSet(BaseFormSet, AltersData):
                 )
                 # Reduce Model instances to their primary key values
                 row_data = tuple(
-                    d._get_pk_val() if hasattr(d, "_get_pk_val")
-                    # Prevent "unhashable type: list" errors later on.
-                    else tuple(d) if isinstance(d, list) else d
+                    (
+                        d._get_pk_val()
+                        if hasattr(d, "_get_pk_val")
+                        # Prevent "unhashable type: list" errors later on.
+                        else tuple(d) if isinstance(d, list) else d
+                    )
                     for d in row_data
                 )
                 if row_data and None not in row_data:
diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index a53569c5a3..72434a4809 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -100,9 +100,11 @@ class Media:
 
     def render_js(self):
         return [
-            path.__html__()
-            if hasattr(path, "__html__")
-            else format_html('<script src="{}"></script>', self.absolute_path(path))
+            (
+                path.__html__()
+                if hasattr(path, "__html__")
+                else format_html('<script src="{}"></script>', self.absolute_path(path))
+            )
             for path in self._js
         ]
 
@@ -112,12 +114,14 @@ class Media:
         media = sorted(self._css)
         return chain.from_iterable(
             [
-                path.__html__()
-                if hasattr(path, "__html__")
-                else format_html(
-                    '<link href="{}" media="{}" rel="stylesheet">',
-                    self.absolute_path(path),
-                    medium,
+                (
+                    path.__html__()
+                    if hasattr(path, "__html__")
+                    else format_html(
+                        '<link href="{}" media="{}" rel="stylesheet">',
+                        self.absolute_path(path),
+                        medium,
+                    )
                 )
                 for path in self._css[medium]
             ]
diff --git a/django/http/multipartparser.py b/django/http/multipartparser.py
index 8f0d85c3d8..eddb08f53e 100644
--- a/django/http/multipartparser.py
+++ b/django/http/multipartparser.py
@@ -4,6 +4,7 @@ Multi-part parsing for file uploads.
 Exposes one class, ``MultiPartParser``, which feeds chunks of uploaded data to
 file upload handlers for processing.
 """
+
 import base64
 import binascii
 import collections
diff --git a/django/http/request.py b/django/http/request.py
index d451147bc1..db4a81287f 100644
--- a/django/http/request.py
+++ b/django/http/request.py
@@ -182,9 +182,11 @@ class HttpRequest:
         return "%s%s%s" % (
             escape_uri_path(path),
             "/" if force_append_slash and not path.endswith("/") else "",
-            ("?" + iri_to_uri(self.META.get("QUERY_STRING", "")))
-            if self.META.get("QUERY_STRING", "")
-            else "",
+            (
+                ("?" + iri_to_uri(self.META.get("QUERY_STRING", "")))
+                if self.META.get("QUERY_STRING", "")
+                else ""
+            ),
         )
 
     def get_signed_cookie(self, key, default=RAISE_ERROR, salt="", max_age=None):
diff --git a/django/middleware/csrf.py b/django/middleware/csrf.py
index 2c0d2cc120..f7943494ba 100644
--- a/django/middleware/csrf.py
+++ b/django/middleware/csrf.py
@@ -4,6 +4,7 @@ Cross Site Request Forgery Middleware.
 This module provides a middleware that implements protection
 against request forgeries from other sites.
 """
+
 import logging
 import string
 from collections import defaultdict
diff --git a/django/shortcuts.py b/django/shortcuts.py
index 90ec1bedc5..4783612bba 100644
--- a/django/shortcuts.py
+++ b/django/shortcuts.py
@@ -3,6 +3,7 @@ This module collects helper functions and classes that "span" multiple levels
 of MVC. In other words, these functions/classes introduce controlled coupling
 for convenience's sake.
 """
+
 from django.http import (
     Http404,
     HttpResponse,
diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 78881987fc..1104bfa4bc 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -1,4 +1,5 @@
 """Default variable filters."""
+
 import random as random_module
 import re
 import types
diff --git a/django/template/defaulttags.py b/django/template/defaulttags.py
index 59049069de..16435cb1b4 100644
--- a/django/template/defaulttags.py
+++ b/django/template/defaulttags.py
@@ -1,4 +1,5 @@
 """Default tags used by the template system, available to all templates."""
+
 import re
 import sys
 import warnings
diff --git a/django/template/engine.py b/django/template/engine.py
index f2215c0e4e..9882d3a16d 100644
--- a/django/template/engine.py
+++ b/django/template/engine.py
@@ -70,9 +70,11 @@ class Engine:
             self.__class__.__qualname__,
             "" if not self.dirs else " dirs=%s" % repr(self.dirs),
             self.app_dirs,
-            ""
-            if not self.context_processors
-            else " context_processors=%s" % repr(self.context_processors),
+            (
+                ""
+                if not self.context_processors
+                else " context_processors=%s" % repr(self.context_processors)
+            ),
             self.debug,
             repr(self.loaders),
             repr(self.string_if_invalid),
diff --git a/django/template/smartif.py b/django/template/smartif.py
index 5b15a5a476..0a917c2aaa 100644
--- a/django/template/smartif.py
+++ b/django/template/smartif.py
@@ -1,6 +1,7 @@
 """
 Parser and utilities for the smart 'if' tag
 """
+
 # Using a simple top down parser, as described here:
 #    http://effbot.org/zone/simple-top-down-parsing.htm.
 # 'led' = left denotation
diff --git a/django/urls/conf.py b/django/urls/conf.py
index 40708028a3..bb61063d77 100644
--- a/django/urls/conf.py
+++ b/django/urls/conf.py
@@ -1,4 +1,5 @@
 """Functions for use in URLsconfs."""
+
 from functools import partial
 from importlib import import_module
 
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index b021673772..8b03c5801e 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -5,6 +5,7 @@ URLResolver is the main class here. Its resolve() method takes a URL (as
 a string) and returns a ResolverMatch object which provides access to all
 attributes of the resolved URL match.
 """
+
 import functools
 import inspect
 import re
@@ -91,9 +92,11 @@ class ResolverMatch:
                 self.app_names,
                 self.namespaces,
                 self.route,
-                f", captured_kwargs={self.captured_kwargs!r}"
-                if self.captured_kwargs
-                else "",
+                (
+                    f", captured_kwargs={self.captured_kwargs!r}"
+                    if self.captured_kwargs
+                    else ""
+                ),
                 f", extra_kwargs={self.extra_kwargs!r}" if self.extra_kwargs else "",
             )
         )
diff --git a/django/utils/archive.py b/django/utils/archive.py
index 71ec2d0015..56f34c0038 100644
--- a/django/utils/archive.py
+++ b/django/utils/archive.py
@@ -21,6 +21,7 @@ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 """
+
 import os
 import shutil
 import stat
diff --git a/django/utils/cache.py b/django/utils/cache.py
index d4574217f4..3b014fbe51 100644
--- a/django/utils/cache.py
+++ b/django/utils/cache.py
@@ -14,6 +14,7 @@ cache keys to prevent delivery of wrong content.
 An example: i18n middleware would need to distinguish caches by the
 "Accept-language" header.
 """
+
 import time
 from collections import defaultdict
 from hashlib import md5
@@ -78,7 +79,7 @@ def patch_cache_control(response, **kwargs):
     elif "public" in cc and "private" in kwargs:
         del cc["public"]
 
-    for (k, v) in kwargs.items():
+    for k, v in kwargs.items():
         directive = k.replace("_", "-")
         if directive == "no-cache":
             # no-cache supports multiple field names.
diff --git a/django/utils/crypto.py b/django/utils/crypto.py
index 1c0e7001c6..5134b854d6 100644
--- a/django/utils/crypto.py
+++ b/django/utils/crypto.py
@@ -1,6 +1,7 @@
 """
 Django's standard crypto functions and utilities.
 """
+
 import hashlib
 import hmac
 import secrets
diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py
index a6c315e4cf..a3274b901c 100644
--- a/django/utils/dateformat.py
+++ b/django/utils/dateformat.py
@@ -10,6 +10,7 @@ Usage:
 7th October 2003 11:39
 >>>
 """
+
 import calendar
 from datetime import date, datetime, time
 from email.utils import format_datetime as format_datetime_rfc5322
diff --git a/django/utils/deconstruct.py b/django/utils/deconstruct.py
index f8754c1974..2e5463a651 100644
--- a/django/utils/deconstruct.py
+++ b/django/utils/deconstruct.py
@@ -42,9 +42,11 @@ def deconstructible(*args, path=None):
                     "#serializing-values" % (name, module_name, get_docs_version())
                 )
             return (
-                path
-                if path and type(obj) is klass
-                else f"{obj.__class__.__module__}.{name}",
+                (
+                    path
+                    if path and type(obj) is klass
+                    else f"{obj.__class__.__module__}.{name}"
+                ),
                 obj._constructor_args[0],
                 obj._constructor_args[1],
             )
diff --git a/django/utils/decorators.py b/django/utils/decorators.py
index 650247a7bb..735821d475 100644
--- a/django/utils/decorators.py
+++ b/django/utils/decorators.py
@@ -57,6 +57,7 @@ def method_decorator(decorator, name=""):
     """
     Convert a function decorator into a method decorator
     """
+
     # 'obj' can be a class or a function. If 'obj' is a function at the time it
     # is passed to _dec,  it will eventually be a method of the class it is
     # defined on. If 'obj' is a class, the 'name' is required to be the name
diff --git a/django/utils/feedgenerator.py b/django/utils/feedgenerator.py
index 31ca9a2db9..3bd456ca68 100644
--- a/django/utils/feedgenerator.py
+++ b/django/utils/feedgenerator.py
@@ -21,6 +21,7 @@ Sample usage:
 For definitions of the different versions of RSS, see:
 https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rss
 """
+
 import datetime
 import email
 from io import StringIO
diff --git a/django/utils/jslex.py b/django/utils/jslex.py
index 93a1a2e972..fc46a686c7 100644
--- a/django/utils/jslex.py
+++ b/django/utils/jslex.py
@@ -1,4 +1,5 @@
 """JsLex: a lexer for JavaScript"""
+
 # Originally from https://bitbucket.org/ned/jslex
 import re
 
diff --git a/django/utils/regex_helper.py b/django/utils/regex_helper.py
index 9ee82e1a9b..b71298e399 100644
--- a/django/utils/regex_helper.py
+++ b/django/utils/regex_helper.py
@@ -5,6 +5,7 @@ Used internally by Django and not intended for external use.
 This is not, and is not intended to be, a complete reg-exp decompiler. It
 should be good enough for a large class of URLS, however.
 """
+
 import re
 
 from django.utils.functional import SimpleLazyObject
diff --git a/django/utils/translation/__init__.py b/django/utils/translation/__init__.py
index 0b3f78e486..0618f02159 100644
--- a/django/utils/translation/__init__.py
+++ b/django/utils/translation/__init__.py
@@ -1,6 +1,7 @@
 """
 Internationalization support.
 """
+
 from contextlib import ContextDecorator
 from decimal import ROUND_UP, Decimal
 
diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py
index c1e64d4ebd..05c69fe078 100644
--- a/django/utils/translation/trans_real.py
+++ b/django/utils/translation/trans_real.py
@@ -1,4 +1,5 @@
 """Translation helper functions."""
+
 import functools
 import gettext as gettext_module
 import os
diff --git a/django/views/decorators/common.py b/django/views/decorators/common.py
index fe4d58f591..71ee232ae4 100644
--- a/django/views/decorators/common.py
+++ b/django/views/decorators/common.py
@@ -6,6 +6,7 @@ def no_append_slash(view_func):
     Mark a view function as excluded from CommonMiddleware's APPEND_SLASH
     redirection.
     """
+
     # view_func.should_append_slash = False would also work, but decorators are
     # nicer if they don't have side effects, so return a new function.
     @wraps(view_func)
diff --git a/django/views/decorators/csrf.py b/django/views/decorators/csrf.py
index 40ac58bc1d..92771c56df 100644
--- a/django/views/decorators/csrf.py
+++ b/django/views/decorators/csrf.py
@@ -48,6 +48,7 @@ uses the csrf_token template tag, or the CsrfViewMiddleware is used.
 
 def csrf_exempt(view_func):
     """Mark a view function as being exempt from the CSRF view protection."""
+
     # view_func.csrf_exempt = True would also work, but decorators are nicer
     # if they don't have side effects, so return a new function.
     @wraps(view_func)
diff --git a/django/views/decorators/http.py b/django/views/decorators/http.py
index 6d88a633eb..1ae89a10d9 100644
--- a/django/views/decorators/http.py
+++ b/django/views/decorators/http.py
@@ -1,6 +1,7 @@
 """
 Decorators for views based on HTTP headers.
 """
+
 import datetime
 from functools import wraps
 
diff --git a/django/views/static.py b/django/views/static.py
index f75b86f970..34bb1fe758 100644
--- a/django/views/static.py
+++ b/django/views/static.py
@@ -2,6 +2,7 @@
 Views and functions for serving static files. These are only to be used
 during development, and SHOULD NOT be used in a production setting.
 """
+
 import mimetypes
 import posixpath
 from pathlib import Path
diff --git a/docs/_ext/djangodocs.py b/docs/_ext/djangodocs.py
index 5e99f9f5e0..c74a5aab74 100644
--- a/docs/_ext/djangodocs.py
+++ b/docs/_ext/djangodocs.py
@@ -1,6 +1,7 @@
 """
 Sphinx plugins for Django documentation.
 """
+
 import json
 import os
 import re
