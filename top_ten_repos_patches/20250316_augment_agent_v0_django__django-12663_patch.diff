diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index caa03665ea..dc0309eb73 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -19,11 +19,11 @@ from django.utils import timezone
 from django.utils.datastructures import DictWrapper
 from django.utils.dateparse import (
     parse_date, parse_datetime, parse_duration, parse_time,
 )
 from django.utils.duration import duration_microseconds, duration_string
-from django.utils.functional import Promise, cached_property
+from django.utils.functional import LazyObject, Promise, cached_property, empty
 from django.utils.ipv6 import clean_ipv6_address
 from django.utils.itercompat import is_iterable
 from django.utils.text import capfirst
 from django.utils.translation import gettext_lazy as _
 
@@ -802,10 +802,14 @@ class Field(RegisterLookupMixin):
 
     def get_prep_value(self, value):
         """Perform preliminary non-db specific value checks and conversions."""
         if isinstance(value, Promise):
             value = value._proxy____cast()
+        elif isinstance(value, LazyObject):
+            if value._wrapped is empty:
+                value._setup()
+            value = value._wrapped
         return value
 
     def get_db_prep_value(self, value, connection, prepared=False):
         """
         Return field's value prepared for interacting with the database backend.
@@ -1767,10 +1771,14 @@ class IntegerField(Field):
     def get_prep_value(self, value):
         value = super().get_prep_value(value)
         if value is None:
             return None
         try:
+            # Handle model instances by getting their primary key
+            from django.db.models import Model
+            if isinstance(value, Model):
+                value = value.pk
             return int(value)
         except (TypeError, ValueError) as e:
             raise e.__class__(
                 "Field '%s' expected a number but got %r." % (self.name, value),
             ) from e
diff --git a/django/db/models/fields/related_lookups.py b/django/db/models/fields/related_lookups.py
index c20e220141..01545f3a56 100644
--- a/django/db/models/fields/related_lookups.py
+++ b/django/db/models/fields/related_lookups.py
@@ -23,10 +23,18 @@ class MultiColSource:
         return self.output_field.get_lookup(lookup)
 
 
 def get_normalized_value(value, lhs):
     from django.db.models import Model
+    from django.utils.functional import LazyObject, empty
+    
+    # Resolve LazyObject instances to their wrapped values
+    if isinstance(value, LazyObject):
+        if value._wrapped is empty:
+            value._setup()
+        value = value._wrapped
+        
     if isinstance(value, Model):
         value_list = []
         sources = lhs.output_field.get_path_info()[-1].target_fields
         for source in sources:
             while not isinstance(value, source.model) and source.remote_field:
