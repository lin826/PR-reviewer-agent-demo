diff --git a/xarray/core/nanops.py b/xarray/core/nanops.py
index 41c8d258..2fcac65a 100644
--- a/xarray/core/nanops.py
+++ b/xarray/core/nanops.py
@@ -26,17 +26,23 @@ def _maybe_null_out(result, axis, mask, min_count=1):
     """
     xarray version of pandas.core.nanops._maybe_null_out
     """
-    if hasattr(axis, "__len__"):  # if tuple or list
-        raise ValueError(
-            "min_count is not available for reduction with more than one dimensions."
-        )
-
-    if axis is not None and getattr(result, "ndim", False):
-        null_mask = (mask.shape[axis] - mask.sum(axis) - min_count) < 0
+    if axis is not None and hasattr(result, "ndim"):
+        # Calculate total number of elements along the specified axis/axes
+        if hasattr(axis, "__len__"):  # if tuple or list (multiple axes)
+            total_elements = np.take(mask.shape, axis).prod()
+        else:  # single axis
+            total_elements = mask.shape[axis]
+        
+        null_mask = (total_elements - mask.sum(axis) - min_count) < 0
         if null_mask.any():
             dtype, fill_value = dtypes.maybe_promote(result.dtype)
             result = result.astype(dtype)
-            result[null_mask] = fill_value
+            if result.ndim == 0:
+                # Scalar result - replace the entire value
+                result = fill_value
+            else:
+                # Array result - replace elements where null_mask is True
+                result[null_mask] = fill_value
 
     elif getattr(result, "dtype", None) not in dtypes.NAT_TYPES:
         null_mask = mask.size - mask.sum()
