diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py
index 66aafde2d6..ac891a00b4 100644
--- a/sympy/concrete/products.py
+++ b/sympy/concrete/products.py
@@ -282,10 +282,31 @@ def _eval_product(self, term, limits):
                 # There is expression, which couldn't change by
                 # as_numer_denom(). E.g. n**(2/3) + 1 --> (n**(2/3) + 1, 1).
                 # We have to catch this case.
-
-                p = sum([self._eval_product(i, (k, a, n)) for i in p.as_coeff_Add()])
+                
+                # However, we cannot compute Product(a + b) as Product(a) + Product(b)
+                # This is mathematically incorrect. We should only do this if the
+                # addition can be properly factored or simplified.
+                
+                # Check if this is a simple case where all terms are constants
+                # or can be factored out
+                terms = p.as_coeff_Add()
+                can_factor = True
+                for term in terms:
+                    if term.has(k):
+                        can_factor = False
+                        break
+                
+                if can_factor:
+                    # All terms are constants, so Product(a + b) = (a + b)^(number of terms)
+                    p = p**(n - a + 1)
+                else:
+                    # Cannot safely compute this, return None
+                    return None
             else:
                 p = self._eval_product(p, (k, a, n))
+            
+            if p is None:
+                return None
             return p / q
 
         elif term.is_Mul:
