diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py
index acee9887d2..bdeec80610 100644
--- a/django/conf/global_settings.py
+++ b/django/conf/global_settings.py
@@ -304,7 +304,7 @@ FILE_UPLOAD_TEMP_DIR = None
 
 # The numeric mode to set newly-uploaded files to. The value should be a mode
 # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.
-FILE_UPLOAD_PERMISSIONS = None
+FILE_UPLOAD_PERMISSIONS = 0o644
 
 # The numeric mode to assign to newly-created directories, when uploading files.
 # The value should be a mode as you'd pass to os.chmod;
diff --git a/docs/ref/settings.txt b/docs/ref/settings.txt
index 46e99af993..eba5bd2e31 100644
--- a/docs/ref/settings.txt
+++ b/docs/ref/settings.txt
@@ -1484,7 +1484,7 @@ This value mirrors the functionality and caveats of the
 ``FILE_UPLOAD_PERMISSIONS``
 ---------------------------
 
-Default: ``None``
+Default: ``0o644``
 
 The numeric mode (i.e. ``0o644``) to set newly uploaded files to. For
 more information about what these modes mean, see the documentation for
diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py
index 434869554c..429a466d89 100644
--- a/tests/file_storage/tests.py
+++ b/tests/file_storage/tests.py
@@ -897,6 +897,8 @@ class FileStoragePermissions(unittest.TestCase):
         self.storage = FileSystemStorage(self.storage_dir)
         fname = self.storage.save("some_file", ContentFile("data"))
         mode = os.stat(self.storage.path(fname))[0] & 0o777
+        # When FILE_UPLOAD_PERMISSIONS=None, should still use umask-based permissions
+        # for backward compatibility in this specific case
         self.assertEqual(mode, 0o666 & ~self.umask)
 
     @override_settings(FILE_UPLOAD_DIRECTORY_PERMISSIONS=0o765)
@@ -913,6 +915,34 @@ class FileStoragePermissions(unittest.TestCase):
         dir_mode = os.stat(os.path.dirname(self.storage.path(name)))[0] & 0o777
         self.assertEqual(dir_mode, 0o777 & ~self.umask)
 
+    def test_file_upload_consistent_permissions(self):
+        """
+        Test that small and large files get consistent permissions with the new default.
+        """
+        from django.core.files.uploadedfile import TemporaryUploadedFile
+        
+        self.storage = FileSystemStorage(self.storage_dir)
+        
+        # Test small file (ContentFile)
+        small_file = ContentFile("small content")
+        small_name = self.storage.save("small_file.txt", small_file)
+        small_mode = os.stat(self.storage.path(small_name))[0] & 0o777
+        
+        # Test large file (TemporaryUploadedFile)
+        large_content = b"x" * 3000  # Large enough to trigger temp file behavior
+        temp_file = TemporaryUploadedFile("large_file.txt", "text/plain", len(large_content), "utf-8")
+        temp_file.write(large_content)
+        temp_file.seek(0)
+        
+        large_name = self.storage.save("large_file.txt", temp_file)
+        large_mode = os.stat(self.storage.path(large_name))[0] & 0o777
+        
+        # Both should have the same permissions (0o644 with new default)
+        self.assertEqual(small_mode, large_mode)
+        self.assertEqual(small_mode, 0o644)
+        
+        temp_file.close()
+
 
 class FileStoragePathParsing(SimpleTestCase):
     def setUp(self):
diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py
index a1a113a26e..6a910427fa 100644
--- a/tests/test_utils/tests.py
+++ b/tests/test_utils/tests.py
@@ -1099,7 +1099,7 @@ class OverrideSettingsTests(SimpleTestCase):
         the file_permissions_mode attribute of
         django.core.files.storage.default_storage.
         """
-        self.assertIsNone(default_storage.file_permissions_mode)
+        self.assertEqual(default_storage.file_permissions_mode, 0o644)  # New default
         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):
             self.assertEqual(default_storage.file_permissions_mode, 0o777)
 
