diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py
index 1e5b986..37bb2ea 100644
--- a/django/db/backends/ddl_references.py
+++ b/django/db/backends/ddl_references.py
@@ -82,11 +82,13 @@ class Columns(TableColumns):
         super().__init__(table, columns)
 
     def __str__(self):
+
         def col_str(column, idx):
-            try:
-                return self.quote_name(column) + self.col_suffixes[idx]
-            except IndexError:
-                return self.quote_name(column)
+            suffix = self.col_suffixes[idx] if idx < len(self.col_suffixes) else ''
+            if suffix:
+                return '{0} {1}'.format(self.quote_name(column), suffix)
+            return self.quote_name(column)
+
 
         return ', '.join(col_str(column, idx) for idx, column in enumerate(self.columns))
 
@@ -109,15 +111,14 @@ class IndexColumns(Columns):
         super().__init__(table, columns, quote_name, col_suffixes)
 
     def __str__(self):
+
         def col_str(column, idx):
             # Index.__init__() guarantees that self.opclasses is the same
             # length as self.columns.
-            col = '{} {}'.format(self.quote_name(column), self.opclasses[idx])
-            try:
-                col = '{} {}'.format(col, self.col_suffixes[idx])
-            except IndexError:
-                pass
-            return col
+            base = '{} {}'.format(self.quote_name(column), self.opclasses[idx])
+            suffix = self.col_suffixes[idx] if idx < len(self.col_suffixes) else ''
+            return '{} {}'.format(base, suffix) if suffix else base
+
 
         return ', '.join(col_str(column, idx) for idx, column in enumerate(self.columns))
 
