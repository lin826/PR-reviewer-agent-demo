diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index aaf35ee37c..33d6b6306e 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -759,11 +759,17 @@ class Query(BaseExpression):
             self.alias_refcount[alias] += 1
             return alias, False
 
         # Create a new alias for this table.
         if alias_list:
-            alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)
+            # Start with the default alias
+            next_alias = len(self.alias_map) + 1
+            alias = '%s%d' % (self.alias_prefix, next_alias)
+            # Increment the suffix until the alias doesn't exist in alias_map
+            while alias in self.alias_map:
+                next_alias += 1
+                alias = '%s%d' % (self.alias_prefix, next_alias)
             alias_list.append(alias)
         else:
             # The first occurrence of a table uses the table name directly.
             alias = filtered_relation.alias if filtered_relation is not None else table_name
             self.table_map[table_name] = [alias]
@@ -844,10 +850,13 @@ class Query(BaseExpression):
         """
         Change the aliases in change_map (which maps old-alias -> new-alias),
         relabelling any references to them in select columns and the where
         clause.
         """
+        # Ensure that no alias is both a key and a value in the change_map.
+        # This can happen if an alias is changed twice (e.g., T4 -> T5, T5 -> T6),
+        # which would result in incorrect relabeling.
         assert set(change_map).isdisjoint(change_map.values())
 
         # 1. Update references in "select" (normal columns plus aliases),
         # "group by" and "where".
         self.where.relabel_aliases(change_map)
