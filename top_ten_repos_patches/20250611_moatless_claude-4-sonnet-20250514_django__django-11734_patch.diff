--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1047,6 +1047,10 @@
 
     def resolve_lookup_value(self, value, can_reuse, allow_joins, simple_col):
         if hasattr(value, 'resolve_expression'):
+            # Don't resolve OuterRef in split_exclude subqueries
+            if isinstance(value, OuterRef) and getattr(self, '_in_split_exclude', False):
+                return value
+                
             kwargs = {'reuse': can_reuse, 'allow_joins': allow_joins}
             if isinstance(value, F):
                 kwargs['simple_col'] = simple_col
@@ -1702,12 +1706,22 @@
         handle.
         """
         filter_lhs, filter_rhs = filter_expr
-        if isinstance(filter_rhs, F):
+        if isinstance(filter_rhs, F) and not isinstance(filter_rhs, OuterRef):
             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
         # Generate the inner query.
         query = Query(self.model)
         query._filtered_relations = self._filtered_relations
+        
+        # Handle OuterRef specially to prevent incorrect resolution
+        if isinstance(filter_rhs, OuterRef):
+            # Mark the query as being in a split_exclude context
+            query._in_split_exclude = True
+            
         query.add_filter(filter_expr)
+        
+        # Clean up the marker
+        if hasattr(query, '_in_split_exclude'):
+            delattr(query, '_in_split_exclude')
         query.clear_ordering(True)
         # Try to have as simple as possible subquery -> trim leading joins from
         # the subquery.
