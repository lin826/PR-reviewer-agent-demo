diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py
index b8e09ac..dee7ff7 100644
--- a/django/db/backends/mysql/operations.py
+++ b/django/db/backends/mysql/operations.py
@@ -369,9 +369,11 @@ class DatabaseOperations(BaseDatabaseOperations):
     def lookup_cast(self, lookup_type, internal_type=None):
         lookup = '%s'
         if internal_type == 'JSONField':
+
             if self.connection.mysql_is_mariadb or lookup_type in (
                 'iexact', 'contains', 'icontains', 'startswith', 'istartswith',
-                'endswith', 'iendswith', 'regex', 'iregex',
+                'endswith', 'iendswith', 'regex', 'iregex', 'in',
             ):
+
                 lookup = 'JSON_UNQUOTE(%s)'
         return lookup
diff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py
index ffcd24f..b118f9d 100644
--- a/django/db/backends/oracle/operations.py
+++ b/django/db/backends/oracle/operations.py
@@ -307,8 +307,10 @@ END;
     def lookup_cast(self, lookup_type, internal_type=None):
         if lookup_type in ('iexact', 'icontains', 'istartswith', 'iendswith'):
             return "UPPER(%s)"
-        if internal_type == 'JSONField' and lookup_type == 'exact':
+
+        if internal_type == 'JSONField' and lookup_type in ('exact', 'in'):
             return 'DBMS_LOB.SUBSTR(%s)'
+
         return "%s"
 
     def max_in_list_size(self):
diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py
index d9f6a68..738a397 100644
--- a/django/db/backends/sqlite3/operations.py
+++ b/django/db/backends/sqlite3/operations.py
@@ -307,9 +307,16 @@ class DatabaseOperations(BaseDatabaseOperations):
             def converter(value, expression, connection):
                 if value is not None:
                     return create_decimal(value)
+
         return converter
 
+    def lookup_cast(self, lookup_type, internal_type=None):
+        if internal_type == 'JSONField' and lookup_type == 'in':
+            return 'CAST(%s AS TEXT)'
+        return super().lookup_cast(lookup_type, internal_type)
+
     def convert_uuidfield_value(self, value, expression, connection):
+
         if value is not None:
             value = uuid.UUID(value)
         return value
