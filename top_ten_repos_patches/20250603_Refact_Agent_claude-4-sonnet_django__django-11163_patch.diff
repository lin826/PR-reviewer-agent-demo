diff --git a/django/forms/models.py b/django/forms/models.py
index d157c291ef..fadac848d0 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -83,7 +83,7 @@ def model_to_dict(instance, fields=None, exclude=None):
     for f in chain(opts.concrete_fields, opts.private_fields, opts.many_to_many):
         if not getattr(f, 'editable', False):
             continue
-        if fields and f.name not in fields:
+        if fields is not None and f.name not in fields:
             continue
         if exclude and f.name in exclude:
             continue
@@ -431,7 +431,7 @@ class BaseModelForm(BaseForm):
         for f in chain(opts.many_to_many, opts.private_fields):
             if not hasattr(f, 'save_form_data'):
                 continue
-            if fields and f.name not in fields:
+            if fields is not None and f.name not in fields:
                 continue
             if exclude and f.name in exclude:
                 continue
diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py
index f4f3169bc1..3d60dcac1c 100644
--- a/tests/model_forms/tests.py
+++ b/tests/model_forms/tests.py
@@ -2912,3 +2912,22 @@ class ModelToDictTests(TestCase):
         # If data were a QuerySet, it would be reevaluated here and give "red"
         # instead of the original value.
         self.assertEqual(data, [blue])
+
+    def test_empty_fields_list(self):
+        """model_to_dict should return an empty dict when fields=[]."""
+        blue = Colour.objects.create(name='blue')
+        item = ColourfulItem.objects.create(name='test item')
+        item.colours.set([blue])
+        
+        # Empty fields list should return empty dict
+        data = model_to_dict(item, fields=[])
+        self.assertEqual(data, {})
+        
+        # Compare with fields=None which should return all fields
+        all_data = model_to_dict(item, fields=None)
+        self.assertIn('name', all_data)
+        self.assertIn('colours', all_data)
+        
+        # Compare with specific fields
+        name_data = model_to_dict(item, fields=['name'])
+        self.assertEqual(name_data, {'name': 'test item'})
