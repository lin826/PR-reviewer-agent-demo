diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index c957ffa564..152dab2e46 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -38,26 +38,34 @@ class Q(tree.Node):
 
     def __init__(self, *args, _connector=None, _negated=False, **kwargs):
         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)
 
     def _combine(self, other, conn):
-        if not isinstance(other, Q):
+        if not isinstance(other, Q) and not getattr(other, 'conditional', False):
             raise TypeError(other)
 
         # If the other Q() is empty, ignore it and just use `self`.
         if not other:
             _, args, kwargs = self.deconstruct()
             return type(self)(*args, **kwargs)
         # Or if this Q is empty, ignore it and just use `other`.
         elif not self:
-            _, args, kwargs = other.deconstruct()
-            return type(other)(*args, **kwargs)
+            if isinstance(other, Q):
+                _, args, kwargs = other.deconstruct()
+                return type(other)(*args, **kwargs)
+            else:
+                # If other is not a Q but has conditional=True, wrap it in a Q
+                return type(self)(other)
 
         obj = type(self)()
         obj.connector = conn
         obj.add(self, conn)
-        obj.add(other, conn)
+        if isinstance(other, Q):
+            obj.add(other, conn)
+        else:
+            # If other is not a Q but has conditional=True, wrap it in a Q
+            obj.add(type(self)(other), conn)
         return obj
 
     def __or__(self, other):
         return self._combine(other, self.OR)
 
