diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 593048464b..e348856399 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -266,8 +266,17 @@ def distance(self, p):
         sqrt(x**2 + y**2)
 
         """
-        return sqrt(sum([(a - b)**2 for a, b in zip(
-            self.args, p.args if isinstance(p, Point) else p)]))
+        p_args = p.args if isinstance(p, Point) else p
+        
+        # Pad the shorter coordinate list with zeros to match dimensions
+        self_coords = list(self.args)
+        p_coords = list(p_args)
+        
+        max_len = max(len(self_coords), len(p_coords))
+        self_coords.extend([S.Zero] * (max_len - len(self_coords)))
+        p_coords.extend([S.Zero] * (max_len - len(p_coords)))
+        
+        return sqrt(sum([(a - b)**2 for a, b in zip(self_coords, p_coords)]))
 
     def taxicab_distance(self, p):
         """The Taxicab Distance from self to point p.
@@ -300,7 +309,16 @@ def taxicab_distance(self, p):
 
         """
         p = Point(p)
-        return sum(abs(a - b) for a, b in zip(self.args, p.args))
+        
+        # Pad the shorter coordinate list with zeros to match dimensions
+        self_coords = list(self.args)
+        p_coords = list(p.args)
+        
+        max_len = max(len(self_coords), len(p_coords))
+        self_coords.extend([S.Zero] * (max_len - len(self_coords)))
+        p_coords.extend([S.Zero] * (max_len - len(p_coords)))
+        
+        return sum(abs(a - b) for a, b in zip(self_coords, p_coords))
 
     def midpoint(self, p):
         """The midpoint between self and point p.
@@ -329,7 +347,15 @@ def midpoint(self, p):
         Point2D(7, 3)
 
         """
-        return Point([simplify((a + b)*S.Half) for a, b in zip(self.args, p.args)])
+        # Pad the shorter coordinate list with zeros to match dimensions
+        self_coords = list(self.args)
+        p_coords = list(p.args)
+        
+        max_len = max(len(self_coords), len(p_coords))
+        self_coords.extend([S.Zero] * (max_len - len(self_coords)))
+        p_coords.extend([S.Zero] * (max_len - len(p_coords)))
+        
+        return Point([simplify((a + b)*S.Half) for a, b in zip(self_coords, p_coords)])
 
     def evalf(self, prec=None, **options):
         """Evaluate the coordinates of the point.
@@ -406,7 +432,16 @@ def intersection(self, o):
     def dot(self, p2):
         """Return dot product of self with another Point."""
         p2 = Point(p2)
-        return Add(*[a*b for a,b in zip(self, p2)])
+        
+        # Pad the shorter coordinate list with zeros to match dimensions
+        self_coords = list(self.args)
+        p2_coords = list(p2.args)
+        
+        max_len = max(len(self_coords), len(p2_coords))
+        self_coords.extend([S.Zero] * (max_len - len(self_coords)))
+        p2_coords.extend([S.Zero] * (max_len - len(p2_coords)))
+        
+        return Add(*[a*b for a,b in zip(self_coords, p2_coords)])
 
     def equals(self, other):
         """Returns whether the coordinates of self and other agree."""
