diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py
index e0c42c5b69..bbcae54ff7 100644
--- a/lib/matplotlib/colors.py
+++ b/lib/matplotlib/colors.py
@@ -2390,4 +2390,4 @@ def from_levels_and_colors(levels, colors, extend='neither'):
     cmap.colorbar_extend = extend
 
     norm = BoundaryNorm(levels, ncolors=n_data_colors)
-    return cmap, norm
+    return cmap, norm
diff --git a/lib/matplotlib/image.py b/lib/matplotlib/image.py
index 95bb42d75c..c0cff1aeed 100644
--- a/lib/matplotlib/image.py
+++ b/lib/matplotlib/image.py
@@ -532,9 +532,24 @@ class _ImageBase(martist.Artist, cm.ScalarMappable):
                 # we have re-set the vmin/vmax to account for small errors
                 # that may have moved input values in/out of range
                 s_vmin, s_vmax = vrange
+
                 if isinstance(self.norm, mcolors.LogNorm):
-                    if s_vmin < 0:
-                        s_vmin = max(s_vmin, np.finfo(scaled_dtype).eps)
+                    # Ensure that LogNorm always receives finite, strictly
+                    # positive limits.  If either limit is invalid, fall back
+                    # to dataâ€‘driven estimates and, ultimately, to dtype
+                    # extremes so that LogNorm never raises.
+                    if (not np.isfinite(s_vmax)) or (s_vmax <= 0):
+                        s_vmax = np.nanmax(A_resampled)
+                        if (not np.isfinite(s_vmax)) or (s_vmax <= 0):
+                            s_vmax = np.finfo(scaled_dtype).max
+                    if (not np.isfinite(s_vmin)) or (s_vmin <= 0):
+                        positive = A_resampled[A_resampled > 0]
+                        if positive.size:
+                            s_vmin = np.nanmin(positive)
+                        if (not np.isfinite(s_vmin)) or (s_vmin <= 0):
+                            s_vmin = np.finfo(scaled_dtype).eps
+
+
                 with cbook._setattr_cm(self.norm,
                                        vmin=s_vmin,
                                        vmax=s_vmax,
@@ -1783,4 +1798,4 @@ def thumbnail(infile, thumbfile, scale=0.1, interpolation='bilinear',
                       frameon=False, xticks=[], yticks=[])
     ax.imshow(im, aspect='auto', resample=True, interpolation=interpolation)
     fig.savefig(thumbfile, dpi=dpi)
-    return fig
+    return fig
