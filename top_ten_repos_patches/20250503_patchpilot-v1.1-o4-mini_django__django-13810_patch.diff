diff --git a/django/core/exceptions.py b/django/core/exceptions.py
index 673d004d57..e667263c3b 100644
--- a/django/core/exceptions.py
+++ b/django/core/exceptions.py
@@ -214,4 +214,4 @@ class EmptyResultSet(Exception):
 
 class SynchronousOnlyOperation(Exception):
     """The user tried to call a sync-only function from an async context."""
-    pass
+    pass
diff --git a/django/core/handlers/asgi.py b/django/core/handlers/asgi.py
index 7fbabe4510..b0ed54c4d7 100644
--- a/django/core/handlers/asgi.py
+++ b/django/core/handlers/asgi.py
@@ -284,4 +284,4 @@ class ASGIHandler(base.BaseHandler):
         """
         if settings.FORCE_SCRIPT_NAME:
             return settings.FORCE_SCRIPT_NAME
-        return scope.get('root_path', '') or ''
+        return scope.get('root_path', '') or ''
diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py
index 8e8c3da06a..0c56b73799 100644
--- a/django/core/handlers/base.py
+++ b/django/core/handlers/base.py
@@ -38,8 +38,22 @@ class BaseHandler:
         handler_is_async = is_async
         for middleware_path in reversed(settings.MIDDLEWARE):
             middleware = import_string(middleware_path)
-            middleware_can_sync = getattr(middleware, 'sync_capable', True)
-            middleware_can_async = getattr(middleware, 'async_capable', False)
+
+            # Determine middleware capabilities. If no explicit flags are
+            # provided, infer them from the implementation of __call__().
+            middleware_can_sync = getattr(middleware, 'sync_capable', None)
+            middleware_can_async = getattr(middleware, 'async_capable', None)
+            if middleware_can_sync is None and middleware_can_async is None:
+                is_async_call = asyncio.iscoroutinefunction(middleware.__call__)
+                middleware_can_async = is_async_call
+                middleware_can_sync = not is_async_call
+            elif middleware_can_sync is None:
+                # Only async_capable defined; assume opposite for sync.
+                middleware_can_sync = not middleware_can_async
+            elif middleware_can_async is None:
+                # Only sync_capable defined; assume opposite for async.
+                middleware_can_async = not middleware_can_sync
+
             if not middleware_can_sync and not middleware_can_async:
                 raise RuntimeError(
                     'Middleware %s must have at least one of '
@@ -47,8 +61,11 @@ class BaseHandler:
                 )
             elif not handler_is_async and middleware_can_sync:
                 middleware_is_async = False
+
             else:
                 middleware_is_async = middleware_can_async
+            # Save current handler state in case middleware is skipped.
+            prev_handler, prev_handler_is_async = handler, handler_is_async
             try:
                 # Adapt handler, if needed.
                 handler = self.adapt_method_mode(
@@ -57,6 +74,8 @@ class BaseHandler:
                 )
                 mw_instance = middleware(handler)
             except MiddlewareNotUsed as exc:
+                # Revert handler state since this middleware is not used.
+                handler, handler_is_async = prev_handler, prev_handler_is_async
                 if settings.DEBUG:
                     if str(exc):
                         logger.debug('MiddlewareNotUsed(%r): %s', middleware_path, exc)
@@ -64,6 +83,7 @@ class BaseHandler:
                         logger.debug('MiddlewareNotUsed: %r', middleware_path)
                 continue
 
+
             if mw_instance is None:
                 raise ImproperlyConfigured(
                     'Middleware factory %s returned None.' % middleware_path
@@ -345,4 +365,4 @@ def reset_urlconf(sender, **kwargs):
     set_urlconf(None)
 
 
-request_finished.connect(reset_urlconf)
+request_finished.connect(reset_urlconf)
diff --git a/django/core/handlers/wsgi.py b/django/core/handlers/wsgi.py
index 2c1c4db241..a5f3dcd6de 100644
--- a/django/core/handlers/wsgi.py
+++ b/django/core/handlers/wsgi.py
@@ -207,4 +207,4 @@ def get_str_from_wsgi(environ, key, default):
     key and default should be str objects.
     """
     value = get_bytes_from_wsgi(environ, key, default)
-    return value.decode(errors='replace')
+    return value.decode(errors='replace')
