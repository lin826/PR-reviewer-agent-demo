diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py
index fe52d881d..2c2347832 100644
--- a/sphinx/domains/cpp.py
+++ b/sphinx/domains/cpp.py
@@ -35,7 +35,7 @@ from sphinx.util.cfamily import (
     BaseParser, DefinitionError, UnsupportedMultiCharacterCharLiteral,
     identifier_re, anon_identifier_re, integer_literal_re, octal_literal_re,
     hex_literal_re, binary_literal_re, float_literal_re,
-    char_literal_re
+    char_literal_re, user_defined_literal_suffix_re
 )
 from sphinx.util.docfields import Field, GroupedField
 from sphinx.util.docutils import SphinxDirective
@@ -789,6 +789,24 @@ class ASTLiteral(ASTExpression):
     pass
 
 
+class ASTUserDefinedLiteral(ASTLiteral):
+    def __init__(self, literal: ASTLiteral, suffix: str) -> None:
+        self.literal = literal
+        self.suffix = suffix
+
+    def _stringify(self, transform: StringifyTransform) -> str:
+        return self.literal._stringify(transform) + self.suffix
+
+    def get_id(self, version: int) -> str:
+        # Just use the literal ID plus suffix indication
+        return self.literal.get_id(version) + "u"
+
+    def describe_signature(self, signode: TextElement, mode: str,
+                           env: "BuildEnvironment", symbol: "Symbol") -> None:
+        txt = str(self)
+        signode.append(nodes.Text(txt, txt))
+
+
 class ASTPointerLiteral(ASTLiteral):
     def _stringify(self, transform: StringifyTransform) -> str:
         return 'nullptr'
@@ -4664,10 +4682,26 @@ class DefinitionParser(BaseParser):
             if self.match(regex):
                 while self.current_char in 'uUlLfF':
                     self.pos += 1
+                
+                # Check for user-defined literal suffix
+                startPos = self.pos
+                if self.current_char == '_' or self.current_char.isalpha():
+                    if self.match(user_defined_literal_suffix_re):
+                        suffix = self.definition[startPos:self.pos]
+                        number = ASTNumberLiteral(self.definition[pos:startPos])
+                        return ASTUserDefinedLiteral(number, suffix)
+                                
                 return ASTNumberLiteral(self.definition[pos:self.pos])
 
         string = self._parse_string()
         if string is not None:
+            startPos = self.pos
+            # Check for user-defined literal suffix after the string
+            if self.current_char == '_' or self.current_char.isalpha():
+                if self.match(user_defined_literal_suffix_re):
+                    suffix = self.definition[startPos:self.pos]
+                    string_literal = ASTStringLiteral(string)
+                    return ASTUserDefinedLiteral(string_literal, suffix)
             return ASTStringLiteral(string)
 
         # character-literal
@@ -4675,14 +4709,22 @@ class DefinitionParser(BaseParser):
             prefix = self.last_match.group(1)  # may be None when no prefix
             data = self.last_match.group(2)
             try:
-                return ASTCharLiteral(prefix, data)
+                char_literal = ASTCharLiteral(prefix, data)
+                
+                # Check for user-defined literal suffix after the char literal
+                startPos = self.pos
+                if self.current_char == '_' or self.current_char.isalpha():
+                    if self.match(user_defined_literal_suffix_re):
+                        suffix = self.definition[startPos:self.pos]
+                        return ASTUserDefinedLiteral(char_literal, suffix)
+                
+                return char_literal
             except UnicodeDecodeError as e:
                 self.fail("Can not handle character literal. Internal error was: %s" % e)
             except UnsupportedMultiCharacterCharLiteral:
                 self.fail("Can not handle character literal"
                           " resulting in multiple decoded characters.")
 
-        # TODO: user-defined lit
         return None
 
     def _parse_fold_or_paren_expression(self) -> ASTExpression:
diff --git a/sphinx/util/cfamily.py b/sphinx/util/cfamily.py
index 790a492a5..748461b38 100644
--- a/sphinx/util/cfamily.py
+++ b/sphinx/util/cfamily.py
@@ -67,6 +67,9 @@ char_literal_re = re.compile(r'''(?x)
     )'
 ''')
 
+# Regular expression for a user-defined suffix identifier: [_a-zA-Z][_a-zA-Z0-9]*
+user_defined_literal_suffix_re = re.compile(r'[_a-zA-Z][_a-zA-Z0-9]*')
+
 
 def verify_description_mode(mode: str) -> None:
     if mode not in ('lastIsName', 'noneIsName', 'markType', 'markName', 'param'):

