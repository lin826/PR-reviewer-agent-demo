diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 23c3a08c67..7bb0644e98 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -94,6 +94,10 @@ def json_script(value, element_id=None):
 
 @register.filter(is_safe=True)
 def floatformat(text, arg=-1):
+    # Handle None arg case
+    if arg is None:
+        arg = -1
+
     """
     Display a float to a specified number of decimal places.
 
@@ -181,9 +185,15 @@ def floatformat(text, arg=-1):
     exp = Decimal(1).scaleb(-abs(p))
     # Set the precision high enough to avoid an exception (#15789).
     tupl = d.as_tuple()
+    # Number of digits that will survive the rounding performed by
+    # Decimal.quantize(). The old calculation could become negative for
+    # numbers that *look* like integers but carry a negative exponent whose
+    # absolute value is larger than their digit count, e.g. 0.00, 1.00, 0E-2
     units = len(tupl[1])
-    units += -tupl[2] if m else tupl[2]
-    prec = abs(p) + units + 1
+    units += -tupl[2] if m else max(tupl[2], 0)
+    # Guarantee at least one digit of working precision. Without this guard
+    # a Context(prec=0) would raise ValueError.
+    prec = max(1, abs(p) + units + 1)
 
     # Avoid conversion to scientific notation by accessing `sign`, `digits`,
     # and `exponent` from Decimal.as_tuple() directly.
