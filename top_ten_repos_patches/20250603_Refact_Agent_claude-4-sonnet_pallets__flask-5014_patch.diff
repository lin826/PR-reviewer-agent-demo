diff --git a/src/flask/blueprints.py b/src/flask/blueprints.py
index eb50585d..c88dc5cd 100644
--- a/src/flask/blueprints.py
+++ b/src/flask/blueprints.py
@@ -193,6 +193,9 @@ class Blueprint(Scaffold):
         if "." in name:
             raise ValueError("'name' may not contain a dot '.' character.")
 
+        if not name or not name.strip():
+            raise ValueError("Blueprint name cannot be empty or whitespace-only.")
+
         self.name = name
         self.url_prefix = url_prefix
         self.subdomain = subdomain
diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py
index d46b769b..4357e15f 100644
--- a/tests/test_blueprints.py
+++ b/tests/test_blueprints.py
@@ -256,6 +256,27 @@ def test_dotted_name_not_allowed(app, client):
         flask.Blueprint("app.ui", __name__)
 
 
+def test_empty_name_not_allowed():
+    """Test that empty Blueprint names raise ValueError."""
+    with pytest.raises(ValueError, match="Blueprint name cannot be empty or whitespace-only"):
+        flask.Blueprint("", __name__)
+
+
+def test_whitespace_only_name_not_allowed():
+    """Test that whitespace-only Blueprint names raise ValueError."""
+    with pytest.raises(ValueError, match="Blueprint name cannot be empty or whitespace-only"):
+        flask.Blueprint("   ", __name__)
+    
+    with pytest.raises(ValueError, match="Blueprint name cannot be empty or whitespace-only"):
+        flask.Blueprint("\t\n", __name__)
+
+
+def test_none_name_not_allowed():
+    """Test that None Blueprint names raise an error."""
+    with pytest.raises(TypeError):
+        flask.Blueprint(None, __name__)
+
+
 def test_dotted_names_from_app(app, client):
     test = flask.Blueprint("test", __name__)
 
