diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py
index 53345a6b1..0a7268465 100644
--- a/pylint/lint/pylinter.py
+++ b/pylint/lint/pylinter.py
@@ -564,30 +564,60 @@ class PyLinter(
             if not msg.may_be_emitted():
                 self._msgs_state[msg.msgid] = False
 
-    @staticmethod
-    def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:
+    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:
         """Discover python modules and packages in sub-directory.
+        
+        Respects the ignore settings when discovering files.
 
         Returns iterator of paths to discovered modules and packages.
         """
+        # Import the function to check against regex patterns
+        from pylint.lint.expand_modules import _is_in_ignore_list_re
+        
         for something in files_or_modules:
             if os.path.isdir(something) and not os.path.isfile(
                 os.path.join(something, "__init__.py")
             ):
                 skip_subtrees: list[str] = []
-                for root, _, files in os.walk(something):
+                for root, dirs, files in os.walk(something):
+                    # Skip ignored directories
+                    dirs_to_remove = []
+                    for i, dirname in enumerate(dirs):
+                        dirpath = os.path.join(root, dirname)
+                        # For ignore patterns, we need to match against the basename only
+                        if (
+                            dirname in self.config.ignore
+                            or _is_in_ignore_list_re(dirname, self.config.ignore_patterns)
+                            or _is_in_ignore_list_re(dirpath, self.config.ignore_paths)
+                        ):
+                            dirs_to_remove.append(i)
+                    
+                    # Remove ignored directories (must be done in reverse to maintain index validity)
+                    for i in sorted(dirs_to_remove, reverse=True):
+                        del dirs[i]
+                    
                     if any(root.startswith(s) for s in skip_subtrees):
                         # Skip subtree of already discovered package.
                         continue
+                    
                     if "__init__.py" in files:
                         skip_subtrees.append(root)
                         yield root
                     else:
-                        yield from (
-                            os.path.join(root, file)
-                            for file in files
-                            if file.endswith(".py")
-                        )
+                        for file in files:
+                            if not file.endswith(".py"):
+                                continue
+                            
+                            filepath = os.path.join(root, file)
+                            basename = os.path.basename(filepath)
+                            if (
+                                basename in self.config.ignore
+                                or _is_in_ignore_list_re(basename, self.config.ignore_patterns)
+                                or _is_in_ignore_list_re(filepath, self.config.ignore_paths)
+                            ):
+                                continue
+                            
+                            yield filepath
             else:
                 yield something
 

